using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;

namespace DBInventarioZeusAPI.Models
{
    public partial class ContabilidadContext : DbContext
    {
        public ContabilidadContext()
        {
        }

        public ContabilidadContext(DbContextOptions<ContabilidadContext> options)
            : base(options)
        {
        }

        public virtual DbSet<Aa> Aas { get; set; } = null!;
        public virtual DbSet<AdministrarFuentesPreContabilizacion> AdministrarFuentesPreContabilizacions { get; set; } = null!;
        public virtual DbSet<AmbitosFiscalesUsuario> AmbitosFiscalesUsuarios { get; set; } = null!;
        public virtual DbSet<AplicacionesFuncione> AplicacionesFunciones { get; set; } = null!;
        public virtual DbSet<AplicacionesFuncionesVariable> AplicacionesFuncionesVariables { get; set; } = null!;
        public virtual DbSet<AplicacionesOrigen> AplicacionesOrigens { get; set; } = null!;
        public virtual DbSet<AplicacionesZeu> AplicacionesZeus { get; set; } = null!;
        public virtual DbSet<AppChat> AppChats { get; set; } = null!;
        public virtual DbSet<AppChatGroup> AppChatGroups { get; set; } = null!;
        public virtual DbSet<AppChatGroupsUser> AppChatGroupsUsers { get; set; } = null!;
        public virtual DbSet<AppDataType> AppDataTypes { get; set; } = null!;
        public virtual DbSet<AppDesignVariable> AppDesignVariables { get; set; } = null!;
        public virtual DbSet<AppDesignVariablesItem> AppDesignVariablesItems { get; set; } = null!;
        public virtual DbSet<AppEntitiesField> AppEntitiesFields { get; set; } = null!;
        public virtual DbSet<AppEntitiesProperty> AppEntitiesProperties { get; set; } = null!;
        public virtual DbSet<AppEntitiesSelector> AppEntitiesSelectors { get; set; } = null!;
        public virtual DbSet<AppEntitiesType> AppEntitiesTypes { get; set; } = null!;
        public virtual DbSet<AppEntitiesVariable> AppEntitiesVariables { get; set; } = null!;
        public virtual DbSet<AppEntity> AppEntities { get; set; } = null!;
        public virtual DbSet<AppFormulationsEntity> AppFormulationsEntities { get; set; } = null!;
        public virtual DbSet<AppFormulationsItem> AppFormulationsItems { get; set; } = null!;
        public virtual DbSet<AppFormulationsType> AppFormulationsTypes { get; set; } = null!;
        public virtual DbSet<AppLogEvent> AppLogEvents { get; set; } = null!;
        public virtual DbSet<AppLogMessage> AppLogMessages { get; set; } = null!;
        public virtual DbSet<AppLogTypeEvent> AppLogTypeEvents { get; set; } = null!;
        public virtual DbSet<AppLogZeu> AppLogZeus { get; set; } = null!;
        public virtual DbSet<AppMenu> AppMenus { get; set; } = null!;
        public virtual DbSet<AppMovExterno> AppMovExternos { get; set; } = null!;
        public virtual DbSet<AppParameter> AppParameters { get; set; } = null!;
        public virtual DbSet<AppSearcher> AppSearchers { get; set; } = null!;
        public virtual DbSet<AppSearcherField> AppSearcherFields { get; set; } = null!;
        public virtual DbSet<AppSearcherOperator> AppSearcherOperators { get; set; } = null!;
        public virtual DbSet<AppVariable> AppVariables { get; set; } = null!;
        public virtual DbSet<AppVariablesGroup> AppVariablesGroups { get; set; } = null!;
        public virtual DbSet<AppVariablesListOption> AppVariablesListOptions { get; set; } = null!;
        public virtual DbSet<AppVariablesType> AppVariablesTypes { get; set; } = null!;
        public virtual DbSet<AppVariablesValue> AppVariablesValues { get; set; } = null!;
        public virtual DbSet<AppZeusLog> AppZeusLogs { get; set; } = null!;
        public virtual DbSet<ArchivoAsobancariaTransaccione> ArchivoAsobancariaTransacciones { get; set; } = null!;
        public virtual DbSet<ArchivoAsobancarium> ArchivoAsobancaria { get; set; } = null!;
        public virtual DbSet<ArchivoFisico> ArchivoFisicos { get; set; } = null!;
        public virtual DbSet<ArchivoFisicoDocumento> ArchivoFisicoDocumentos { get; set; } = null!;
        public virtual DbSet<ArchivoFisicoDocumentosLog> ArchivoFisicoDocumentosLogs { get; set; } = null!;
        public virtual DbSet<ArchivosAdjunto> ArchivosAdjuntos { get; set; } = null!;
        public virtual DbSet<ArchivosAdjuntosMaestro> ArchivosAdjuntosMaestros { get; set; } = null!;
        public virtual DbSet<Area> Areas { get; set; } = null!;
        public virtual DbSet<AsobancariaArchivo> AsobancariaArchivos { get; set; } = null!;
        public virtual DbSet<AsobancariaDocumento> AsobancariaDocumentos { get; set; } = null!;
        public virtual DbSet<AsobancariaDocumentoDetalle> AsobancariaDocumentoDetalles { get; set; } = null!;
        public virtual DbSet<AsobancariaFactura> AsobancariaFacturas { get; set; } = null!;
        public virtual DbSet<AsobancariaResumenArchivo> AsobancariaResumenArchivos { get; set; } = null!;
        public virtual DbSet<AsobancariaTipo> AsobancariaTipos { get; set; } = null!;
        public virtual DbSet<Asobancarium> Asobancaria { get; set; } = null!;
        public virtual DbSet<AspNetAccessByRecord> AspNetAccessByRecords { get; set; } = null!;
        public virtual DbSet<AspNetAccessByRecordPrivigele> AspNetAccessByRecordPrivigeles { get; set; } = null!;
        public virtual DbSet<AspNetPrivilege> AspNetPrivileges { get; set; } = null!;
        public virtual DbSet<AspNetRole> AspNetRoles { get; set; } = null!;
        public virtual DbSet<AspNetRoleClaim> AspNetRoleClaims { get; set; } = null!;
        public virtual DbSet<AspNetRolePrivilege> AspNetRolePrivileges { get; set; } = null!;
        public virtual DbSet<AspNetUser> AspNetUsers { get; set; } = null!;
        public virtual DbSet<AspNetUserClaim> AspNetUserClaims { get; set; } = null!;
        public virtual DbSet<AspNetUserLogin> AspNetUserLogins { get; set; } = null!;
        public virtual DbSet<AspNetUserRole> AspNetUserRoles { get; set; } = null!;
        public virtual DbSet<AspNetUserToken> AspNetUserTokens { get; set; } = null!;
        public virtual DbSet<AuditoriaMovExterno> AuditoriaMovExternos { get; set; } = null!;
        public virtual DbSet<Auxiliar> Auxiliars { get; set; } = null!;
        public virtual DbSet<BagtemNomina> BagtemNominas { get; set; } = null!;
        public virtual DbSet<Banco> Bancos { get; set; } = null!;
        public virtual DbSet<BienesRetencione> BienesRetenciones { get; set; } = null!;
        public virtual DbSet<BienesServicio> BienesServicios { get; set; } = null!;
        public virtual DbSet<BienesServiciosValor> BienesServiciosValors { get; set; } = null!;
        public virtual DbSet<Bu> Bus { get; set; } = null!;
        public virtual DbSet<BuPrincipale> BuPrincipales { get; set; } = null!;
        public virtual DbSet<CambioEnMaestro> CambioEnMaestros { get; set; } = null!;
        public virtual DbSet<CambioFactura> CambioFacturas { get; set; } = null!;
        public virtual DbSet<CatalogoEf> CatalogoEfs { get; set; } = null!;
        public virtual DbSet<CategoriaEstadosFinancierosNiif> CategoriaEstadosFinancierosNiifs { get; set; } = null!;
        public virtual DbSet<CategoriaFinanciera> CategoriaFinancieras { get; set; } = null!;
        public virtual DbSet<CategoriaRpt> CategoriaRpts { get; set; } = null!;
        public virtual DbSet<CcmCartera> CcmCarteras { get; set; } = null!;
        public virtual DbSet<CcmCentroCosto> CcmCentroCostos { get; set; } = null!;
        public virtual DbSet<CcmCliente> CcmClientes { get; set; } = null!;
        public virtual DbSet<CcmFacturaPpp> CcmFacturaPpps { get; set; } = null!;
        public virtual DbSet<CcmFuente> CcmFuentes { get; set; } = null!;
        public virtual DbSet<CcmMoneda> CcmMonedas { get; set; } = null!;
        public virtual DbSet<CcmPago3ro> CcmPago3ros { get; set; } = null!;
        public virtual DbSet<CcmPlandeCuenta> CcmPlandeCuentas { get; set; } = null!;
        public virtual DbSet<CcmProveedore> CcmProveedores { get; set; } = null!;
        public virtual DbSet<CcmSaldoCco> CcmSaldoCcos { get; set; } = null!;
        public virtual DbSet<CcmSaldoCont> CcmSaldoConts { get; set; } = null!;
        public virtual DbSet<CcmTercero> CcmTerceros { get; set; } = null!;
        public virtual DbSet<CcmTrasanccione> CcmTrasancciones { get; set; } = null!;
        public virtual DbSet<CcmUnidadDeNegocio> CcmUnidadDeNegocios { get; set; } = null!;
        public virtual DbSet<CcmUsuario> CcmUsuarios { get; set; } = null!;
        public virtual DbSet<Certificado> Certificados { get; set; } = null!;
        public virtual DbSet<Certificadodisponibilidad> Certificadodisponibilidads { get; set; } = null!;
        public virtual DbSet<CertificadosSticker> CertificadosStickers { get; set; } = null!;
        public virtual DbSet<CfAreaImpresion> CfAreaImpresions { get; set; } = null!;
        public virtual DbSet<CfAutorizacion> CfAutorizacions { get; set; } = null!;
        public virtual DbSet<CfComprobanteRetencion> CfComprobanteRetencions { get; set; } = null!;
        public virtual DbSet<CfConfiguracion> CfConfiguracions { get; set; } = null!;
        public virtual DbSet<CfDivision> CfDivisions { get; set; } = null!;
        public virtual DbSet<CfDocumentoControl> CfDocumentoControls { get; set; } = null!;
        public virtual DbSet<CfPuntoEmision> CfPuntoEmisions { get; set; } = null!;
        public virtual DbSet<CfResolucion> CfResolucions { get; set; } = null!;
        public virtual DbSet<CfTipoComprobante> CfTipoComprobantes { get; set; } = null!;
        public virtual DbSet<CfactAsignaModelo> CfactAsignaModelos { get; set; } = null!;
        public virtual DbSet<CfactAut> CfactAuts { get; set; } = null!;
        public virtual DbSet<CfactAutoConcepto> CfactAutoConceptos { get; set; } = null!;
        public virtual DbSet<CfactAutoConceptoTemp> CfactAutoConceptoTemps { get; set; } = null!;
        public virtual DbSet<CfactAutoNovedade> CfactAutoNovedades { get; set; } = null!;
        public virtual DbSet<CfactAutomatica> CfactAutomaticas { get; set; } = null!;
        public virtual DbSet<CfactModeloB> CfactModeloBs { get; set; } = null!;
        public virtual DbSet<CfactModeloH> CfactModeloHs { get; set; } = null!;
        public virtual DbSet<Chequera> Chequeras { get; set; } = null!;
        public virtual DbSet<CierrePeriodoTipo> CierrePeriodoTipos { get; set; } = null!;
        public virtual DbSet<ClasificacionAnticipo> ClasificacionAnticipos { get; set; } = null!;
        public virtual DbSet<ClasificacionAnticiposCuenta> ClasificacionAnticiposCuentas { get; set; } = null!;
        public virtual DbSet<ClasificacionAnticiposTipo> ClasificacionAnticiposTipos { get; set; } = null!;
        public virtual DbSet<ClasificacionAnticiposTipoDetalle> ClasificacionAnticiposTipoDetalles { get; set; } = null!;
        public virtual DbSet<Cliente> Clientes { get; set; } = null!;
        public virtual DbSet<ClientesActMod> ClientesActMods { get; set; } = null!;
        public virtual DbSet<ClientesAnticipo> ClientesAnticipos { get; set; } = null!;
        public virtual DbSet<ClientesAsobancarium> ClientesAsobancaria { get; set; } = null!;
        public virtual DbSet<ClientesCuentasPorMonedum> ClientesCuentasPorMoneda { get; set; } = null!;
        public virtual DbSet<ClientesCxCmora> ClientesCxCmoras { get; set; } = null!;
        public virtual DbSet<ClientesEmail> ClientesEmails { get; set; } = null!;
        public virtual DbSet<CombinacionTiposEmpresa> CombinacionTiposEmpresas { get; set; } = null!;
        public virtual DbSet<ComprobanteRetencion> ComprobanteRetencions { get; set; } = null!;
        public virtual DbSet<ComprobanteRetencionFactura> ComprobanteRetencionFacturas { get; set; } = null!;
        public virtual DbSet<ConceptosAutomatico> ConceptosAutomaticos { get; set; } = null!;
        public virtual DbSet<ConceptosAutomaticosUbicacion> ConceptosAutomaticosUbicacions { get; set; } = null!;
        public virtual DbSet<Condicionesdecredito> Condicionesdecreditos { get; set; } = null!;
        public virtual DbSet<CondicionesdecreditoLibro> CondicionesdecreditoLibros { get; set; } = null!;
        public virtual DbSet<CondicionesdecreditoUsuario> CondicionesdecreditoUsuarios { get; set; } = null!;
        public virtual DbSet<ConfigVencDetraccion> ConfigVencDetraccions { get; set; } = null!;
        public virtual DbSet<ConfiguracionEmail> ConfiguracionEmails { get; set; } = null!;
        public virtual DbSet<ConfiguracionEmailCobro> ConfiguracionEmailCobros { get; set; } = null!;
        public virtual DbSet<ConfiguracionEmailValera> ConfiguracionEmailValeras { get; set; } = null!;
        public virtual DbSet<ConfiguracionIyB319> ConfiguracionIyB319s { get; set; } = null!;
        public virtual DbSet<ConfiguracionOpcione> ConfiguracionOpciones { get; set; } = null!;
        public virtual DbSet<ConfiguracionesEspecifica> ConfiguracionesEspecificas { get; set; } = null!;
        public virtual DbSet<ConsultaMovimiento> ConsultaMovimientos { get; set; } = null!;
        public virtual DbSet<ContDatosSincronizacion> ContDatosSincronizacions { get; set; } = null!;
        public virtual DbSet<ContDeterioroLog> ContDeterioroLogs { get; set; } = null!;
        public virtual DbSet<ContIfLogCambio> ContIfLogCambios { get; set; } = null!;
        public virtual DbSet<ContPppConceptoPago> ContPppConceptoPagos { get; set; } = null!;
        public virtual DbSet<ContPppDetalleTercero> ContPppDetalleTerceros { get; set; } = null!;
        public virtual DbSet<ContPppEstado> ContPppEstados { get; set; } = null!;
        public virtual DbSet<ContPppMetodoPago> ContPppMetodoPagos { get; set; } = null!;
        public virtual DbSet<ContPppPersonalAutorizacion> ContPppPersonalAutorizacions { get; set; } = null!;
        public virtual DbSet<ContPppPersonalAutorizacionUsuario> ContPppPersonalAutorizacionUsuarios { get; set; } = null!;
        public virtual DbSet<ContPppProgramacione> ContPppProgramaciones { get; set; } = null!;
        public virtual DbSet<ContPppProgramacionesBloqueoFac> ContPppProgramacionesBloqueoFacs { get; set; } = null!;
        public virtual DbSet<ContPppProgramacionesConciliacione> ContPppProgramacionesConciliaciones { get; set; } = null!;
        public virtual DbSet<ContPppProgramacionesDocumento> ContPppProgramacionesDocumentos { get; set; } = null!;
        public virtual DbSet<ContPppProgramacionesFactura> ContPppProgramacionesFacturas { get; set; } = null!;
        public virtual DbSet<ContPppProgramacionesLog> ContPppProgramacionesLogs { get; set; } = null!;
        public virtual DbSet<ContPppProgramacionesPago> ContPppProgramacionesPagos { get; set; } = null!;
        public virtual DbSet<ContReciboCajaExterno> ContReciboCajaExternos { get; set; } = null!;
        public virtual DbSet<ContReclasificacionMovFront> ContReclasificacionMovFronts { get; set; } = null!;
        public virtual DbSet<ContReclasificacionMovFrontRegistro> ContReclasificacionMovFrontRegistros { get; set; } = null!;
        public virtual DbSet<ContReclasificacionMovFrontRegistrosTransac> ContReclasificacionMovFrontRegistrosTransacs { get; set; } = null!;
        public virtual DbSet<ContSistemasAperturaLibro> ContSistemasAperturaLibros { get; set; } = null!;
        public virtual DbSet<ContSistemasAperturaLibroDiferecia> ContSistemasAperturaLibroDiferecias { get; set; } = null!;
        public virtual DbSet<ContSistemasAperturaLibroSaldoAuxBu> ContSistemasAperturaLibroSaldoAuxBus { get; set; } = null!;
        public virtual DbSet<ContSistemasAperturaLibroSaldoCajaBu> ContSistemasAperturaLibroSaldoCajaBus { get; set; } = null!;
        public virtual DbSet<ContSistemasAperturaLibroSaldoCcoBu> ContSistemasAperturaLibroSaldoCcoBus { get; set; } = null!;
        public virtual DbSet<ContSistemasAperturaLibroSaldoClieBu> ContSistemasAperturaLibroSaldoClieBus { get; set; } = null!;
        public virtual DbSet<ContSistemasAperturaLibroSaldoContBu> ContSistemasAperturaLibroSaldoContBus { get; set; } = null!;
        public virtual DbSet<ContSistemasAperturaLibroSaldoFacturasBu> ContSistemasAperturaLibroSaldoFacturasBus { get; set; } = null!;
        public virtual DbSet<ContSistemasAperturaLibroSaldoItemBu> ContSistemasAperturaLibroSaldoItemBus { get; set; } = null!;
        public virtual DbSet<ContSistemasAperturaLibroSaldoPropiedad1Bu> ContSistemasAperturaLibroSaldoPropiedad1Bus { get; set; } = null!;
        public virtual DbSet<ContSistemasAperturaLibroSaldoPropiedad2Bu> ContSistemasAperturaLibroSaldoPropiedad2Bus { get; set; } = null!;
        public virtual DbSet<ContSistemasAperturaLibroSaldoPropiedad3Bu> ContSistemasAperturaLibroSaldoPropiedad3Bus { get; set; } = null!;
        public virtual DbSet<ContSistemasAperturaLibroSaldoPropiedad4Bu> ContSistemasAperturaLibroSaldoPropiedad4Bus { get; set; } = null!;
        public virtual DbSet<ContSistemasAperturaLibroSaldoPropiedad5Bu> ContSistemasAperturaLibroSaldoPropiedad5Bus { get; set; } = null!;
        public virtual DbSet<ContSistemasAperturaLibroSaldoProvBu> ContSistemasAperturaLibroSaldoProvBus { get; set; } = null!;
        public virtual DbSet<ContSistemasAperturaLibroSaldoTerBu> ContSistemasAperturaLibroSaldoTerBus { get; set; } = null!;
        public virtual DbSet<ContSistemasAperturaLibroTransaccione> ContSistemasAperturaLibroTransacciones { get; set; } = null!;
        public virtual DbSet<ContabilidadExterna> ContabilidadExternas { get; set; } = null!;
        public virtual DbSet<Contingencia> Contingencias { get; set; } = null!;
        public virtual DbSet<ContingenciasEvento> ContingenciasEventos { get; set; } = null!;
        public virtual DbSet<ContingenciasFuente> ContingenciasFuentes { get; set; } = null!;
        public virtual DbSet<ControlCambioEnObjeto> ControlCambioEnObjetos { get; set; } = null!;
        public virtual DbSet<ControlDocumentarioAgrupacion> ControlDocumentarioAgrupacions { get; set; } = null!;
        public virtual DbSet<ControlDocumentarioEstado> ControlDocumentarioEstados { get; set; } = null!;
        public virtual DbSet<ControlDocumentarioEstadosAsignacion> ControlDocumentarioEstadosAsignacions { get; set; } = null!;
        public virtual DbSet<ControlDocumentarioEstadosAsignacionTemp> ControlDocumentarioEstadosAsignacionTemps { get; set; } = null!;
        public virtual DbSet<ControlDocumentarioEstadosUsuario> ControlDocumentarioEstadosUsuarios { get; set; } = null!;
        public virtual DbSet<ControlDocumentarioEstadosUsuariosTemp> ControlDocumentarioEstadosUsuariosTemps { get; set; } = null!;
        public virtual DbSet<ControlDocumentarioHistorialCambioEstado> ControlDocumentarioHistorialCambioEstados { get; set; } = null!;
        public virtual DbSet<ControlDocumentarioMenu> ControlDocumentarioMenus { get; set; } = null!;
        public virtual DbSet<ControlDocumentarioRecepcionDocumento> ControlDocumentarioRecepcionDocumentos { get; set; } = null!;
        public virtual DbSet<ControlDocumentarioRecepcionDocumentoFactura> ControlDocumentarioRecepcionDocumentoFacturas { get; set; } = null!;
        public virtual DbSet<CruceCxCsaldoFavor> CruceCxCsaldoFavors { get; set; } = null!;
        public virtual DbSet<CtasEspecificasAsobancarium> CtasEspecificasAsobancaria { get; set; } = null!;
        public virtual DbSet<Ctasconc> Ctasconcs { get; set; } = null!;
        public virtual DbSet<DatosAdicionalesReembolsoGasto> DatosAdicionalesReembolsoGastos { get; set; } = null!;
        public virtual DbSet<DctocajaBu> DctocajaBus { get; set; } = null!;
        public virtual DbSet<DctocajaI> DctocajaIs { get; set; } = null!;
        public virtual DbSet<DefinicionDeDocumento> DefinicionDeDocumentos { get; set; } = null!;
        public virtual DbSet<DefinicionDiferido> DefinicionDiferidos { get; set; } = null!;
        public virtual DbSet<DesbloqueoSelectivoCliente> DesbloqueoSelectivoClientes { get; set; } = null!;
        public virtual DbSet<Desembolso> Desembolsos { get; set; } = null!;
        public virtual DbSet<Detraccion> Detraccions { get; set; } = null!;
        public virtual DbSet<DgiiNcf> DgiiNcfs { get; set; } = null!;
        public virtual DbSet<Dia> Dias { get; set; } = null!;
        public virtual DbSet<DianCodigosdeInformacion> DianCodigosdeInformacions { get; set; } = null!;
        public virtual DbSet<DianDisenoporCodigosdeInformacion> DianDisenoporCodigosdeInformacions { get; set; } = null!;
        public virtual DbSet<DianDisenosMediosMagnetico> DianDisenosMediosMagneticos { get; set; } = null!;
        public virtual DbSet<DianParametrosGenerale> DianParametrosGenerales { get; set; } = null!;
        public virtual DbSet<DianParametrosMovimiento> DianParametrosMovimientos { get; set; } = null!;
        public virtual DbSet<DiasFeriado> DiasFeriados { get; set; } = null!;
        public virtual DbSet<DiasUsuario> DiasUsuarios { get; set; } = null!;
        public virtual DbSet<DiasVencModeloFact> DiasVencModeloFacts { get; set; } = null!;
        public virtual DbSet<DiasxBu> DiasxBus { get; set; } = null!;
        public virtual DbSet<Diccionario> Diccionarios { get; set; } = null!;
        public virtual DbSet<DiccionarioIdioma> DiccionarioIdiomas { get; set; } = null!;
        public virtual DbSet<DiccionarioMensaje> DiccionarioMensajes { get; set; } = null!;
        public virtual DbSet<Difecon> Difecons { get; set; } = null!;
        public virtual DbSet<Difegen> Difegens { get; set; } = null!;
        public virtual DbSet<Difepar> Difepars { get; set; } = null!;
        public virtual DbSet<Dinner> Dinners { get; set; } = null!;
        public virtual DbSet<DinnerMovimiento> DinnerMovimientos { get; set; } = null!;
        public virtual DbSet<DinnersDatosPoshotele> DinnersDatosPoshoteles { get; set; } = null!;
        public virtual DbSet<Divpolitica> Divpoliticas { get; set; } = null!;
        public virtual DbSet<Document> Documents { get; set; } = null!;
        public virtual DbSet<DocumentCheque> DocumentCheques { get; set; } = null!;
        public virtual DbSet<DocumentInsertar> DocumentInsertars { get; set; } = null!;
        public virtual DbSet<DocumentPreparacion> DocumentPreparacions { get; set; } = null!;
        public virtual DbSet<DocumentRev> DocumentRevs { get; set; } = null!;
        public virtual DbSet<DocumentTemp> DocumentTemps { get; set; } = null!;
        public virtual DbSet<DocumentXmlAdicionalesLog> DocumentXmlAdicionalesLogs { get; set; } = null!;
        public virtual DbSet<DocumentosContingencium> DocumentosContingencia { get; set; } = null!;
        public virtual DbSet<DocumentosRelacionAdjunto> DocumentosRelacionAdjuntos { get; set; } = null!;
        public virtual DbSet<DocumentosRevertir> DocumentosRevertirs { get; set; } = null!;
        public virtual DbSet<EmailQueue> EmailQueues { get; set; } = null!;
        public virtual DbSet<Entidad> Entidads { get; set; } = null!;
        public virtual DbSet<Entidade> Entidades { get; set; } = null!;
        public virtual DbSet<EnvioEmailConfiguracion> EnvioEmailConfiguracions { get; set; } = null!;
        public virtual DbSet<EscenariosAplicaIcat> EscenariosAplicaIcats { get; set; } = null!;
        public virtual DbSet<EscenariosCategoriaImpuesto> EscenariosCategoriaImpuestos { get; set; } = null!;
        public virtual DbSet<EscenariosCategoriaTributariaIva> EscenariosCategoriaTributariaIvas { get; set; } = null!;
        public virtual DbSet<EscenariosCategoriaTributarium> EscenariosCategoriaTributaria { get; set; } = null!;
        public virtual DbSet<EscenariosCiudad> EscenariosCiudads { get; set; } = null!;
        public virtual DbSet<EscenariosClaseContribuyente> EscenariosClaseContribuyentes { get; set; } = null!;
        public virtual DbSet<EscenariosConceptoRetencion> EscenariosConceptoRetencions { get; set; } = null!;
        public virtual DbSet<EscenariosCuenta> EscenariosCuentas { get; set; } = null!;
        public virtual DbSet<EscenariosDocumento> EscenariosDocumentos { get; set; } = null!;
        public virtual DbSet<EscenariosDocumentosLinea> EscenariosDocumentosLineas { get; set; } = null!;
        public virtual DbSet<EscenariosDocumentosLineasDetalle> EscenariosDocumentosLineasDetalles { get; set; } = null!;
        public virtual DbSet<EscenariosDocumentosLineasSpId> EscenariosDocumentosLineasSpIds { get; set; } = null!;
        public virtual DbSet<EscenariosDocumentosRevertido> EscenariosDocumentosRevertidos { get; set; } = null!;
        public virtual DbSet<EscenariosEsAutorretenedor> EscenariosEsAutorretenedors { get; set; } = null!;
        public virtual DbSet<EscenariosEscenario> EscenariosEscenarios { get; set; } = null!;
        public virtual DbSet<EscenariosEscenarioRetencione> EscenariosEscenarioRetenciones { get; set; } = null!;
        public virtual DbSet<EscenariosFiscale> EscenariosFiscales { get; set; } = null!;
        public virtual DbSet<EscenariosFiscalesImpuesto> EscenariosFiscalesImpuestos { get; set; } = null!;
        public virtual DbSet<EscenariosImpuesto> EscenariosImpuestos { get; set; } = null!;
        public virtual DbSet<EscenariosImpuestosPai> EscenariosImpuestosPais { get; set; } = null!;
        public virtual DbSet<EscenariosImpuestosPaisMoneda> EscenariosImpuestosPaisMonedas { get; set; } = null!;
        public virtual DbSet<EscenariosMovimiento> EscenariosMovimientos { get; set; } = null!;
        public virtual DbSet<EscenariosPai> EscenariosPais { get; set; } = null!;
        public virtual DbSet<EscenariosProveedore> EscenariosProveedores { get; set; } = null!;
        public virtual DbSet<EscenariosResultado> EscenariosResultados { get; set; } = null!;
        public virtual DbSet<EscenariosRetencione> EscenariosRetenciones { get; set; } = null!;
        public virtual DbSet<EscenariosRetencionesMoneda> EscenariosRetencionesMonedas { get; set; } = null!;
        public virtual DbSet<EscenariosSubCategoriaEfecCompra> EscenariosSubCategoriaEfecCompras { get; set; } = null!;
        public virtual DbSet<EscenariosTercero> EscenariosTerceros { get; set; } = null!;
        public virtual DbSet<EscenariosTipoAplicacionImpuesto> EscenariosTipoAplicacionImpuestos { get; set; } = null!;
        public virtual DbSet<EscenariosTipoContribuyente> EscenariosTipoContribuyentes { get; set; } = null!;
        public virtual DbSet<EscenariosTipoRetencionIva> EscenariosTipoRetencionIvas { get; set; } = null!;
        public virtual DbSet<EscenariosTipoTasa> EscenariosTipoTasas { get; set; } = null!;
        public virtual DbSet<EscenariosTributarioConsumo> EscenariosTributarioConsumos { get; set; } = null!;
        public virtual DbSet<EscenariosTributarioIcat> EscenariosTributarioIcats { get; set; } = null!;
        public virtual DbSet<EscenariosTributarioIcatCiudad> EscenariosTributarioIcatCiudads { get; set; } = null!;
        public virtual DbSet<EscenariosTributarioRentum> EscenariosTributarioRenta { get; set; } = null!;
        public virtual DbSet<Esquema> Esquemas { get; set; } = null!;
        public virtual DbSet<EsquemaAplicacionesZeu> EsquemaAplicacionesZeus { get; set; } = null!;
        public virtual DbSet<EsquemaCondicion> EsquemaCondicions { get; set; } = null!;
        public virtual DbSet<EsquemaCondicionLog> EsquemaCondicionLogs { get; set; } = null!;
        public virtual DbSet<EsquemaCondicionTransaccione> EsquemaCondicionTransacciones { get; set; } = null!;
        public virtual DbSet<EsquemaCondicionTransaccionesLog> EsquemaCondicionTransaccionesLogs { get; set; } = null!;
        public virtual DbSet<EsquemaDatosPlantilla> EsquemaDatosPlantillas { get; set; } = null!;
        public virtual DbSet<EsquemaDocumento> EsquemaDocumentos { get; set; } = null!;
        public virtual DbSet<EsquemaErrorDocument> EsquemaErrorDocuments { get; set; } = null!;
        public virtual DbSet<EsquemaErrorDocumentLogAuditorium> EsquemaErrorDocumentLogAuditoria { get; set; } = null!;
        public virtual DbSet<EsquemaErrorTransac> EsquemaErrorTransacs { get; set; } = null!;
        public virtual DbSet<EsquemaPlantilla> EsquemaPlantillas { get; set; } = null!;
        public virtual DbSet<EsquemaPlantillaCampo> EsquemaPlantillaCampos { get; set; } = null!;
        public virtual DbSet<EstadosFinancierosNiifCabecera> EstadosFinancierosNiifCabeceras { get; set; } = null!;
        public virtual DbSet<EstadosFinancierosNiifDetalle> EstadosFinancierosNiifDetalles { get; set; } = null!;
        public virtual DbSet<EstadosFinancierosNiifLibro> EstadosFinancierosNiifLibros { get; set; } = null!;
        public virtual DbSet<EtiquetaAtributo> EtiquetaAtributos { get; set; } = null!;
        public virtual DbSet<Etiquetum> Etiqueta { get; set; } = null!;
        public virtual DbSet<ExcelInfodesignperfil> ExcelInfodesignperfils { get; set; } = null!;
        public virtual DbSet<ExcelInfodesignusuario> ExcelInfodesignusuarios { get; set; } = null!;
        public virtual DbSet<ExcelRemoto> ExcelRemotos { get; set; } = null!;
        public virtual DbSet<ExportarEstructura> ExportarEstructuras { get; set; } = null!;
        public virtual DbSet<ExportarMovExportado> ExportarMovExportados { get; set; } = null!;
        public virtual DbSet<ExportarTransaccione> ExportarTransacciones { get; set; } = null!;
        public virtual DbSet<ExportarVariable> ExportarVariables { get; set; } = null!;
        public virtual DbSet<FactBodyDocumentoModelo> FactBodyDocumentoModelos { get; set; } = null!;
        public virtual DbSet<FactCliModHistorico> FactCliModHistoricos { get; set; } = null!;
        public virtual DbSet<FactConcAtributo> FactConcAtributos { get; set; } = null!;
        public virtual DbSet<FactConcFormulaSql> FactConcFormulaSqls { get; set; } = null!;
        public virtual DbSet<FactConcTipoTotalizador> FactConcTipoTotalizadors { get; set; } = null!;
        public virtual DbSet<FactConcValorPeriodo> FactConcValorPeriodos { get; set; } = null!;
        public virtual DbSet<FactConcVarImpuesto> FactConcVarImpuestos { get; set; } = null!;
        public virtual DbSet<FactConceptosRelacionado> FactConceptosRelacionados { get; set; } = null!;
        public virtual DbSet<FactConceptosRelacionadosC> FactConceptosRelacionadosCs { get; set; } = null!;
        public virtual DbSet<FactHeadAdicional> FactHeadAdicionals { get; set; } = null!;
        public virtual DbSet<FactHeadRelacionCompra> FactHeadRelacionCompras { get; set; } = null!;
        public virtual DbSet<FactModeloDatosAdiconalesTransaccion> FactModeloDatosAdiconalesTransaccions { get; set; } = null!;
        public virtual DbSet<FactNotaCausacion> FactNotaCausacions { get; set; } = null!;
        public virtual DbSet<FactRelacionCausacion> FactRelacionCausacions { get; set; } = null!;
        public virtual DbSet<Factbody> Factbodies { get; set; } = null!;
        public virtual DbSet<FactbodyRev> FactbodyRevs { get; set; } = null!;
        public virtual DbSet<FactbodyTemp> FactbodyTemps { get; set; } = null!;
        public virtual DbSet<Factciclo> Factciclos { get; set; } = null!;
        public virtual DbSet<FactciclosFacturado> FactciclosFacturados { get; set; } = null!;
        public virtual DbSet<FactciclosFacturadosBu> FactciclosFacturadosBus { get; set; } = null!;
        public virtual DbSet<FactciclosMesDium> FactciclosMesDia { get; set; } = null!;
        public virtual DbSet<Factclimod> Factclimods { get; set; } = null!;
        public virtual DbSet<Factconc> Factconcs { get; set; } = null!;
        public virtual DbSet<FactconcUbicacione> FactconcUbicaciones { get; set; } = null!;
        public virtual DbSet<FactcuotaRev> FactcuotaRevs { get; set; } = null!;
        public virtual DbSet<Factcuotum> Factcuota { get; set; } = null!;
        public virtual DbSet<Factcxcanticipo> Factcxcanticipos { get; set; } = null!;
        public virtual DbSet<FactdocBody> FactdocBodies { get; set; } = null!;
        public virtual DbSet<FactdocCuotum> FactdocCuota { get; set; } = null!;
        public virtual DbSet<FactdocHead> FactdocHeads { get; set; } = null!;
        public virtual DbSet<FactdocImportacion> FactdocImportacions { get; set; } = null!;
        public virtual DbSet<FactdocPago> FactdocPagos { get; set; } = null!;
        public virtual DbSet<Factexclusion> Factexclusions { get; set; } = null!;
        public virtual DbSet<Facthead> Factheads { get; set; } = null!;
        public virtual DbSet<FactheadRev> FactheadRevs { get; set; } = null!;
        public virtual DbSet<FactheadTemp> FactheadTemps { get; set; } = null!;
        public virtual DbSet<FactheadTempError> FactheadTempErrors { get; set; } = null!;
        public virtual DbSet<FactmodeloValor> FactmodeloValors { get; set; } = null!;
        public virtual DbSet<Factmodelob> Factmodelobs { get; set; } = null!;
        public virtual DbSet<Factmodeloh> Factmodelohs { get; set; } = null!;
        public virtual DbSet<Factopcione> Factopciones { get; set; } = null!;
        public virtual DbSet<Factpago> Factpagos { get; set; } = null!;
        public virtual DbSet<FactpagosRev> FactpagosRevs { get; set; } = null!;
        public virtual DbSet<Factradicacion> Factradicacions { get; set; } = null!;
        public virtual DbSet<FacturaElectronicaExtensionesDinamica> FacturaElectronicaExtensionesDinamicas { get; set; } = null!;
        public virtual DbSet<FacturaElectronicaExtensionesDinamicasMapeo> FacturaElectronicaExtensionesDinamicasMapeos { get; set; } = null!;
        public virtual DbSet<FacturaElectronicaExtensionesDinamicasRelacione> FacturaElectronicaExtensionesDinamicasRelaciones { get; set; } = null!;
        public virtual DbSet<FacturaElectronicaFacturadore> FacturaElectronicaFacturadores { get; set; } = null!;
        public virtual DbSet<FacturaElectronicaFacturadoresAsignacionVariable> FacturaElectronicaFacturadoresAsignacionVariables { get; set; } = null!;
        public virtual DbSet<FacturaElectronicaFacturadoresEquivalencium> FacturaElectronicaFacturadoresEquivalencia { get; set; } = null!;
        public virtual DbSet<FacturaElectronicaFreeRiskCompRetencion> FacturaElectronicaFreeRiskCompRetencions { get; set; } = null!;
        public virtual DbSet<FacturaElectronicaGrupoDeExtensione> FacturaElectronicaGrupoDeExtensiones { get; set; } = null!;
        public virtual DbSet<FacturaElectronicaLiquidacionesdeCompra> FacturaElectronicaLiquidacionesdeCompras { get; set; } = null!;
        public virtual DbSet<FacturaElectronicaMaestro> FacturaElectronicaMaestros { get; set; } = null!;
        public virtual DbSet<FacturaElectronicaMaestroDato> FacturaElectronicaMaestroDatos { get; set; } = null!;
        public virtual DbSet<FacturaElectronicaMaestrosAdicionale> FacturaElectronicaMaestrosAdicionales { get; set; } = null!;
        public virtual DbSet<FacturaElectronicaTipoMaestro> FacturaElectronicaTipoMaestros { get; set; } = null!;
        public virtual DbSet<FacturaElectronicaTransaccion> FacturaElectronicaTransaccions { get; set; } = null!;
        public virtual DbSet<FacturaElectronicaTransaccionLogRespuesta> FacturaElectronicaTransaccionLogRespuestas { get; set; } = null!;
        public virtual DbSet<FacturaElectronicaVariable> FacturaElectronicaVariables { get; set; } = null!;
        public virtual DbSet<FacturaRcCodbar> FacturaRcCodbars { get; set; } = null!;
        public virtual DbSet<FacturacionAut> FacturacionAuts { get; set; } = null!;
        public virtual DbSet<FacturacionAutoConcepto> FacturacionAutoConceptos { get; set; } = null!;
        public virtual DbSet<FacturacionAutoConceptoTemp> FacturacionAutoConceptoTemps { get; set; } = null!;
        public virtual DbSet<FacturacionAutoNovedade> FacturacionAutoNovedades { get; set; } = null!;
        public virtual DbSet<FacturacionAutoNovedadesProgramacion> FacturacionAutoNovedadesProgramacions { get; set; } = null!;
        public virtual DbSet<FacturacionAutoNovedadesProgramacionCalendario> FacturacionAutoNovedadesProgramacionCalendarios { get; set; } = null!;
        public virtual DbSet<FacturacionAutomatica> FacturacionAutomaticas { get; set; } = null!;
        public virtual DbSet<FacturacionAutomaticaDetalle> FacturacionAutomaticaDetalles { get; set; } = null!;
        public virtual DbSet<FacturasAuditoriaImpresion> FacturasAuditoriaImpresions { get; set; } = null!;
        public virtual DbSet<FacturasBu> FacturasBus { get; set; } = null!;
        public virtual DbSet<FacturasBuLibroPrincipal> FacturasBuLibroPrincipals { get; set; } = null!;
        public virtual DbSet<FacturasI> FacturasIs { get; set; } = null!;
        public virtual DbSet<FacturasImpresion> FacturasImpresions { get; set; } = null!;
        public virtual DbSet<FacturasIntNovedade> FacturasIntNovedades { get; set; } = null!;
        public virtual DbSet<FacturasLibroPrincipal> FacturasLibroPrincipals { get; set; } = null!;
        public virtual DbSet<FacturasPasoban2001> FacturasPasoban2001s { get; set; } = null!;
        public virtual DbSet<FacturasProgramacion> FacturasProgramacions { get; set; } = null!;
        public virtual DbSet<FacturasSaldoIntere> FacturasSaldoInteres { get; set; } = null!;
        public virtual DbSet<FacturasVsCobro> FacturasVsCobros { get; set; } = null!;
        public virtual DbSet<FacturasVsCobroLog> FacturasVsCobroLogs { get; set; } = null!;
        public virtual DbSet<Familia> Familias { get; set; } = null!;
        public virtual DbSet<FbancolombiaProcesado> FbancolombiaProcesados { get; set; } = null!;
        public virtual DbSet<FbancolombiaSecuencium> FbancolombiaSecuencia { get; set; } = null!;
        public virtual DbSet<FechaTipoPlazoFactura> FechaTipoPlazoFacturas { get; set; } = null!;
        public virtual DbSet<FormaPagoAge> FormaPagoAges { get; set; } = null!;
        public virtual DbSet<Fuente> Fuentes { get; set; } = null!;
        public virtual DbSet<FuentesExcluirNcf> FuentesExcluirNcfs { get; set; } = null!;
        public virtual DbSet<Ger07ciudade> Ger07ciudades { get; set; } = null!;
        public virtual DbSet<Ger07entidade> Ger07entidades { get; set; } = null!;
        public virtual DbSet<Ger07general> Ger07generals { get; set; } = null!;
        public virtual DbSet<Ger07pabGeneral> Ger07pabGenerals { get; set; } = null!;
        public virtual DbSet<Ger07pabProveedore> Ger07pabProveedores { get; set; } = null!;
        public virtual DbSet<Ger07proveedore> Ger07proveedores { get; set; } = null!;
        public virtual DbSet<Ger14general> Ger14generals { get; set; } = null!;
        public virtual DbSet<Ger14proveedore> Ger14proveedores { get; set; } = null!;
        public virtual DbSet<Ger19general> Ger19generals { get; set; } = null!;
        public virtual DbSet<Ger19proveedore> Ger19proveedores { get; set; } = null!;
        public virtual DbSet<GerBanBoliviaBisaBanco> GerBanBoliviaBisaBancos { get; set; } = null!;
        public virtual DbSet<GerBanBoliviaBisaProveedor> GerBanBoliviaBisaProveedors { get; set; } = null!;
        public virtual DbSet<GerBanBoliviaBisaSucursal> GerBanBoliviaBisaSucursals { get; set; } = null!;
        public virtual DbSet<GerBanBoliviaBisaTiposId> GerBanBoliviaBisaTiposIds { get; set; } = null!;
        public virtual DbSet<GerBancoAvVilla> GerBancoAvVillas { get; set; } = null!;
        public virtual DbSet<GerBancoAvVillasCodigosTransaccion> GerBancoAvVillasCodigosTransaccions { get; set; } = null!;
        public virtual DbSet<GerBancoAvVillasPlaza> GerBancoAvVillasPlazas { get; set; } = null!;
        public virtual DbSet<GerBancoAvVillasProv> GerBancoAvVillasProvs { get; set; } = null!;
        public virtual DbSet<GerBancoBbvaperu> GerBancoBbvaperus { get; set; } = null!;
        public virtual DbSet<GerBancoBbvaperuProv> GerBancoBbvaperuProvs { get; set; } = null!;
        public virtual DbSet<GerBancoBolivariano> GerBancoBolivarianos { get; set; } = null!;
        public virtual DbSet<GerBancoBolivarianoBanco> GerBancoBolivarianoBancos { get; set; } = null!;
        public virtual DbSet<GerBancoBolivarianoProv> GerBancoBolivarianoProvs { get; set; } = null!;
        public virtual DbSet<GerBancoCajaSocialBanco> GerBancoCajaSocialBancos { get; set; } = null!;
        public virtual DbSet<GerBancoCajaSocialProveedor> GerBancoCajaSocialProveedors { get; set; } = null!;
        public virtual DbSet<GerBancoFalabellaEntidade> GerBancoFalabellaEntidades { get; set; } = null!;
        public virtual DbSet<GerBancoFalabellaProveedore> GerBancoFalabellaProveedores { get; set; } = null!;
        public virtual DbSet<GerBancoHsbcColombiaProv> GerBancoHsbcColombiaProvs { get; set; } = null!;
        public virtual DbSet<GerBancoHsbcColombium> GerBancoHsbcColombia { get; set; } = null!;
        public virtual DbSet<GerBancoHsbcCostaRica> GerBancoHsbcCostaRicas { get; set; } = null!;
        public virtual DbSet<GerBancoHsbcCostaRicaProv> GerBancoHsbcCostaRicaProvs { get; set; } = null!;
        public virtual DbSet<GerBancoIndustrialGuatemalaProvTer> GerBancoIndustrialGuatemalaProvTers { get; set; } = null!;
        public virtual DbSet<GerBancoItauColombiaEntidade> GerBancoItauColombiaEntidades { get; set; } = null!;
        public virtual DbSet<GerBancoItauColombiaProv> GerBancoItauColombiaProvs { get; set; } = null!;
        public virtual DbSet<GerBancoItauColombium> GerBancoItauColombia { get; set; } = null!;
        public virtual DbSet<GerBancoNacionPeruProvTer> GerBancoNacionPeruProvTers { get; set; } = null!;
        public virtual DbSet<GerBancoNacionalCostaRica> GerBancoNacionalCostaRicas { get; set; } = null!;
        public virtual DbSet<GerBancoNacionalCostaRicaProvTer> GerBancoNacionalCostaRicaProvTers { get; set; } = null!;
        public virtual DbSet<GerBancoOccHondura> GerBancoOccHonduras { get; set; } = null!;
        public virtual DbSet<GerBancoOccHondurasProvTer> GerBancoOccHondurasProvTers { get; set; } = null!;
        public virtual DbSet<GerBancoPopularDominicanoBanco> GerBancoPopularDominicanoBancos { get; set; } = null!;
        public virtual DbSet<GerBancoPopularDominicanoProveedor> GerBancoPopularDominicanoProveedors { get; set; } = null!;
        public virtual DbSet<GerBanescoRepDominicanaBanco> GerBanescoRepDominicanaBancos { get; set; } = null!;
        public virtual DbSet<GerBanescoRepDominicanaProveedor> GerBanescoRepDominicanaProveedors { get; set; } = null!;
        public virtual DbSet<GerBcoSudamerisGeneral> GerBcoSudamerisGenerals { get; set; } = null!;
        public virtual DbSet<GerBcoSudamerisProveedor> GerBcoSudamerisProveedors { get; set; } = null!;
        public virtual DbSet<GerBcolPanamaDatosEmpresa> GerBcolPanamaDatosEmpresas { get; set; } = null!;
        public virtual DbSet<GerBcolPanamaEntidade> GerBcolPanamaEntidades { get; set; } = null!;
        public virtual DbSet<GerBcolPanamaProvTer> GerBcolPanamaProvTers { get; set; } = null!;
        public virtual DbSet<GerBogotaProv> GerBogotaProvs { get; set; } = null!;
        public virtual DbSet<GerBogotaTarEfectiva> GerBogotaTarEfectivas { get; set; } = null!;
        public virtual DbSet<GerBogotum> GerBogota { get; set; } = null!;
        public virtual DbSet<GerCitiBank> GerCitiBanks { get; set; } = null!;
        public virtual DbSet<GerCitiBankPaisesMoneda> GerCitiBankPaisesMonedas { get; set; } = null!;
        public virtual DbSet<GerCitiBankProveedore> GerCitiBankProveedores { get; set; } = null!;
        public virtual DbSet<GerCitiBankSucursale> GerCitiBankSucursales { get; set; } = null!;
        public virtual DbSet<GerColmena> GerColmenas { get; set; } = null!;
        public virtual DbSet<GerCreditoPeru> GerCreditoPerus { get; set; } = null!;
        public virtual DbSet<GerCreditoPeruProv> GerCreditoPeruProvs { get; set; } = null!;
        public virtual DbSet<GerDaviviendaProv> GerDaviviendaProvs { get; set; } = null!;
        public virtual DbSet<GerDaviviendum> GerDavivienda { get; set; } = null!;
        public virtual DbSet<GerEcuBancoPichinchaProv> GerEcuBancoPichinchaProvs { get; set; } = null!;
        public virtual DbSet<GerEcuMulticash> GerEcuMulticashes { get; set; } = null!;
        public virtual DbSet<GerEcuMulticashEntidad> GerEcuMulticashEntidads { get; set; } = null!;
        public virtual DbSet<GerEcuMulticashProv> GerEcuMulticashProvs { get; set; } = null!;
        public virtual DbSet<GerEcuOcp> GerEcuOcps { get; set; } = null!;
        public virtual DbSet<GerEcuOcpEntidad> GerEcuOcpEntidads { get; set; } = null!;
        public virtual DbSet<GerEcuOcpProveedore> GerEcuOcpProveedores { get; set; } = null!;
        public virtual DbSet<GerEcuProdubanco> GerEcuProdubancos { get; set; } = null!;
        public virtual DbSet<GerEcuProdubancoProv> GerEcuProdubancoProvs { get; set; } = null!;
        public virtual DbSet<GerSantanderEntidad> GerSantanderEntidads { get; set; } = null!;
        public virtual DbSet<GerSantanderProv> GerSantanderProvs { get; set; } = null!;
        public virtual DbSet<GerScotiabankPeruProv> GerScotiabankPeruProvs { get; set; } = null!;
        public virtual DbSet<Gerencia> Gerencias { get; set; } = null!;
        public virtual DbSet<GerenciaAchbacProveedore> GerenciaAchbacProveedores { get; set; } = null!;
        public virtual DbSet<GerenciaAchglobalBankProveedore> GerenciaAchglobalBankProveedores { get; set; } = null!;
        public virtual DbSet<GerenciaAchpanamaBanco> GerenciaAchpanamaBancos { get; set; } = null!;
        public virtual DbSet<GerenciaAchpanamaProveedore> GerenciaAchpanamaProveedores { get; set; } = null!;
        public virtual DbSet<GerenciaAchpanamaTipoCuenta> GerenciaAchpanamaTipoCuentas { get; set; } = null!;
        public virtual DbSet<GerenciaBancoAliadoProveedore> GerenciaBancoAliadoProveedores { get; set; } = null!;
        public virtual DbSet<GerenciaBancoOccidente> GerenciaBancoOccidentes { get; set; } = null!;
        public virtual DbSet<GerenciaBancoOccidenteEmpresa> GerenciaBancoOccidenteEmpresas { get; set; } = null!;
        public virtual DbSet<GerenciaBanistmoPanamaProveedore> GerenciaBanistmoPanamaProveedores { get; set; } = null!;
        public virtual DbSet<GerenciaBbva> GerenciaBbvas { get; set; } = null!;
        public virtual DbSet<GerenciaConavi> GerenciaConavis { get; set; } = null!;
        public virtual DbSet<GerenciaConaviProv> GerenciaConaviProvs { get; set; } = null!;
        public virtual DbSet<GerenciaPago> GerenciaPagos { get; set; } = null!;
        public virtual DbSet<GerenciaPagosDetalle> GerenciaPagosDetalles { get; set; } = null!;
        public virtual DbSet<GerenciasCuenta> GerenciasCuentas { get; set; } = null!;
        public virtual DbSet<GestionAssembly> GestionAssemblies { get; set; } = null!;
        public virtual DbSet<GestionJob> GestionJobs { get; set; } = null!;
        public virtual DbSet<GrEmpresarial> GrEmpresarials { get; set; } = null!;
        public virtual DbSet<Grupusua> Grupusuas { get; set; } = null!;
        public virtual DbSet<HistoriaAutorizacionCliente> HistoriaAutorizacionClientes { get; set; } = null!;
        public virtual DbSet<HistoriaCliente> HistoriaClientes { get; set; } = null!;
        public virtual DbSet<HistoricoAjustesMonedum> HistoricoAjustesMoneda { get; set; } = null!;
        public virtual DbSet<IdiomaControle> IdiomaControles { get; set; } = null!;
        public virtual DbSet<IdiomaDiccionario> IdiomaDiccionarios { get; set; } = null!;
        public virtual DbSet<IdiomaTipo> IdiomaTipos { get; set; } = null!;
        public virtual DbSet<IdiomaTraduccion> IdiomaTraduccions { get; set; } = null!;
        public virtual DbSet<ImpExtractoTipo> ImpExtractoTipos { get; set; } = null!;
        public virtual DbSet<ImpExtractosCamposTransac> ImpExtractosCamposTransacs { get; set; } = null!;
        public virtual DbSet<ImpExtractosCodMovimiento> ImpExtractosCodMovimientos { get; set; } = null!;
        public virtual DbSet<ImpExtractosCodMovimientosTipoConciliacion> ImpExtractosCodMovimientosTipoConciliacions { get; set; } = null!;
        public virtual DbSet<ImpExtractosDefinicion> ImpExtractosDefinicions { get; set; } = null!;
        public virtual DbSet<ImpExtractosDefinicionCuenta> ImpExtractosDefinicionCuentas { get; set; } = null!;
        public virtual DbSet<ImpExtractosDefinicionDet> ImpExtractosDefinicionDets { get; set; } = null!;
        public virtual DbSet<ImpExtractosLog> ImpExtractosLogs { get; set; } = null!;
        public virtual DbSet<ImpExtractosTipoMvtoConciliacion> ImpExtractosTipoMvtoConciliacions { get; set; } = null!;
        public virtual DbSet<ImportarArchivo> ImportarArchivos { get; set; } = null!;
        public virtual DbSet<ImportarArchivoCampo> ImportarArchivoCampos { get; set; } = null!;
        public virtual DbSet<ImpresoraFiscalDocumento> ImpresoraFiscalDocumentos { get; set; } = null!;
        public virtual DbSet<ImpresoraFiscalFactura> ImpresoraFiscalFacturas { get; set; } = null!;
        public virtual DbSet<ImpresoraFiscalParametro> ImpresoraFiscalParametros { get; set; } = null!;
        public virtual DbSet<ImpuestosBu> ImpuestosBus { get; set; } = null!;
        public virtual DbSet<ImpuestosI> ImpuestosIs { get; set; } = null!;
        public virtual DbSet<ImpuestosXFactura> ImpuestosXFacturas { get; set; } = null!;
        public virtual DbSet<Infodesign> Infodesigns { get; set; } = null!;
        public virtual DbSet<IntCorrienteDocumentosVsIc> IntCorrienteDocumentosVsIcs { get; set; } = null!;
        public virtual DbSet<IntMoraNovedade> IntMoraNovedades { get; set; } = null!;
        public virtual DbSet<IntMoraNovedadesDetalle> IntMoraNovedadesDetalles { get; set; } = null!;
        public virtual DbSet<IntMoraRcvsIm> IntMoraRcvsIms { get; set; } = null!;
        public virtual DbSet<Interfaz> Interfazs { get; set; } = null!;
        public virtual DbSet<InterfazAsignaVariable> InterfazAsignaVariables { get; set; } = null!;
        public virtual DbSet<InterfazCombinacion> InterfazCombinacions { get; set; } = null!;
        public virtual DbSet<InterfazCombinacionDato> InterfazCombinacionDatos { get; set; } = null!;
        public virtual DbSet<InterfazCriterioGenericoDato> InterfazCriterioGenericoDatos { get; set; } = null!;
        public virtual DbSet<InterfazCriterioTitulo> InterfazCriterioTitulos { get; set; } = null!;
        public virtual DbSet<InterfazPeticione> InterfazPeticiones { get; set; } = null!;
        public virtual DbSet<InterfazProceso> InterfazProcesos { get; set; } = null!;
        public virtual DbSet<InterfazVariable> InterfazVariables { get; set; } = null!;
        public virtual DbSet<Item> Items { get; set; } = null!;
        public virtual DbSet<JobEnvioEmailCobro> JobEnvioEmailCobros { get; set; } = null!;
        public virtual DbSet<JobEnvioEmailValera> JobEnvioEmailValeras { get; set; } = null!;
        public virtual DbSet<LibrosLegale> LibrosLegales { get; set; } = null!;
        public virtual DbSet<LogEnvioEmail> LogEnvioEmails { get; set; } = null!;
        public virtual DbSet<LogTodosMaestro> LogTodosMaestros { get; set; } = null!;
        public virtual DbSet<LogoEmpresa> LogoEmpresas { get; set; } = null!;
        public virtual DbSet<LvFacturaElectronicaExtensionesDinamicasDocumentosItem> LvFacturaElectronicaExtensionesDinamicasDocumentosItems { get; set; } = null!;
        public virtual DbSet<MaeCategoria> MaeCategorias { get; set; } = null!;
        public virtual DbSet<MaeCategoriaPresupuestoPrivado> MaeCategoriaPresupuestoPrivados { get; set; } = null!;
        public virtual DbSet<MaeClasesProv> MaeClasesProvs { get; set; } = null!;
        public virtual DbSet<MaeCodigoOcupacion> MaeCodigoOcupacions { get; set; } = null!;
        public virtual DbSet<MaeImportacionArchivo> MaeImportacionArchivos { get; set; } = null!;
        public virtual DbSet<MaeMotivo> MaeMotivos { get; set; } = null!;
        public virtual DbSet<MaeMotivosOpcione> MaeMotivosOpciones { get; set; } = null!;
        public virtual DbSet<MaeOcupacione> MaeOcupaciones { get; set; } = null!;
        public virtual DbSet<MaePresuCuenta> MaePresuCuentas { get; set; } = null!;
        public virtual DbSet<MaeTipodeEvento> MaeTipodeEventos { get; set; } = null!;
        public virtual DbSet<MaeVendeCorreo> MaeVendeCorreos { get; set; } = null!;
        public virtual DbSet<Maecco> Maeccos { get; set; } = null!;
        public virtual DbSet<MaeccoCuenta> MaeccoCuentas { get; set; } = null!;
        public virtual DbSet<Maecont> Maeconts { get; set; } = null!;
        public virtual DbSet<MaecontLibro> MaecontLibros { get; set; } = null!;
        public virtual DbSet<Maegrupo> Maegrupos { get; set; } = null!;
        public virtual DbSet<Maelibro> Maelibros { get; set; } = null!;
        public virtual DbSet<Maepresu> Maepresus { get; set; } = null!;
        public virtual DbSet<Maestro> Maestros { get; set; } = null!;
        public virtual DbSet<MaestrosDependencium> MaestrosDependencia { get; set; } = null!;
        public virtual DbSet<MaestrosEqEquivalencia> MaestrosEqEquivalencias { get; set; } = null!;
        public virtual DbSet<MaestrosEqMaestroGenericoDato> MaestrosEqMaestroGenericoDatos { get; set; } = null!;
        public virtual DbSet<MaestrosEqMaestrosGenerico> MaestrosEqMaestrosGenericos { get; set; } = null!;
        public virtual DbSet<MaestrosEqTipoMaestro> MaestrosEqTipoMaestros { get; set; } = null!;
        public virtual DbSet<Maeunid> Maeunids { get; set; } = null!;
        public virtual DbSet<Maevende> Maevendes { get; set; } = null!;
        public virtual DbSet<MaeventosI> MaeventosIs { get; set; } = null!;
        public virtual DbSet<Maezona> Maezonas { get; set; } = null!;
        public virtual DbSet<MandatoItem> MandatoItems { get; set; } = null!;
        public virtual DbSet<MaquinasHost> MaquinasHosts { get; set; } = null!;
        public virtual DbSet<McaSesione> McaSesiones { get; set; } = null!;
        public virtual DbSet<Mensaje> Mensajes { get; set; } = null!;
        public virtual DbSet<MensajesTiempo> MensajesTiempos { get; set; } = null!;
        public virtual DbSet<MensajesUsuario> MensajesUsuarios { get; set; } = null!;
        public virtual DbSet<Menu> Menus { get; set; } = null!;
        public virtual DbSet<MenuDetalle> MenuDetalles { get; set; } = null!;
        public virtual DbSet<Mese> Meses { get; set; } = null!;
        public virtual DbSet<MesesCtum> MesesCta { get; set; } = null!;
        public virtual DbSet<MesesLibro> MesesLibros { get; set; } = null!;
        public virtual DbSet<MfActividad> MfActividads { get; set; } = null!;
        public virtual DbSet<MfActivo> MfActivos { get; set; } = null!;
        public virtual DbSet<MfAprobacionCredito> MfAprobacionCreditos { get; set; } = null!;
        public virtual DbSet<MfAprobacionIntegrante> MfAprobacionIntegrantes { get; set; } = null!;
        public virtual DbSet<MfCaptrabajo> MfCaptrabajos { get; set; } = null!;
        public virtual DbSet<MfConfiguracionUsuario> MfConfiguracionUsuarios { get; set; } = null!;
        public virtual DbSet<MfConsecutivo> MfConsecutivos { get; set; } = null!;
        public virtual DbSet<MfCxC> MfCxCs { get; set; } = null!;
        public virtual DbSet<MfDatosnegocio> MfDatosnegocios { get; set; } = null!;
        public virtual DbSet<MfDatosusuario> MfDatosusuarios { get; set; } = null!;
        public virtual DbSet<MfDatosusuarioadi> MfDatosusuarioadis { get; set; } = null!;
        public virtual DbSet<MfDeuda> MfDeudas { get; set; } = null!;
        public virtual DbSet<MfDistribucionEstudio> MfDistribucionEstudios { get; set; } = null!;
        public virtual DbSet<MfEmpleado> MfEmpleados { get; set; } = null!;
        public virtual DbSet<MfEscActivo> MfEscActivos { get; set; } = null!;
        public virtual DbSet<MfEscBienesraice> MfEscBienesraices { get; set; } = null!;
        public virtual DbSet<MfEscDatosusuarioadi> MfEscDatosusuarioadis { get; set; } = null!;
        public virtual DbSet<MfEscEgreso> MfEscEgresos { get; set; } = null!;
        public virtual DbSet<MfEscIngreso> MfEscIngresos { get; set; } = null!;
        public virtual DbSet<MfEscPasivo> MfEscPasivos { get; set; } = null!;
        public virtual DbSet<MfEscRefbancarium> MfEscRefbancaria { get; set; } = null!;
        public virtual DbSet<MfEscRefgeneral> MfEscRefgenerals { get; set; } = null!;
        public virtual DbSet<MfEscTablapadre> MfEscTablapadres { get; set; } = null!;
        public virtual DbSet<MfEscVehiculo> MfEscVehiculos { get; set; } = null!;
        public virtual DbSet<MfEstfinanciero> MfEstfinancieros { get; set; } = null!;
        public virtual DbSet<MfFamilium> MfFamilia { get; set; } = null!;
        public virtual DbSet<MfGrupo> MfGrupos { get; set; } = null!;
        public virtual DbSet<MfIngreso> MfIngresos { get; set; } = null!;
        public virtual DbSet<MfInvactivo> MfInvactivos { get; set; } = null!;
        public virtual DbSet<MfLog> MfLogs { get; set; } = null!;
        public virtual DbSet<MfNivelescolaridad> MfNivelescolaridads { get; set; } = null!;
        public virtual DbSet<MfPagareBody> MfPagareBodies { get; set; } = null!;
        public virtual DbSet<MfPagareHead> MfPagareHeads { get; set; } = null!;
        public virtual DbSet<MfPagarePrestamoBody> MfPagarePrestamoBodies { get; set; } = null!;
        public virtual DbSet<MfPagarePrestamoHead> MfPagarePrestamoHeads { get; set; } = null!;
        public virtual DbSet<MfPagarePrestamoIntegrante> MfPagarePrestamoIntegrantes { get; set; } = null!;
        public virtual DbSet<MfParentesco> MfParentescos { get; set; } = null!;
        public virtual DbSet<MfPasivo> MfPasivos { get; set; } = null!;
        public virtual DbSet<MfPoliza> MfPolizas { get; set; } = null!;
        public virtual DbSet<MfPrestamosCodeudore> MfPrestamosCodeudores { get; set; } = null!;
        public virtual DbSet<MfPresupuesto> MfPresupuestos { get; set; } = null!;
        public virtual DbSet<MfProdvender> MfProdvenders { get; set; } = null!;
        public virtual DbSet<MfProdvendusuario> MfProdvendusuarios { get; set; } = null!;
        public virtual DbSet<MfProfesion> MfProfesions { get; set; } = null!;
        public virtual DbSet<MfProyinversion> MfProyinversions { get; set; } = null!;
        public virtual DbSet<MfPyg> MfPygs { get; set; } = null!;
        public virtual DbSet<MfReferencium> MfReferencia { get; set; } = null!;
        public virtual DbSet<MfRenovacionCredito> MfRenovacionCreditos { get; set; } = null!;
        public virtual DbSet<MfSeguro> MfSeguros { get; set; } = null!;
        public virtual DbSet<MfTabfondogaran> MfTabfondogarans { get; set; } = null!;
        public virtual DbSet<MfTablapadre> MfTablapadres { get; set; } = null!;
        public virtual DbSet<MfTiponegocio> MfTiponegocios { get; set; } = null!;
        public virtual DbSet<MfViviendum> MfVivienda { get; set; } = null!;
        public virtual DbSet<ModulosExterno> ModulosExternos { get; set; } = null!;
        public virtual DbSet<Moneda> Monedas { get; set; } = null!;
        public virtual DbSet<MpgAcuerdoGasto> MpgAcuerdoGastos { get; set; } = null!;
        public virtual DbSet<MpgAcuerdoPago> MpgAcuerdoPagos { get; set; } = null!;
        public virtual DbSet<MpgApropiacion> MpgApropiacions { get; set; } = null!;
        public virtual DbSet<MpgCrpOc> MpgCrpOcs { get; set; } = null!;
        public virtual DbSet<MpgCrpOcCuota> MpgCrpOcCuotas { get; set; } = null!;
        public virtual DbSet<MpgCrpOcItem> MpgCrpOcItems { get; set; } = null!;
        public virtual DbSet<MpgCuota> MpgCuotas { get; set; } = null!;
        public virtual DbSet<MpgDocumento> MpgDocumentos { get; set; } = null!;
        public virtual DbSet<MpgDocumentoCesion> MpgDocumentoCesions { get; set; } = null!;
        public virtual DbSet<MpgItem> MpgItems { get; set; } = null!;
        public virtual DbSet<MpgLiberarSaldo> MpgLiberarSaldos { get; set; } = null!;
        public virtual DbSet<MpgLiberarSaldosDet> MpgLiberarSaldosDets { get; set; } = null!;
        public virtual DbSet<MpgMese> MpgMeses { get; set; } = null!;
        public virtual DbSet<MpgOppcuota> MpgOppcuotas { get; set; } = null!;
        public virtual DbSet<MpgOppdocAsociado> MpgOppdocAsociados { get; set; } = null!;
        public virtual DbSet<MpgOppentrada> MpgOppentradas { get; set; } = null!;
        public virtual DbSet<MpgOpprubro> MpgOpprubros { get; set; } = null!;
        public virtual DbSet<MpgOpptemp> MpgOpptemps { get; set; } = null!;
        public virtual DbSet<MpgReciboFactura> MpgReciboFacturas { get; set; } = null!;
        public virtual DbSet<MpgRecurso> MpgRecursos { get; set; } = null!;
        public virtual DbSet<MpgRubro> MpgRubros { get; set; } = null!;
        public virtual DbSet<MpgTempItem> MpgTempItems { get; set; } = null!;
        public virtual DbSet<MpgTipoDocAutorizacion> MpgTipoDocAutorizacions { get; set; } = null!;
        public virtual DbSet<MpgWsDocumento> MpgWsDocumentos { get; set; } = null!;
        public virtual DbSet<NcftercerosTemp> NcftercerosTemps { get; set; } = null!;
        public virtual DbSet<Numcon> Numcons { get; set; } = null!;
        public virtual DbSet<Numconsadc> Numconsadcs { get; set; } = null!;
        public virtual DbSet<NumeFacConfiguracion> NumeFacConfiguracions { get; set; } = null!;
        public virtual DbSet<Oficina> Oficinas { get; set; } = null!;
        public virtual DbSet<OpcionesAutorizacion> OpcionesAutorizacions { get; set; } = null!;
        public virtual DbSet<OpcionesProceso> OpcionesProcesos { get; set; } = null!;
        public virtual DbSet<Pago3rosBu> Pago3rosBus { get; set; } = null!;
        public virtual DbSet<Pago3rosI> Pago3rosIs { get; set; } = null!;
        public virtual DbSet<Pago3rosLibroPrincipal> Pago3rosLibroPrincipals { get; set; } = null!;
        public virtual DbSet<PagosAcartera> PagosAcarteras { get; set; } = null!;
        public virtual DbSet<Paise> Paises { get; set; } = null!;
        public virtual DbSet<ParamCentroCosto> ParamCentroCostos { get; set; } = null!;
        public virtual DbSet<ParamGrupoBu> ParamGrupoBus { get; set; } = null!;
        public virtual DbSet<ParamGrupoBuGen> ParamGrupoBuGens { get; set; } = null!;
        public virtual DbSet<ParamPresuPrivado> ParamPresuPrivados { get; set; } = null!;
        public virtual DbSet<Paramdetc> Paramdetcs { get; set; } = null!;
        public virtual DbSet<Paramdetg> Paramdetgs { get; set; } = null!;
        public virtual DbSet<Parametr> Parametrs { get; set; } = null!;
        public virtual DbSet<Paramgen> Paramgens { get; set; } = null!;
        public virtual DbSet<Perfil> Perfils { get; set; } = null!;
        public virtual DbSet<PerfilBackup> PerfilBackups { get; set; } = null!;
        public virtual DbSet<PerfilProceso> PerfilProcesos { get; set; } = null!;
        public virtual DbSet<PerfilTemp> PerfilTemps { get; set; } = null!;
        public virtual DbSet<Perfile> Perfiles { get; set; } = null!;
        public virtual DbSet<PersonalAutorizacion> PersonalAutorizacions { get; set; } = null!;
        public virtual DbSet<PersonalAutorizacionOpcione> PersonalAutorizacionOpciones { get; set; } = null!;
        public virtual DbSet<PersonalAutorizacionUsuario> PersonalAutorizacionUsuarios { get; set; } = null!;
        public virtual DbSet<Plantilla> Plantillas { get; set; } = null!;
        public virtual DbSet<PlantillaDocactual> PlantillaDocactuals { get; set; } = null!;
        public virtual DbSet<PlantillaDocumento> PlantillaDocumentos { get; set; } = null!;
        public virtual DbSet<PlantillaEmail> PlantillaEmails { get; set; } = null!;
        public virtual DbSet<PlantillaItem> PlantillaItems { get; set; } = null!;
        public virtual DbSet<PlantillaPlanPago> PlantillaPlanPagos { get; set; } = null!;
        public virtual DbSet<PlantillaTransacione> PlantillaTransaciones { get; set; } = null!;
        public virtual DbSet<PlantillaTransactual> PlantillaTransactuals { get; set; } = null!;
        public virtual DbSet<Plaza> Plazas { get; set; } = null!;
        public virtual DbSet<PostFechadosConfiguracion> PostFechadosConfiguracions { get; set; } = null!;
        public virtual DbSet<PrestamosD> PrestamosDs { get; set; } = null!;
        public virtual DbSet<PrestamosDistribucionEstudio> PrestamosDistribucionEstudios { get; set; } = null!;
        public virtual DbSet<PrestamosG> PrestamosGs { get; set; } = null!;
        public virtual DbSet<PrestamosGrupo> PrestamosGrupos { get; set; } = null!;
        public virtual DbSet<PrestamosInterese> PrestamosIntereses { get; set; } = null!;
        public virtual DbSet<PrestamosMora> PrestamosMoras { get; set; } = null!;
        public virtual DbSet<Proceso> Procesos { get; set; } = null!;
        public virtual DbSet<ProgramacionTemporal> ProgramacionTemporals { get; set; } = null!;
        public virtual DbSet<Propiedad1> Propiedad1s { get; set; } = null!;
        public virtual DbSet<Propiedad2> Propiedad2s { get; set; } = null!;
        public virtual DbSet<Propiedad3> Propiedad3s { get; set; } = null!;
        public virtual DbSet<Propiedad4> Propiedad4s { get; set; } = null!;
        public virtual DbSet<Propiedad5> Propiedad5s { get; set; } = null!;
        public virtual DbSet<ProrrataIgv> ProrrataIgvs { get; set; } = null!;
        public virtual DbSet<ProrrataIgvDetalle> ProrrataIgvDetalles { get; set; } = null!;
        public virtual DbSet<ProveedorTecnologico> ProveedorTecnologicos { get; set; } = null!;
        public virtual DbSet<Proveedore> Proveedores { get; set; } = null!;
        public virtual DbSet<ProveedoresActMod> ProveedoresActMods { get; set; } = null!;
        public virtual DbSet<ProveedoresAnticipo> ProveedoresAnticipos { get; set; } = null!;
        public virtual DbSet<ProveedoresCuenta> ProveedoresCuentas { get; set; } = null!;
        public virtual DbSet<ProyeccionFactAuto> ProyeccionFactAutos { get; set; } = null!;
        public virtual DbSet<ProyeccionHead> ProyeccionHeads { get; set; } = null!;
        public virtual DbSet<ProyeccionesPresupuesto> ProyeccionesPresupuestos { get; set; } = null!;
        public virtual DbSet<QueryEntornoDato> QueryEntornoDatos { get; set; } = null!;
        public virtual DbSet<QueryEntornoDatosColumna> QueryEntornoDatosColumnas { get; set; } = null!;
        public virtual DbSet<QueryEntornoDatosVariable> QueryEntornoDatosVariables { get; set; } = null!;
        public virtual DbSet<QueryEntornoDatosVariablesMaestro> QueryEntornoDatosVariablesMaestros { get; set; } = null!;
        public virtual DbSet<QueryModelo> QueryModelos { get; set; } = null!;
        public virtual DbSet<QueryModelosColumna> QueryModelosColumnas { get; set; } = null!;
        public virtual DbSet<QueryModelosProceso> QueryModelosProcesos { get; set; } = null!;
        public virtual DbSet<QueryModelosProcesoArchivo> QueryModelosProcesoArchivos { get; set; } = null!;
        public virtual DbSet<QueryModelosRelacion> QueryModelosRelacions { get; set; } = null!;
        public virtual DbSet<QueryModelosRelacionTemp> QueryModelosRelacionTemps { get; set; } = null!;
        public virtual DbSet<QueryPropiedadesParametro> QueryPropiedadesParametros { get; set; } = null!;
        public virtual DbSet<QueryPropiedadesStoredProcedure> QueryPropiedadesStoredProcedures { get; set; } = null!;
        public virtual DbSet<QueryStoredProcedureColumna> QueryStoredProcedureColumnas { get; set; } = null!;
        public virtual DbSet<RecaculoMese> RecaculoMeses { get; set; } = null!;
        public virtual DbSet<ReciboDeCajaChequesPosfechado> ReciboDeCajaChequesPosfechados { get; set; } = null!;
        public virtual DbSet<ReciboPagoTemp> ReciboPagoTemps { get; set; } = null!;
        public virtual DbSet<ReciboPagoTempGrid> ReciboPagoTempGrids { get; set; } = null!;
        public virtual DbSet<Reclasificacion3ro> Reclasificacion3ros { get; set; } = null!;
        public virtual DbSet<ReembolsoCajaChica> ReembolsoCajaChicas { get; set; } = null!;
        public virtual DbSet<ReembolsoCajaChicaFactura> ReembolsoCajaChicaFacturas { get; set; } = null!;
        public virtual DbSet<ReferenciaPorTransaccionCuentum> ReferenciaPorTransaccionCuenta { get; set; } = null!;
        public virtual DbSet<Regional> Regionals { get; set; } = null!;
        public virtual DbSet<RelacionConciliacionNotum> RelacionConciliacionNota { get; set; } = null!;
        public virtual DbSet<RelacionCtasImpuesto> RelacionCtasImpuestos { get; set; } = null!;
        public virtual DbSet<Relacione> Relaciones { get; set; } = null!;
        public virtual DbSet<ReportesImpresion> ReportesImpresions { get; set; } = null!;
        public virtual DbSet<ReportesImpresionParametro> ReportesImpresionParametros { get; set; } = null!;
        public virtual DbSet<ReportesRpt> ReportesRpts { get; set; } = null!;
        public virtual DbSet<ReportesRptBody> ReportesRptBodies { get; set; } = null!;
        public virtual DbSet<ReportesSeguridadBody> ReportesSeguridadBodies { get; set; } = null!;
        public virtual DbSet<ReportesSeguridadHead> ReportesSeguridadHeads { get; set; } = null!;
        public virtual DbSet<ReservaPresuBu> ReservaPresuBus { get; set; } = null!;
        public virtual DbSet<ReservapresuLibroPrincipal> ReservapresuLibroPrincipals { get; set; } = null!;
        public virtual DbSet<ResolucionVsMaquina> ResolucionVsMaquinas { get; set; } = null!;
        public virtual DbSet<ResolucionesDeFactura> ResolucionesDeFacturas { get; set; } = null!;
        public virtual DbSet<Revelacione> Revelaciones { get; set; } = null!;
        public virtual DbSet<RevelacionesAuditorium> RevelacionesAuditoria { get; set; } = null!;
        public virtual DbSet<RevelacionesMese> RevelacionesMeses { get; set; } = null!;
        public virtual DbSet<RevelacionesPeriodo> RevelacionesPeriodos { get; set; } = null!;
        public virtual DbSet<RevelacionesPeriodosAnexo> RevelacionesPeriodosAnexos { get; set; } = null!;
        public virtual DbSet<ReversionContable> ReversionContables { get; set; } = null!;
        public virtual DbSet<Role> Roles { get; set; } = null!;
        public virtual DbSet<RolesBody> RolesBodies { get; set; } = null!;
        public virtual DbSet<RolesBodyLogT> RolesBodyLogTs { get; set; } = null!;
        public virtual DbSet<RolesBu> RolesBus { get; set; } = null!;
        public virtual DbSet<RolesConfiguracionInterface> RolesConfiguracionInterfaces { get; set; } = null!;
        public virtual DbSet<RolesCuentaAuxiliar> RolesCuentaAuxiliars { get; set; } = null!;
        public virtual DbSet<RolesCuentaAuxiliarLogT> RolesCuentaAuxiliarLogTs { get; set; } = null!;
        public virtual DbSet<RolesEntidade> RolesEntidades { get; set; } = null!;
        public virtual DbSet<RolesEntidadesNivel1> RolesEntidadesNivel1s { get; set; } = null!;
        public virtual DbSet<RolesEntidadesNivel2> RolesEntidadesNivel2s { get; set; } = null!;
        public virtual DbSet<RolesEntidadesNivel3> RolesEntidadesNivel3s { get; set; } = null!;
        public virtual DbSet<RolesEntidadesNivel4> RolesEntidadesNivel4s { get; set; } = null!;
        public virtual DbSet<RolesEntidadesNivel5> RolesEntidadesNivel5s { get; set; } = null!;
        public virtual DbSet<RolesHead> RolesHeads { get; set; } = null!;
        public virtual DbSet<RolesHeadLogT> RolesHeadLogTs { get; set; } = null!;
        public virtual DbSet<RolesMenu> RolesMenus { get; set; } = null!;
        public virtual DbSet<RolesObjetosValidacion> RolesObjetosValidacions { get; set; } = null!;
        public virtual DbSet<RolesObjetosValidacionParametrosEntrada> RolesObjetosValidacionParametrosEntradas { get; set; } = null!;
        public virtual DbSet<RolesParametrosEntradum> RolesParametrosEntrada { get; set; } = null!;
        public virtual DbSet<RolesRegla> RolesReglas { get; set; } = null!;
        public virtual DbSet<RolesReglasdelRol> RolesReglasdelRols { get; set; } = null!;
        public virtual DbSet<RolesTabla> RolesTablas { get; set; } = null!;
        public virtual DbSet<RolesTablaLogT> RolesTablaLogTs { get; set; } = null!;
        public virtual DbSet<RolesTempControle> RolesTempControles { get; set; } = null!;
        public virtual DbSet<RolesTempParametrosEntradum> RolesTempParametrosEntrada { get; set; } = null!;
        public virtual DbSet<RolesTipoRegla> RolesTipoReglas { get; set; } = null!;
        public virtual DbSet<RolesUsuarioRol> RolesUsuarioRols { get; set; } = null!;
        public virtual DbSet<RolesValidacion> RolesValidacions { get; set; } = null!;
        public virtual DbSet<RptCertificado> RptCertificados { get; set; } = null!;
        public virtual DbSet<RptCertificadoConcepto> RptCertificadoConceptos { get; set; } = null!;
        public virtual DbSet<RptCertificadoConceptoCiudad> RptCertificadoConceptoCiudads { get; set; } = null!;
        public virtual DbSet<RptCertificadoConceptoConceptoRetencion> RptCertificadoConceptoConceptoRetencions { get; set; } = null!;
        public virtual DbSet<RptCertificadoConceptoCuentum> RptCertificadoConceptoCuenta { get; set; } = null!;
        public virtual DbSet<RptCertificadoConceptoPorcentaje> RptCertificadoConceptoPorcentajes { get; set; } = null!;
        public virtual DbSet<RptCertificadoConceptoRetencione> RptCertificadoConceptoRetenciones { get; set; } = null!;
        public virtual DbSet<RptConfigDetalleAtributo> RptConfigDetalleAtributos { get; set; } = null!;
        public virtual DbSet<RubrosEf> RubrosEfs { get; set; } = null!;
        public virtual DbSet<SaldoAuxBuLibroPrincipal> SaldoAuxBuLibroPrincipals { get; set; } = null!;
        public virtual DbSet<SaldoAuxLibroPrincipal> SaldoAuxLibroPrincipals { get; set; } = null!;
        public virtual DbSet<SaldoClieLibroPrincipal> SaldoClieLibroPrincipals { get; set; } = null!;
        public virtual DbSet<SaldoContLibroPrincipal> SaldoContLibroPrincipals { get; set; } = null!;
        public virtual DbSet<SaldoPropiedad1> SaldoPropiedad1s { get; set; } = null!;
        public virtual DbSet<SaldoPropiedad2> SaldoPropiedad2s { get; set; } = null!;
        public virtual DbSet<SaldoPropiedad3> SaldoPropiedad3s { get; set; } = null!;
        public virtual DbSet<SaldoPropiedad4> SaldoPropiedad4s { get; set; } = null!;
        public virtual DbSet<SaldoPropiedad5> SaldoPropiedad5s { get; set; } = null!;
        public virtual DbSet<SaldoProvLibroPrincipal> SaldoProvLibroPrincipals { get; set; } = null!;
        public virtual DbSet<SaldoauxBu> SaldoauxBus { get; set; } = null!;
        public virtual DbSet<SaldoauxI> SaldoauxIs { get; set; } = null!;
        public virtual DbSet<SaldoccoBu> SaldoccoBus { get; set; } = null!;
        public virtual DbSet<SaldoccoI> SaldoccoIs { get; set; } = null!;
        public virtual DbSet<SaldoclieBu> SaldoclieBus { get; set; } = null!;
        public virtual DbSet<SaldoclieI> SaldoclieIs { get; set; } = null!;
        public virtual DbSet<SaldocontBu> SaldocontBus { get; set; } = null!;
        public virtual DbSet<SaldocontI> SaldocontIs { get; set; } = null!;
        public virtual DbSet<Saldogeneral> Saldogenerals { get; set; } = null!;
        public virtual DbSet<SaldoitemsBu> SaldoitemsBus { get; set; } = null!;
        public virtual DbSet<SaldoitemsI> SaldoitemsIs { get; set; } = null!;
        public virtual DbSet<SaldopresuBu> SaldopresuBus { get; set; } = null!;
        public virtual DbSet<SaldopresuLibroPrincipal> SaldopresuLibroPrincipals { get; set; } = null!;
        public virtual DbSet<SaldoprovBu> SaldoprovBus { get; set; } = null!;
        public virtual DbSet<SaldoprovI> SaldoprovIs { get; set; } = null!;
        public virtual DbSet<Saldorefe> Saldoreves { get; set; } = null!;
        public virtual DbSet<ScCobrador> ScCobradors { get; set; } = null!;
        public virtual DbSet<ScCobradorBu> ScCobradorBus { get; set; } = null!;
        public virtual DbSet<ScCriteriosDeCobro> ScCriteriosDeCobros { get; set; } = null!;
        public virtual DbSet<ScCuentasEspecifica> ScCuentasEspecificas { get; set; } = null!;
        public virtual DbSet<ScProgramacion> ScProgramacions { get; set; } = null!;
        public virtual DbSet<ScProgramacionCliente> ScProgramacionClientes { get; set; } = null!;
        public virtual DbSet<ScProgramacionClienteCrt> ScProgramacionClienteCrts { get; set; } = null!;
        public virtual DbSet<ScProgramacionFactAnuladaTemp> ScProgramacionFactAnuladaTemps { get; set; } = null!;
        public virtual DbSet<ScProgramacionFactAnuladum> ScProgramacionFactAnulada { get; set; } = null!;
        public virtual DbSet<ScProgramacionFactCriterio> ScProgramacionFactCriterios { get; set; } = null!;
        public virtual DbSet<ScProgramacionFactura> ScProgramacionFacturas { get; set; } = null!;
        public virtual DbSet<ScProgramacionFacturaTemp> ScProgramacionFacturaTemps { get; set; } = null!;
        public virtual DbSet<SchemaVersion> SchemaVersions { get; set; } = null!;
        public virtual DbSet<Seccione> Secciones { get; set; } = null!;
        public virtual DbSet<SeccionesEfCabecera> SeccionesEfCabeceras { get; set; } = null!;
        public virtual DbSet<SeccionesEfCabeceraOrdenado> SeccionesEfCabeceraOrdenados { get; set; } = null!;
        public virtual DbSet<SeccionesEfDetalle> SeccionesEfDetalles { get; set; } = null!;
        public virtual DbSet<SeccionesEfExcepcione> SeccionesEfExcepciones { get; set; } = null!;
        public virtual DbSet<SeccionesEfOrdenImpresion> SeccionesEfOrdenImpresions { get; set; } = null!;
        public virtual DbSet<SeccionesOrdenado> SeccionesOrdenados { get; set; } = null!;
        public virtual DbSet<SeccionesOrdene> SeccionesOrdenes { get; set; } = null!;
        public virtual DbSet<SecuencialPagoGerencium> SecuencialPagoGerencia { get; set; } = null!;
        public virtual DbSet<Segmento> Segmentos { get; set; } = null!;
        public virtual DbSet<SentenciaPivotTable> SentenciaPivotTables { get; set; } = null!;
        public virtual DbSet<SistemasFiltro> SistemasFiltros { get; set; } = null!;
        public virtual DbSet<SistemasFiltrosDetalle> SistemasFiltrosDetalles { get; set; } = null!;
        public virtual DbSet<SolicitudPresupuesto> SolicitudPresupuestos { get; set; } = null!;
        public virtual DbSet<SolicitudPresupuestoTransac> SolicitudPresupuestoTransacs { get; set; } = null!;
        public virtual DbSet<Sqlwizard> Sqlwizards { get; set; } = null!;
        public virtual DbSet<SriCatBienServ> SriCatBienServs { get; set; } = null!;
        public virtual DbSet<SriCatIce> SriCatIces { get; set; } = null!;
        public virtual DbSet<SriCatRetIva100> SriCatRetIva100s { get; set; } = null!;
        public virtual DbSet<SriCatRetIvaBie> SriCatRetIvaBies { get; set; } = null!;
        public virtual DbSet<SriCatRetIvaSer> SriCatRetIvaSers { get; set; } = null!;
        public virtual DbSet<SriCatRetRentum> SriCatRetRenta { get; set; } = null!;
        public virtual DbSet<SriCategoriaRedondeo> SriCategoriaRedondeos { get; set; } = null!;
        public virtual DbSet<SriCategorium> SriCategoria { get; set; } = null!;
        public virtual DbSet<SriConceptosRedondeo> SriConceptosRedondeos { get; set; } = null!;
        public virtual DbSet<SriDocGeneradosXml> SriDocGeneradosXmls { get; set; } = null!;
        public virtual DbSet<SriFamilia> SriFamilias { get; set; } = null!;
        public virtual DbSet<SriImpuesto> SriImpuestos { get; set; } = null!;
        public virtual DbSet<SriInfoCompRetencion> SriInfoCompRetencions { get; set; } = null!;
        public virtual DbSet<SriInfoTributarium> SriInfoTributaria { get; set; } = null!;
        public virtual DbSet<SriItemRetCero> SriItemRetCeros { get; set; } = null!;
        public virtual DbSet<SriXmlRecibido> SriXmlRecibidos { get; set; } = null!;
        public virtual DbSet<SunatConcepto> SunatConceptos { get; set; } = null!;
        public virtual DbSet<SunatFuente> SunatFuentes { get; set; } = null!;
        public virtual DbSet<SunatParametro> SunatParametros { get; set; } = null!;
        public virtual DbSet<SunatRetencione> SunatRetenciones { get; set; } = null!;
        public virtual DbSet<SysEntidade> SysEntidades { get; set; } = null!;
        public virtual DbSet<TablaAmortizacion> TablaAmortizacions { get; set; } = null!;
        public virtual DbSet<TablaAmortizacionParametro> TablaAmortizacionParametros { get; set; } = null!;
        public virtual DbSet<TablaDigiVerif> TablaDigiVerifs { get; set; } = null!;
        public virtual DbSet<TasaDeCambioPorMonedum> TasaDeCambioPorMoneda { get; set; } = null!;
        public virtual DbSet<TasasConversion> TasasConversions { get; set; } = null!;
        public virtual DbSet<TasasIntere> TasasInteres { get; set; } = null!;
        public virtual DbSet<TasasInteresDetalle> TasasInteresDetalles { get; set; } = null!;
        public virtual DbSet<TasasMercado> TasasMercados { get; set; } = null!;
        public virtual DbSet<Tcambio> Tcambios { get; set; } = null!;
        public virtual DbSet<TempAnticiposPrv> TempAnticiposPrvs { get; set; } = null!;
        public virtual DbSet<TempCajaChica> TempCajaChicas { get; set; } = null!;
        public virtual DbSet<TempCausacionMora> TempCausacionMoras { get; set; } = null!;
        public virtual DbSet<TempCausacionMoraDetalle> TempCausacionMoraDetalles { get; set; } = null!;
        public virtual DbSet<TempConcepto> TempConceptos { get; set; } = null!;
        public virtual DbSet<TempControlDocumentario> TempControlDocumentarios { get; set; } = null!;
        public virtual DbSet<TempFuente> TempFuentes { get; set; } = null!;
        public virtual DbSet<TempGeneraDiferido> TempGeneraDiferidos { get; set; } = null!;
        public virtual DbSet<TempLibroDiario> TempLibroDiarios { get; set; } = null!;
        public virtual DbSet<TempPlantillaCompra> TempPlantillaCompras { get; set; } = null!;
        public virtual DbSet<Tercero> Terceros { get; set; } = null!;
        public virtual DbSet<TerceroCupoCreditoPorMonedum> TerceroCupoCreditoPorMoneda { get; set; } = null!;
        public virtual DbSet<TipoCartasBancaria> TipoCartasBancarias { get; set; } = null!;
        public virtual DbSet<TipoEmail> TipoEmails { get; set; } = null!;
        public virtual DbSet<TipoEmailDato> TipoEmailDatos { get; set; } = null!;
        public virtual DbSet<TipoEmailMaestro> TipoEmailMaestros { get; set; } = null!;
        public virtual DbSet<TipoEtiquetum> TipoEtiqueta { get; set; } = null!;
        public virtual DbSet<TipoFacturaRestriccione> TipoFacturaRestricciones { get; set; } = null!;
        public virtual DbSet<TipoIdentificacion> TipoIdentificacions { get; set; } = null!;
        public virtual DbSet<TipoImpuesto> TipoImpuestos { get; set; } = null!;
        public virtual DbSet<TipoMaestro> TipoMaestros { get; set; } = null!;
        public virtual DbSet<TipoMaestroCampo> TipoMaestroCampos { get; set; } = null!;
        public virtual DbSet<TipoMaestroEstructuraControl> TipoMaestroEstructuraControls { get; set; } = null!;
        public virtual DbSet<TipoNotaDbcr> TipoNotaDbcrs { get; set; } = null!;
        public virtual DbSet<TipoOperacion> TipoOperacions { get; set; } = null!;
        public virtual DbSet<Tipocliente> Tipoclientes { get; set; } = null!;
        public virtual DbSet<Tipodcto> Tipodctos { get; set; } = null!;
        public virtual DbSet<Tipofact> Tipofacts { get; set; } = null!;
        public virtual DbSet<TiposArchivosAdjunto> TiposArchivosAdjuntos { get; set; } = null!;
        public virtual DbSet<TiposDeEmpresa> TiposDeEmpresas { get; set; } = null!;
        public virtual DbSet<Transac> Transacs { get; set; } = null!;
        public virtual DbSet<TransacAdicionale> TransacAdicionales { get; set; } = null!;
        public virtual DbSet<TransacBr> TransacBrs { get; set; } = null!;
        public virtual DbSet<TransacConciliacion> TransacConciliacions { get; set; } = null!;
        public virtual DbSet<TransacConciliacionCabecera> TransacConciliacionCabeceras { get; set; } = null!;
        public virtual DbSet<TransacConciliacionCabeceraRev> TransacConciliacionCabeceraRevs { get; set; } = null!;
        public virtual DbSet<TransacDatosFacturaFinanciero> TransacDatosFacturaFinancieros { get; set; } = null!;
        public virtual DbSet<TransacGeneraLog> TransacGeneraLogs { get; set; } = null!;
        public virtual DbSet<TransacInsertar> TransacInsertars { get; set; } = null!;
        public virtual DbSet<TransacInsertarAgrupado> TransacInsertarAgrupados { get; set; } = null!;
        public virtual DbSet<TransacPreparacion> TransacPreparacions { get; set; } = null!;
        public virtual DbSet<TransacProcesado> TransacProcesados { get; set; } = null!;
        public virtual DbSet<TransacTemp> TransacTemps { get; set; } = null!;
        public virtual DbSet<TransacTerceroDetallado> TransacTerceroDetallados { get; set; } = null!;
        public virtual DbSet<Transpresu> Transpresus { get; set; } = null!;
        public virtual DbSet<Transuni> Transunis { get; set; } = null!;
        public virtual DbSet<TregAutorizaCodigo> TregAutorizaCodigos { get; set; } = null!;
        public virtual DbSet<TsunatCompra> TsunatCompras { get; set; } = null!;
        public virtual DbSet<TsunatComprasLog> TsunatComprasLogs { get; set; } = null!;
        public virtual DbSet<TsunatVenta> TsunatVentas { get; set; } = null!;
        public virtual DbSet<TsunatVentasLog> TsunatVentasLogs { get; set; } = null!;
        public virtual DbSet<Ubicaciongeografica> Ubicaciongeograficas { get; set; } = null!;
        public virtual DbSet<UnidadImpTributarium> UnidadImpTributaria { get; set; } = null!;
        public virtual DbSet<Usuario> Usuarios { get; set; } = null!;
        public virtual DbSet<Usuario1> Usuarios1 { get; set; } = null!;
        public virtual DbSet<UsuarioAcceso> UsuarioAccesos { get; set; } = null!;
        public virtual DbSet<UsuarioLibroDefault> UsuarioLibroDefaults { get; set; } = null!;
        public virtual DbSet<UsuarioOtrasOpcione> UsuarioOtrasOpciones { get; set; } = null!;
        public virtual DbSet<UsuariosBu> UsuariosBus { get; set; } = null!;
        public virtual DbSet<UsuariosEmail> UsuariosEmails { get; set; } = null!;
        public virtual DbSet<UsuariosLibro> UsuariosLibros { get; set; } = null!;
        public virtual DbSet<UsuariosModificaFecha> UsuariosModificaFechas { get; set; } = null!;
        public virtual DbSet<UsuariosPermisoDcto> UsuariosPermisoDctos { get; set; } = null!;
        public virtual DbSet<UsuariosSesione> UsuariosSesiones { get; set; } = null!;
        public virtual DbSet<VMpgOppcuota> VMpgOppcuotas { get; set; } = null!;
        public virtual DbSet<Vale> Vales { get; set; } = null!;
        public virtual DbSet<Valera> Valeras { get; set; } = null!;
        public virtual DbSet<ValerasConsecutivo> ValerasConsecutivos { get; set; } = null!;
        public virtual DbSet<ValerasErrore> ValerasErrores { get; set; } = null!;
        public virtual DbSet<ValerasFpfactura> ValerasFpfacturas { get; set; } = null!;
        public virtual DbSet<ValerasPrefijo> ValerasPrefijos { get; set; } = null!;
        public virtual DbSet<ValesLog> ValesLogs { get; set; } = null!;
        public virtual DbSet<VariableBuscadorGenerico> VariableBuscadorGenericos { get; set; } = null!;
        public virtual DbSet<VariableBuscadorGenericoDato> VariableBuscadorGenericoDatos { get; set; } = null!;
        public virtual DbSet<VariableDatosConstante> VariableDatosConstantes { get; set; } = null!;
        public virtual DbSet<VariableDatosMaestro> VariableDatosMaestros { get; set; } = null!;
        public virtual DbSet<VariableDatosMaestroPeriodo> VariableDatosMaestroPeriodos { get; set; } = null!;
        public virtual DbSet<VariableDatosTransaccion> VariableDatosTransaccions { get; set; } = null!;
        public virtual DbSet<VariableDefinicion> VariableDefinicions { get; set; } = null!;
        public virtual DbSet<VariableDefinicionFuncione> VariableDefinicionFunciones { get; set; } = null!;
        public virtual DbSet<VariableDefinicionMaestro> VariableDefinicionMaestros { get; set; } = null!;
        public virtual DbSet<VariableEstructuraControl> VariableEstructuraControls { get; set; } = null!;
        public virtual DbSet<VariableEstructuraVentana> VariableEstructuraVentanas { get; set; } = null!;
        public virtual DbSet<VariableMaestro> VariableMaestros { get; set; } = null!;
        public virtual DbSet<VariableRole> VariableRoles { get; set; } = null!;
        public virtual DbSet<VariableRollOperacion> VariableRollOperacions { get; set; } = null!;
        public virtual DbSet<VariableTipoTransaccion> VariableTipoTransaccions { get; set; } = null!;
        public virtual DbSet<VariableTipoVariable> VariableTipoVariables { get; set; } = null!;
        public virtual DbSet<VariableUsuarioAcceso> VariableUsuarioAccesos { get; set; } = null!;
        public virtual DbSet<VariablesEstadistica> VariablesEstadisticas { get; set; } = null!;
        public virtual DbSet<VfacturasProgramacion> VfacturasProgramacions { get; set; } = null!;
        public virtual DbSet<VisEscenariosDocumentosLinea> VisEscenariosDocumentosLineas { get; set; } = null!;
        public virtual DbSet<VisEscenariosMovimiento> VisEscenariosMovimientos { get; set; } = null!;
        public virtual DbSet<VtransacXa> VtransacXas { get; set; } = null!;
        public virtual DbSet<VwAsignacionArchivoFisicoDocumento> VwAsignacionArchivoFisicoDocumentos { get; set; } = null!;
        public virtual DbSet<VwBienesServicio> VwBienesServicios { get; set; } = null!;
        public virtual DbSet<VwFacturasCliente> VwFacturasClientes { get; set; } = null!;
        public virtual DbSet<VwFacturasComprasContabilidad> VwFacturasComprasContabilidads { get; set; } = null!;
        public virtual DbSet<VwFacturasVentasContabilidad> VwFacturasVentasContabilidads { get; set; } = null!;
        public virtual DbSet<VwFinancierasPlanesDePago> VwFinancierasPlanesDePagos { get; set; } = null!;
        public virtual DbSet<VwFinancierasPlanesDePagoTodo> VwFinancierasPlanesDePagoTodos { get; set; } = null!;
        public virtual DbSet<VwLibroInventarioContabilidad> VwLibroInventarioContabilidads { get; set; } = null!;
        public virtual DbSet<VwMovimientoCajaBanco> VwMovimientoCajaBancos { get; set; } = null!;
        public virtual DbSet<VwMovimientoEgreso> VwMovimientoEgresos { get; set; } = null!;
        public virtual DbSet<VwMovimientoGasto> VwMovimientoGastos { get; set; } = null!;
        public virtual DbSet<VwMovimientoIngreso> VwMovimientoIngresos { get; set; } = null!;
        public virtual DbSet<VwMovimientoReciboCaja> VwMovimientoReciboCajas { get; set; } = null!;
        public virtual DbSet<VwQuery> VwQueries { get; set; } = null!;
        public virtual DbSet<VwSeccion> VwSeccions { get; set; } = null!;
        public virtual DbSet<VwTransac> VwTransacs { get; set; } = null!;
        public virtual DbSet<VwTransacRpt> VwTransacRpts { get; set; } = null!;
        public virtual DbSet<VwTransaccionContable> VwTransaccionContables { get; set; } = null!;
        public virtual DbSet<WsgContabilidad> WsgContabilidads { get; set; } = null!;
        public virtual DbSet<ZcConsolidadoFactura> ZcConsolidadoFacturas { get; set; } = null!;
        public virtual DbSet<ZcConsolidadoFacturasDetalle> ZcConsolidadoFacturasDetalles { get; set; } = null!;
        public virtual DbSet<ZeusArchivoPlano> ZeusArchivoPlanos { get; set; } = null!;
        public virtual DbSet<ZeusContabilidadVersione> ZeusContabilidadVersiones { get; set; } = null!;
        public virtual DbSet<ZeusDatosAplicacion> ZeusDatosAplicacions { get; set; } = null!;
        public virtual DbSet<ZeusExcelConfFuncUsuario> ZeusExcelConfFuncUsuarios { get; set; } = null!;
        public virtual DbSet<ZeusExcelConfUsuario> ZeusExcelConfUsuarios { get; set; } = null!;
        public virtual DbSet<ZeusExcelInfodesign> ZeusExcelInfodesigns { get; set; } = null!;
        public virtual DbSet<ZeusExcelInfodesignPerfil> ZeusExcelInfodesignPerfils { get; set; } = null!;
        public virtual DbSet<ZeusExcelInfodesignRemoto> ZeusExcelInfodesignRemotos { get; set; } = null!;
        public virtual DbSet<ZeusExcelInfodesignUsuario> ZeusExcelInfodesignUsuarios { get; set; } = null!;
        public virtual DbSet<ZeusExcelLog> ZeusExcelLogs { get; set; } = null!;
        public virtual DbSet<ZeusExcelPlantilla> ZeusExcelPlantillas { get; set; } = null!;
        public virtual DbSet<ZeusExcelPlantillasAcceso> ZeusExcelPlantillasAccesos { get; set; } = null!;
        public virtual DbSet<ZeusExcelSentencia> ZeusExcelSentencias { get; set; } = null!;
        public virtual DbSet<ZeusExcelSentenciaCampo> ZeusExcelSentenciaCampos { get; set; } = null!;
        public virtual DbSet<ZeusExcelSentenciaParametro> ZeusExcelSentenciaParametros { get; set; } = null!;
        public virtual DbSet<ZeusExcelSincronizacionCuenta> ZeusExcelSincronizacionCuentas { get; set; } = null!;
        public virtual DbSet<ZeusExcelSincronizacionUsuario> ZeusExcelSincronizacionUsuarios { get; set; } = null!;
        public virtual DbSet<ZeusExcelSqlWAccesoQuery> ZeusExcelSqlWAccesoQueries { get; set; } = null!;
        public virtual DbSet<ZeusExcelSqlWCondicione> ZeusExcelSqlWCondiciones { get; set; } = null!;
        public virtual DbSet<ZeusExcelSqlWCriterio> ZeusExcelSqlWCriterios { get; set; } = null!;
        public virtual DbSet<ZeusExcelSqlWPermisosEspeciale> ZeusExcelSqlWPermisosEspeciales { get; set; } = null!;
        public virtual DbSet<ZeusExcelSqlWQuery> ZeusExcelSqlWQueries { get; set; } = null!;
        public virtual DbSet<ZeusExcelVersion> ZeusExcelVersions { get; set; } = null!;
        public virtual DbSet<ZeusExcelVisorRemoto> ZeusExcelVisorRemotos { get; set; } = null!;
        public virtual DbSet<ZeusFormulacionFuncione> ZeusFormulacionFunciones { get; set; } = null!;
        public virtual DbSet<ZeusFormulacionFuncionesGrupo> ZeusFormulacionFuncionesGrupos { get; set; } = null!;
        public virtual DbSet<ZeusFormulacionFuncionesVb> ZeusFormulacionFuncionesVbs { get; set; } = null!;
        public virtual DbSet<ZeusFormulacionGrupo> ZeusFormulacionGrupos { get; set; } = null!;
        public virtual DbSet<ZeusFormulacionPropiedade> ZeusFormulacionPropiedades { get; set; } = null!;
        public virtual DbSet<ZeusFormulacionPropiedadesGrupo> ZeusFormulacionPropiedadesGrupos { get; set; } = null!;
        public virtual DbSet<ZeusFwBody> ZeusFwBodies { get; set; } = null!;
        public virtual DbSet<ZeusFwBusquedaParametro> ZeusFwBusquedaParametros { get; set; } = null!;
        public virtual DbSet<ZeusFwBusquedum> ZeusFwBusqueda { get; set; } = null!;
        public virtual DbSet<ZeusFwEmailConfig> ZeusFwEmailConfigs { get; set; } = null!;
        public virtual DbSet<ZeusFwEmailqueue> ZeusFwEmailqueues { get; set; } = null!;
        public virtual DbSet<ZeusFwEmailqueueLog> ZeusFwEmailqueueLogs { get; set; } = null!;
        public virtual DbSet<ZeusFwErrore> ZeusFwErrores { get; set; } = null!;
        public virtual DbSet<ZeusFwQueryPropiedadesParametro> ZeusFwQueryPropiedadesParametros { get; set; } = null!;
        public virtual DbSet<ZeusFwQueryPropiedadesStoredProcedure> ZeusFwQueryPropiedadesStoredProcedures { get; set; } = null!;
        public virtual DbSet<ZeusFwReporte> ZeusFwReportes { get; set; } = null!;
        public virtual DbSet<ZeusFwReportesLog> ZeusFwReportesLogs { get; set; } = null!;
        public virtual DbSet<ZeusFwUploadIndex> ZeusFwUploadIndices { get; set; } = null!;
        public virtual DbSet<ZeusFwUploadIndexLog> ZeusFwUploadIndexLogs { get; set; } = null!;
        public virtual DbSet<ZeusHotFix> ZeusHotFixes { get; set; } = null!;
        public virtual DbSet<ZeusImportarArchivo> ZeusImportarArchivos { get; set; } = null!;
        public virtual DbSet<ZeusLog> ZeusLogs { get; set; } = null!;
        public virtual DbSet<ZeusMqConfiguracion> ZeusMqConfiguracions { get; set; } = null!;
        public virtual DbSet<ZeusMqEnviado> ZeusMqEnviados { get; set; } = null!;
        public virtual DbSet<ZeusMqRecibido> ZeusMqRecibidos { get; set; } = null!;
        public virtual DbSet<ZeusMqServidor> ZeusMqServidors { get; set; } = null!;
        public virtual DbSet<ZeusMySatComEcCodPorcImp> ZeusMySatComEcCodPorcImps { get; set; } = null!;
        public virtual DbSet<ZeusParametrosIniciale> ZeusParametrosIniciales { get; set; } = null!;
        public virtual DbSet<ZeusPararActualizacionSaldo> ZeusPararActualizacionSaldos { get; set; } = null!;
        public virtual DbSet<ZeusVersion> ZeusVersions { get; set; } = null!;
        public virtual DbSet<ZeusZeusFwBusquedaParametro> ZeusZeusFwBusquedaParametros { get; set; } = null!;
        public virtual DbSet<ZeusZeusFwBusquedum> ZeusZeusFwBusqueda { get; set; } = null!;
        public virtual DbSet<Zeusmcalog> Zeusmcalogs { get; set; } = null!;
        public virtual DbSet<ZiInterfaceDato> ZiInterfaceDatos { get; set; } = null!;
        public virtual DbSet<ZiInterfaceDatosTemp> ZiInterfaceDatosTemps { get; set; } = null!;
        public virtual DbSet<ZiNomIntegraCco> ZiNomIntegraCcos { get; set; } = null!;
        public virtual DbSet<ZiNomIntegraImpArchivo> ZiNomIntegraImpArchivos { get; set; } = null!;
        public virtual DbSet<ZimSetting> ZimSettings { get; set; } = null!;
        public virtual DbSet<ZoRcprontoPagoEspecifico> ZoRcprontoPagoEspecificos { get; set; } = null!;
        public virtual DbSet<Zomonedasequivalencium> Zomonedasequivalencia { get; set; } = null!;
        public virtual DbSet<ZwsFacturarBody> ZwsFacturarBodies { get; set; } = null!;
        public virtual DbSet<ZwsFacturarCuota> ZwsFacturarCuotas { get; set; } = null!;
        public virtual DbSet<ZwsFacturarHead> ZwsFacturarHeads { get; set; } = null!;
        public virtual DbSet<ZwsFacturarIniciar> ZwsFacturarIniciars { get; set; } = null!;
        public virtual DbSet<ZwsFacturarPago> ZwsFacturarPagos { get; set; } = null!;
        public virtual DbSet<ZwsLog> ZwsLogs { get; set; } = null!;
        public virtual DbSet<ZwsMpgNomina> ZwsMpgNominas { get; set; } = null!;

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured)
            {
#warning To protect potentially sensitive information in your connection string, you should move it out of source code. You can avoid scaffolding the connection string by using the Name= syntax to read it from configuration - see https://go.microsoft.com/fwlink/?linkid=2131148. For more guidance on storing connection strings, see http://go.microsoft.com/fwlink/?LinkId=723263.
                optionsBuilder.UseSqlServer("Server= 192.168.0.85; Database= Contabilidad; User ID= Admin; pwd=102024;");
            }
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Aa>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("AA");

                entity.Property(e => e.Fact)
                    .HasMaxLength(50)
                    .HasColumnName("FACT");

                entity.Property(e => e.Fecha)
                    .HasMaxLength(50)
                    .HasColumnName("FECHA");
            });

            modelBuilder.Entity<AdministrarFuentesPreContabilizacion>(entity =>
            {
                entity.HasKey(e => e.Iden);

                entity.ToTable("AdministrarFuentes_PreContabilizacion");

                entity.Property(e => e.Iden)
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Fuente)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.IdenPersonalAutorizacion).HasColumnName("Iden_PersonalAutorizacion");
            });

            modelBuilder.Entity<AmbitosFiscalesUsuario>(entity =>
            {
                entity.HasKey(e => e.Login)
                    .IsClustered(false);

                entity.Property(e => e.Login)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.CodigoUbicacion)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.IdenAmbitosfiscalesusuarios)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_ambitosfiscalesusuarios");

                entity.HasOne(d => d.LoginNavigation)
                    .WithOne(p => p.AmbitosFiscalesUsuario)
                    .HasForeignKey<AmbitosFiscalesUsuario>(d => d.Login)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_AmbitosFiscalesUsuarios_USUARIOS");
            });

            modelBuilder.Entity<AplicacionesFuncione>(entity =>
            {
                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Descripcion)
                    .HasMaxLength(8000)
                    .IsUnicode(false);

                entity.Property(e => e.Funcion)
                    .HasMaxLength(8000)
                    .IsUnicode(false);

                entity.Property(e => e.IdAplicacionesZeus).HasColumnName("Id_AplicacionesZeus");

                entity.Property(e => e.Nombre)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Tipo).HasDefaultValueSql("((1))");
            });

            modelBuilder.Entity<AplicacionesFuncionesVariable>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.Campo)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.IdenAplicacionesfuncionesvariables)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_aplicacionesfuncionesvariables");

                entity.Property(e => e.Variable)
                    .HasMaxLength(500)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<AplicacionesOrigen>(entity =>
            {
                entity.ToTable("AplicacionesOrigen");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Base)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Clave)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.IdAplicacionesZeus).HasColumnName("Id_AplicacionesZeus");

                entity.Property(e => e.NombreMostrar)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.Servidor)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Usuario)
                    .HasMaxLength(500)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<AplicacionesZeu>(entity =>
            {
                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.Property(e => e.BlBack).HasColumnName("bl_back");

                entity.Property(e => e.BlFront).HasColumnName("bl_front");

                entity.Property(e => e.Habilitar).HasDefaultValueSql("((1))");

                entity.Property(e => e.IdenAplicacioneszeus)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_aplicacioneszeus");

                entity.Property(e => e.Nombre)
                    .HasMaxLength(30)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<AppChat>(entity =>
            {
                entity.ToTable("App_Chat");

                entity.Property(e => e.DateMsg)
                    .HasColumnType("datetime")
                    .HasColumnName("Date_Msg");

                entity.Property(e => e.DateReaded)
                    .HasColumnType("datetime")
                    .HasColumnName("Date_Readed");

                entity.Property(e => e.IdGroupTypeChat).HasColumnName("Id_Group_Type_Chat");

                entity.Property(e => e.IdProfileTypeChat)
                    .HasMaxLength(900)
                    .HasColumnName("Id_Profile_Type_Chat");

                entity.Property(e => e.IdTypeChat)
                    .HasMaxLength(900)
                    .HasColumnName("Id_Type_Chat");

                entity.Property(e => e.IdUserEmiter)
                    .HasMaxLength(900)
                    .HasColumnName("Id_User_Emiter");

                entity.Property(e => e.IdUserReceiver)
                    .HasMaxLength(900)
                    .HasColumnName("Id_User_Receiver");

                entity.Property(e => e.IsReaded).HasColumnName("Is_Readed");

                entity.Property(e => e.IsVisible).HasColumnName("Is_Visible");

                entity.Property(e => e.Message).IsUnicode(false);

                entity.Property(e => e.TypeChat)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("Type_Chat");
            });

            modelBuilder.Entity<AppChatGroup>(entity =>
            {
                entity.ToTable("App_Chat_Groups");

                entity.Property(e => e.Code)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DateCreation)
                    .HasColumnType("datetime")
                    .HasColumnName("Date_Creation");

                entity.Property(e => e.IdUserCreator)
                    .HasMaxLength(900)
                    .HasColumnName("Id_User_Creator");

                entity.Property(e => e.IsActive).HasColumnName("Is_Active");

                entity.Property(e => e.Name)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.PathImgGroup)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("Path_Img_Group");
            });

            modelBuilder.Entity<AppChatGroupsUser>(entity =>
            {
                entity.ToTable("App_Chat_Groups_Users");

                entity.Property(e => e.IdChatGroup).HasColumnName("Id_Chat_Group");

                entity.Property(e => e.IdUser)
                    .HasMaxLength(900)
                    .HasColumnName("Id_User");
            });

            modelBuilder.Entity<AppDataType>(entity =>
            {
                entity.ToTable("App_Data_Types");

                entity.Property(e => e.Name)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Presentation)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Regex)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.TypeDescription)
                    .HasMaxLength(1000)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<AppDesignVariable>(entity =>
            {
                entity.ToTable("App_Design_Variables");

                entity.Property(e => e.ContainerName)
                    .HasMaxLength(256)
                    .IsUnicode(false)
                    .HasColumnName("Container_Name");

                entity.Property(e => e.DisplaceRight).HasColumnName("Displace_Right");

                entity.Property(e => e.GroupName)
                    .HasMaxLength(256)
                    .IsUnicode(false)
                    .HasColumnName("Group_Name");

                entity.Property(e => e.IdEntity)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("Id_Entity");

                entity.Property(e => e.IdEntityType).HasColumnName("Id_EntityType");

                entity.Property(e => e.IdVariable)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("Id_Variable");

                entity.Property(e => e.IsFieldMultiline)
                    .HasColumnName("Is_Field_Multiline")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.NumRowsMultiline).HasColumnName("Num_Rows_Multiline");

                entity.Property(e => e.OrderNumber).HasColumnName("Order_Number");

                entity.Property(e => e.SizeBox).HasColumnName("Size_Box");

                entity.Property(e => e.SizeBoxMobile).HasColumnName("Size_Box_Mobile");

                entity.Property(e => e.Title)
                    .HasMaxLength(256)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<AppDesignVariablesItem>(entity =>
            {
                entity.ToTable("App_Design_Variables_Items");

                entity.Property(e => e.ContainerName)
                    .HasMaxLength(256)
                    .IsUnicode(false)
                    .HasColumnName("Container_Name");

                entity.Property(e => e.Description)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.GroupName)
                    .HasMaxLength(256)
                    .IsUnicode(false)
                    .HasColumnName("Group_Name");

                entity.Property(e => e.IdEntity).HasColumnName("Id_Entity");

                entity.Property(e => e.IdEntityType).HasColumnName("Id_EntityType");

                entity.Property(e => e.Type)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<AppEntitiesField>(entity =>
            {
                entity.ToTable("App_Entities_Fields");

                entity.Property(e => e.CodeRecord)
                    .IsUnicode(false)
                    .HasColumnName("Code_Record");

                entity.Property(e => e.CreateFuncCode)
                    .HasMaxLength(256)
                    .HasColumnName("Create_Func_Code");

                entity.Property(e => e.FieldName)
                    .HasMaxLength(256)
                    .IsUnicode(false)
                    .HasColumnName("Field_Name");

                entity.Property(e => e.FormulaFormat)
                    .IsUnicode(false)
                    .HasColumnName("Formula_Format");

                entity.Property(e => e.FormulaSql).HasColumnName("Formula_Sql");

                entity.Property(e => e.FormulaVb)
                    .IsUnicode(false)
                    .HasColumnName("Formula_Vb");

                entity.Property(e => e.IdEntity)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("Id_Entity");

                entity.Property(e => e.PresentationName)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("Presentation_Name");
            });

            modelBuilder.Entity<AppEntitiesProperty>(entity =>
            {
                entity.ToTable("App_Entities_Property");

                entity.Property(e => e.FieldName)
                    .HasMaxLength(512)
                    .IsUnicode(false)
                    .HasColumnName("Field_Name");

                entity.Property(e => e.IdEntity).HasColumnName("Id_Entity");

                entity.Property(e => e.PresentationName)
                    .HasMaxLength(1024)
                    .IsUnicode(false)
                    .HasColumnName("Presentation_Name");
            });

            modelBuilder.Entity<AppEntitiesSelector>(entity =>
            {
                entity.ToTable("App_Entities_Selector");

                entity.Property(e => e.IdEntityType).HasColumnName("Id_EntityType");

                entity.Property(e => e.Name)
                    .HasMaxLength(80)
                    .IsUnicode(false);

                entity.Property(e => e.SqlSelect).IsUnicode(false);
            });

            modelBuilder.Entity<AppEntitiesType>(entity =>
            {
                entity.ToTable("App_Entities_Types");

                entity.Property(e => e.Description)
                    .HasMaxLength(256)
                    .IsUnicode(false);

                entity.Property(e => e.Name)
                    .HasMaxLength(30)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<AppEntitiesVariable>(entity =>
            {
                entity.ToTable("App_Entities_Variables");

                entity.Property(e => e.Conditions)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.Formula)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.IdEntity).HasColumnName("Id_Entity");

                entity.Property(e => e.IdVariable).HasColumnName("Id_Variable");

                entity.HasOne(d => d.IdEntityNavigation)
                    .WithMany(p => p.AppEntitiesVariables)
                    .HasForeignKey(d => d.IdEntity)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_App_Entities_Variables_App_Entities");
            });

            modelBuilder.Entity<AppEntity>(entity =>
            {
                entity.ToTable("App_Entities");

                entity.Property(e => e.CodeRecord)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.FieldSearch)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.IdEntityType).HasColumnName("Id_EntityType");

                entity.Property(e => e.MasterDescription)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.MasterTable)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Name)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<AppFormulationsEntity>(entity =>
            {
                entity.ToTable("App_Formulations_Entity");

                entity.Property(e => e.DescriptionForm)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.FormulaSql).IsUnicode(false);

                entity.Property(e => e.FormulaZeusScript).IsUnicode(false);

                entity.Property(e => e.IdEntity).HasColumnName("Id_Entity");

                entity.Property(e => e.Name)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<AppFormulationsItem>(entity =>
            {
                entity.ToTable("App_Formulations_Item");

                entity.Property(e => e.CategoryPath)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.DefaultValue).HasColumnType("sql_variant");

                entity.Property(e => e.FormDescription)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.FormParameters)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.IdFormulationType).HasColumnName("Id_FormulationType");

                entity.Property(e => e.Name)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.NameNormalized)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NamePresentation)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Size).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.SqlScript).IsUnicode(false);

                entity.Property(e => e.TypeData)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ZeusScript)
                    .HasMaxLength(500)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<AppFormulationsType>(entity =>
            {
                entity.ToTable("App_Formulations_Type");

                entity.Property(e => e.Name)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<AppLogEvent>(entity =>
            {
                entity.HasKey(e => e.Code)
                    .HasName("PK_App_Log_Events_1");

                entity.ToTable("App_Log_Events");

                entity.Property(e => e.Code)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Action)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Aplication)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.CodeTypeEvent)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("Code_Type_Event");

                entity.Property(e => e.Description)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Entity)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Name)
                    .HasMaxLength(150)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<AppLogMessage>(entity =>
            {
                entity.ToTable("App_Log_Messages");

                entity.Property(e => e.IdUserFrom)
                    .HasMaxLength(900)
                    .HasColumnName("Id_User_From");

                entity.Property(e => e.IdUserTo)
                    .HasMaxLength(900)
                    .IsUnicode(false)
                    .HasColumnName("Id_User_To");

                entity.Property(e => e.IsRead).HasColumnName("Is_Read");

                entity.Property(e => e.ListReceiversTo)
                    .IsUnicode(false)
                    .HasColumnName("List_Receivers_To");

                entity.Property(e => e.Message).IsUnicode(false);

                entity.Property(e => e.NameUserFrom)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("Name_User_From");

                entity.Property(e => e.PathActiveMq)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("Path_Active_Mq");

                entity.Property(e => e.ReadingDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Reading_Date");

                entity.Property(e => e.ShippingDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Shipping_Date")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.TypeReceiver)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Type_Receiver");
            });

            modelBuilder.Entity<AppLogTypeEvent>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("App_Log_Type_Events");

                entity.Property(e => e.Code)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Description)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Name)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<AppLogZeu>(entity =>
            {
                entity.ToTable("App_Log_Zeus");

                entity.Property(e => e.CodeEvent)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("Code_Event");

                entity.Property(e => e.Description).IsUnicode(false);

                entity.Property(e => e.DescriptionHtml)
                    .IsUnicode(false)
                    .HasColumnName("DescriptionHTML");

                entity.Property(e => e.DescriptionRtf)
                    .IsUnicode(false)
                    .HasColumnName("DescriptionRTF");

                entity.Property(e => e.Host)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.IdUser)
                    .HasMaxLength(900)
                    .HasColumnName("Id_User");

                entity.Property(e => e.Login)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<AppMenu>(entity =>
            {
                entity.ToTable("App_Menus");

                entity.Property(e => e.Action)
                    .HasMaxLength(256)
                    .IsUnicode(false);

                entity.Property(e => e.Controller)
                    .HasMaxLength(256)
                    .IsUnicode(false);

                entity.Property(e => e.DescriptionHelp)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.IdMenuParent).HasColumnName("Id_MenuParent");

                entity.Property(e => e.IsActive)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Name)
                    .HasMaxLength(256)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<AppMovExterno>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.Aplicacion)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CodigoApp)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Iden).ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<AppParameter>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("App_Parameters");

                entity.Property(e => e.Code)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CodeHelp)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("Code_Help");

                entity.Property(e => e.ConditionActive)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("Condition_Active");

                entity.Property(e => e.ConditionSave)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("Condition_Save");

                entity.Property(e => e.DateUpdate)
                    .HasColumnType("datetime")
                    .HasColumnName("Date_Update");

                entity.Property(e => e.Descripcion)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.Description)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Detail)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.Id).ValueGeneratedOnAdd();

                entity.Property(e => e.IdDataType).HasColumnName("Id_Data_Type");

                entity.Property(e => e.IdUserSave)
                    .HasMaxLength(900)
                    .IsUnicode(false)
                    .HasColumnName("Id_UserSave");

                entity.Property(e => e.IsActive).HasColumnName("Is_Active");

                entity.Property(e => e.IsEditable).HasColumnName("Is_Editable");

                entity.Property(e => e.IsParent).HasColumnName("Is_Parent");

                entity.Property(e => e.IsPassword).HasColumnName("Is_Password");

                entity.Property(e => e.IsRequired).HasColumnName("Is_Required");

                entity.Property(e => e.IsVisible).HasColumnName("Is_Visible");

                entity.Property(e => e.NumOrder).HasColumnName("Num_Order");

                entity.Property(e => e.Pariente)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.PathParentCode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Path_Parent_Code");

                entity.Property(e => e.Placeholder)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Prec).HasColumnType("numeric(18, 9)");

                entity.Property(e => e.Tipo)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.ValueDefault)
                    .IsUnicode(false)
                    .HasColumnName("Value_Default");

                entity.Property(e => e.ValueSelect)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("Value_Select");

                entity.Property(e => e.ValueStr)
                    .HasMaxLength(8000)
                    .IsUnicode(false)
                    .HasColumnName("Value_Str");

                entity.Property(e => e.VarLength).HasColumnType("numeric(18, 9)");
            });

            modelBuilder.Entity<AppSearcher>(entity =>
            {
                entity.ToTable("App_Searcher");

                entity.Property(e => e.Code)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.ColumnsPercentWidth)
                    .IsUnicode(false)
                    .HasColumnName("Columns_Percent_Width");

                entity.Property(e => e.ColumnsShow)
                    .IsUnicode(false)
                    .HasColumnName("Columns_Show");

                entity.Property(e => e.CurrentPageDefault).HasColumnName("Current_Page_Default");

                entity.Property(e => e.FieldRelVariablesValue)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("Field_Rel_VariablesValue");

                entity.Property(e => e.IndexColCode).HasColumnName("Index_Col_Code");

                entity.Property(e => e.Name)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.NameColCode)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("Name_Col_Code");

                entity.Property(e => e.RecordsByPageDefault).HasColumnName("Records_ByPage_Default");

                entity.Property(e => e.SqlChoice)
                    .IsUnicode(false)
                    .HasColumnName("Sql_Choice");

                entity.Property(e => e.SqlPredicate)
                    .IsUnicode(false)
                    .HasColumnName("Sql_Predicate");

                entity.Property(e => e.SqlSelect)
                    .IsUnicode(false)
                    .HasColumnName("Sql_Select");
            });

            modelBuilder.Entity<AppSearcherField>(entity =>
            {
                entity.ToTable("App_Searcher_Fields");

                entity.Property(e => e.Description)
                    .HasMaxLength(250)
                    .IsFixedLength();

                entity.Property(e => e.FieldName)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Field_Name");

                entity.Property(e => e.IdBuscador).HasColumnName("Id_Buscador");

                entity.Property(e => e.IdDataType).HasColumnName("Id_DataType");

                entity.Property(e => e.OrderShow).HasDefaultValueSql("((0))");

                entity.HasOne(d => d.IdBuscadorNavigation)
                    .WithMany(p => p.AppSearcherFields)
                    .HasForeignKey(d => d.IdBuscador)
                    .HasConstraintName("FK_App_Searcher_Fields_App_Searcher");
            });

            modelBuilder.Entity<AppSearcherOperator>(entity =>
            {
                entity.ToTable("App_Searcher_Operators");

                entity.Property(e => e.Code)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Name)
                    .HasMaxLength(250)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<AppVariable>(entity =>
            {
                entity.ToTable("App_Variables");

                entity.Property(e => e.CreationDate).HasColumnType("datetime");

                entity.Property(e => e.DefaultFormula)
                    .HasMaxLength(5000)
                    .IsUnicode(false);

                entity.Property(e => e.DefaultvalueDatetime).HasColumnType("datetime");

                entity.Property(e => e.DefaultvalueNumeric).HasColumnType("numeric(18, 6)");

                entity.Property(e => e.DefaultvalueVarchar).IsUnicode(false);

                entity.Property(e => e.IdDataType).HasColumnName("Id_DataType");

                entity.Property(e => e.IdGroup).HasColumnName("Id_Group");

                entity.Property(e => e.IdHelpf4).HasColumnName("Id_Helpf4");

                entity.Property(e => e.IdTypeVar).HasColumnName("Id_TypeVar");

                entity.Property(e => e.IdUserCreator)
                    .HasMaxLength(900)
                    .HasColumnName("Id_UserCreator");

                entity.Property(e => e.IdUserLastupdate)
                    .HasMaxLength(900)
                    .HasColumnName("Id_UserLastupdate");

                entity.Property(e => e.LastUpdate).HasColumnType("datetime");

                entity.Property(e => e.Name)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.NormalizedName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.OrderFormulaVarGlobal).HasDefaultValueSql("((0))");

                entity.Property(e => e.Prec).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.VarDescription)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.VarLength).HasColumnType("numeric(18, 0)");
            });

            modelBuilder.Entity<AppVariablesGroup>(entity =>
            {
                entity.ToTable("App_Variables_Group");

                entity.Property(e => e.Name)
                    .HasMaxLength(30)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<AppVariablesListOption>(entity =>
            {
                entity.ToTable("App_Variables_List_Options");

                entity.Property(e => e.Code)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.DescText)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<AppVariablesType>(entity =>
            {
                entity.ToTable("App_Variables_Types");

                entity.Property(e => e.IdEntityType).HasColumnName("Id_EntityType");

                entity.Property(e => e.Name)
                    .HasMaxLength(30)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<AppVariablesValue>(entity =>
            {
                entity.ToTable("App_Variables_Value");

                entity.Property(e => e.CreationDate).HasColumnType("datetime");

                entity.Property(e => e.IdEntity).HasColumnName("Id_Entity");

                entity.Property(e => e.IdUserCreator)
                    .HasMaxLength(900)
                    .HasColumnName("Id_UserCreator");

                entity.Property(e => e.IdUserLastupdate)
                    .HasMaxLength(900)
                    .HasColumnName("Id_UserLastupdate");

                entity.Property(e => e.IdVariable).HasColumnName("Id_Variable");

                entity.Property(e => e.LastUpdate).HasColumnType("datetime");

                entity.Property(e => e.MasterRecordCode)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.ValueDateTime).HasColumnType("datetime");

                entity.Property(e => e.ValueNumeric).HasColumnType("numeric(18, 6)");

                entity.Property(e => e.ValueVarchar).IsUnicode(false);
            });

            modelBuilder.Entity<AppZeusLog>(entity =>
            {
                entity.ToTable("App_Zeus_Log");

                entity.Property(e => e.Date).HasColumnType("datetime");

                entity.Property(e => e.Description).IsUnicode(false);

                entity.Property(e => e.DescriptionHtml)
                    .IsUnicode(false)
                    .HasColumnName("DescriptionHTML");

                entity.Property(e => e.DescriptionRtf)
                    .IsUnicode(false)
                    .HasColumnName("DescriptionRTF");

                entity.Property(e => e.Event)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Host)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.IdUser)
                    .HasMaxLength(900)
                    .HasColumnName("Id_User");

                entity.Property(e => e.Login)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ArchivoAsobancariaTransaccione>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ArchivoAsobancaria_Transacciones");

                entity.Property(e => e.Autorizacion)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("AUTORIZACION");

                entity.Property(e => e.Bu)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.BuDoc)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.ClienteAnticipo)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Codpresu)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("CODPRESU")
                    .IsFixedLength();

                entity.Property(e => e.Fechafact)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("FECHAFACT");

                entity.Property(e => e.IdAplicacionesZeus)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Id_AplicacionesZeus");

                entity.Property(e => e.IdOrigenMovimiento)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Id_OrigenMovimiento");

                entity.Property(e => e.IdenArchivoasobancariaTransacciones)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_archivoasobancaria_transacciones");

                entity.Property(e => e.MontoMoneda)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.MostrarConsecutivo)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Ncf)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("NCF");

                entity.Property(e => e.NcfAutomatico).HasColumnName("NCF_Automatico");

                entity.Property(e => e.NcfModificado)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("NCF_Modificado");

                entity.Property(e => e.Nreserva)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("NRESERVA")
                    .IsFixedLength();

                entity.Property(e => e.Serie)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("SERIE");

                entity.Property(e => e.TasaCambio).HasColumnType("money");

                entity.Property(e => e.TasaCambioDoc).HasColumnType("money");

                entity.Property(e => e.Transaccionalidad)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Voucher)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Xanotra)
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .HasColumnName("XANOTRA")
                    .IsFixedLength();

                entity.Property(e => e.Xauxiaux)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("XAUXIAUX")
                    .IsFixedLength();

                entity.Property(e => e.Xauxiliar)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("XAUXILIAR")
                    .IsFixedLength();

                entity.Property(e => e.Xbanco)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("XBANCO")
                    .IsFixedLength();

                entity.Property(e => e.Xbaserete)
                    .HasColumnType("money")
                    .HasColumnName("XBASERETE");

                entity.Property(e => e.Xbenef)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("XBENEF");

                entity.Property(e => e.Xcbadcto)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("XCBADCTO")
                    .IsFixedLength();

                entity.Property(e => e.Xcenco)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("XCENCO")
                    .IsFixedLength();

                entity.Property(e => e.Xcliprv)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("XCLIPRV");

                entity.Property(e => e.Xcodicta)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("XCODICTA")
                    .IsFixedLength();

                entity.Property(e => e.Xconciltra)
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .HasColumnName("XCONCILTRA")
                    .IsFixedLength();

                entity.Property(e => e.Xdescdcto)
                    .HasMaxLength(120)
                    .IsUnicode(false)
                    .HasColumnName("XDESCDCTO")
                    .IsFixedLength();

                entity.Property(e => e.Xdescritra)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("XDESCRITRA")
                    .IsFixedLength();

                entity.Property(e => e.Xfechatra)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("XFECHATRA")
                    .IsFixedLength();

                entity.Property(e => e.Xidbanco)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("XIDBANCO")
                    .IsFixedLength();

                entity.Property(e => e.Xidcenco)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("XIDCENCO")
                    .IsFixedLength();

                entity.Property(e => e.Xidcliprv)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("XIDCLIPRV");

                entity.Property(e => e.Xidfuente)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("XIDFUENTE")
                    .IsFixedLength();

                entity.Property(e => e.Xiditem)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("XIDITEM")
                    .IsFixedLength();

                entity.Property(e => e.Xidplaza)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("XIDPLAZA")
                    .IsFixedLength();

                entity.Property(e => e.Xidtercero)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("XIDTERCERO");

                entity.Property(e => e.Xidunidad1)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("XIDUNIDAD1")
                    .IsFixedLength();

                entity.Property(e => e.Xidunidad2)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("XIDUNIDAD2")
                    .IsFixedLength();

                entity.Property(e => e.Xidunidad3)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("XIDUNIDAD3")
                    .IsFixedLength();

                entity.Property(e => e.Xidusuario)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("XIDUSUARIO");

                entity.Property(e => e.Xidvende)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("XIDVENDE")
                    .IsFixedLength();

                entity.Property(e => e.Xidzona)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("XIDZONA")
                    .IsFixedLength();

                entity.Property(e => e.Xindcpitra)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("XINDCPITRA")
                    .IsFixedLength();

                entity.Property(e => e.Xitem)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("XITEM")
                    .IsFixedLength();

                entity.Property(e => e.Xmontoletras)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("XMONTOLETRAS");

                entity.Property(e => e.Xnittra)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("XNITTRA");

                entity.Property(e => e.Xnuche)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("XNUCHE");

                entity.Property(e => e.Xnumdoctra)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("XNUMDOCTRA")
                    .IsFixedLength();

                entity.Property(e => e.Xnumefac)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("XNUMEFAC");

                entity.Property(e => e.Xporcrete)
                    .HasColumnType("money")
                    .HasColumnName("XPORCRETE");

                entity.Property(e => e.Xrefefac)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("XREFEFAC");

                entity.Property(e => e.Xstatustra)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("XSTATUSTRA")
                    .IsFixedLength();

                entity.Property(e => e.Xtipofac)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("XTIPOFAC")
                    .IsFixedLength();

                entity.Property(e => e.Xvalormoneda)
                    .HasColumnType("money")
                    .HasColumnName("XVALORMONEDA");

                entity.Property(e => e.Xvalortra)
                    .HasColumnType("money")
                    .HasColumnName("XVALORTRA");

                entity.Property(e => e.Xvcheq)
                    .HasColumnType("money")
                    .HasColumnName("XVCHEQ");

                entity.Property(e => e.Xvencefac)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("XVENCEFAC")
                    .IsFixedLength();

                entity.Property(e => e.Xvrunidad1)
                    .HasColumnType("money")
                    .HasColumnName("XVRUNIDAD1");

                entity.Property(e => e.Xvrunidad2)
                    .HasColumnType("money")
                    .HasColumnName("XVRUNIDAD2");

                entity.Property(e => e.Xvrunidad3)
                    .HasColumnType("money")
                    .HasColumnName("XVRUNIDAD3");
            });

            modelBuilder.Entity<ArchivoAsobancarium>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.Error)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Id).ValueGeneratedOnAdd();

                entity.Property(e => e.Registro)
                    .HasMaxLength(200)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ArchivoFisico>(entity =>
            {
                entity.HasKey(e => e.CodiArchivoFisico)
                    .HasName("PK_ARCHIVOFISICO");

                entity.ToTable("ArchivoFisico");

                entity.Property(e => e.CodiArchivoFisico)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.DepeArchivoFisico)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.DescArchivoFisico)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.FecarchivoFisico).HasColumnType("smalldatetime");

                entity.Property(e => e.IdenArchivofisico)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_archivofisico");

                entity.Property(e => e.NcdcarchivoFisico).HasColumnName("NCDCArchivoFisico");

                entity.Property(e => e.TipoArchivoFisico)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();
            });

            modelBuilder.Entity<ArchivoFisicoDocumento>(entity =>
            {
                entity.HasKey(e => e.Iden);

                entity.ToTable("ArchivoFisico_Documentos");

                entity.Property(e => e.CliPrv)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.CodigoArchivoFisico)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Cuenta)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Documento)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Fuente)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.NumeroFactura)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ReferenciaFactura)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.TipoFactura)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.VencimientoFactura)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.HasOne(d => d.CodigoArchivoFisicoNavigation)
                    .WithMany(p => p.ArchivoFisicoDocumentos)
                    .HasForeignKey(d => d.CodigoArchivoFisico)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ArchivoFisico_Documentos_ArchivoFisico");

                entity.HasOne(d => d.Document)
                    .WithMany(p => p.ArchivoFisicoDocumentos)
                    .HasForeignKey(d => new { d.Fuente, d.Documento })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ArchivoFisico_Documentos_DOCUMENT");
            });

            modelBuilder.Entity<ArchivoFisicoDocumentosLog>(entity =>
            {
                entity.HasKey(e => e.Iden);

                entity.ToTable("ArchivoFisico_DocumentosLog");

                entity.Property(e => e.Iden)
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Afactual)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("AFActual");

                entity.Property(e => e.Afanterior)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("AFAnterior");

                entity.Property(e => e.Descripcion)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Documento)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Fecha).HasColumnType("smalldatetime");

                entity.Property(e => e.Fuente)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Operacion)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Usuario)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.HasOne(d => d.AfactualNavigation)
                    .WithMany(p => p.ArchivoFisicoDocumentosLogAfactualNavigations)
                    .HasForeignKey(d => d.Afactual)
                    .HasConstraintName("FK_ArchivoFisico_DocumentosLog_ArchivoFisico1");

                entity.HasOne(d => d.AfanteriorNavigation)
                    .WithMany(p => p.ArchivoFisicoDocumentosLogAfanteriorNavigations)
                    .HasForeignKey(d => d.Afanterior)
                    .HasConstraintName("FK_ArchivoFisico_DocumentosLog_ArchivoFisico");
            });

            modelBuilder.Entity<ArchivosAdjunto>(entity =>
            {
                entity.Property(e => e.Archivo).HasColumnType("image");

                entity.Property(e => e.ArchivoBase64).HasDefaultValueSql("('')");

                entity.Property(e => e.FechaGrabacion)
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.FormIdUnique)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.HefestoPathFile)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.HefestoPathFileVirtual)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.IdTipoArchivo).HasColumnName("Id_TipoArchivo");

                entity.Property(e => e.IdenSesion)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("Iden_Sesion");

                entity.Property(e => e.Nombre)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Usuario)
                    .HasMaxLength(250)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ArchivosAdjuntosMaestro>(entity =>
            {
                entity.Property(e => e.Archivo).HasColumnType("image");

                entity.Property(e => e.CodigoMaestro)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.CodigoMaestro2)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.FechaGrabacion)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.HefestoPathFile)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.HefestoPathFileVirtual)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.IdSysEntidades).HasColumnName("id_Sys_Entidades");

                entity.Property(e => e.IdUsuario)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("idUsuario");

                entity.Property(e => e.Nombre)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdSysEntidadesNavigation)
                    .WithMany(p => p.ArchivosAdjuntosMaestros)
                    .HasForeignKey(d => d.IdSysEntidades)
                    .HasConstraintName("FK_ArchivosAdjuntosMaestros_id_Sys_Entidades");
            });

            modelBuilder.Entity<Area>(entity =>
            {
                entity.HasKey(e => e.Codigo);

                entity.Property(e => e.Codigo)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.CodTipoIdentificacion)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("Cod_TipoIdentificacion");

                entity.Property(e => e.Descripcion)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Iden)
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Identificacion)
                    .HasMaxLength(13)
                    .IsUnicode(false);

                entity.Property(e => e.Nombre)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.NombreResponsable)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.TipoDoc)
                    .HasMaxLength(10)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<AsobancariaArchivo>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Asobancaria_Archivo");

                entity.Property(e => e.Consecutivo).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.Error)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.IdenAsobancariaArchivo)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_asobancaria_archivo");

                entity.Property(e => e.Linea).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.Procesado).HasDefaultValueSql("((0))");

                entity.Property(e => e.Texto).IsUnicode(false);
            });

            modelBuilder.Entity<AsobancariaDocumento>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Asobancaria_Documento");

                entity.Property(e => e.CodigoEmpresa)
                    .HasMaxLength(13)
                    .IsUnicode(false);

                entity.Property(e => e.Consecutivo).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.DocumentoFinal)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.DocumentoInicial)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.EntidadRecaudadora)
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.IdenAsobancariaDocumento)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_asobancaria_documento");

                entity.Property(e => e.NumeroCuentaAfiliado)
                    .HasMaxLength(17)
                    .IsUnicode(false);

                entity.Property(e => e.RegistrosLeidos).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.RegistrosProcesados).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.ValorLeido).HasColumnType("money");

                entity.Property(e => e.ValorProcesado).HasColumnType("money");
            });

            modelBuilder.Entity<AsobancariaDocumentoDetalle>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Asobancaria_DocumentoDetalle");

                entity.Property(e => e.Documento)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.IdenAsobancaria)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("Iden_Asobancaria");

                entity.Property(e => e.IdenAsobancariaDocumentodetalle)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_asobancaria_documentodetalle");
            });

            modelBuilder.Entity<AsobancariaFactura>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Asobancaria_Facturas");

                entity.Property(e => e.Bu)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.CodiCta)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Consecutivo).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.IdCliPrv)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.IdTercero)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Iden)
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.IdenResumen)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("Iden_Resumen");

                entity.Property(e => e.NumeFac)
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.RefeFac)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.SaldoActual).HasColumnType("money");

                entity.Property(e => e.TipoFact)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.ValorApagar)
                    .HasColumnType("money")
                    .HasColumnName("ValorAPagar");

                entity.Property(e => e.VencFac)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .IsFixedLength();
            });

            modelBuilder.Entity<AsobancariaResumenArchivo>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Asobancaria_ResumenArchivo");

                entity.Property(e => e.Consecutivo).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.Id)
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Referencia1)
                    .HasMaxLength(48)
                    .IsUnicode(false);

                entity.Property(e => e.Referencia2)
                    .HasMaxLength(48)
                    .IsUnicode(false);

                entity.Property(e => e.TotalRecaudo).HasColumnType("money");
            });

            modelBuilder.Entity<AsobancariaTipo>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Asobancaria_Tipos");

                entity.Property(e => e.Iden).HasColumnName("iden");

                entity.Property(e => e.IdenAsobancariaTipos)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_asobancaria_tipos");

                entity.Property(e => e.Nombre)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("nombre");

                entity.Property(e => e.Referencia1)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("referencia1");

                entity.Property(e => e.Referencia2)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("referencia2");

                entity.Property(e => e.Referencias).HasColumnName("referencias");
            });

            modelBuilder.Entity<Asobancarium>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.Bu)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("bu");

                entity.Property(e => e.BuUsuario)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("buUsuario")
                    .IsFixedLength();

                entity.Property(e => e.Codicta)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("codicta")
                    .IsFixedLength();

                entity.Property(e => e.Consecutivo)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("consecutivo");

                entity.Property(e => e.ContraPartidaPorTercero)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("contraPartidaPorTercero")
                    .IsFixedLength();

                entity.Property(e => e.Fecha)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("fecha")
                    .IsFixedLength();

                entity.Property(e => e.FechaCreacion)
                    .HasColumnType("datetime")
                    .HasColumnName("fechaCreacion");

                entity.Property(e => e.GeneraDocumentoPor)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.IdItem)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("idItem");

                entity.Property(e => e.Iden)
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("iden");

                entity.Property(e => e.IdenAsobancariaTipos)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("iden_asobancariaTipos");

                entity.Property(e => e.Idfuente)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("idfuente")
                    .IsFixedLength();

                entity.Property(e => e.Idmoneda)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("idmoneda")
                    .IsFixedLength();

                entity.Property(e => e.Numdoctra)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("numdoctra")
                    .IsFixedLength();

                entity.Property(e => e.Usuario)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("usuario");
            });

            modelBuilder.Entity<AspNetAccessByRecord>(entity =>
            {
                entity.ToTable("AspNetAccessByRecord");

                entity.Property(e => e.IdField).HasColumnName("Id_Field");

                entity.Property(e => e.IdMasterEntity).HasColumnName("Id_MasterEntity");

                entity.Property(e => e.IdRole)
                    .HasMaxLength(450)
                    .HasColumnName("Id_Role");

                entity.Property(e => e.Operator)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Value)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdMasterEntityNavigation)
                    .WithMany(p => p.AspNetAccessByRecords)
                    .HasForeignKey(d => d.IdMasterEntity)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_AspNetAccessByRecord_App_Entities");
            });

            modelBuilder.Entity<AspNetAccessByRecordPrivigele>(entity =>
            {
                entity.ToTable("AspNetAccessByRecord_Privigeles");

                entity.Property(e => e.IdAspNetAccessByRecord).HasColumnName("Id_AspNetAccessByRecord");

                entity.Property(e => e.IdPrivilege).HasColumnName("Id_Privilege");

                entity.HasOne(d => d.IdAspNetAccessByRecordNavigation)
                    .WithMany(p => p.AspNetAccessByRecordPrivigeles)
                    .HasForeignKey(d => d.IdAspNetAccessByRecord)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_AspNetAccessByRecord_Privigeles_AspNetAccessByRecord");
            });

            modelBuilder.Entity<AspNetPrivilege>(entity =>
            {
                entity.Property(e => e.Action).HasMaxLength(100);

                entity.Property(e => e.Code).HasMaxLength(250);

                entity.Property(e => e.Controller).HasMaxLength(100);

                entity.Property(e => e.Description).HasMaxLength(1024);

                entity.Property(e => e.IdEntity).HasColumnName("Id_Entity");

                entity.Property(e => e.IdMenu).HasMaxLength(500);

                entity.Property(e => e.IdMenuParent).HasMaxLength(500);

                entity.Property(e => e.Name).HasMaxLength(512);
            });

            modelBuilder.Entity<AspNetRole>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("AspNetRoles");

                entity.Property(e => e.DescName).HasMaxLength(250);

                entity.Property(e => e.Description).HasMaxLength(500);

                entity.Property(e => e.Id).HasMaxLength(900);

                entity.Property(e => e.IdBit).HasColumnName("Id_Bit");

                entity.Property(e => e.Name).HasMaxLength(512);

                entity.Property(e => e.NormalizedName).HasMaxLength(512);
            });

            modelBuilder.Entity<AspNetRoleClaim>(entity =>
            {
                entity.Property(e => e.RoleId).HasMaxLength(450);
            });

            modelBuilder.Entity<AspNetRolePrivilege>(entity =>
            {
                entity.Property(e => e.RoleId).HasMaxLength(900);
            });

            modelBuilder.Entity<AspNetUser>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("AspNetUsers");

                entity.Property(e => e.BlockAdmin).HasColumnName("BLOCK_ADMIN");

                entity.Property(e => e.BlockLogin).HasColumnName("BLOCK_LOGIN");

                entity.Property(e => e.BlockSchedule).HasColumnName("BLOCK_SCHEDULE");

                entity.Property(e => e.BlockScheduleDate)
                    .HasColumnType("datetime")
                    .HasColumnName("BLOCK_SCHEDULE_DATE");

                entity.Property(e => e.BlockTemp).HasColumnName("BLOCK_TEMP");

                entity.Property(e => e.Email)
                    .HasMaxLength(2000)
                    .IsUnicode(false);

                entity.Property(e => e.FullName)
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.Id).HasMaxLength(900);

                entity.Property(e => e.IdUserCreator).HasMaxLength(900);

                entity.Property(e => e.NormalizedEmail).HasMaxLength(2000);

                entity.Property(e => e.NormalizedUserName).HasMaxLength(512);

                entity.Property(e => e.PhoneNumber)
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.UrlPhoto).HasMaxLength(500);

                entity.Property(e => e.UserName)
                    .HasMaxLength(250)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<AspNetUserClaim>(entity =>
            {
                entity.Property(e => e.UserId).HasMaxLength(450);
            });

            modelBuilder.Entity<AspNetUserLogin>(entity =>
            {
                entity.HasKey(e => new { e.LoginProvider, e.ProviderKey });

                entity.Property(e => e.LoginProvider).HasMaxLength(128);

                entity.Property(e => e.ProviderKey).HasMaxLength(128);

                entity.Property(e => e.UserId).HasMaxLength(450);
            });

            modelBuilder.Entity<AspNetUserRole>(entity =>
            {
                entity.HasKey(e => new { e.UserId, e.RoleId });
            });

            modelBuilder.Entity<AspNetUserToken>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.LoginProvider).HasMaxLength(128);

                entity.Property(e => e.Name).HasMaxLength(128);

                entity.Property(e => e.UserId).HasMaxLength(450);
            });

            modelBuilder.Entity<AuditoriaMovExterno>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("AuditoriaMovExterno");

                entity.Property(e => e.Documento)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Fecha)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.FechaProceso).HasColumnType("datetime");

                entity.Property(e => e.Fuente)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.IdAplicacion).HasColumnName("Id_Aplicacion");

                entity.Property(e => e.Iden)
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.MensajeError)
                    .HasMaxLength(4000)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Auxiliar>(entity =>
            {
                entity.HasKey(e => new { e.Codicta, e.Auxiaux })
                    .IsClustered(false);

                entity.ToTable("AUXILIAR");

                entity.HasIndex(e => new { e.Auxiaux, e.Codicta }, "IX_AUXILIAR_AUXIAUX_CODICTA");

                entity.HasIndex(e => e.Descrip, "IX_AUXILIAR_DESCRIP");

                entity.Property(e => e.Codicta)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("CODICTA")
                    .IsFixedLength();

                entity.Property(e => e.Auxiaux)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("AUXIAUX")
                    .IsFixedLength();

                entity.Property(e => e.Descrip)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIP")
                    .IsFixedLength();

                entity.Property(e => e.IdenAuxiliar)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_auxiliar");

                entity.Property(e => e.VersionDeLaFila)
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.CodictaNavigation)
                    .WithMany(p => p.Auxiliars)
                    .HasForeignKey(d => d.Codicta)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_AUXILIAR_MAECONT");
            });

            modelBuilder.Entity<BagtemNomina>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("BAGTemNomina");

                entity.Property(e => e.Dias)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.FechaEntrada)
                    .HasMaxLength(80)
                    .IsUnicode(false)
                    .HasColumnName("Fecha_Entrada")
                    .IsFixedLength();

                entity.Property(e => e.Item)
                    .HasMaxLength(80)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Ot)
                    .HasMaxLength(80)
                    .IsUnicode(false)
                    .HasColumnName("OT")
                    .IsFixedLength();

                entity.Property(e => e.Qty)
                    .HasColumnType("numeric(18, 2)")
                    .HasColumnName("qty");

                entity.Property(e => e.Qty2)
                    .HasColumnType("numeric(18, 2)")
                    .HasColumnName("qty2");

                entity.Property(e => e.Qty3)
                    .HasColumnType("numeric(18, 2)")
                    .HasColumnName("qty3");

                entity.Property(e => e.Qty4)
                    .HasColumnType("numeric(18, 2)")
                    .HasColumnName("qty4");

                entity.Property(e => e.Qty5)
                    .HasColumnType("numeric(18, 2)")
                    .HasColumnName("qty5");

                entity.Property(e => e.Qty6)
                    .HasColumnType("numeric(18, 2)")
                    .HasColumnName("qty6");
            });

            modelBuilder.Entity<Banco>(entity =>
            {
                entity.HasKey(e => e.Idbanco)
                    .HasName("pk_bancos");

                entity.ToTable("BANCOS");

                entity.HasIndex(e => e.Nombanco, "IX_BANCOS_NOMBANCO");

                entity.Property(e => e.Idbanco)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("IDBANCO")
                    .IsFixedLength();

                entity.Property(e => e.CodCompensacion)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.IdenBancos)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_bancos");

                entity.Property(e => e.Maxregegreso)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("MAXREGEGRESO");

                entity.Property(e => e.Moneda)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('Pesos')");

                entity.Property(e => e.Nombanco)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("NOMBANCO")
                    .IsFixedLength();

                entity.Property(e => e.VersionDeLaFila)
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<BienesRetencione>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.Aplicar).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.Iden)
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.IdenBienes)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("Iden_Bienes");

                entity.Property(e => e.MontoMaximo).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.MontoMinimo).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.SobreExcedente).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.VrFijo).HasColumnType("numeric(18, 2)");
            });

            modelBuilder.Entity<BienesServicio>(entity =>
            {
                entity.HasKey(e => e.Iden);

                entity.HasIndex(e => e.Codigo, "IX_BienesServicios")
                    .IsUnique();

                entity.Property(e => e.Iden)
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Codigo)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.FechaFin)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.FechaIni)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Importe).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.Nombre)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.PorcImporte).HasColumnType("numeric(5, 2)");
            });

            modelBuilder.Entity<BienesServiciosValor>(entity =>
            {
                entity.HasKey(e => e.Iden);

                entity.ToTable("BienesServicios_Valor");

                entity.HasIndex(e => new { e.IdenBienes, e.FechaIni, e.FechaFin }, "IX_BienesServicios_Valor")
                    .IsUnique();

                entity.Property(e => e.Iden)
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.FechaFin)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.FechaIni)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.IdenBienes)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("Iden_Bienes");

                entity.Property(e => e.PorcImporte).HasColumnType("numeric(5, 2)");

                entity.HasOne(d => d.IdenBienesNavigation)
                    .WithMany(p => p.BienesServiciosValors)
                    .HasForeignKey(d => d.IdenBienes)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_BienesServicios_Valor_BienesServicios_Iden");
            });

            modelBuilder.Entity<Bu>(entity =>
            {
                entity.HasKey(e => e.Codigo);

                entity.ToTable("BU");

                entity.HasIndex(e => new { e.Libro, e.Codigo }, "IX_BU_Codigo_Libro");

                entity.Property(e => e.Codigo)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.CodigoReferencia)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.CuentaCompensacion)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.DepenBu)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("DepenBU");

                entity.Property(e => e.Descripcion)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.FecBu)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("FecBU");

                entity.Property(e => e.Habilitar).HasDefaultValueSql("((1))");

                entity.Property(e => e.IdenBu)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_bu");

                entity.Property(e => e.Libro).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.Ncdcbu).HasColumnName("NCDCBU");

                entity.Property(e => e.TipoBu)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.VersionDeLaFila)
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.CuentaCompensacionNavigation)
                    .WithMany(p => p.Bus)
                    .HasForeignKey(d => d.CuentaCompensacion)
                    .HasConstraintName("FK_BU_MAECONT");
            });

            modelBuilder.Entity<BuPrincipale>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("BuPrincipales");

                entity.Property(e => e.Codigo)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.CuentaCompensacion)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.DepenBu)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Descripcion)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.FecBu).HasColumnType("smalldatetime");

                entity.Property(e => e.Ncdcbu).HasColumnName("NCDCBU");

                entity.Property(e => e.TipoBu)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();
            });

            modelBuilder.Entity<CambioEnMaestro>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.Campo)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Codigo)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Fecha).HasColumnType("datetime");

                entity.Property(e => e.Id).ValueGeneratedOnAdd();

                entity.Property(e => e.Maestro)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ValorActual)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.ValorAnterior)
                    .HasMaxLength(1000)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<CambioFactura>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("CambioFactura");

                entity.Property(e => e.AutorizacionNew)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AutorizacionO)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ComprobanteImpuestoNew)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ComprobanteImpuestoO)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DocumentoNew)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.DocumentoO)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Estado)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.FechaCaducidadNew)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')")
                    .IsFixedLength();

                entity.Property(e => e.FechaCaducidadO)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')")
                    .IsFixedLength();

                entity.Property(e => e.FechaNew)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.FehaGrabacion)
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.FuenteNew)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.FuenteO)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.IdenCambiofactura)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_cambiofactura");

                entity.Property(e => e.Ncfnew)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("NCFNew")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Ncfo)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("NCFO")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.NumeroFacturaNew)
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.NumeroFacturaO)
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.ReferenciaNew)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ReferenciaO)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SerieNew)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SerieO)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.TipoFacturaNew)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.TipoFacturaO)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Usuario)
                    .HasMaxLength(250)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<CatalogoEf>(entity =>
            {
                entity.HasKey(e => new { e.Pais, e.Codigo });

                entity.ToTable("CatalogoEF");

                entity.Property(e => e.Pais)
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Codigo)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Descripcion)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Iden)
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<CategoriaEstadosFinancierosNiif>(entity =>
            {
                entity.ToTable("CategoriaEstadosFinancierosNIIF");

                entity.HasIndex(e => e.Codigo, "UQ_CategoriaEstadosFinancierosNIIF_Codigo")
                    .IsUnique();

                entity.Property(e => e.Codigo)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Nombre)
                    .HasMaxLength(250)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<CategoriaFinanciera>(entity =>
            {
                entity.ToTable("CategoriaFinanciera");

                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.Property(e => e.IdenCategoriafinanciera)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_categoriafinanciera");

                entity.Property(e => e.Nombre)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<CategoriaRpt>(entity =>
            {
                entity.HasKey(e => e.Codigo);

                entity.ToTable("CategoriaRpt");

                entity.Property(e => e.Codigo)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.IdenCategoriarpt)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_categoriarpt");

                entity.Property(e => e.Nombre)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<CcmCartera>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("CCM_Cartera");

                entity.Property(e => e.Abonos).HasColumnType("money");

                entity.Property(e => e.CodigoCliente)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.CodigoTercero)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.NumeroFactura)
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.Saldo).HasColumnType("money");

                entity.Property(e => e.SaldoInicial).HasColumnType("money");

                entity.Property(e => e.TipoComprobante)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Valor).HasColumnType("money");
            });

            modelBuilder.Entity<CcmCentroCosto>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("CCM_CentroCosto");

                entity.Property(e => e.CodigoCentroCosto)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.DependenciaCentroCosto)
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.DescripcionCentroCosto)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Deshabilitado)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.TipoCentroCosto)
                    .HasMaxLength(7)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<CcmCliente>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("CCM_Clientes");

                entity.Property(e => e.BloqueoPorNit)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("BloqueoPorNIT");

                entity.Property(e => e.CentroCosto)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Ciudad)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("CIUDAD");

                entity.Property(e => e.CodigoAlterno)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.CodigoCiudad)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CodigoCliente)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.CodigoPais)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.CodigoTercero)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.CodigoUbicacionGeografica)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.CuentaDeCartera)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CupoDeCredito).HasColumnType("money");

                entity.Property(e => e.Deshabilitado)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.Direccion)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("DIRECCION");

                entity.Property(e => e.DireccionContacto)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.DireccionContactoAlterno)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.DireccionCorrespondencia)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.DireccionGerente)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.DivisionPolitica)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Email)
                    .HasMaxLength(800)
                    .IsUnicode(false)
                    .HasColumnName("EMAIL");

                entity.Property(e => e.EmailContacto)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.EmailContactoAlterno)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.EmailGerente)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Fax)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("FAX");

                entity.Property(e => e.FormatoDeFactura)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.FormatoDeFacturaRemision)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.FormatoDePedido)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.FormatoDeRemision)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.GenerarMora)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.GrupoEmpresarial)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Item)
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.NombreCliente)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.NombreContacto)
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.NombreContactoAlterno)
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.NombreGerente)
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.PagoContado)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.PagoCredito)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.PorcentajeMora).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.Segmento)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("SEGMENTO")
                    .IsFixedLength();

                entity.Property(e => e.Telefono)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("TELEFONO");

                entity.Property(e => e.TelefonoContacto)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.TelefonoContactoAlterno)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.TelefonoGerente)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Tipo)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.TipoCliente)
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.UsoLibre)
                    .HasMaxLength(256)
                    .IsUnicode(false);

                entity.Property(e => e.Vendedor)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Website)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("WEBSITE");

                entity.Property(e => e.Zona)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("ZONA")
                    .IsFixedLength();
            });

            modelBuilder.Entity<CcmFacturaPpp>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("CCM_Factura_PPP");

                entity.Property(e => e.Cuenta)
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.Documento)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Estado)
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.FechaRecepcion)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Fuente)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.MovimientoCredito).HasColumnType("money");

                entity.Property(e => e.MovimientoDebito).HasColumnType("money");

                entity.Property(e => e.NumeroFactura)
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.Proveedor)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.ReferenciaFactura)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.SaldoActual).HasColumnType("money");

                entity.Property(e => e.SaldoAnterior).HasColumnType("money");

                entity.Property(e => e.TipoFactura)
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.UnidadDeNegocio)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.VencimientoFactura)
                    .HasMaxLength(10)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<CcmFuente>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("CCM_Fuentes");

                entity.Property(e => e.AperturaDeComprobantes)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AsociarImpuestosCartera)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.Autorizacion)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.CierreDeComprobantes)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreacionDeComprobantes)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DescripcionFuente)
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.Deshabilitado)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.FormatoImpresion)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Fuente)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.GeneraDiferido)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.ManejaFacturaDeContingencia)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.ManejaFacturaEnLinea)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.ModuloExterno)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.ReporteContable)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ReporteProfesional)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.RequiereCierreDocumento)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.ReutilizacionDeComprobantes)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ReversionDeComprobantes)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.TipoDocumento)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength();
            });

            modelBuilder.Entity<CcmMoneda>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("CCM_Monedas");

                entity.Property(e => e.CodigoMoneda)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CuentaComisión)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CuentaContableTopico1)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CuentaContableTopico2)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CuentaContableTopico3)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CuentaContableTopico4)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CuentaContableTopico5)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.DependeTopico1)
                    .HasMaxLength(13)
                    .IsUnicode(false);

                entity.Property(e => e.DependeTopico2)
                    .HasMaxLength(13)
                    .IsUnicode(false);

                entity.Property(e => e.DependeTopico3)
                    .HasMaxLength(13)
                    .IsUnicode(false);

                entity.Property(e => e.DependeTopico4)
                    .HasMaxLength(13)
                    .IsUnicode(false);

                entity.Property(e => e.DependeTopico5)
                    .HasMaxLength(13)
                    .IsUnicode(false);

                entity.Property(e => e.DescripcionMoneda)
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.Deshabilitado)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.MedioDePago)
                    .HasMaxLength(26)
                    .IsUnicode(false);

                entity.Property(e => e.PorcentajeTopico1).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.PorcentajeTopico2).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.PorcentajeTopico3).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.PorcentajeTopico4).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.PorcentajeTopico5).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.ProcentajeComisión).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.Topico1)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Topico2)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Topico3)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Topico4)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Topico5)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength();
            });

            modelBuilder.Entity<CcmPago3ro>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("CCM_PAGO3ROS");

                entity.Property(e => e.CodigoTercero)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Cuenta)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.DescripcionCuenta)
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.DescripcionTercero)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("Descripcion_Tercero");

                entity.Property(e => e.MovimientoCredio).HasColumnType("money");

                entity.Property(e => e.MovimientoDebito).HasColumnType("money");

                entity.Property(e => e.SaldoActual).HasColumnType("money");

                entity.Property(e => e.SaldoAnterior).HasColumnType("money");

                entity.Property(e => e.UnidadDeNegocio)
                    .HasMaxLength(25)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<CcmPlandeCuenta>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("CCM_PlandeCuentas");

                entity.Property(e => e.Atributos)
                    .HasMaxLength(23)
                    .IsUnicode(false);

                entity.Property(e => e.Banco)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CalculoTransaccion)
                    .HasMaxLength(33)
                    .IsUnicode(false);

                entity.Property(e => e.Categoria)
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.CategoriaFinanciera)
                    .HasMaxLength(19)
                    .IsUnicode(false);

                entity.Property(e => e.CierreCuentaTercero)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.CodigoTipoImpuestos)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Cuenta)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CuentaAjusteGanancia)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("Cuenta_AjusteGanancia")
                    .IsFixedLength();

                entity.Property(e => e.CuentaAjustePerdida)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("Cuenta_AjustePerdida")
                    .IsFixedLength();

                entity.Property(e => e.CuentaCorriente)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.CuentaDeCierre)
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.CuentaDeterioro)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CuentaHabilitada)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.CuentaInteresesCorrientes)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CuentaPadre)
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.CuentaPagosAterceros)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("Cuenta_PagosATerceros");

                entity.Property(e => e.CuentaPpptransitoria)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("CuentaPPPTransitoria")
                    .IsFixedLength();

                entity.Property(e => e.DatosImpuestos)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.DescripcionCuenta)
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.ExigeCentroCosto)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.ExigeItem)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.FormulaCalcularTransaccion)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.GeneraDiferido)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.GrupoDeCuenta)
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.Identificador)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.IndicadorPagosAterceros)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("Indicador_PagosATerceros");

                entity.Property(e => e.ManejaPropiedad3)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("Maneja_Propiedad3");

                entity.Property(e => e.ManejaPropiedad4)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("Maneja_Propiedad4");

                entity.Property(e => e.ManejaPropiedad5)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("Maneja_Propiedad5");

                entity.Property(e => e.ManejaReservadaZeus)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("Maneja_ReservadaZeus");

                entity.Property(e => e.ManejaUge)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("Maneja_UGE");

                entity.Property(e => e.ModuloExterno)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.Moneda)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.NaturalezaCuenta)
                    .HasMaxLength(7)
                    .IsUnicode(false);

                entity.Property(e => e.NoManejaAjusteAutomatico)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.PorcentajeImpuesto).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.Seccion)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.TasaCambio)
                    .HasMaxLength(11)
                    .IsUnicode(false);

                entity.Property(e => e.TipoCuenta)
                    .HasMaxLength(7)
                    .IsUnicode(false);

                entity.Property(e => e.TipoCuentaBancaria)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Unidad1)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Unidad2)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Unidad3)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.ValidaSaldoSegunNaturaleza)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.ValidaSaldoTercero)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.ValorRetenido)
                    .HasMaxLength(2)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<CcmProveedore>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("CCM_Proveedores");

                entity.Property(e => e.Autorizacion)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("AUTORIZACION");

                entity.Property(e => e.CentroCosto)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Ciudad)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("CIUDAD");

                entity.Property(e => e.CodigoAlterno)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.CodigoCiudad)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CodigoClaseProveedor)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.CodigoPais)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.CodigoProveedor)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.CodigoTercero)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.CodigoUbicacionGeografica)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Cuenta)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CupoDeCredito).HasColumnType("money");

                entity.Property(e => e.Deshabilitado)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.Direccion)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("DIRECCION");

                entity.Property(e => e.DireccionContacto)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.DireccionContactoAlterno)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.DireccionCorrespondencia)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.DireccionGerente)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.DivisionPolitica)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Email)
                    .HasMaxLength(800)
                    .IsUnicode(false)
                    .HasColumnName("EMAIL");

                entity.Property(e => e.EmailContacto)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.EmailContactoAlterno)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.EmailGerente)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.EnviarEmailAlRealizarPago)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("EnviarEmail_AlRealizarPago");

                entity.Property(e => e.Fax)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("FAX");

                entity.Property(e => e.GrupoEmpresarial)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Item)
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.NombreContacto)
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.NombreContactoAlterno)
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.NombreGerente)
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.NombreTercero)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.PrefijoNcf)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Prefijo_NCF");

                entity.Property(e => e.Segmento)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("SEGMENTO")
                    .IsFixedLength();

                entity.Property(e => e.Serie)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("SERIE");

                entity.Property(e => e.Telefono)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("TELEFONO");

                entity.Property(e => e.TelefonoContacto)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.TelefonoContactoAlterno)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.TelefonoGerente)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Tipo)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.UsoLibre)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Website)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("WEBSITE");

                entity.Property(e => e.Zona)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength();
            });

            modelBuilder.Entity<CcmSaldoCco>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("CCM_SaldoCCO");

                entity.Property(e => e.CentroDeCosto)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Cuenta)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.DescripcionCentroDeCosto)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("Descripcion_CentroDeCosto")
                    .IsFixedLength();

                entity.Property(e => e.DescripcionCuenta)
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.MovimientoCredio).HasColumnType("money");

                entity.Property(e => e.MovimientoDebito).HasColumnType("money");

                entity.Property(e => e.SaldoActual).HasColumnType("money");

                entity.Property(e => e.SaldoAnterior).HasColumnType("money");

                entity.Property(e => e.UnidadDeNegocio)
                    .HasMaxLength(25)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<CcmSaldoCont>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("CCM_SaldoCont");

                entity.Property(e => e.Cuenta)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.DescripcionCuenta)
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.MovimientoCredio).HasColumnType("money");

                entity.Property(e => e.MovimientoDebito).HasColumnType("money");

                entity.Property(e => e.SaldoActual).HasColumnType("money");

                entity.Property(e => e.SaldoAnterior).HasColumnType("money");

                entity.Property(e => e.UnidadDeNegocio)
                    .HasMaxLength(25)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<CcmTercero>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("CCM_Terceros");

                entity.Property(e => e.Barrio)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Celular)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.CentroCosto)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Ciudad)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("CIUDAD");

                entity.Property(e => e.CodigoCiudad)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CodigoOcupacion)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.CodigoPais)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.CodigoTercero)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Deshabilitado)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.DigitoVerificacion)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Direccion)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("DIRECCION");

                entity.Property(e => e.DivisionPolitica)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Email)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.EstratoSocial)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.FechaFinalAcuerdo).HasColumnType("smalldatetime");

                entity.Property(e => e.FechaInicialAcuerdo).HasColumnType("smalldatetime");

                entity.Property(e => e.FechaNacimiento).HasColumnType("smalldatetime");

                entity.Property(e => e.FechaNacimientoConyugue).HasColumnType("smalldatetime");

                entity.Property(e => e.Hobbies)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Item)
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.ManejaAcuerdo)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.NombreConyugue)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.NombreTercero)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.PrefijoNcf)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Prefijo_NCF");

                entity.Property(e => e.PrimerApellido)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.PrimerNombre)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Profesion)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.Segmento)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("SEGMENTO")
                    .IsFixedLength();

                entity.Property(e => e.SegundoApellido)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.SegundoNombre)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Sexo)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Telefono)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Telefono2)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Tipo)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.TipoClienteFrecuenciaCompra)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.TipoIdentificacion)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.TipoRazonSocial)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.TipoTercero)
                    .HasMaxLength(14)
                    .IsUnicode(false);

                entity.Property(e => e.Tipoempresa)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("TIPOEMPRESA");
            });

            modelBuilder.Entity<CcmTrasanccione>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("CCM_Trasancciones");

                entity.Property(e => e.Adicional1)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Adicional_1");

                entity.Property(e => e.Adicional2)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Adicional_2");

                entity.Property(e => e.CentroCosto)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CodigoCliente)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Comprobante)
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.Cuenta)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.DescripcionOperacion)
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.DetalleMovimiento)
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.FechaOperacion)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.NaturalezaTransaccion)
                    .HasMaxLength(7)
                    .IsUnicode(false);

                entity.Property(e => e.Nit)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("NIT");

                entity.Property(e => e.NumeroFactura)
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.ReferenciaDocumento)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.TipoFactura)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.TipoOperacion)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.UnidadDeCuenta)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Usuario)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.ValorTransacciones).HasColumnType("money");

                entity.Property(e => e.VencimientoFactura)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .IsFixedLength();
            });

            modelBuilder.Entity<CcmUnidadDeNegocio>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("CCM_UnidadDeNegocio");

                entity.Property(e => e.Codigo)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.CodigoReferencia)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.CuentaCompensacion)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.DependenciaUnidadDeNegocio)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Descripcion)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.FechaUnidadDeNegocio).HasColumnType("smalldatetime");

                entity.Property(e => e.Habilitado)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.TipoUnidadDeNegocio)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();
            });

            modelBuilder.Entity<CcmUsuario>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("CCM_Usuarios");

                entity.Property(e => e.AnularDcto)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.Autenticacion)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.Cedula)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("CEDULA");

                entity.Property(e => e.CodigoIdioma)
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.Consolidado)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.ContabilizaPreparacionDocumento)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.Direccion)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("DIRECCION");

                entity.Property(e => e.Email)
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasColumnName("EMAIL");

                entity.Property(e => e.Grupo)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("GRUPO");

                entity.Property(e => e.Impresora)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("IMPRESORA");

                entity.Property(e => e.Login)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.ModificarDiasVencimiento)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.ModificarMora)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.Nombre)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("NOMBRE");

                entity.Property(e => e.Perfil)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("PERFIL");

                entity.Property(e => e.PorcentajeMora).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.Rol)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Serie)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Telefono)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("TELEFONO");

                entity.Property(e => e.TipoUsuarioBu)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("TipoUsuarioBU");

                entity.Property(e => e.UnidadDeNegocio)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Usolibre)
                    .HasMaxLength(4000)
                    .IsUnicode(false)
                    .HasColumnName("USOLIBRE");

                entity.Property(e => e.Usuario)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("USUARIO");
            });

            modelBuilder.Entity<Certificado>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.CodConcepto)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Concepto)
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.Cuenta)
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.Idcertificado)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("IDCertificado");

                entity.Property(e => e.IdenCertificados)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_certificados");

                entity.Property(e => e.LugarDeclara)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.NombreCertificado)
                    .HasMaxLength(40)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Certificadodisponibilidad>(entity =>
            {
                entity.HasKey(e => e.Certificado);

                entity.ToTable("CERTIFICADODISPONIBILIDAD");

                entity.Property(e => e.Certificado)
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("CERTIFICADO");

                entity.Property(e => e.Ano)
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .HasColumnName("ANO")
                    .IsFixedLength();

                entity.Property(e => e.Apropiacion)
                    .HasColumnType("money")
                    .HasColumnName("APROPIACION")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Cenco)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("CENCO");

                entity.Property(e => e.Codpresu)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("CODPRESU");

                entity.Property(e => e.Descripcion)
                    .HasMaxLength(8000)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPCION");

                entity.Property(e => e.Dispexpedidas)
                    .HasColumnType("money")
                    .HasColumnName("DISPEXPEDIDAS")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Fecha)
                    .HasColumnType("datetime")
                    .HasColumnName("FECHA")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Nuevosaldoaprop)
                    .HasColumnType("money")
                    .HasColumnName("NUEVOSALDOAPROP")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Ordencompra)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("ORDENCOMPRA");

                entity.Property(e => e.Saldoapropiacion)
                    .HasColumnType("money")
                    .HasColumnName("SALDOAPROPIACION")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Saldocertificado)
                    .HasColumnType("money")
                    .HasColumnName("SALDOCERTIFICADO");

                entity.Property(e => e.Valordisponibilidad)
                    .HasColumnType("money")
                    .HasColumnName("VALORDISPONIBILIDAD")
                    .HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<CertificadosSticker>(entity =>
            {
                entity.HasKey(e => new { e.CodCertificado, e.FechaInicial, e.FechaFinal });

                entity.ToTable("Certificados_Sticker");

                entity.Property(e => e.CodCertificado)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.FechaInicial)
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')")
                    .IsFixedLength();

                entity.Property(e => e.FechaFinal)
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')")
                    .IsFixedLength();

                entity.Property(e => e.CodBanco)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')")
                    .IsFixedLength();

                entity.Property(e => e.FechaPago)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')")
                    .IsFixedLength();

                entity.Property(e => e.FechaPresentacion)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')")
                    .IsFixedLength();

                entity.Property(e => e.IdenCertificadosSticker)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_certificados_sticker");

                entity.Property(e => e.NoDeclaracion)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.NoSticker)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");
            });

            modelBuilder.Entity<CfAreaImpresion>(entity =>
            {
                entity.HasKey(e => e.Iden)
                    .IsClustered(false);

                entity.ToTable("CF_AreaImpresion");

                entity.HasIndex(e => e.Codigo, "UQ_CF_AREAIMPRESION_CODIGO")
                    .IsUnique();

                entity.Property(e => e.Iden).HasColumnName("IDEN");

                entity.Property(e => e.Ccfirmante)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("CCFirmante")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Codigo)
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.Direccion)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ImpuestoIsd)
                    .HasColumnType("numeric(18, 2)")
                    .HasColumnName("ImpuestoISD")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Nombre)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.RutFirmante)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");
            });

            modelBuilder.Entity<CfAutorizacion>(entity =>
            {
                entity.HasKey(e => e.Iden);

                entity.ToTable("CF_Autorizacion");

                entity.HasIndex(e => e.IdenAreaImpresion, "IX_CF_AUTORIZACION_IDEN_AREAIMPRESION");

                entity.HasIndex(e => new { e.IdenPuntoEmision, e.IdenAreaImpresion, e.IdenTipoComprobante }, "IX_CF_AUTORIZACION_IDEN_AREAIMPRESION_IDEN_PUNTOEMISION_IDEN_TIPOCOMPROBANTE");

                entity.HasIndex(e => e.IdenPuntoEmision, "IX_CF_AUTORIZACION_IDEN_PUNTOEMISION");

                entity.HasIndex(e => e.IdenTipoComprobante, "IX_CF_AUTORIZACION_IDEN_TIPOCOMPROBANTE");

                entity.HasIndex(e => e.Codigo, "UQ_CF_AUTORIZACION_CODIGO")
                    .IsUnique();

                entity.Property(e => e.Iden).HasColumnName("IDEN");

                entity.Property(e => e.Codigo)
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.Detalles)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.FechaAutorizacion).HasColumnType("smalldatetime");

                entity.Property(e => e.FechaDeCaducidad).HasColumnType("smalldatetime");

                entity.Property(e => e.FechaSolicitud).HasColumnType("smalldatetime");

                entity.Property(e => e.IdMaquina)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.IdenAreaImpresion).HasColumnName("IDEN_AreaImpresion");

                entity.Property(e => e.IdenPuntoEmision).HasColumnName("IDEN_PuntoEmision");

                entity.Property(e => e.IdenResolucion).HasColumnName("Iden_Resolucion");

                entity.Property(e => e.IdenTipoComprobante).HasColumnName("IDEN_TipoComprobante");

                entity.Property(e => e.NoAutorizacion)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.NoSolicitud)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.NombreMaquina)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Prefijo)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdenAreaImpresionNavigation)
                    .WithMany(p => p.CfAutorizacions)
                    .HasForeignKey(d => d.IdenAreaImpresion)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CF_Autorizacion_CF_AreaImpresion");

                entity.HasOne(d => d.IdenPuntoEmisionNavigation)
                    .WithMany(p => p.CfAutorizacions)
                    .HasForeignKey(d => d.IdenPuntoEmision)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CF_Autorizacion_CF_PuntoEmision");

                entity.HasOne(d => d.IdenResolucionNavigation)
                    .WithMany(p => p.CfAutorizacions)
                    .HasForeignKey(d => d.IdenResolucion)
                    .HasConstraintName("FK_CF_Autorizacion_CF_Resolucion");

                entity.HasOne(d => d.IdenTipoComprobanteNavigation)
                    .WithMany(p => p.CfAutorizacions)
                    .HasForeignKey(d => d.IdenTipoComprobante)
                    .HasConstraintName("FK_CF_Autorizacion_CF_TipoComprobante");
            });

            modelBuilder.Entity<CfComprobanteRetencion>(entity =>
            {
                entity.HasKey(e => e.Iden);

                entity.ToTable("CF_ComprobanteRetencion");

                entity.Property(e => e.ComprobanteRetencion)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Documento)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.DocumentoNew)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Estado)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Fuente)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.FuenteNew)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.IdenAutorizacionCi).HasColumnName("IdenAutorizacionCI");

                entity.Property(e => e.Observacion)
                    .HasMaxLength(1000)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<CfConfiguracion>(entity =>
            {
                entity.ToTable("CF_Configuracion");

                entity.HasIndex(e => new { e.Tipo, e.Codigo1, e.Codigo2 }, "IX_CF_CONFIGURACION_CODIGO1_CODIGO2_TIPO")
                    .IsUnique();

                entity.Property(e => e.Id)
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.AreaDeImpresion)
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.Codigo1)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Codigo2)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Nombre)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.PuntoDeEmision)
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.TipoDeComprobante)
                    .HasMaxLength(15)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<CfDivision>(entity =>
            {
                entity.HasKey(e => e.Codigo)
                    .IsClustered(false);

                entity.ToTable("CF_Division");

                entity.HasIndex(e => e.Iden, "IX_CF_DIVISION_IDEN")
                    .IsUnique()
                    .IsClustered();

                entity.Property(e => e.Codigo)
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.Iden)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("IDEN");

                entity.Property(e => e.Nombre)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<CfDocumentoControl>(entity =>
            {
                entity.ToTable("CF_DocumentoControl");

                entity.HasIndex(e => new { e.Fuente, e.Documento }, "IX_CF_DOCUMENTOCONTROL_DOCUMENTO_FUENTE");

                entity.HasIndex(e => e.Ncf, "IX_CF_DocumentoControl_NCF");

                entity.Property(e => e.Id)
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.AreaImpresion)
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.Documento)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Fecha).HasColumnType("smalldatetime");

                entity.Property(e => e.Fuente)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.Ncf)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("NCF");

                entity.Property(e => e.PuntoEmision)
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.TipoComprobante)
                    .HasMaxLength(15)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<CfPuntoEmision>(entity =>
            {
                entity.HasKey(e => e.Iden)
                    .HasName("PK_CF_PUNTOEMISION")
                    .IsClustered(false);

                entity.ToTable("CF_PuntoEmision");

                entity.HasIndex(e => e.Codigo, "UQ_CF_PUNTOEMISION_CODIGO")
                    .IsUnique();

                entity.Property(e => e.Iden).HasColumnName("IDEN");

                entity.Property(e => e.Codigo)
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.IdMaquina)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Nombre)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.NombreMaquina)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<CfResolucion>(entity =>
            {
                entity.HasKey(e => e.Iden)
                    .HasName("PK_CF_RESOLUCION");

                entity.ToTable("CF_Resolucion");

                entity.Property(e => e.Iden).HasColumnName("IDEN");

                entity.Property(e => e.CodDocFactura)
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.FechaAutorizacion).HasColumnType("smalldatetime");

                entity.Property(e => e.FechaDeCaducidad).HasColumnType("smalldatetime");

                entity.Property(e => e.FechaSolicitud).HasColumnType("smalldatetime");

                entity.Property(e => e.NoAutorizacion)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.NoSolicitud)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.NomDocFactura)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Prefijo)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.TipoFact)
                    .HasMaxLength(2)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<CfTipoComprobante>(entity =>
            {
                entity.HasKey(e => e.Iden)
                    .IsClustered(false);

                entity.ToTable("CF_TipoComprobante");

                entity.HasIndex(e => e.Codigo, "UQ_CF_TIPOCOMPROBANTE_CODIGO")
                    .IsUnique();

                entity.Property(e => e.Iden).HasColumnName("IDEN");

                entity.Property(e => e.Codigo)
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.Nombre)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<CfactAsignaModelo>(entity =>
            {
                entity.HasKey(e => new { e.IdProveedor, e.Documento, e.IdModelo, e.Bu })
                    .HasName("PK_CFACT_ASIGNAMODELO")
                    .IsClustered(false);

                entity.ToTable("CFact_AsignaModelo");

                entity.Property(e => e.IdProveedor)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Documento)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.IdModelo)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Bu)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.CentroCosto)
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.Ciclo)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.CodigoPropiedad1)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.CodigoPropiedad2)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.CodigoPropiedad3)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.CodigoPropiedad4)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.CodigoPropiedad5)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.CxP)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Estado).HasDefaultValueSql("((0))");

                entity.Property(e => e.FechaFact)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(space((10)))")
                    .IsFixedLength();

                entity.Property(e => e.FechaInicio)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.IdDocumento)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(space((10)))")
                    .IsFixedLength();

                entity.Property(e => e.IdFuente)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(space((2)))")
                    .IsFixedLength();

                entity.Property(e => e.IdenCfactAsignamodelo)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_cfact_asignamodelo");

                entity.Property(e => e.Item)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.NumeroPeriodos).HasDefaultValueSql("((0))");

                entity.Property(e => e.PeriodoControl).HasDefaultValueSql("((0))");

                entity.Property(e => e.UltimoVrFacturado)
                    .HasColumnType("money")
                    .HasDefaultValueSql("((0))");

                entity.HasOne(d => d.BuNavigation)
                    .WithMany(p => p.CfactAsignaModelos)
                    .HasForeignKey(d => d.Bu)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CFact_AsignaModelo_Bu");
            });

            modelBuilder.Entity<CfactAut>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("CFact_Aut");

                entity.Property(e => e.Auxabto)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("AUXABTO")
                    .IsFixedLength();

                entity.Property(e => e.Baserete)
                    .HasColumnType("money")
                    .HasColumnName("BASERETE");

                entity.Property(e => e.Cantidad)
                    .HasColumnType("money")
                    .HasColumnName("CANTIDAD");

                entity.Property(e => e.Codcenco)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("CODCENCO")
                    .IsFixedLength();

                entity.Property(e => e.CodiFco)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("CODI_FCO")
                    .IsFixedLength();

                entity.Property(e => e.CodigoPropiedad1)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.CodigoPropiedad2)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.CodigoPropiedad3)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.CodigoPropiedad4)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.CodigoPropiedad5)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.CodigodescFco)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("CODIGODESC_FCO")
                    .IsFixedLength();

                entity.Property(e => e.CodigoivaFco)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("CODIGOIVA_FCO")
                    .IsFixedLength();

                entity.Property(e => e.CodigoreteFco)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("CODIGORETE_FCO")
                    .IsFixedLength();

                entity.Property(e => e.Codproveedor1)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("CODProveedor1");

                entity.Property(e => e.Codvendedor)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("CODVENDEDOR")
                    .IsFixedLength();

                entity.Property(e => e.Concepto)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("CONCEPTO")
                    .IsFixedLength();

                entity.Property(e => e.DbcrFco)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("DBCR_FCO")
                    .IsFixedLength();

                entity.Property(e => e.Desclarga)
                    .HasMaxLength(240)
                    .IsUnicode(false)
                    .HasColumnName("DESCLARGA");

                entity.Property(e => e.DetalleFco)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("DETALLE_FCO");

                entity.Property(e => e.Iddocumento)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("IDDOCUMENTO")
                    .IsFixedLength();

                entity.Property(e => e.IdenCfactAut)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_cfact_aut");

                entity.Property(e => e.Idproveedor)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("IDProveedor");

                entity.Property(e => e.Idtercero)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("IDTERCERO");

                entity.Property(e => e.Idzona)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("IDZONA")
                    .IsFixedLength();

                entity.Property(e => e.MoneFco)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("MONE_FCO")
                    .IsFixedLength();

                entity.Property(e => e.Nomconcepto)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("NOMCONCEPTO");

                entity.Property(e => e.Nomproveedor)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("NOMProveedor");

                entity.Property(e => e.Numdoc)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("NUMDOC")
                    .IsFixedLength();

                entity.Property(e => e.Porcdes)
                    .HasColumnType("money")
                    .HasColumnName("PORCDES");

                entity.Property(e => e.Porciva)
                    .HasColumnType("money")
                    .HasColumnName("PORCIVA");

                entity.Property(e => e.Porcrete)
                    .HasColumnType("money")
                    .HasColumnName("PORCRETE");

                entity.Property(e => e.Refe)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("REFE");

                entity.Property(e => e.Td)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("TD")
                    .IsFixedLength();

                entity.Property(e => e.Totalconcepto)
                    .HasColumnType("money")
                    .HasColumnName("TOTALCONCEPTO");

                entity.Property(e => e.Vcto)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("VCTO")
                    .IsFixedLength();

                entity.Property(e => e.Vrdescuento)
                    .HasColumnType("money")
                    .HasColumnName("VRDESCUENTO");

                entity.Property(e => e.Vriva)
                    .HasColumnType("money")
                    .HasColumnName("VRIVA");

                entity.Property(e => e.Vrrete)
                    .HasColumnType("money")
                    .HasColumnName("VRRETE");

                entity.Property(e => e.Vrunitario)
                    .HasColumnType("money")
                    .HasColumnName("VRUNITARIO");
            });

            modelBuilder.Entity<CfactAutoConcepto>(entity =>
            {
                entity.HasKey(e => e.Iden)
                    .HasName("PK_CFACT_AUTO_CONCEPTO");

                entity.ToTable("CFact_Auto_Concepto");

                entity.Property(e => e.Iden)
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("IDEN");

                entity.Property(e => e.Cantidad).HasColumnType("numeric(18, 6)");

                entity.Property(e => e.Concepto)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Consecutivo).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.Descripcion)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Documento)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.IdenFacturacion)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("IDEN_Facturacion");

                entity.Property(e => e.PorcentajeDcto).HasColumnType("numeric(18, 6)");

                entity.Property(e => e.PorcentajeIva)
                    .HasColumnType("numeric(18, 6)")
                    .HasColumnName("PorcentajeIVA");

                entity.Property(e => e.Proveedor)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.SubTotal).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.TasaCambio).HasColumnType("numeric(18, 6)");

                entity.Property(e => e.Total).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.TotalDescuento).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.TotalIva)
                    .HasColumnType("numeric(18, 2)")
                    .HasColumnName("TotalIVA");

                entity.Property(e => e.ValorUnidad).HasColumnType("numeric(18, 6)");

                entity.Property(e => e.ValorUnidadMoneda).HasColumnType("numeric(18, 6)");

                entity.HasOne(d => d.ConceptoNavigation)
                    .WithMany(p => p.CfactAutoConceptos)
                    .HasForeignKey(d => d.Concepto)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CFact_Auto_Concepto_FACTCONC");

                entity.HasOne(d => d.IdenFacturacionNavigation)
                    .WithMany(p => p.CfactAutoConceptos)
                    .HasForeignKey(d => d.IdenFacturacion)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CFact_Auto_Concepto_CFact_Auto_Novedades");

                entity.HasOne(d => d.ProveedorNavigation)
                    .WithMany(p => p.CfactAutoConceptos)
                    .HasForeignKey(d => d.Proveedor)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CFact_Auto_Concepto_Proveedor");
            });

            modelBuilder.Entity<CfactAutoConceptoTemp>(entity =>
            {
                entity.HasKey(e => e.Iden)
                    .HasName("PK_CFACT_AUTO_CONCEPTO_TEMP");

                entity.ToTable("CFact_Auto_Concepto_Temp");

                entity.HasIndex(e => e.SpId, "IX_CFACT_AUTO_CONCEPTO_TEMP_SPID");

                entity.Property(e => e.Iden)
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("IDEN");

                entity.Property(e => e.Cantidad).HasColumnType("numeric(18, 6)");

                entity.Property(e => e.Concepto)
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.Descripcion)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Documento)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.PorcentajeDcto).HasColumnType("numeric(18, 6)");

                entity.Property(e => e.PorcentajeIva)
                    .HasColumnType("numeric(18, 6)")
                    .HasColumnName("PorcentajeIVA");

                entity.Property(e => e.Proveedor)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.SpId).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.SubTotal).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.TasaCambio).HasColumnType("numeric(18, 6)");

                entity.Property(e => e.Total).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.TotalDescuento).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.TotalIva)
                    .HasColumnType("numeric(18, 2)")
                    .HasColumnName("TotalIVA");

                entity.Property(e => e.ValorUnidad).HasColumnType("numeric(18, 6)");

                entity.Property(e => e.ValorUnidadMoneda).HasColumnType("numeric(18, 6)");
            });

            modelBuilder.Entity<CfactAutoNovedade>(entity =>
            {
                entity.HasKey(e => e.Iden)
                    .HasName("PK_CFACT_AUTO_NOVEDADES")
                    .IsClustered(false);

                entity.ToTable("CFact_Auto_Novedades");

                entity.HasIndex(e => e.Consecutivo, "UQ_CFACT_AUTO_NOVEDADES_CONSECUTIVO")
                    .IsUnique();

                entity.Property(e => e.Iden)
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("IDEN");

                entity.Property(e => e.Consecutivo).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.Descripcion)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Estado)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Fecha).HasColumnType("smalldatetime");

                entity.Property(e => e.FechaTasa).HasColumnType("smalldatetime");

                entity.Property(e => e.Moneda)
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.TasaCambio).HasColumnType("numeric(18, 3)");

                entity.Property(e => e.Usuario)
                    .HasMaxLength(250)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<CfactAutomatica>(entity =>
            {
                entity.HasKey(e => e.Iden)
                    .HasName("PK_CFACT_AUTOMATICA");

                entity.ToTable("CFact_Automatica");

                entity.Property(e => e.Iden)
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("IDEN");

                entity.Property(e => e.Bu)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("BU")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Cantidad).HasColumnType("numeric(18, 6)");

                entity.Property(e => e.Ciclos)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.CtaCobrar)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DocumentoF)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.DocumentoI)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Fecha)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Fuente)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Moneda)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.RegistroNovedad).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.TasaCambio).HasColumnType("numeric(18, 6)");

                entity.Property(e => e.Usuario)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Valor).HasColumnType("numeric(18, 6)");
            });

            modelBuilder.Entity<CfactModeloB>(entity =>
            {
                entity.HasKey(e => new { e.Codigo, e.Concepto })
                    .HasName("PK_CFACT_MODELOB")
                    .IsClustered(false);

                entity.ToTable("CFact_ModeloB");

                entity.Property(e => e.Codigo)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Concepto)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.IdenCfactModelob)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_cfact_modelob");

                entity.HasOne(d => d.CodigoNavigation)
                    .WithMany(p => p.CfactModeloBs)
                    .HasForeignKey(d => d.Codigo)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CFact_ModeloB_CFact_ModeloH");

                entity.HasOne(d => d.ConceptoNavigation)
                    .WithMany(p => p.CfactModeloBs)
                    .HasForeignKey(d => d.Concepto)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CFact_ModeloB_FACTCONC");
            });

            modelBuilder.Entity<CfactModeloH>(entity =>
            {
                entity.HasKey(e => e.Codigo)
                    .HasName("PK_CFACT_MODELOH")
                    .IsClustered(false);

                entity.ToTable("CFact_ModeloH");

                entity.Property(e => e.Codigo)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Descripcion)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.IdenCfactModeloh)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_cfact_modeloh");

                entity.Property(e => e.Tipo)
                    .HasMaxLength(1)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Chequera>(entity =>
            {
                entity.HasKey(e => new { e.Banco, e.Chequera1, e.Ncheque })
                    .IsClustered(false);

                entity.ToTable("CHEQUERAS");

                entity.HasIndex(e => new { e.Dcto, e.Fuente }, "IX_CHEQUERAS_DCTO_FUENTE");

                entity.Property(e => e.Banco)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("BANCO");

                entity.Property(e => e.Chequera1)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("CHEQUERA");

                entity.Property(e => e.Ncheque)
                    .HasColumnType("numeric(10, 0)")
                    .HasColumnName("NCHEQUE");

                entity.Property(e => e.Aviso)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("AVISO");

                entity.Property(e => e.Beneficiario)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("BENEFICIARIO");

                entity.Property(e => e.Dcto)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("DCTO");

                entity.Property(e => e.Enfdcto)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("ENFDCTO")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Entregado)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("ENTREGADO");

                entity.Property(e => e.Estado)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("ESTADO");

                entity.Property(e => e.Fecha)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("FECHA");

                entity.Property(e => e.Fuente)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("FUENTE");

                entity.Property(e => e.IdenChequeras)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_chequeras");

                entity.Property(e => e.Impricheque)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("IMPRICHEQUE")
                    .IsFixedLength();

                entity.Property(e => e.Ndrecdcto)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("NDRECDCTO");

                entity.Property(e => e.Prefijo)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Tprecdcto)
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .HasColumnName("TPRECDCTO");

                entity.Property(e => e.Valor)
                    .HasColumnType("money")
                    .HasColumnName("VALOR");
            });

            modelBuilder.Entity<CierrePeriodoTipo>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("CierrePeriodoTipo");

                entity.Property(e => e.AnoMes)
                    .HasMaxLength(7)
                    .IsUnicode(false);

                entity.Property(e => e.IdFuente)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.IdenCierreperiodotipo)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_cierreperiodotipo");

                entity.Property(e => e.NumDocTra)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.ParametroCierre)
                    .HasMaxLength(1)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ClasificacionAnticipo>(entity =>
            {
                entity.HasIndex(e => e.Codigo, "UQ_ClasificacionAnticipos_Codigo")
                    .IsUnique();

                entity.Property(e => e.Codigo)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Nombre)
                    .HasMaxLength(250)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ClasificacionAnticiposCuenta>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.Codicta)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.IdClasificacionAnticipos).HasColumnName("Id_ClasificacionAnticipos");

                entity.Property(e => e.IdenClasificacionanticiposcuentas)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_clasificacionanticiposcuentas");

                entity.HasOne(d => d.CodictaNavigation)
                    .WithMany()
                    .HasForeignKey(d => d.Codicta)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ClasificacionAnticiposCuentas_MAECONT");

                entity.HasOne(d => d.IdClasificacionAnticiposNavigation)
                    .WithMany()
                    .HasForeignKey(d => d.IdClasificacionAnticipos)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ClasificacionAnticiposCuentas_ClasificacionAnticipos");
            });

            modelBuilder.Entity<ClasificacionAnticiposTipo>(entity =>
            {
                entity.ToTable("ClasificacionAnticiposTipo");

                entity.HasIndex(e => e.Codigo, "UQ_ClasificacionAnticiposTipo_Codigo")
                    .IsUnique();

                entity.Property(e => e.Codigo)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Nombre)
                    .HasMaxLength(250)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ClasificacionAnticiposTipoDetalle>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ClasificacionAnticiposTipoDetalle");

                entity.Property(e => e.IdClasificacionAnticipos).HasColumnName("Id_ClasificacionAnticipos");

                entity.Property(e => e.IdClasificacionAnticiposTipo).HasColumnName("Id_ClasificacionAnticiposTipo");

                entity.Property(e => e.IdenClasificacionanticipostipodetalle)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_clasificacionanticipostipodetalle");

                entity.HasOne(d => d.IdClasificacionAnticiposNavigation)
                    .WithMany()
                    .HasForeignKey(d => d.IdClasificacionAnticipos)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ClasificacionAnticiposTipoDetalle_ClasificacionAnticipos");

                entity.HasOne(d => d.IdClasificacionAnticiposTipoNavigation)
                    .WithMany()
                    .HasForeignKey(d => d.IdClasificacionAnticiposTipo)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ClasificacionAnticiposTipoDetalle_ClasificacionAnticiposTipo");
            });

            modelBuilder.Entity<Cliente>(entity =>
            {
                entity.HasKey(e => e.Idcliente)
                    .HasName("pk_clientes")
                    .IsClustered(false);

                entity.ToTable("CLIENTES");

                entity.HasIndex(e => e.Ciudad, "IX_CLIENTES_CIUDAD");

                entity.HasIndex(e => e.Idtercero, "IX_CLIENTES_IDTERCERO");

                entity.HasIndex(e => e.Razoncial, "IX_CLIENTES_RAZONCIAL");

                entity.Property(e => e.Idcliente)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("IDCLIENTE");

                entity.Property(e => e.Autorizacion)
                    .HasColumnName("AUTORIZACION")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.BlCupoCreditoPorMoneda).HasColumnName("bl_CupoCreditoPorMoneda");

                entity.Property(e => e.Bloqueo)
                    .HasColumnName("BLOQUEO")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Bloqueopornit)
                    .HasColumnName("BLOQUEOPORNIT")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.CentroCosto)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Ciudad)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("CIUDAD");

                entity.Property(e => e.CodAlterno)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.Codicta)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("CODICTA")
                    .IsFixedLength();

                entity.Property(e => e.Codigodane)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("CODIGODANE")
                    .HasDefaultValueSql("('OTROS')")
                    .IsFixedLength();

                entity.Property(e => e.Codigoubicacion)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("CODIGOUBICACION")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Contacto)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("CONTACTO");

                entity.Property(e => e.Contactoa)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("CONTACTOA");

                entity.Property(e => e.Cupocre)
                    .HasColumnType("money")
                    .HasColumnName("CUPOCRE");

                entity.Property(e => e.Diagracia)
                    .HasColumnName("DIAGRACIA")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Diplazo).HasColumnName("DIPLAZO");

                entity.Property(e => e.Dirconta)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("DIRCONTA");

                entity.Property(e => e.Dircontaa)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("DIRCONTAA");

                entity.Property(e => e.Dircorres)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("DIRCORRES");

                entity.Property(e => e.Direccion)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("DIRECCION");

                entity.Property(e => e.Dirgerente)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("DIRGERENTE");

                entity.Property(e => e.Divpolitica)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("DIVPOLITICA")
                    .HasDefaultValueSql("('OTROS')")
                    .IsFixedLength();

                entity.Property(e => e.Email)
                    .HasMaxLength(800)
                    .IsUnicode(false)
                    .HasColumnName("EMAIL");

                entity.Property(e => e.Emailconta)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("EMAILCONTA");

                entity.Property(e => e.Emailcontaa)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("EMAILCONTAA");

                entity.Property(e => e.Emailgeren)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("EMAILGEREN");

                entity.Property(e => e.Fax)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("FAX");

                entity.Property(e => e.FormatoDeFactura)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.FormatoDeFacturaRemision)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.FormatoDePedido)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.FormatoDeRemision)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Fpagcontado)
                    .HasColumnName("FPAGCONTADO")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Fpagcredito)
                    .HasColumnName("FPAGCREDITO")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Gerente)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("GERENTE");

                entity.Property(e => e.GrEmpresarial)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.IdenClientes)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_clientes");

                entity.Property(e => e.Idtercero)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("IDTERCERO");

                entity.Property(e => e.Idvende)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("IDVENDE")
                    .IsFixedLength();

                entity.Property(e => e.Idzona)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("IDZONA")
                    .IsFixedLength();

                entity.Property(e => e.IndNcf)
                    .HasColumnName("IndNCF")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.IntMora).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.Item)
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.Pais)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.ProveedorTecnologico)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Razoncial)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("RAZONCIAL");

                entity.Property(e => e.Segmento)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("SEGMENTO")
                    .HasDefaultValueSql("('OTROS')")
                    .IsFixedLength();

                entity.Property(e => e.Tag)
                    .HasMaxLength(256)
                    .IsUnicode(false)
                    .HasColumnName("TAG");

                entity.Property(e => e.Telconta)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("TELCONTA");

                entity.Property(e => e.Telcontaa)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("TELCONTAA");

                entity.Property(e => e.Telefono)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("TELEFONO");

                entity.Property(e => e.Telgerente)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("TELGERENTE");

                entity.Property(e => e.Tipo)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('N')")
                    .IsFixedLength();

                entity.Property(e => e.TipoCliente)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.TipoNotificacionFe)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("TipoNotificacion_FE");

                entity.Property(e => e.UsoLibre).IsUnicode(false);

                entity.Property(e => e.VersionDeLaFila)
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.Website)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("WEBSITE");

                entity.HasOne(d => d.CentroCostoNavigation)
                    .WithMany(p => p.Clientes)
                    .HasForeignKey(d => d.CentroCosto)
                    .HasConstraintName("FK_Clientes_MAECCO");

                entity.HasOne(d => d.CodictaNavigation)
                    .WithMany(p => p.Clientes)
                    .HasForeignKey(d => d.Codicta)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CLIENTES_MAECONT");

                entity.HasOne(d => d.CodigoubicacionNavigation)
                    .WithMany(p => p.Clientes)
                    .HasForeignKey(d => d.Codigoubicacion)
                    .HasConstraintName("FK_CLIENTES_UBICACIONGEOGRAFICA");

                entity.HasOne(d => d.DivpoliticaNavigation)
                    .WithMany(p => p.Clientes)
                    .HasForeignKey(d => d.Divpolitica)
                    .HasConstraintName("FK_CLIENTES_DIVPOLITICA");

                entity.HasOne(d => d.GrEmpresarialNavigation)
                    .WithMany(p => p.Clientes)
                    .HasForeignKey(d => d.GrEmpresarial)
                    .HasConstraintName("FK_CLIENTES_GrEmpresarial");

                entity.HasOne(d => d.IdterceroNavigation)
                    .WithMany(p => p.Clientes)
                    .HasForeignKey(d => d.Idtercero)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CLIENTES_TERCEROS");

                entity.HasOne(d => d.IdvendeNavigation)
                    .WithMany(p => p.Clientes)
                    .HasForeignKey(d => d.Idvende)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CLIENTES_MAEVENDE");

                entity.HasOne(d => d.IdzonaNavigation)
                    .WithMany(p => p.Clientes)
                    .HasForeignKey(d => d.Idzona)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CLIENTES_MAEZONAS");

                entity.HasOne(d => d.ItemNavigation)
                    .WithMany(p => p.Clientes)
                    .HasForeignKey(d => d.Item)
                    .HasConstraintName("FK_Clientes_Items");

                entity.HasOne(d => d.PaisNavigation)
                    .WithMany(p => p.Clientes)
                    .HasForeignKey(d => d.Pais)
                    .HasConstraintName("FK_CLIENTES_Paises");

                entity.HasOne(d => d.ProveedorTecnologicoNavigation)
                    .WithMany(p => p.Clientes)
                    .HasForeignKey(d => d.ProveedorTecnologico)
                    .HasConstraintName("FK_Clientes_ProveedorTecnologico");

                entity.HasOne(d => d.SegmentoNavigation)
                    .WithMany(p => p.Clientes)
                    .HasForeignKey(d => d.Segmento)
                    .HasConstraintName("FK_CLIENTES_SEGMENTO");

                entity.HasOne(d => d.TipoClienteNavigation)
                    .WithMany(p => p.Clientes)
                    .HasForeignKey(d => d.TipoCliente)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CLIENTES_TIPOCLIENTES");
            });

            modelBuilder.Entity<ClientesActMod>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ClientesActMod");

                entity.Property(e => e.Bu)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("BU");

                entity.Property(e => e.Cliente)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.IdDocum)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.IdenClientesactmod)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_clientesactmod");

                entity.Property(e => e.Idmodelo)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Nombre)
                    .HasMaxLength(40)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ClientesAnticipo>(entity =>
            {
                entity.HasKey(e => new { e.IdCliente, e.Cuenta, e.Auxiliar })
                    .IsClustered(false);

                entity.ToTable("Clientes_Anticipos");

                entity.Property(e => e.IdCliente)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Cuenta)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Auxiliar)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.IdenClientesAnticipos)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_clientes_anticipos");

                entity.HasOne(d => d.CuentaNavigation)
                    .WithMany(p => p.ClientesAnticipos)
                    .HasForeignKey(d => d.Cuenta)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Clientes_Anticipos_MAECONT");

                entity.HasOne(d => d.IdClienteNavigation)
                    .WithMany(p => p.ClientesAnticipos)
                    .HasForeignKey(d => d.IdCliente)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Clientes_Anticipos_CLIENTES");

                entity.HasOne(d => d.AuxiliarNavigation)
                    .WithMany(p => p.ClientesAnticipos)
                    .HasForeignKey(d => new { d.Cuenta, d.Auxiliar })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Clientes_Anticipos_AUXILIAR");
            });

            modelBuilder.Entity<ClientesAsobancarium>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.Cliente)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.IdenClientesasobancaria)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_clientesasobancaria");

                entity.Property(e => e.Spid).HasColumnName("spid");

                entity.Property(e => e.Valor)
                    .HasMaxLength(18)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ClientesCuentasPorMonedum>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Clientes_CuentasPorMoneda");

                entity.HasIndex(e => new { e.Idcliente, e.Idmoneda }, "UQ_Clientes_CuentasPorMoneda_IdCLiente_IdMoneda")
                    .IsUnique()
                    .IsClustered();

                entity.Property(e => e.Codicta)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("CODICTA")
                    .IsFixedLength();

                entity.Property(e => e.Codictaremision)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("CODICTAREMISION")
                    .IsFixedLength();

                entity.Property(e => e.CupoCredito).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.Idcliente)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("IDCLIENTE");

                entity.Property(e => e.Iden)
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Idmoneda)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("IDMONEDA")
                    .IsFixedLength();
            });

            modelBuilder.Entity<ClientesCxCmora>(entity =>
            {
                entity.HasKey(e => new { e.Cliente, e.CxC });

                entity.ToTable("Clientes_CxCMora");

                entity.Property(e => e.Cliente)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.CxC)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.IdenClientesCxcmora)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_clientes_cxcmora");

                entity.HasOne(d => d.ClienteNavigation)
                    .WithMany(p => p.ClientesCxCmoras)
                    .HasForeignKey(d => d.Cliente)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Clientes_CxCMora_CLIENTES");

                entity.HasOne(d => d.CxCNavigation)
                    .WithMany(p => p.ClientesCxCmoras)
                    .HasForeignKey(d => d.CxC)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Clientes_CxCMora_MAECONT");
            });

            modelBuilder.Entity<ClientesEmail>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Clientes_Email");

                entity.Property(e => e.EmailComprobantes)
                    .HasMaxLength(800)
                    .IsUnicode(false)
                    .HasColumnName("Email_Comprobantes");

                entity.Property(e => e.EmailDefecto)
                    .HasMaxLength(800)
                    .IsUnicode(false)
                    .HasColumnName("Email_Defecto");

                entity.Property(e => e.EmailExtracto)
                    .HasMaxLength(800)
                    .IsUnicode(false)
                    .HasColumnName("Email_Extracto");

                entity.Property(e => e.EmailFacturaElectronica)
                    .HasMaxLength(800)
                    .IsUnicode(false)
                    .HasColumnName("Email_FacturaElectronica");

                entity.Property(e => e.Idcliente)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("IDCLIENTE");
            });

            modelBuilder.Entity<CombinacionTiposEmpresa>(entity =>
            {
                entity.HasKey(e => e.CodigoCombinacion)
                    .IsClustered(false);

                entity.ToTable("CombinacionTiposEmpresa");

                entity.HasIndex(e => new { e.TipoEmpresaLocal, e.TipoEmpresaExterna }, "IX_COMBINACIONTIPOSEMPRESA_TIPOEMPRESAEXTERNA_TIPOEMPRESALOCAL")
                    .IsUnique();

                entity.Property(e => e.CodigoCombinacion)
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.TipoEmpresaExterna)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.TipoEmpresaLocal)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.VersionDeLaFila)
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.TipoEmpresaExternaNavigation)
                    .WithMany(p => p.CombinacionTiposEmpresaTipoEmpresaExternaNavigations)
                    .HasForeignKey(d => d.TipoEmpresaExterna)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CombinacionTiposEmpresa_TiposDeEmpresa1");

                entity.HasOne(d => d.TipoEmpresaLocalNavigation)
                    .WithMany(p => p.CombinacionTiposEmpresaTipoEmpresaLocalNavigations)
                    .HasForeignKey(d => d.TipoEmpresaLocal)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CombinacionTiposEmpresa_TiposDeEmpresa");
            });

            modelBuilder.Entity<ComprobanteRetencion>(entity =>
            {
                entity.HasKey(e => e.Iden);

                entity.ToTable("ComprobanteRetencion");

                entity.Property(e => e.Iden)
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Codigo).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.Cuenta)
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.Documento)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.DocumentoEgreso)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Estado)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Fecha)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.FechaEmision)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Fuente)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.FuenteEgreso)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.IdentificadorProv)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("Identificador_Prov");

                entity.Property(e => e.IdentificadorRete)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("Identificador_Rete");

                entity.Property(e => e.ImportePagado).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.ImporteRetenido).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.Observacion).IsUnicode(false);

                entity.Property(e => e.Proveedor)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.RegimenRete)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("Regimen_Rete");

                entity.Property(e => e.Serie)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.TasaRetencion).HasColumnType("numeric(18, 3)");

                entity.Property(e => e.Tercero)
                    .HasMaxLength(25)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ComprobanteRetencionFactura>(entity =>
            {
                entity.HasKey(e => e.Iden);

                entity.ToTable("ComprobanteRetencion_Facturas");

                entity.Property(e => e.Iden)
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Bu)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("BU");

                entity.Property(e => e.Cuenta)
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.FechaCambio)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.FechaEmision)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.FechaPago)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.FechaRetencion)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.IdenComprobante)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("Iden_Comprobante");

                entity.Property(e => e.Identificador)
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.ImportePagoSinRetencion).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.ImporteRetenido).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.ImporteTotal).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.ImporteTotalPagar).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.MonedaObjetivoTipoCambio)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.MonedaPago)
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.MonedaReferenciaTipoCambio)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.NumeroFactura)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NumeroPago).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.ReferenciaFactura)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.TipoFactura)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.TipoMoneda)
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.VencimientoFactura)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdenComprobanteNavigation)
                    .WithMany(p => p.ComprobanteRetencionFacturas)
                    .HasForeignKey(d => d.IdenComprobante)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ComprobanteRetencion_Facturas_ComprobanteRetencion_Iden");
            });

            modelBuilder.Entity<ConceptosAutomatico>(entity =>
            {
                entity.HasKey(e => e.Iden)
                    .IsClustered(false);

                entity.HasIndex(e => e.Iden, "IX_CONCEPTOSAUTOMATICOS_IDEN")
                    .IsUnique()
                    .IsClustered();

                entity.HasIndex(e => new { e.CategoriaFiscal, e.Concepto }, "UQ_CONCEPTOSAUTOMATICOS_CATEGORIAFISCAL_CONCEPTO")
                    .IsUnique();

                entity.Property(e => e.Iden)
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("IDEN");

                entity.Property(e => e.CategoriaFiscal)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Concepto)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.HasOne(d => d.CategoriaFiscalNavigation)
                    .WithMany(p => p.ConceptosAutomaticos)
                    .HasForeignKey(d => d.CategoriaFiscal)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ConceptosAutomaticos_TiposDeEmpresa");

                entity.HasOne(d => d.ConceptoNavigation)
                    .WithMany(p => p.ConceptosAutomaticos)
                    .HasForeignKey(d => d.Concepto)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ConceptosAutomaticos_FACTCONC");
            });

            modelBuilder.Entity<ConceptosAutomaticosUbicacion>(entity =>
            {
                entity.HasKey(e => new { e.IdenConceptoAuto, e.CodigoUbicacion, e.CodigoUbicacionUsuario });

                entity.ToTable("ConceptosAutomaticosUbicacion");

                entity.Property(e => e.IdenConceptoAuto)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("IDEN_ConceptoAuto");

                entity.Property(e => e.CodigoUbicacion)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.CodigoUbicacionUsuario)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.IdenConceptosautomaticosubicacion)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_conceptosautomaticosubicacion");

                entity.HasOne(d => d.CodigoUbicacionNavigation)
                    .WithMany(p => p.ConceptosAutomaticosUbicacionCodigoUbicacionNavigations)
                    .HasForeignKey(d => d.CodigoUbicacion)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ConceptosAutomaticosUbicacion_UBICACIONGEOGRAFICA");

                entity.HasOne(d => d.CodigoUbicacionUsuarioNavigation)
                    .WithMany(p => p.ConceptosAutomaticosUbicacionCodigoUbicacionUsuarioNavigations)
                    .HasForeignKey(d => d.CodigoUbicacionUsuario)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ConceptosAutomaticosUbicacion_UBICACIONGEOGRAFICA1");

                entity.HasOne(d => d.IdenConceptoAutoNavigation)
                    .WithMany(p => p.ConceptosAutomaticosUbicacions)
                    .HasForeignKey(d => d.IdenConceptoAuto)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ConceptosAutomaticosUbicacion_ConceptosAutomaticos");
            });

            modelBuilder.Entity<Condicionesdecredito>(entity =>
            {
                entity.HasKey(e => e.Iden);

                entity.ToTable("condicionesdecredito");

                entity.HasIndex(e => e.Codigo, "IX_condicionesdecredito_codigo")
                    .IsUnique();

                entity.Property(e => e.Iden)
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("iden");

                entity.Property(e => e.Auxiliar)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("auxiliar")
                    .IsFixedLength();

                entity.Property(e => e.AuxiliarGanancia)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("auxiliarGanancia")
                    .IsFixedLength();

                entity.Property(e => e.AuxiliarPerdida)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("auxiliarPerdida")
                    .IsFixedLength();

                entity.Property(e => e.Centrocosto)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("centrocosto")
                    .IsFixedLength();

                entity.Property(e => e.CentrocostoGanancia)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("centrocostoGanancia")
                    .IsFixedLength();

                entity.Property(e => e.CentrocostoPerdida)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("centrocostoPerdida")
                    .IsFixedLength();

                entity.Property(e => e.Codigo)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("codigo");

                entity.Property(e => e.ConfAuxiliar)
                    .HasColumnName("Conf_Auxiliar")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.CtaDiferencia)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("ctaDiferencia")
                    .IsFixedLength();

                entity.Property(e => e.Ctaingreso)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("ctaingreso")
                    .IsFixedLength();

                entity.Property(e => e.CtaingresoGanancia)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("ctaingresoGanancia")
                    .IsFixedLength();

                entity.Property(e => e.CtaingresoPerdida)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("ctaingresoPerdida")
                    .IsFixedLength();

                entity.Property(e => e.Deshabilitada).HasColumnName("deshabilitada");

                entity.Property(e => e.Detalle)
                    .HasMaxLength(8000)
                    .IsUnicode(false)
                    .HasColumnName("detalle");

                entity.Property(e => e.IdenTasasInteres).HasColumnName("Iden_TasasInteres");

                entity.Property(e => e.Item)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("item");

                entity.Property(e => e.ItemGanancia)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("itemGanancia");

                entity.Property(e => e.ItemPerdida)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("itemPerdida");

                entity.Property(e => e.ManejaTinteresVariable).HasColumnName("ManejaTInteresVariable");

                entity.Property(e => e.ModificarTasaInteres).HasColumnName("modificar_tasa_interes");

                entity.Property(e => e.ModificarTasaInteresComparativa).HasColumnName("modificar_tasa_interes_comparativa");

                entity.Property(e => e.Nombre)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("nombre");

                entity.Property(e => e.Propiedad1)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("propiedad1");

                entity.Property(e => e.Propiedad1Ganancia)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("propiedad1Ganancia");

                entity.Property(e => e.Propiedad1Perdida)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("propiedad1Perdida");

                entity.Property(e => e.Propiedad2)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("propiedad2");

                entity.Property(e => e.Propiedad2Ganancia)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("propiedad2Ganancia");

                entity.Property(e => e.Propiedad2Perdida)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("propiedad2Perdida");

                entity.Property(e => e.Propiedad3)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("propiedad3");

                entity.Property(e => e.Propiedad3Ganancia)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("propiedad3Ganancia");

                entity.Property(e => e.Propiedad3Perdida)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("propiedad3Perdida");

                entity.Property(e => e.Propiedad4)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("propiedad4");

                entity.Property(e => e.Propiedad4Ganancia)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("propiedad4Ganancia");

                entity.Property(e => e.Propiedad4Perdida)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("propiedad4Perdida");

                entity.Property(e => e.Propiedad5)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("propiedad5");

                entity.Property(e => e.Propiedad5Ganancia)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("propiedad5Ganancia");

                entity.Property(e => e.Propiedad5Perdida)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("propiedad5Perdida");

                entity.Property(e => e.TasaInteresMax).HasColumnName("tasa_interes_max");

                entity.Property(e => e.TasaInteresMin).HasColumnName("tasa_interes_min");

                entity.Property(e => e.TasaPeriodo).HasColumnName("tasaPeriodo");

                entity.Property(e => e.TipoAmortizacion).HasColumnName("tipoAmortizacion");

                entity.Property(e => e.TipoCobroInteres).HasColumnName("tipo_cobro_interes");

                entity.Property(e => e.TipoCondicion).HasColumnName("tipo_condicion");

                entity.Property(e => e.TipoInteresPactado).HasColumnName("tipo_interes_pactado");

                entity.Property(e => e.TipoPeriodicidad).HasColumnName("tipo_periodicidad");

                entity.Property(e => e.TipoTasaInteres).HasColumnName("tipo_tasa_interes");
            });

            modelBuilder.Entity<CondicionesdecreditoLibro>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("condicionesdecredito_libros");

                entity.Property(e => e.IdenCondicionesdecredito)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("iden_condicionesdecredito");

                entity.Property(e => e.IdenCondicionesdecreditoLibros)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_condicionesdecredito_libros");

                entity.Property(e => e.IdenLibro)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("iden_libro");
            });

            modelBuilder.Entity<CondicionesdecreditoUsuario>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("condicionesdecredito_usuarios");

                entity.Property(e => e.IdenCondicionesdecredito)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("iden_condicionesdecredito");

                entity.Property(e => e.IdenCondicionesdecreditoUsuarios)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_condicionesdecredito_usuarios");

                entity.Property(e => e.Usuario)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("usuario");
            });

            modelBuilder.Entity<ConfigVencDetraccion>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ConfigVencDetraccion");

                entity.Property(e => e.IdenConfigvencdetraccion)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_configvencdetraccion");

                entity.Property(e => e.Tipo)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.TipoDetra)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();
            });

            modelBuilder.Entity<ConfiguracionEmail>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ConfiguracionEmail");

                entity.Property(e => e.Autenticar).HasDefaultValueSql("((1))");

                entity.Property(e => e.Contraseña)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.CorreoEntrante)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.CorreoSaliente)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.EmailCopiaSeguridad)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.EnableSsl)
                    .HasColumnName("EnableSSL")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.IdenConfiguracionemail)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_configuracionemail");

                entity.Property(e => e.Login)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.Puerto)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.Usuario)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");
            });

            modelBuilder.Entity<ConfiguracionEmailCobro>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.ClienteFin)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.ClienteIni)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Codigo)
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.FechaF)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.FechaPromesa)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.GrEmpresarialFin)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.GrEmpresarialIni)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Iden)
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.IndCliente).HasColumnName("indCliente");

                entity.Property(e => e.IndGrEmpresarial).HasColumnName("indGrEmpresarial");

                entity.Property(e => e.IndMostrarDetalle).HasColumnName("indMostrarDetalle");

                entity.Property(e => e.IndSegmento).HasColumnName("indSegmento");

                entity.Property(e => e.IndTercero).HasColumnName("indTercero");

                entity.Property(e => e.IndTipoCliente).HasColumnName("indTipoCliente");

                entity.Property(e => e.IndVendedor).HasColumnName("indVendedor");

                entity.Property(e => e.IndZona).HasColumnName("indZona");

                entity.Property(e => e.Nombre)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.PersonalCobro)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Plantilla)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.SegmentoFin)
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.SegmentoIni)
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.TerceroFin)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.TerceroIni)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.TipoClienteFin)
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.TipoClienteIni)
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Usuario)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.VendedorFin)
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.VendedorIni)
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.ZonaFin)
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.ZonaIni)
                    .HasMaxLength(3)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ConfiguracionEmailValera>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.ClienteFin)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.ClienteIni)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Codigo)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.FechaAnalisis)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Iden).ValueGeneratedOnAdd();

                entity.Property(e => e.Nombre)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Plantilla)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.PrefijoFin)
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.PrefijoIni)
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.TerceroFin)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.TerceroIni)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Usuario)
                    .HasMaxLength(250)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ConfiguracionIyB319>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ConfiguracionIyB_319");

                entity.Property(e => e.Columna).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.Cuenta)
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.Iden)
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<ConfiguracionOpcione>(entity =>
            {
                entity.HasKey(e => new { e.IdMenu, e.Pariente, e.IdForma });

                entity.Property(e => e.IdForma)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("idForma");

                entity.Property(e => e.IdenConfiguracionopciones)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_configuracionopciones");

                entity.Property(e => e.Nombre)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ConfiguracionesEspecifica>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.Iden)
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.IdenCampo)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("Iden_Campo");

                entity.Property(e => e.IdenOpcion)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("Iden_Opcion");

                entity.Property(e => e.ValorCampo)
                    .HasMaxLength(25)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ConsultaMovimiento>(entity =>
            {
                entity.HasKey(e => e.Nombre);

                entity.Property(e => e.Nombre)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.Adicional1)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Adicional_1")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Adicional2)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Adicional_2")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AuxiliarF)
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.AuxiliarI)
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.BancoF)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.BancoI)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Bu)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("BU")
                    .HasDefaultValueSql("('Local')");

                entity.Property(e => e.CentroCostoF)
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.CentroCostoI)
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.ClienteF)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.ClienteI)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.CodigoOcupacionF)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.CodigoOcupacionI)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.CondicionValorTra)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.CuentaF)
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.CuentaI)
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.DocumentoF)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.DocumentoI)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.FacturaF)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.FacturaI)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.FechaF).HasColumnType("smalldatetime");

                entity.Property(e => e.FechaI).HasColumnType("smalldatetime");

                entity.Property(e => e.FiltrarAuxiliar)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.FiltrarBanco)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.FiltrarCentroCosto)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.FiltrarCliente)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.FiltrarCodigoOcupacion)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.FiltrarCuenta)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.FiltrarDc)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("FiltrarDC")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.FiltrarDocDescuadrados)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.FiltrarDocumento)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.FiltrarFactura)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.FiltrarFecha)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.FiltrarFuente)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.FiltrarItem)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.FiltrarPlaza)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.FiltrarPorTopRegistros)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.FiltrarPropiedad1)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.FiltrarPropiedad2)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.FiltrarPropiedad3)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.FiltrarPropiedad4)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.FiltrarPropiedad5)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.FiltrarProveedor)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.FiltrarReservaPre)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.FiltrarRubroPresupuesto)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.FiltrarTercero)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.FiltrarTipoFactura)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.FiltrarUsuario)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.FiltrarValorTra)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.FiltrarVendedor)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.FiltrarZona)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.FuenteF)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.FuenteI)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.IdenConsultamovimientos)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_consultamovimientos");

                entity.Property(e => e.ItemF)
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.ItemI)
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.Ncf)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("NCF")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Orden1)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Orden2)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Orden3)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Orden4)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Orden5)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.PlazaF)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.PlazaI)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Propiedad1F)
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.Propiedad1I)
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.Propiedad2F)
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.Propiedad2I)
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.Propiedad3F)
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.Propiedad3I)
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.Propiedad4F)
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.Propiedad4I)
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.Propiedad5F)
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.Propiedad5I)
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.ProveedorF)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.ProveedorI)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.ReservaF)
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.ReservaI)
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.RubroPresupuestoF)
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.RubroPresupuestoI)
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.TerceroF)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.TerceroI)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.TipoDc)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("TipoDC");

                entity.Property(e => e.TipoFacturaF)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.TipoFacturaI)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioF)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioI)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.ValorTraF).HasColumnType("money");

                entity.Property(e => e.ValorTraI).HasColumnType("money");

                entity.Property(e => e.VendedorF)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.VendedorI)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.ZonaF)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.ZonaI)
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ContDatosSincronizacion>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Cont_DatosSincronizacion");

                entity.HasIndex(e => e.FechaRegistro, "IX_Cont_DatosSincronizacion_Fecha_Registro");

                entity.Property(e => e.FechaRegistro)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("Fecha_Registro")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Id)
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.IdUsuarioCont)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("IdUsuario_Cont");

                entity.Property(e => e.IndSincronizacion)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.TextSql)
                    .HasMaxLength(8000)
                    .IsUnicode(false)
                    .HasColumnName("TextSQL");
            });

            modelBuilder.Entity<ContDeterioroLog>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Cont_Deterioro_Log");

                entity.Property(e => e.Bu)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("bu");

                entity.Property(e => e.Codicta)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("codicta")
                    .IsFixedLength();

                entity.Property(e => e.Documento)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("documento")
                    .IsFixedLength();

                entity.Property(e => e.Fuente)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("fuente")
                    .IsFixedLength();

                entity.Property(e => e.Id).ValueGeneratedOnAdd();

                entity.Property(e => e.Idcliprv)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("idcliprv");

                entity.Property(e => e.Numerofactura)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("numerofactura");

                entity.Property(e => e.Referenciafactura)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("referenciafactura");

                entity.Property(e => e.Saldo)
                    .HasColumnType("money")
                    .HasColumnName("saldo");

                entity.Property(e => e.Saldomoneda)
                    .HasColumnType("money")
                    .HasColumnName("saldomoneda");

                entity.Property(e => e.Tipofactura)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("tipofactura")
                    .IsFixedLength();

                entity.Property(e => e.Valordeterioro)
                    .HasColumnType("money")
                    .HasColumnName("valordeterioro");

                entity.Property(e => e.Valordeterioroacumulado)
                    .HasColumnType("money")
                    .HasColumnName("valordeterioroacumulado");

                entity.Property(e => e.Vencimientofactura)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("vencimientofactura")
                    .IsFixedLength();
            });

            modelBuilder.Entity<ContIfLogCambio>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Cont_IF_LogCambio");

                entity.Property(e => e.Descripcion).IsUnicode(false);

                entity.Property(e => e.Documento)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Fecha)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.FechaGrabacion).HasColumnType("datetime");

                entity.Property(e => e.Fuente)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Id)
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.IdAnterior).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.IdNuevo).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.Usuario)
                    .HasMaxLength(250)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ContPppConceptoPago>(entity =>
            {
                entity.HasKey(e => e.Iden);

                entity.ToTable("Cont_PPP_Concepto_Pago");

                entity.HasIndex(e => e.Codigo, "IX_Cont_PPP_Concepto_Pago_codigo");

                entity.Property(e => e.Iden)
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Auxiliar)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("auxiliar");

                entity.Property(e => e.Bu)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("bu");

                entity.Property(e => e.Codigo)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("codigo");

                entity.Property(e => e.Cuenta)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("cuenta");

                entity.Property(e => e.Habilitado).HasColumnName("habilitado");

                entity.Property(e => e.Idcenco)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("idcenco");

                entity.Property(e => e.Item)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("item");

                entity.Property(e => e.Moneda)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Nombre)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("nombre");

                entity.Property(e => e.Propiedad1)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("propiedad1");

                entity.Property(e => e.Propiedad2)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("propiedad2");

                entity.Property(e => e.Propiedad3)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("propiedad3");

                entity.Property(e => e.Propiedad4)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("propiedad4");

                entity.Property(e => e.Propiedad5)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("propiedad5");

                entity.Property(e => e.TasaCambio).HasColumnType("money");
            });

            modelBuilder.Entity<ContPppDetalleTercero>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("CONT_PPP_DetalleTercero");

                entity.Property(e => e.CodigoPpp)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("CodigoPPP");

                entity.Property(e => e.Iden)
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.IdenConcepto)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("Iden_Concepto");

                entity.Property(e => e.Matricula)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Tercero)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Tipo)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Valor).HasColumnType("numeric(18, 2)");
            });

            modelBuilder.Entity<ContPppEstado>(entity =>
            {
                entity.HasKey(e => e.Iden);

                entity.ToTable("Cont_PPP_Estados");

                entity.HasIndex(e => e.Codigo, "IX_Cont_PPP_Estados_codigo")
                    .IsUnique();

                entity.Property(e => e.Iden)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("iden");

                entity.Property(e => e.Codigo)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("codigo");

                entity.Property(e => e.IdenContPppEstados)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_cont_ppp_estados");

                entity.Property(e => e.Nombre)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("nombre");
            });

            modelBuilder.Entity<ContPppMetodoPago>(entity =>
            {
                entity.HasKey(e => e.Iden);

                entity.ToTable("Cont_PPP_Metodo_Pago");

                entity.HasIndex(e => e.Codigo, "IX_Cont_PPP_Metodo_Pago_codigo")
                    .IsUnique();

                entity.Property(e => e.Iden)
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("iden");

                entity.Property(e => e.Aplica)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('E')")
                    .IsFixedLength();

                entity.Property(e => e.Banco)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Chequera)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Codigo)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("codigo");

                entity.Property(e => e.Cuenta)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.FuenteDefault)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.GastoInterBanc)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Habilitado).HasColumnName("habilitado");

                entity.Property(e => e.IdenGerencia).HasColumnName("Iden_Gerencia");

                entity.Property(e => e.Moneda)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Nombre)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("nombre");

                entity.Property(e => e.Numefac)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("numefac");

                entity.Property(e => e.NumeroCuentaGerencia)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("NumeroCuenta_Gerencia")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Plaza)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Refefac)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("refefac");

                entity.Property(e => e.RptFormato)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.SerieDefault)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.TipoCuentaGerencia)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("TipoCuenta_Gerencia")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Vencefac)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("vencefac");

                entity.HasOne(d => d.CuentaNavigation)
                    .WithMany(p => p.ContPppMetodoPagos)
                    .HasForeignKey(d => d.Cuenta)
                    .HasConstraintName("FK_MAECONT_Cont_PPP_Metodo_Pago");
            });

            modelBuilder.Entity<ContPppPersonalAutorizacion>(entity =>
            {
                entity.HasKey(e => e.Personal);

                entity.ToTable("Cont_PPP_PersonalAutorizacion");

                entity.Property(e => e.Personal)
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.IdenContPppPersonalautorizacion)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_cont_ppp_personalautorizacion");

                entity.Property(e => e.MontoValor).HasColumnType("money");
            });

            modelBuilder.Entity<ContPppPersonalAutorizacionUsuario>(entity =>
            {
                entity.HasKey(e => new { e.Usuario, e.UsuarioAutorizado });

                entity.ToTable("Cont_PPP_PersonalAutorizacion_Usuarios");

                entity.Property(e => e.Usuario)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioAutorizado)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.IdenContPppPersonalautorizacionUsuarios)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_cont_ppp_personalautorizacion_usuarios");
            });

            modelBuilder.Entity<ContPppProgramacione>(entity =>
            {
                entity.HasKey(e => e.Iden);

                entity.ToTable("Cont_PPP_Programaciones");

                entity.HasIndex(e => e.Codigo, "IX_Cont_PPP_Programaciones_codigo")
                    .IsUnique();

                entity.Property(e => e.Iden)
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("iden");

                entity.Property(e => e.Bu)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Codigo)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("codigo");

                entity.Property(e => e.ConsultarBu)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.DescripcionDocumento)
                    .HasMaxLength(120)
                    .IsUnicode(false)
                    .HasColumnName("descripcionDocumento");

                entity.Property(e => e.DescripcionDocumentoConciliacion)
                    .HasMaxLength(120)
                    .IsUnicode(false)
                    .HasColumnName("descripcionDocumentoConciliacion");

                entity.Property(e => e.Documento)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("documento")
                    .IsFixedLength();

                entity.Property(e => e.DocumentoConciliacion)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("documentoConciliacion")
                    .IsFixedLength();

                entity.Property(e => e.Fecha)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("fecha")
                    .IsFixedLength();

                entity.Property(e => e.FechaComprobante)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("fechaComprobante")
                    .IsFixedLength();

                entity.Property(e => e.FechaComprobanteConciliacion)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("fechaComprobanteConciliacion")
                    .IsFixedLength();

                entity.Property(e => e.FechaGrabacion)
                    .HasColumnType("datetime")
                    .HasColumnName("fecha_grabacion");

                entity.Property(e => e.Fuente)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("fuente")
                    .IsFixedLength();

                entity.Property(e => e.FuenteConciliacion)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("fuenteConciliacion")
                    .IsFixedLength();

                entity.Property(e => e.IdenEstado)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("iden_estado");

                entity.Property(e => e.IdenMetodoPago)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("iden_metodo_Pago");

                entity.Property(e => e.Item)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("item");

                entity.Property(e => e.ItemConciliacion)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("itemConciliacion");

                entity.Property(e => e.Observaciones)
                    .IsUnicode(false)
                    .HasColumnName("observaciones");

                entity.Property(e => e.Pppconciliacion)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("PPPconciliacion")
                    .IsFixedLength();

                entity.Property(e => e.TasaCambio).HasColumnType("money");

                entity.Property(e => e.Usuario)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("usuario");

                entity.Property(e => e.UsuarioAprobacion)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("usuarioAprobacion");

                entity.HasOne(d => d.IdenMetodoPagoNavigation)
                    .WithMany(p => p.ContPppProgramaciones)
                    .HasForeignKey(d => d.IdenMetodoPago)
                    .HasConstraintName("FK_Cont_PPP_Programaciones_Cont_PPP_Metodo_Pago");
            });

            modelBuilder.Entity<ContPppProgramacionesBloqueoFac>(entity =>
            {
                entity.ToTable("Cont_PPP_Programaciones_BloqueoFac");

                entity.Property(e => e.Id)
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("id");

                entity.Property(e => e.Bu)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("BU");

                entity.Property(e => e.Codicta)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("CODICTA");

                entity.Property(e => e.Idcliprv)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("IDCLIPRV");

                entity.Property(e => e.Numefac)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("NUMEFAC");

                entity.Property(e => e.Refefac)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("REFEFAC");

                entity.Property(e => e.Tipofact)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("TIPOFACT");

                entity.Property(e => e.Vencfac)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("VENCFAC");
            });

            modelBuilder.Entity<ContPppProgramacionesConciliacione>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Cont_PPP_Programaciones_Conciliaciones");

                entity.Property(e => e.Consecutivo).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.DescripcionConciliacion)
                    .HasMaxLength(120)
                    .IsUnicode(false);

                entity.Property(e => e.DocumentoConciliacion)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.FechaConciliacion)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.FechaGrabacion)
                    .HasColumnType("datetime")
                    .HasColumnName("Fecha_Grabacion");

                entity.Property(e => e.FuenteConciliacion)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Iden)
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.IdenProgramacion)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("Iden_Programacion");

                entity.Property(e => e.ItemConciliacion)
                    .HasMaxLength(25)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ContPppProgramacionesDocumento>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Cont_PPP_Programaciones_Documentos");

                entity.Property(e => e.BlGenChequesPosfechados).HasColumnName("bl_GenChequesPosfechados");

                entity.Property(e => e.Cheque)
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.CodigoMatriculaGerencia)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Consecutivo).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.ConsecutivoConciliacion).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.Documento)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.DocumentoConciliacion)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.DocumentoExtorno)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Fuente)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.FuenteConciliacion)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.FuenteExtorno)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.IdMoneda)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Iden)
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.IdenEstado)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("Iden_Estado");

                entity.Property(e => e.IdenMetodoPago).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.IdenOpp)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("Iden_OPP");

                entity.Property(e => e.IdenProgramacion)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("Iden_Programacion");

                entity.Property(e => e.ProTer)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Respuesta)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SecuenciaPago)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.TipoProTer)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.HasOne(d => d.IdenProgramacionNavigation)
                    .WithMany()
                    .HasForeignKey(d => d.IdenProgramacion)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Cont_PPP_Programaciones_Documentos_Cont_PPP_Programaciones");
            });

            modelBuilder.Entity<ContPppProgramacionesFactura>(entity =>
            {
                entity.HasKey(e => e.Iden)
                    .IsClustered(false);

                entity.ToTable("Cont_PPP_Programaciones_Facturas");

                entity.HasIndex(e => new { e.Bu, e.Codicta, e.Idcliprv, e.Tipofactura, e.Numerofactura, e.Vencimientofactura, e.Referenciafactura }, "IX_Cont_PPP_Programaciones_Facturas_Bu_Codicta_IdCliPrv_TipoFactura_NumeroFactura_VencimientoFactura_ReferenciaFactura");

                entity.HasIndex(e => e.IdenProgramacion, "IX_Cont_PPP_Programaciones_Facturas_iden_programacion")
                    .IsClustered();

                entity.Property(e => e.Iden)
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("iden");

                entity.Property(e => e.Bu)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("bu");

                entity.Property(e => e.Codicta)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("codicta")
                    .IsFixedLength();

                entity.Property(e => e.Codigomatriculagerencia)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("codigomatriculagerencia");

                entity.Property(e => e.Conciliado).HasColumnName("conciliado");

                entity.Property(e => e.DocumentoConciliacion)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.DocumentoExtorno)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Estado).HasColumnName("estado");

                entity.Property(e => e.EstadoAprobacion).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.Fechafactura)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("fechafactura")
                    .IsFixedLength();

                entity.Property(e => e.FuenteConciliacion)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.FuenteExtorno)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.GeneraRetencion)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Idcliprv)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("idcliprv");

                entity.Property(e => e.IdenMetodoPago).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.IdenNuevaProgramacion)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("Iden_Nueva_Programacion");

                entity.Property(e => e.IdenProgramacion)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("iden_programacion");

                entity.Property(e => e.Item)
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.Numerofactura)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("numerofactura");

                entity.Property(e => e.Opp)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("OPP");

                entity.Property(e => e.PagInterBanc)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Referenciafactura)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("referenciafactura");

                entity.Property(e => e.Saldo)
                    .HasColumnType("money")
                    .HasColumnName("saldo");

                entity.Property(e => e.Saldomoneda)
                    .HasColumnType("money")
                    .HasColumnName("saldomoneda");

                entity.Property(e => e.TasaCambio).HasColumnType("money");

                entity.Property(e => e.Tipofactura)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("tipofactura")
                    .IsFixedLength();

                entity.Property(e => e.ValorPagoFactura)
                    .HasColumnType("money")
                    .HasColumnName("valorPagoFactura");

                entity.Property(e => e.ValorPagoFacturaAjusteMoneda)
                    .HasColumnType("money")
                    .HasColumnName("valorPagoFacturaAjusteMoneda");

                entity.Property(e => e.ValorPagoFacturaMoneda)
                    .HasColumnType("money")
                    .HasColumnName("valorPagoFacturaMoneda");

                entity.Property(e => e.ValorPagoFacturaMonedaContraPartida)
                    .HasColumnType("money")
                    .HasColumnName("valorPagoFacturaMonedaContraPartida");

                entity.Property(e => e.Valorprogramado)
                    .HasColumnType("money")
                    .HasColumnName("valorprogramado");

                entity.Property(e => e.Vencimientofactura)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("vencimientofactura")
                    .IsFixedLength();

                entity.HasOne(d => d.IdenProgramacionNavigation)
                    .WithMany(p => p.ContPppProgramacionesFacturas)
                    .HasForeignKey(d => d.IdenProgramacion)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Cont_PPP_Programaciones_Facturas_Cont_PPP_Programaciones");
            });

            modelBuilder.Entity<ContPppProgramacionesLog>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Cont_PPP_Programaciones_Log");

                entity.HasIndex(e => e.IdenProgramacion, "IX_Cont_PPP_Programaciones_Log_iden_programacion")
                    .IsClustered();

                entity.Property(e => e.FechaGrabacion)
                    .HasColumnType("datetime")
                    .HasColumnName("fecha_grabacion");

                entity.Property(e => e.IdenContPppProgramacionesLog)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_cont_ppp_programaciones_log");

                entity.Property(e => e.IdenEstadoAnterior)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("iden_estado_anterior");

                entity.Property(e => e.IdenEstadoNuevo)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("iden_estado_nuevo");

                entity.Property(e => e.IdenProgramacion)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("iden_programacion");

                entity.Property(e => e.Usuario)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("usuario");

                entity.HasOne(d => d.IdenProgramacionNavigation)
                    .WithMany()
                    .HasForeignKey(d => d.IdenProgramacion)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Cont_PPP_Programaciones_Log_Cont_PPP_Programaciones");
            });

            modelBuilder.Entity<ContPppProgramacionesPago>(entity =>
            {
                entity.HasKey(e => e.Iden)
                    .IsClustered(false);

                entity.ToTable("Cont_PPP_Programaciones_Pagos");

                entity.HasIndex(e => e.IdenProgramacion, "IX_Cont_PPP_Programaciones_Pagos_iden_programacion")
                    .IsClustered();

                entity.Property(e => e.Iden)
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("iden");

                entity.Property(e => e.Auxiliar)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("auxiliar");

                entity.Property(e => e.Banco)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Bu)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("bu");

                entity.Property(e => e.CodigoMatriculaGerencia)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Conciliado).HasColumnName("conciliado");

                entity.Property(e => e.Descripcion)
                    .HasMaxLength(8000)
                    .IsUnicode(false)
                    .HasColumnName("descripcion");

                entity.Property(e => e.DocumentoConciliacion)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.DocumentoExtorno)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.EsRetencionAut)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Estado).HasColumnName("estado");

                entity.Property(e => e.EstadoAprobacion).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.FuenteConciliacion)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.FuenteExtorno)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.IdMonedaRetencion)
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.IdProvTer)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("idProvTer");

                entity.Property(e => e.Idcenco)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("idcenco");

                entity.Property(e => e.IdenConcepto)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("iden_concepto");

                entity.Property(e => e.IdenFactura).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.IdenMetodoPago).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.IdenNuevaProgramacion)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("Iden_Nueva_Programacion");

                entity.Property(e => e.IdenProgramacion)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("iden_programacion");

                entity.Property(e => e.Item)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("item");

                entity.Property(e => e.Moneda)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.NumeroMoneda)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Numero_Moneda")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Plaza)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.PorBienSer).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.Propiedad1)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("propiedad1");

                entity.Property(e => e.Propiedad2)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("propiedad2");

                entity.Property(e => e.Propiedad3)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("propiedad3");

                entity.Property(e => e.Propiedad4)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("propiedad4");

                entity.Property(e => e.Propiedad5)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("propiedad5");

                entity.Property(e => e.Referencia)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SobreExcedente).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.TasaCambio).HasColumnType("money");

                entity.Property(e => e.Tipo)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("tipo")
                    .IsFixedLength();

                entity.Property(e => e.ValorFijo).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.ValorPagoConcepto)
                    .HasColumnType("money")
                    .HasColumnName("valorPagoConcepto");

                entity.Property(e => e.ValorPagoConceptoMoneda)
                    .HasColumnType("money")
                    .HasColumnName("valorPagoConceptoMoneda");

                entity.Property(e => e.ValorPagoConceptoMonedaContraPartida)
                    .HasColumnType("money")
                    .HasColumnName("valorPagoConceptoMonedaContraPartida");

                entity.Property(e => e.ValorProgramado)
                    .HasColumnType("money")
                    .HasColumnName("valorProgramado");

                entity.Property(e => e.Vencimiento)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.HasOne(d => d.IdenConceptoNavigation)
                    .WithMany(p => p.ContPppProgramacionesPagos)
                    .HasForeignKey(d => d.IdenConcepto)
                    .HasConstraintName("FK_Cont_PPP_Programaciones_Pagos_Cont_PPP_Concepto_Pago");

                entity.HasOne(d => d.IdenProgramacionNavigation)
                    .WithMany(p => p.ContPppProgramacionesPagos)
                    .HasForeignKey(d => d.IdenProgramacion)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Cont_PPP_Programaciones_Pagos_Cont_PPP_Programaciones");
            });

            modelBuilder.Entity<ContReciboCajaExterno>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Cont_ReciboCaja_Externo");

                entity.Property(e => e.Cliente)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Descripcion)
                    .HasMaxLength(120)
                    .IsUnicode(false);

                entity.Property(e => e.DocumentoGenerado)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Fecha)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.FechaGrabacion)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("Fecha_Grabacion");

                entity.Property(e => e.Fuente)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Id)
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.MensajeError).IsUnicode(false);

                entity.Property(e => e.Serie)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Usuario)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.XmlFacturas).IsUnicode(false);

                entity.Property(e => e.XmlPagos).IsUnicode(false);
            });

            modelBuilder.Entity<ContReclasificacionMovFront>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Cont_ReclasificacionMovFront");

                entity.HasIndex(e => e.Id, "IX_Cont_ReclasificacionMovFront_Id")
                    .IsUnique()
                    .IsClustered();

                entity.Property(e => e.FechaGrabacion)
                    .HasColumnType("datetime")
                    .HasColumnName("Fecha_Grabacion");

                entity.Property(e => e.Id)
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.NodoXml)
                    .IsUnicode(false)
                    .HasColumnName("Nodo_XML");

                entity.Property(e => e.Operacion)
                    .HasMaxLength(25)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ContReclasificacionMovFrontRegistro>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Cont_ReclasificacionMovFront_Registros");

                entity.HasIndex(e => e.Id, "IX_Cont_ReclasificacionMovFront_Registros_Id")
                    .IsClustered();

                entity.HasIndex(e => e.IdReclasificacion, "IX_Cont_ReclasificacionMovFront_Registros_Id_Reclasificacion");

                entity.Property(e => e.Clase)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Folio)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Id)
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.IdReclasificacion)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("Id_Reclasificacion");

                entity.Property(e => e.IdRegistroFront)
                    .IsUnicode(false)
                    .HasColumnName("Id_Registro_Front");

                entity.Property(e => e.TerceroNuevo)
                    .HasMaxLength(25)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ContReclasificacionMovFrontRegistrosTransac>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Cont_ReclasificacionMovFront_Registros_Transac");

                entity.HasIndex(e => e.Id, "IX_Cont_ReclasificacionMovFront_Registros_Transac_Id")
                    .IsClustered();

                entity.HasIndex(e => e.IdRegistroReclasificacion, "IX_Cont_ReclasificacionMovFront_Registros_Transac_Id_Registro_Reclasificacion");

                entity.Property(e => e.ConsecutraNuevo).HasColumnName("Consecutra_Nuevo");

                entity.Property(e => e.Id)
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.IdRegistroReclasificacion)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("Id_Registro_Reclasificacion");
            });

            modelBuilder.Entity<ContSistemasAperturaLibro>(entity =>
            {
                entity.HasKey(e => e.Iden);

                entity.ToTable("Cont_Sistemas_AperturaLibro");

                entity.HasIndex(e => e.Consecutivo, "IX_Cont_Sistemas_AperturaLibro_Consecutivo")
                    .IsUnique();

                entity.HasIndex(e => new { e.IdenLibroDestino, e.IdenLibroOrigen }, "IX_Cont_Sistemas_AperturaLibro_Iden_LibroDestino_Iden_LibroOrigen")
                    .IsUnique();

                entity.Property(e => e.Iden)
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.AuxiliarGanancia)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("auxiliarGanancia")
                    .IsFixedLength();

                entity.Property(e => e.AuxiliarPerdida)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("auxiliarPerdida")
                    .IsFixedLength();

                entity.Property(e => e.CentrocostoGanancia)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("centrocostoGanancia")
                    .IsFixedLength();

                entity.Property(e => e.CentrocostoPerdida)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("centrocostoPerdida")
                    .IsFixedLength();

                entity.Property(e => e.Consecutivo).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.CtaingresoGanancia)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("ctaingresoGanancia")
                    .IsFixedLength();

                entity.Property(e => e.CtaingresoPerdida)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("ctaingresoPerdida")
                    .IsFixedLength();

                entity.Property(e => e.Documento)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Estado)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Fuente)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.IdenLibroDestino)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("Iden_LibroDestino");

                entity.Property(e => e.IdenLibroOrigen)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("Iden_LibroOrigen");

                entity.Property(e => e.ItemGanancia)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("itemGanancia");

                entity.Property(e => e.ItemPerdida)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("itemPerdida");

                entity.Property(e => e.Periodo)
                    .HasMaxLength(7)
                    .IsUnicode(false);

                entity.Property(e => e.Propiedad1Ganancia)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("propiedad1Ganancia");

                entity.Property(e => e.Propiedad1Perdida)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("propiedad1Perdida");

                entity.Property(e => e.Propiedad2Ganancia)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("propiedad2Ganancia");

                entity.Property(e => e.Propiedad2Perdida)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("propiedad2Perdida");

                entity.Property(e => e.Propiedad3Ganancia)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("propiedad3Ganancia");

                entity.Property(e => e.Propiedad3Perdida)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("propiedad3Perdida");

                entity.Property(e => e.Propiedad4Ganancia)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("propiedad4Ganancia");

                entity.Property(e => e.Propiedad4Perdida)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("propiedad4Perdida");

                entity.Property(e => e.Propiedad5Ganancia)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("propiedad5Ganancia");

                entity.Property(e => e.Propiedad5Perdida)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("propiedad5Perdida");
            });

            modelBuilder.Entity<ContSistemasAperturaLibroDiferecia>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Cont_Sistemas_AperturaLibro_Diferecias");

                entity.Property(e => e.Bu)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Cuenta)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.DiferenciaFiscal).HasColumnType("money");

                entity.Property(e => e.DiferenciaTotal).HasColumnType("money");

                entity.Property(e => e.Establecer)
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.Iden).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.IdenContSistemasAperturalibroDiferecias)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_cont_sistemas_aperturalibro_diferecias");

                entity.Property(e => e.IdenPreparacion)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("Iden_Preparacion");

                entity.Property(e => e.SaldoFiscal).HasColumnType("money");

                entity.Property(e => e.Tasa).HasColumnType("numeric(18, 6)");
            });

            modelBuilder.Entity<ContSistemasAperturaLibroSaldoAuxBu>(entity =>
            {
                entity.HasKey(e => new { e.IdenPreparacion, e.Bu, e.Cuenta, e.AuxiAux });

                entity.ToTable("Cont_Sistemas_AperturaLibro_SaldoAux_Bu");

                entity.Property(e => e.IdenPreparacion)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("Iden_Preparacion");

                entity.Property(e => e.Bu)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Cuenta)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.AuxiAux)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Iden)
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.SaldoActual).HasColumnType("money");

                entity.Property(e => e.SaldoActualMoneda).HasColumnType("money");

                entity.Property(e => e.SaldoActualMonedaNuevo).HasColumnType("money");

                entity.Property(e => e.SaldoActualNuevo).HasColumnType("money");

                entity.Property(e => e.SaldoActualUnidad1).HasColumnType("money");

                entity.Property(e => e.SaldoActualUnidad1Nuevo).HasColumnType("money");

                entity.Property(e => e.SaldoActualUnidad2).HasColumnType("money");

                entity.Property(e => e.SaldoActualUnidad2Nuevo).HasColumnType("money");

                entity.Property(e => e.SaldoActualUnidad3).HasColumnType("money");

                entity.Property(e => e.SaldoActualUnidad3Nuevo).HasColumnType("money");
            });

            modelBuilder.Entity<ContSistemasAperturaLibroSaldoCajaBu>(entity =>
            {
                entity.HasKey(e => new { e.IdenPreparacion, e.Bu, e.Cuenta, e.IdMoneda, e.NumeroDocumento, e.FechaDocumento, e.Banco });

                entity.ToTable("Cont_Sistemas_AperturaLibro_SaldoCaja_Bu");

                entity.Property(e => e.IdenPreparacion)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("Iden_Preparacion");

                entity.Property(e => e.Bu)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Cuenta)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.IdMoneda)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.NumeroDocumento)
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.FechaDocumento)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Banco)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Iden)
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.SaldoActual).HasColumnType("money");

                entity.Property(e => e.SaldoActualMoneda).HasColumnType("money");

                entity.Property(e => e.SaldoActualMonedaNuevo).HasColumnType("money");

                entity.Property(e => e.SaldoActualNuevo).HasColumnType("money");

                entity.Property(e => e.SaldoActualUnidad1).HasColumnType("money");

                entity.Property(e => e.SaldoActualUnidad1Nuevo).HasColumnType("money");

                entity.Property(e => e.SaldoActualUnidad2).HasColumnType("money");

                entity.Property(e => e.SaldoActualUnidad2Nuevo).HasColumnType("money");

                entity.Property(e => e.SaldoActualUnidad3).HasColumnType("money");

                entity.Property(e => e.SaldoActualUnidad3Nuevo).HasColumnType("money");
            });

            modelBuilder.Entity<ContSistemasAperturaLibroSaldoCcoBu>(entity =>
            {
                entity.HasKey(e => new { e.IdenPreparacion, e.Bu, e.Cuenta, e.IdCenco });

                entity.ToTable("Cont_Sistemas_AperturaLibro_SaldoCco_Bu");

                entity.Property(e => e.IdenPreparacion)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("Iden_Preparacion");

                entity.Property(e => e.Bu)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Cuenta)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.IdCenco)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Iden)
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.SaldoActual).HasColumnType("money");

                entity.Property(e => e.SaldoActualMoneda).HasColumnType("money");

                entity.Property(e => e.SaldoActualMonedaNuevo).HasColumnType("money");

                entity.Property(e => e.SaldoActualNuevo).HasColumnType("money");

                entity.Property(e => e.SaldoActualUnidad1).HasColumnType("money");

                entity.Property(e => e.SaldoActualUnidad1Nuevo).HasColumnType("money");

                entity.Property(e => e.SaldoActualUnidad2).HasColumnType("money");

                entity.Property(e => e.SaldoActualUnidad2Nuevo).HasColumnType("money");

                entity.Property(e => e.SaldoActualUnidad3).HasColumnType("money");

                entity.Property(e => e.SaldoActualUnidad3Nuevo).HasColumnType("money");
            });

            modelBuilder.Entity<ContSistemasAperturaLibroSaldoClieBu>(entity =>
            {
                entity.HasKey(e => new { e.IdenPreparacion, e.Bu, e.Cuenta, e.Cliente });

                entity.ToTable("Cont_Sistemas_AperturaLibro_SaldoClie_Bu");

                entity.Property(e => e.IdenPreparacion)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("Iden_Preparacion");

                entity.Property(e => e.Bu)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Cuenta)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Cliente)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Iden)
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.SaldoActual).HasColumnType("money");

                entity.Property(e => e.SaldoActualMoneda).HasColumnType("money");

                entity.Property(e => e.SaldoActualMonedaNuevo).HasColumnType("money");

                entity.Property(e => e.SaldoActualNuevo).HasColumnType("money");

                entity.Property(e => e.SaldoActualUnidad1).HasColumnType("money");

                entity.Property(e => e.SaldoActualUnidad1Nuevo).HasColumnType("money");

                entity.Property(e => e.SaldoActualUnidad2).HasColumnType("money");

                entity.Property(e => e.SaldoActualUnidad2Nuevo).HasColumnType("money");

                entity.Property(e => e.SaldoActualUnidad3).HasColumnType("money");

                entity.Property(e => e.SaldoActualUnidad3Nuevo).HasColumnType("money");
            });

            modelBuilder.Entity<ContSistemasAperturaLibroSaldoContBu>(entity =>
            {
                entity.HasKey(e => new { e.IdenPreparacion, e.Bu, e.Cuenta })
                    .IsClustered(false);

                entity.ToTable("Cont_Sistemas_AperturaLibro_SaldoCont_Bu");

                entity.HasIndex(e => new { e.IdenPreparacion, e.Bu, e.Cuenta }, "IX_Cont_Sistemas_AperturaLibro_SaldoCont_Bu_Iden_Preparacion_Bu_Cuenta")
                    .IsClustered();

                entity.Property(e => e.IdenPreparacion)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("Iden_Preparacion");

                entity.Property(e => e.Bu)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Cuenta)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Iden)
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.SaldoActual).HasColumnType("money");

                entity.Property(e => e.SaldoActualMoneda).HasColumnType("money");

                entity.Property(e => e.SaldoActualMonedaNuevo).HasColumnType("money");

                entity.Property(e => e.SaldoActualNuevo).HasColumnType("money");

                entity.Property(e => e.SaldoActualUnidad1).HasColumnType("money");

                entity.Property(e => e.SaldoActualUnidad1Nuevo).HasColumnType("money");

                entity.Property(e => e.SaldoActualUnidad2).HasColumnType("money");

                entity.Property(e => e.SaldoActualUnidad2Nuevo).HasColumnType("money");

                entity.Property(e => e.SaldoActualUnidad3).HasColumnType("money");

                entity.Property(e => e.SaldoActualUnidad3Nuevo).HasColumnType("money");
            });

            modelBuilder.Entity<ContSistemasAperturaLibroSaldoFacturasBu>(entity =>
            {
                entity.HasKey(e => new { e.IdenPreparacion, e.Bu, e.Cuenta, e.IdCliPrv, e.TipoFac, e.NumeFac, e.VencFac, e.RefeFac });

                entity.ToTable("Cont_Sistemas_AperturaLibro_SaldoFacturas_Bu");

                entity.Property(e => e.IdenPreparacion)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("Iden_Preparacion");

                entity.Property(e => e.Bu)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Cuenta)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.IdCliPrv)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.TipoFac)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.NumeFac)
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.VencFac)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.RefeFac)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Autorizacion)
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.FechaCaducidad)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.FechaFac)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.FechaRadicado)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.IdVende)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.IdZona)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Iden)
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.SaldoActual).HasColumnType("money");

                entity.Property(e => e.SaldoActualMoneda).HasColumnType("money");

                entity.Property(e => e.SaldoActualMonedaNuevo).HasColumnType("money");

                entity.Property(e => e.SaldoActualNuevo).HasColumnType("money");

                entity.Property(e => e.SaldoActualUnidad1).HasColumnType("money");

                entity.Property(e => e.SaldoActualUnidad1Nuevo).HasColumnType("money");

                entity.Property(e => e.SaldoActualUnidad2).HasColumnType("money");

                entity.Property(e => e.SaldoActualUnidad2Nuevo).HasColumnType("money");

                entity.Property(e => e.SaldoActualUnidad3).HasColumnType("money");

                entity.Property(e => e.SaldoActualUnidad3Nuevo).HasColumnType("money");

                entity.Property(e => e.Serie)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.VenceRadicado)
                    .HasMaxLength(10)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ContSistemasAperturaLibroSaldoItemBu>(entity =>
            {
                entity.HasKey(e => new { e.IdenPreparacion, e.Bu, e.Cuenta, e.Item });

                entity.ToTable("Cont_Sistemas_AperturaLibro_SaldoItem_Bu");

                entity.Property(e => e.IdenPreparacion)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("Iden_Preparacion");

                entity.Property(e => e.Bu)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Cuenta)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Item)
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.Iden)
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.SaldoActual).HasColumnType("money");

                entity.Property(e => e.SaldoActualMoneda).HasColumnType("money");

                entity.Property(e => e.SaldoActualMonedaNuevo).HasColumnType("money");

                entity.Property(e => e.SaldoActualNuevo).HasColumnType("money");

                entity.Property(e => e.SaldoActualUnidad1).HasColumnType("money");

                entity.Property(e => e.SaldoActualUnidad1Nuevo).HasColumnType("money");

                entity.Property(e => e.SaldoActualUnidad2).HasColumnType("money");

                entity.Property(e => e.SaldoActualUnidad2Nuevo).HasColumnType("money");

                entity.Property(e => e.SaldoActualUnidad3).HasColumnType("money");

                entity.Property(e => e.SaldoActualUnidad3Nuevo).HasColumnType("money");
            });

            modelBuilder.Entity<ContSistemasAperturaLibroSaldoPropiedad1Bu>(entity =>
            {
                entity.HasKey(e => new { e.IdenPreparacion, e.Bu, e.Cuenta, e.Propiedad1 });

                entity.ToTable("Cont_Sistemas_AperturaLibro_SaldoPropiedad1_Bu");

                entity.Property(e => e.IdenPreparacion)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("Iden_Preparacion");

                entity.Property(e => e.Bu)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Cuenta)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Propiedad1)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Iden)
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.SaldoActual).HasColumnType("money");

                entity.Property(e => e.SaldoActualMoneda).HasColumnType("money");

                entity.Property(e => e.SaldoActualMonedaNuevo).HasColumnType("money");

                entity.Property(e => e.SaldoActualNuevo).HasColumnType("money");

                entity.Property(e => e.SaldoActualUnidad1).HasColumnType("money");

                entity.Property(e => e.SaldoActualUnidad1Nuevo).HasColumnType("money");

                entity.Property(e => e.SaldoActualUnidad2).HasColumnType("money");

                entity.Property(e => e.SaldoActualUnidad2Nuevo).HasColumnType("money");

                entity.Property(e => e.SaldoActualUnidad3).HasColumnType("money");

                entity.Property(e => e.SaldoActualUnidad3Nuevo).HasColumnType("money");
            });

            modelBuilder.Entity<ContSistemasAperturaLibroSaldoPropiedad2Bu>(entity =>
            {
                entity.HasKey(e => new { e.IdenPreparacion, e.Bu, e.Cuenta, e.Propiedad2 });

                entity.ToTable("Cont_Sistemas_AperturaLibro_SaldoPropiedad2_Bu");

                entity.Property(e => e.IdenPreparacion)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("Iden_Preparacion");

                entity.Property(e => e.Bu)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Cuenta)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Propiedad2)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Iden)
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.SaldoActual).HasColumnType("money");

                entity.Property(e => e.SaldoActualMoneda).HasColumnType("money");

                entity.Property(e => e.SaldoActualMonedaNuevo).HasColumnType("money");

                entity.Property(e => e.SaldoActualNuevo).HasColumnType("money");

                entity.Property(e => e.SaldoActualUnidad1).HasColumnType("money");

                entity.Property(e => e.SaldoActualUnidad1Nuevo).HasColumnType("money");

                entity.Property(e => e.SaldoActualUnidad2).HasColumnType("money");

                entity.Property(e => e.SaldoActualUnidad2Nuevo).HasColumnType("money");

                entity.Property(e => e.SaldoActualUnidad3).HasColumnType("money");

                entity.Property(e => e.SaldoActualUnidad3Nuevo).HasColumnType("money");
            });

            modelBuilder.Entity<ContSistemasAperturaLibroSaldoPropiedad3Bu>(entity =>
            {
                entity.HasKey(e => new { e.IdenPreparacion, e.Bu, e.Cuenta, e.Propiedad3 });

                entity.ToTable("Cont_Sistemas_AperturaLibro_SaldoPropiedad3_Bu");

                entity.Property(e => e.IdenPreparacion)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("Iden_Preparacion");

                entity.Property(e => e.Bu)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Cuenta)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Propiedad3)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Iden)
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.SaldoActual).HasColumnType("money");

                entity.Property(e => e.SaldoActualMoneda).HasColumnType("money");

                entity.Property(e => e.SaldoActualMonedaNuevo).HasColumnType("money");

                entity.Property(e => e.SaldoActualNuevo).HasColumnType("money");

                entity.Property(e => e.SaldoActualUnidad1).HasColumnType("money");

                entity.Property(e => e.SaldoActualUnidad1Nuevo).HasColumnType("money");

                entity.Property(e => e.SaldoActualUnidad2).HasColumnType("money");

                entity.Property(e => e.SaldoActualUnidad2Nuevo).HasColumnType("money");

                entity.Property(e => e.SaldoActualUnidad3).HasColumnType("money");

                entity.Property(e => e.SaldoActualUnidad3Nuevo).HasColumnType("money");
            });

            modelBuilder.Entity<ContSistemasAperturaLibroSaldoPropiedad4Bu>(entity =>
            {
                entity.HasKey(e => new { e.IdenPreparacion, e.Bu, e.Cuenta, e.Propiedad4 });

                entity.ToTable("Cont_Sistemas_AperturaLibro_SaldoPropiedad4_Bu");

                entity.Property(e => e.IdenPreparacion)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("Iden_Preparacion");

                entity.Property(e => e.Bu)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Cuenta)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Propiedad4)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Iden)
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.SaldoActual).HasColumnType("money");

                entity.Property(e => e.SaldoActualMoneda).HasColumnType("money");

                entity.Property(e => e.SaldoActualMonedaNuevo).HasColumnType("money");

                entity.Property(e => e.SaldoActualNuevo).HasColumnType("money");

                entity.Property(e => e.SaldoActualUnidad1).HasColumnType("money");

                entity.Property(e => e.SaldoActualUnidad1Nuevo).HasColumnType("money");

                entity.Property(e => e.SaldoActualUnidad2).HasColumnType("money");

                entity.Property(e => e.SaldoActualUnidad2Nuevo).HasColumnType("money");

                entity.Property(e => e.SaldoActualUnidad3).HasColumnType("money");

                entity.Property(e => e.SaldoActualUnidad3Nuevo).HasColumnType("money");
            });

            modelBuilder.Entity<ContSistemasAperturaLibroSaldoPropiedad5Bu>(entity =>
            {
                entity.HasKey(e => new { e.IdenPreparacion, e.Bu, e.Cuenta, e.Propiedad5 });

                entity.ToTable("Cont_Sistemas_AperturaLibro_SaldoPropiedad5_Bu");

                entity.Property(e => e.IdenPreparacion)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("Iden_Preparacion");

                entity.Property(e => e.Bu)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Cuenta)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Propiedad5)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Iden)
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.SaldoActual).HasColumnType("money");

                entity.Property(e => e.SaldoActualMoneda).HasColumnType("money");

                entity.Property(e => e.SaldoActualMonedaNuevo).HasColumnType("money");

                entity.Property(e => e.SaldoActualNuevo).HasColumnType("money");

                entity.Property(e => e.SaldoActualUnidad1).HasColumnType("money");

                entity.Property(e => e.SaldoActualUnidad1Nuevo).HasColumnType("money");

                entity.Property(e => e.SaldoActualUnidad2).HasColumnType("money");

                entity.Property(e => e.SaldoActualUnidad2Nuevo).HasColumnType("money");

                entity.Property(e => e.SaldoActualUnidad3).HasColumnType("money");

                entity.Property(e => e.SaldoActualUnidad3Nuevo).HasColumnType("money");
            });

            modelBuilder.Entity<ContSistemasAperturaLibroSaldoProvBu>(entity =>
            {
                entity.HasKey(e => new { e.IdenPreparacion, e.Bu, e.Cuenta, e.Proveedor });

                entity.ToTable("Cont_Sistemas_AperturaLibro_SaldoProv_Bu");

                entity.Property(e => e.IdenPreparacion)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("Iden_Preparacion");

                entity.Property(e => e.Bu)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Cuenta)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Proveedor)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Iden)
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.SaldoActual).HasColumnType("money");

                entity.Property(e => e.SaldoActualMoneda).HasColumnType("money");

                entity.Property(e => e.SaldoActualMonedaNuevo).HasColumnType("money");

                entity.Property(e => e.SaldoActualNuevo).HasColumnType("money");

                entity.Property(e => e.SaldoActualUnidad1).HasColumnType("money");

                entity.Property(e => e.SaldoActualUnidad1Nuevo).HasColumnType("money");

                entity.Property(e => e.SaldoActualUnidad2).HasColumnType("money");

                entity.Property(e => e.SaldoActualUnidad2Nuevo).HasColumnType("money");

                entity.Property(e => e.SaldoActualUnidad3).HasColumnType("money");

                entity.Property(e => e.SaldoActualUnidad3Nuevo).HasColumnType("money");
            });

            modelBuilder.Entity<ContSistemasAperturaLibroSaldoTerBu>(entity =>
            {
                entity.HasKey(e => new { e.IdenPreparacion, e.Bu, e.Cuenta, e.Tercero });

                entity.ToTable("Cont_Sistemas_AperturaLibro_SaldoTer_Bu");

                entity.Property(e => e.IdenPreparacion)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("Iden_Preparacion");

                entity.Property(e => e.Bu)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Cuenta)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Tercero)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Iden)
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.SaldoActual).HasColumnType("money");

                entity.Property(e => e.SaldoActualMoneda).HasColumnType("money");

                entity.Property(e => e.SaldoActualMonedaNuevo).HasColumnType("money");

                entity.Property(e => e.SaldoActualNuevo).HasColumnType("money");

                entity.Property(e => e.SaldoActualUnidad1).HasColumnType("money");

                entity.Property(e => e.SaldoActualUnidad1Nuevo).HasColumnType("money");

                entity.Property(e => e.SaldoActualUnidad2).HasColumnType("money");

                entity.Property(e => e.SaldoActualUnidad2Nuevo).HasColumnType("money");

                entity.Property(e => e.SaldoActualUnidad3).HasColumnType("money");

                entity.Property(e => e.SaldoActualUnidad3Nuevo).HasColumnType("money");
            });

            modelBuilder.Entity<ContSistemasAperturaLibroTransaccione>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Cont_Sistemas_AperturaLibro_Transacciones");

                entity.HasIndex(e => e.Iden, "IX_Cont_Sistemas_AperturaLibro_Transacciones_Iden")
                    .IsClustered();

                entity.HasIndex(e => e.IdenRelacionado, "IX_Cont_Sistemas_AperturaLibro_Transacciones_Iden_Relacionado");

                entity.HasIndex(e => e.IdenSaldo, "IX_Cont_Sistemas_AperturaLibro_Transacciones_Iden_Saldo");

                entity.Property(e => e.Detalle)
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.Iden)
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.IdenRelacionado)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("Iden_Relacionado");

                entity.Property(e => e.IdenSaldo)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("Iden_Saldo");

                entity.Property(e => e.Revelacion).IsUnicode(false);

                entity.Property(e => e.ValorTra).HasColumnType("money");
            });

            modelBuilder.Entity<ContabilidadExterna>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ContabilidadExterna");

                entity.HasIndex(e => e.DocumentoExterno, "IX_CONTABILIDADEXTERNA_DOCUMENTOEXTERNO");

                entity.HasIndex(e => new { e.Fuente, e.Documento, e.DocumentoExterno }, "IX_CONTABILIDADEXTERNA_DOCUMENTO_DOCUMENTOEXTERNO_FUENTE");

                entity.HasIndex(e => new { e.Fuente, e.Documento }, "IX_CONTABILIDADEXTERNA_DOCUMENTO_FUENTE");

                entity.HasIndex(e => e.Fechadocumento, "IX_ContabilidadExterna_fechadocumento");

                entity.Property(e => e.AplicacionExterna)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Documento)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.DocumentoExterno)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Error)
                    .HasMaxLength(8000)
                    .IsUnicode(false);

                entity.Property(e => e.FechaActualizacion)
                    .HasColumnType("datetime")
                    .HasColumnName("Fecha_Actualizacion");

                entity.Property(e => e.FechaGeneracion)
                    .HasColumnType("datetime")
                    .HasColumnName("Fecha_generacion");

                entity.Property(e => e.Fechadocumento)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("fechadocumento");

                entity.Property(e => e.Fuente)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.IdenContabilidadexterna)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_contabilidadexterna");

                entity.Property(e => e.Usuario)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.XmlBody).IsUnicode(false);

                entity.Property(e => e.XmlHead).IsUnicode(false);
            });

            modelBuilder.Entity<Contingencia>(entity =>
            {
                entity.HasKey(e => e.Codigo)
                    .HasName("PK__Continge__06370DAD00BDF2CC");

                entity.Property(e => e.Codigo)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Descripcion)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Estado)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.FechaFin).HasColumnType("smalldatetime");

                entity.Property(e => e.FechaInicio).HasColumnType("smalldatetime");

                entity.Property(e => e.FuenteTal)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.IdContingencias)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Id_Contingencias");

                entity.Property(e => e.Nombre)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.SerieTal)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.Tipo)
                    .HasMaxLength(1)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ContingenciasEvento>(entity =>
            {
                entity.HasKey(e => e.Iden);

                entity.ToTable("Contingencias_Eventos");

                entity.Property(e => e.CodigoContingencia)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Codigo_Contingencia");

                entity.Property(e => e.Descripcion)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.FechaFinal)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("Fecha_Final");

                entity.Property(e => e.FechaInicio)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("Fecha_Inicio");

                entity.HasOne(d => d.CodigoContingenciaNavigation)
                    .WithMany(p => p.ContingenciasEventos)
                    .HasForeignKey(d => d.CodigoContingencia)
                    .HasConstraintName("FK_Contingencias_Eventos_Contingencias");
            });

            modelBuilder.Entity<ContingenciasFuente>(entity =>
            {
                entity.HasKey(e => new { e.FuenteSis, e.SerieSis, e.FuenteCon, e.SerieCon });

                entity.ToTable("Contingencias_Fuentes");

                entity.Property(e => e.FuenteSis)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.SerieSis)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.FuenteCon)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.SerieCon)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.Contingencia)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Id).ValueGeneratedOnAdd();

                entity.HasOne(d => d.ContingenciaNavigation)
                    .WithMany(p => p.ContingenciasFuentes)
                    .HasForeignKey(d => d.Contingencia)
                    .HasConstraintName("FK_Contingencias_Fuentes_Contigencia");
            });

            modelBuilder.Entity<ControlCambioEnObjeto>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.Fc)
                    .HasColumnType("datetime")
                    .HasColumnName("fc");

                entity.Property(e => e.Fm)
                    .HasColumnType("datetime")
                    .HasColumnName("fm");

                entity.Property(e => e.IdenControlcambioenobjetos)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_controlcambioenobjetos");
            });

            modelBuilder.Entity<ControlDocumentarioAgrupacion>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ControlDocumentario_Agrupacion");

                entity.HasIndex(e => e.Consecutivo, "IX_ControlDocumentario_Agrupacion_Consecutivo");

                entity.HasIndex(e => new { e.Consecutivo, e.IdenRecepcionDocumento }, "IX_ControlDocumentario_Agrupacion_Consecutivo_IdenRecepcionDocumento");

                entity.HasIndex(e => e.IdenRecepcionDocumento, "IX_ControlDocumentario_Agrupacion_IdenRecepcionDocumento");

                entity.Property(e => e.Fecha).HasColumnType("smalldatetime");

                entity.Property(e => e.Id).ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<ControlDocumentarioEstado>(entity =>
            {
                entity.HasKey(e => e.Iden);

                entity.ToTable("ControlDocumentario_Estados");

                entity.HasIndex(e => e.Codigo, "IX_ControlDocumentario_Estados_Codigo");

                entity.HasIndex(e => e.Codigo, "UQ_ControlDocumentario_Estados_Codigo")
                    .IsUnique();

                entity.Property(e => e.Iden)
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Codigo)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Descripcion)
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.Ubicacion)
                    .HasMaxLength(40)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ControlDocumentarioEstadosAsignacion>(entity =>
            {
                entity.HasKey(e => e.Iden);

                entity.ToTable("ControlDocumentario_EstadosAsignacion");

                entity.HasIndex(e => new { e.IdMenu, e.Estado }, "UQ_ControlDocumentario_EstadosAsignacion_idMenu_Estado")
                    .IsUnique();

                entity.Property(e => e.Iden)
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Estado).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.IdMenu)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("idMenu");

                entity.Property(e => e.Orden).HasColumnType("numeric(18, 0)");

                entity.HasOne(d => d.EstadoNavigation)
                    .WithMany(p => p.ControlDocumentarioEstadosAsignacions)
                    .HasForeignKey(d => d.Estado)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ControlDocumentario_EstadosAsignacion_Estado");

                entity.HasOne(d => d.IdMenuNavigation)
                    .WithMany(p => p.ControlDocumentarioEstadosAsignacions)
                    .HasForeignKey(d => d.IdMenu)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ControlDocumentario_EstadosAsignacion_IdMenu");
            });

            modelBuilder.Entity<ControlDocumentarioEstadosAsignacionTemp>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ControlDocumentario_EstadosAsignacion_Temp");

                entity.Property(e => e.Estado).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.IdMenu)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("idMenu");

                entity.Property(e => e.Iden)
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Orden).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.SpId).HasColumnType("numeric(18, 0)");
            });

            modelBuilder.Entity<ControlDocumentarioEstadosUsuario>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ControlDocumentario_EstadosUsuarios");

                entity.Property(e => e.IdAsociacion).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.Iden)
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Sel).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.Usuario)
                    .HasMaxLength(250)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ControlDocumentarioEstadosUsuariosTemp>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ControlDocumentario_EstadosUsuarios_Temp");

                entity.Property(e => e.IdAsociacion).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.Iden)
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Sel).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.SpId).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.Usuario)
                    .HasMaxLength(250)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ControlDocumentarioHistorialCambioEstado>(entity =>
            {
                entity.HasKey(e => e.Iden);

                entity.ToTable("ControlDocumentario_HistorialCambioEstado");

                entity.Property(e => e.Iden)
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Consecutivo).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.ConsecutivoHistorial)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("Consecutivo_Historial");

                entity.Property(e => e.EstadoActual).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.EstadoAnterior).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.Fecha).HasColumnType("datetime");

                entity.Property(e => e.FlujoCaja)
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.IdenFacturasCtrlDoc)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("Iden_Facturas_CtrlDoc");

                entity.Property(e => e.IdenPpp)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("Iden_PPP");

                entity.Property(e => e.Usuario)
                    .HasMaxLength(250)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ControlDocumentarioMenu>(entity =>
            {
                entity.HasKey(e => e.IdMenu);

                entity.ToTable("ControlDocumentario_Menu");

                entity.Property(e => e.IdMenu).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.IdenControldocumentarioMenu)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_controldocumentario_menu");

                entity.Property(e => e.Nombre)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ControlDocumentarioRecepcionDocumento>(entity =>
            {
                entity.HasKey(e => e.Consecutivo);

                entity.ToTable("ControlDocumentario_RecepcionDocumento");

                entity.HasIndex(e => new { e.Proveedor, e.TipoFactura, e.NumeroFactura }, "UQ_ControlDocumentario_RecepcionDocumento_Proveedor_TipoFactura_NumeroFactura")
                    .IsUnique();

                entity.Property(e => e.Consecutivo)
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Estado).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.Fecha).HasColumnType("smalldatetime");

                entity.Property(e => e.NumConsecutivo)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.NumeroFactura)
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.Proveedor)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Referencia)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Separador)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')")
                    .IsFixedLength();

                entity.Property(e => e.Serie)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.TipoFactura)
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Usuario)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.HasOne(d => d.EstadoNavigation)
                    .WithMany(p => p.ControlDocumentarioRecepcionDocumentos)
                    .HasForeignKey(d => d.Estado)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ControlDocumentario_RecepcionDocumento_Estado");
            });

            modelBuilder.Entity<ControlDocumentarioRecepcionDocumentoFactura>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ControlDocumentario_RecepcionDocumentoFacturas");

                entity.HasIndex(e => new { e.Bu, e.Codicta, e.IdCliPrv, e.Tipofac, e.Numefac, e.Vencefac, e.Refefac }, "IX_ControlDocumentario_RecepcionDocumentoFacturas_Bu_Codicta_IdCliPrv_TipoFac_Numefac_Vencefac_Refefac");

                entity.HasIndex(e => e.ConsecutivoRecepcion, "IX_ControlDocumentario_RecepcionDocumentoFacturas_ConsecutivoRecepcion");

                entity.HasIndex(e => e.Estado, "IX_ControlDocumentario_RecepcionDocumentoFacturas_Estado");

                entity.HasIndex(e => e.IdCliPrv, "IX_ControlDocumentario_RecepcionDocumentoFacturas_IdCliPrv");

                entity.HasIndex(e => e.Iden, "IX_ControlDocumentario_RecepcionDocumentoFacturas_Iden");

                entity.Property(e => e.Bu)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Codicta)
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.ConsecutivoRecepcion).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.Documento)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Estado).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.FlujoCaja)
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.Fuente)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.IdAplicacionesZeus).HasColumnName("Id_AplicacionesZeus");

                entity.Property(e => e.IdCliPrv)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Iden)
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Numefac)
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.Refefac)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Tipofac)
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Ubicacion)
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.ValorCompra).HasColumnType("money");

                entity.Property(e => e.ValorOrden).HasColumnType("money");

                entity.Property(e => e.Vencefac)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.HasOne(d => d.ConsecutivoRecepcionNavigation)
                    .WithMany()
                    .HasForeignKey(d => d.ConsecutivoRecepcion)
                    .HasConstraintName("FK_ControlDocumentario_RecepcionDocumentoFacturas_Consecutivo");
            });

            modelBuilder.Entity<CruceCxCsaldoFavor>(entity =>
            {
                entity.HasKey(e => e.Cuenta)
                    .IsClustered(false);

                entity.ToTable("CruceCxCSaldoFavor");

                entity.Property(e => e.Cuenta)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.IdenCrucecxcsaldofavor)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_crucecxcsaldofavor");

                entity.HasOne(d => d.CuentaNavigation)
                    .WithOne(p => p.CruceCxCsaldoFavor)
                    .HasForeignKey<CruceCxCsaldoFavor>(d => d.Cuenta)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CruceCxCSaldoFavor_MAECONT");
            });

            modelBuilder.Entity<CtasEspecificasAsobancarium>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.Cuenta)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.IdenCtasespecificasasobancaria)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_ctasespecificasasobancaria");

                entity.HasOne(d => d.CuentaNavigation)
                    .WithMany()
                    .HasForeignKey(d => d.Cuenta)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CtasEspecificasAsobancaria_Maecont");
            });

            modelBuilder.Entity<Ctasconc>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("CTASCONC");

                entity.Property(e => e.BaseFco)
                    .HasMaxLength(512)
                    .IsUnicode(false)
                    .HasColumnName("BASE_FCO");

                entity.Property(e => e.CodiFco)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("CODI_FCO")
                    .IsFixedLength();

                entity.Property(e => e.ConcFco)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("CONC_FCO")
                    .IsFixedLength();

                entity.Property(e => e.CondiFco)
                    .HasMaxLength(512)
                    .IsUnicode(false)
                    .HasColumnName("CONDI_FCO");

                entity.Property(e => e.DbcrFco)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("DBCR_FCO")
                    .IsFixedLength();

                entity.Property(e => e.DetalleFco)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("DETALLE_FCO");

                entity.Property(e => e.FormuFco)
                    .HasMaxLength(512)
                    .IsUnicode(false)
                    .HasColumnName("FORMU_FCO");

                entity.Property(e => e.IdenCtasconc)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_ctasconc");
            });

            modelBuilder.Entity<DatosAdicionalesReembolsoGasto>(entity =>
            {
                entity.ToTable("DatosAdicionales_ReembolsoGastos");

                entity.HasIndex(e => new { e.IdFuente, e.Numero, e.IdentificadorDocumentosAdicionales }, "IX_DatosAdicionales_ReembolsoGastos_IdFuente_Numero_IdentificadorDocumentosAdicionales")
                    .IsUnique();

                entity.Property(e => e.AreaImpresion)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Autorizacion)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Factura)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Fecha)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.IdFuente)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.Numero)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Proveedor)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.ProveedorNombre)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.PuntoEmision)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Referencia)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Secuencial)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.TipoFactura)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.TipoProveedorTercero)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Vencimiento)
                    .HasMaxLength(10)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<DctocajaBu>(entity =>
            {
                entity.HasKey(e => new { e.Anomescj, e.Bu, e.Codicta, e.Idmoneda, e.Idunidad, e.Ndctcja, e.Fechcja, e.Idbanco });

                entity.ToTable("DCTOCAJA_BU");

                entity.HasIndex(e => new { e.Bu, e.Codicta, e.Idmoneda, e.Idunidad, e.Ndctcja, e.Fechcja, e.Idbanco, e.Anomescj }, "IX_DCTOCAJA_BU_BU_CODICTA_IDMONEDA_IDUNIDAD_NDCTCJA_FECHCJA_IDBANCO_ANOMESCJ");

                entity.HasIndex(e => e.Codicta, "IX_DCTOCAJA_BU_MAECONT");

                entity.Property(e => e.Anomescj)
                    .HasMaxLength(7)
                    .IsUnicode(false)
                    .HasColumnName("ANOMESCJ")
                    .IsFixedLength();

                entity.Property(e => e.Bu)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("BU");

                entity.Property(e => e.Codicta)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("CODICTA")
                    .IsFixedLength();

                entity.Property(e => e.Idmoneda)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("IDMONEDA")
                    .IsFixedLength();

                entity.Property(e => e.Idunidad)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("IDUNIDAD")
                    .IsFixedLength();

                entity.Property(e => e.Ndctcja)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("NDCTCJA");

                entity.Property(e => e.Fechcja)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("FECHCJA")
                    .IsFixedLength();

                entity.Property(e => e.Idbanco)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("IDBANCO")
                    .IsFixedLength();

                entity.Property(e => e.Basecomision)
                    .HasColumnType("money")
                    .HasColumnName("BASECOMISION");

                entity.Property(e => e.Doctconsg)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("DOCTCONSG")
                    .IsFixedLength();

                entity.Property(e => e.DocumentoRc)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("DOCUMENTO_RC")
                    .IsFixedLength();

                entity.Property(e => e.Fechconsg)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("FECHCONSG")
                    .IsFixedLength();

                entity.Property(e => e.Feumcja)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("FEUMCJA");

                entity.Property(e => e.Fnteconsg)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("FNTECONSG")
                    .IsFixedLength();

                entity.Property(e => e.FuenteRc)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("FUENTE_RC")
                    .IsFixedLength();

                entity.Property(e => e.IdenDctocajaBu)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_dctocaja_bu");

                entity.Property(e => e.Idplaza)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("IDPLAZA")
                    .IsFixedLength();

                entity.Property(e => e.Ivainformado)
                    .HasColumnType("money")
                    .HasColumnName("IVAINFORMADO");

                entity.Property(e => e.Mvcrcja)
                    .HasColumnType("money")
                    .HasColumnName("MVCRCJA");

                entity.Property(e => e.Mvcrmcja)
                    .HasColumnType("money")
                    .HasColumnName("MVCRMCJA");

                entity.Property(e => e.Mvcrmon1)
                    .HasColumnType("money")
                    .HasColumnName("MVCRMON1");

                entity.Property(e => e.Mvcrmon2)
                    .HasColumnType("money")
                    .HasColumnName("MVCRMON2");

                entity.Property(e => e.Mvdbcja)
                    .HasColumnType("money")
                    .HasColumnName("MVDBCJA");

                entity.Property(e => e.Mvdbmcja)
                    .HasColumnType("money")
                    .HasColumnName("MVDBMCJA");

                entity.Property(e => e.Mvdbmon1)
                    .HasColumnType("money")
                    .HasColumnName("MVDBMON1");

                entity.Property(e => e.Mvdbmon2)
                    .HasColumnType("money")
                    .HasColumnName("MVDBMON2");

                entity.Property(e => e.Nitcja)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("NITCJA");

                entity.Property(e => e.Referencia)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("REFERENCIA");

                entity.Property(e => e.Sacmcja)
                    .HasColumnType("money")
                    .HasColumnName("SACMCJA");

                entity.Property(e => e.Sactcja)
                    .HasColumnType("money")
                    .HasColumnName("SACTCJA");

                entity.Property(e => e.Sanmcja)
                    .HasColumnType("money")
                    .HasColumnName("SANMCJA");

                entity.Property(e => e.Santcja)
                    .HasColumnType("money")
                    .HasColumnName("SANTCJA");

                entity.Property(e => e.Sdacmon1)
                    .HasColumnType("money")
                    .HasColumnName("SDACMON1");

                entity.Property(e => e.Sdacmon2)
                    .HasColumnType("money")
                    .HasColumnName("SDACMON2");

                entity.Property(e => e.Sdanmon1)
                    .HasColumnType("money")
                    .HasColumnName("SDANMON1");

                entity.Property(e => e.Sdanmon2)
                    .HasColumnType("money")
                    .HasColumnName("SDANMON2");

                entity.Property(e => e.VersionDeLaFila)
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.BuNavigation)
                    .WithMany(p => p.DctocajaBus)
                    .HasForeignKey(d => d.Bu)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_DCTOCAJA_BU_BU");

                entity.HasOne(d => d.CodictaNavigation)
                    .WithMany(p => p.DctocajaBus)
                    .HasForeignKey(d => d.Codicta)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_DCTOCAJA_BU_MAECONT");
            });

            modelBuilder.Entity<DctocajaI>(entity =>
            {
                entity.HasKey(e => e.Anomescj)
                    .IsClustered(false);

                entity.ToTable("DCTOCAJA_I");

                entity.Property(e => e.Anomescj)
                    .HasMaxLength(7)
                    .IsUnicode(false)
                    .HasColumnName("ANOMESCJ");

                entity.Property(e => e.IdenDctocajaI)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_dctocaja_i");

                entity.Property(e => e.Mvcrcja)
                    .HasColumnType("money")
                    .HasColumnName("MVCRCJA");

                entity.Property(e => e.Mvcrmcja)
                    .HasColumnType("money")
                    .HasColumnName("MVCRMCJA");

                entity.Property(e => e.Mvcrmon1)
                    .HasColumnType("money")
                    .HasColumnName("MVCRMON1");

                entity.Property(e => e.Mvcrmon2)
                    .HasColumnType("money")
                    .HasColumnName("MVCRMON2");

                entity.Property(e => e.Mvdbcja)
                    .HasColumnType("money")
                    .HasColumnName("MVDBCJA");

                entity.Property(e => e.Mvdbmcja)
                    .HasColumnType("money")
                    .HasColumnName("MVDBMCJA");

                entity.Property(e => e.Mvdbmon1)
                    .HasColumnType("money")
                    .HasColumnName("MVDBMON1");

                entity.Property(e => e.Mvdbmon2)
                    .HasColumnType("money")
                    .HasColumnName("MVDBMON2");

                entity.Property(e => e.Sacmcja)
                    .HasColumnType("money")
                    .HasColumnName("SACMCJA");

                entity.Property(e => e.Sactcja)
                    .HasColumnType("money")
                    .HasColumnName("SACTCJA");

                entity.Property(e => e.Sanmcja)
                    .HasColumnType("money")
                    .HasColumnName("SANMCJA");

                entity.Property(e => e.Santcja)
                    .HasColumnType("money")
                    .HasColumnName("SANTCJA");

                entity.Property(e => e.Sdacmon1)
                    .HasColumnType("money")
                    .HasColumnName("SDACMON1");

                entity.Property(e => e.Sdacmon2)
                    .HasColumnType("money")
                    .HasColumnName("SDACMON2");

                entity.Property(e => e.Sdanmon1)
                    .HasColumnType("money")
                    .HasColumnName("SDANMON1");

                entity.Property(e => e.Sdanmon2)
                    .HasColumnType("money")
                    .HasColumnName("SDANMON2");
            });

            modelBuilder.Entity<DefinicionDeDocumento>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.CodigoDocumento)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Id).ValueGeneratedOnAdd();

                entity.Property(e => e.ManejaAprobacion).HasDefaultValueSql("((0))");

                entity.Property(e => e.Nombre)
                    .HasMaxLength(200)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<DefinicionDiferido>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.Codicta)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("CODICTA")
                    .IsFixedLength();

                entity.Property(e => e.Consecutra).HasColumnName("CONSECUTRA");

                entity.Property(e => e.Descritra)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("DESCRITRA");

                entity.Property(e => e.Estado)
                    .HasMaxLength(80)
                    .IsUnicode(false)
                    .HasColumnName("ESTADO");

                entity.Property(e => e.Fecha)
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Fechatra)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("FECHATRA")
                    .IsFixedLength();

                entity.Property(e => e.Iden)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("iden");

                entity.Property(e => e.Idfuente)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("IDFUENTE")
                    .IsFixedLength();

                entity.Property(e => e.Numdoctra)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("NUMDOCTRA")
                    .IsFixedLength();

                entity.Property(e => e.Valortra)
                    .HasColumnType("money")
                    .HasColumnName("VALORTRA");
            });

            modelBuilder.Entity<DesbloqueoSelectivoCliente>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.Codicta)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("CODICTA")
                    .IsFixedLength();

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("id");

                entity.Property(e => e.Idcliente)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("IDCLIENTE");

                entity.Property(e => e.Tipo)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("tipo")
                    .IsFixedLength();
            });

            modelBuilder.Entity<Desembolso>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.Documento)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("DOCUMENTO")
                    .IsFixedLength();

                entity.Property(e => e.Fuente)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("FUENTE")
                    .IsFixedLength();

                entity.Property(e => e.IdenDesembolsos)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_desembolsos");

                entity.Property(e => e.Identificacion)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IDENTIFICACION");

                entity.Property(e => e.Nombre)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("NOMBRE");

                entity.Property(e => e.Operacion)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("OPERACION")
                    .IsFixedLength();
            });

            modelBuilder.Entity<Detraccion>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Detraccion");

                entity.Property(e => e.Automatica)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Base).HasColumnType("money");

                entity.Property(e => e.BienServicio)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Bu)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Cuenta)
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.Documento)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Estado)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.FechaDeposito).HasColumnType("datetime");

                entity.Property(e => e.Fuente)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.IdenDetraccion)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_detraccion");

                entity.Property(e => e.Importe).HasColumnType("money");

                entity.Property(e => e.NoDeposito)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.NumeroFactura)
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.PagoProveedor)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.PorcImp).HasColumnType("numeric(5, 2)");

                entity.Property(e => e.Proveedor)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.ReferenciaFactura)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.TipoFactura)
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.TipoOperacion)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Vencimiento)
                    .HasMaxLength(10)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<DgiiNcf>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("DGII_NCF");

                entity.HasIndex(e => e.Consecutra, "IX_DGII_NCF_CONSECUTRA");

                entity.HasIndex(e => new { e.Tercero, e.Ncf }, "IX_DGII_NCF_NCF_TERCERO");

                entity.Property(e => e.Fechacreacion)
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Iden)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("IDEN");

                entity.Property(e => e.Ncf)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("NCF");

                entity.Property(e => e.Tercero)
                    .HasMaxLength(25)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Dia>(entity =>
            {
                entity.HasKey(e => e.Fecha);

                entity.ToTable("DIAS");

                entity.Property(e => e.Fecha)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("FECHA")
                    .IsFixedLength();

                entity.Property(e => e.IdenDias)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_dias");

                entity.Property(e => e.OpenMes)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("OPEN_MES")
                    .IsFixedLength();
            });

            modelBuilder.Entity<DianCodigosdeInformacion>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("DianCodigosdeInformacion");

                entity.Property(e => e.Ano)
                    .HasMaxLength(4)
                    .IsUnicode(false);

                entity.Property(e => e.CodigodeInformacion)
                    .HasMaxLength(4)
                    .IsUnicode(false);

                entity.Property(e => e.Descripcion)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.IdenDiancodigosdeinformacion)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_diancodigosdeinformacion");

                entity.Property(e => e.NodoC)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.NodoE)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.PrimerValor)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.SegundoValor)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.TercerValor)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.TipodeDisenoE)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.TipodeDisenoc)
                    .HasMaxLength(8)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<DianDisenoporCodigosdeInformacion>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("DianDisenoporCodigosdeInformacion");

                entity.Property(e => e.Ano)
                    .HasMaxLength(4)
                    .IsUnicode(false);

                entity.Property(e => e.CodigodeInformacion)
                    .HasMaxLength(4)
                    .IsUnicode(false);

                entity.Property(e => e.ColumnaExcel)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.Contenido)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Etiqueta)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.IdenDiandisenoporcodigosdeinformacion)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_diandisenoporcodigosdeinformacion");

                entity.Property(e => e.Idvariable)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("IDVariable");

                entity.Property(e => e.TipodeCampo)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.TipodeDiseno)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.TipodeVariable)
                    .HasMaxLength(10)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<DianDisenosMediosMagnetico>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.Ano)
                    .HasMaxLength(4)
                    .IsUnicode(false);

                entity.Property(e => e.ColumnaExcel)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.Contenido)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Etiqueta)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.IdenDiandisenosmediosmagneticos)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_diandisenosmediosmagneticos");

                entity.Property(e => e.TipodeCampo)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.TipodeDiseno)
                    .HasMaxLength(8)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<DianParametrosGenerale>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.Ano)
                    .HasMaxLength(4)
                    .IsUnicode(false);

                entity.Property(e => e.Descripcion)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.IdenDianparametrosgenerales)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_dianparametrosgenerales");

                entity.Property(e => e.Idvariable)
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .HasColumnName("IDVariable");

                entity.Property(e => e.Valor)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<DianParametrosMovimiento>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("DianParametrosMovimiento");

                entity.Property(e => e.Ano)
                    .HasMaxLength(4)
                    .IsUnicode(false);

                entity.Property(e => e.CodInfMinimo)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CodigodeInformacion)
                    .HasMaxLength(4)
                    .IsUnicode(false);

                entity.Property(e => e.Descripcion)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.IdenDianparametrosmovimiento)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_dianparametrosmovimiento");

                entity.Property(e => e.Idvariable)
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .HasColumnName("IDVariable");

                entity.Property(e => e.MinimoaReportar).HasColumnType("money");

                entity.Property(e => e.Naturaleza)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.NitMinimo)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.RangosdeCuentas)
                    .HasMaxLength(2000)
                    .IsUnicode(false);

                entity.Property(e => e.RangosdeFechas)
                    .HasMaxLength(2000)
                    .IsUnicode(false);

                entity.Property(e => e.RangosdeFuentes)
                    .HasMaxLength(2000)
                    .IsUnicode(false);

                entity.Property(e => e.RazonMinimo)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.TipodeCuenta)
                    .HasMaxLength(15)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<DiasFeriado>(entity =>
            {
                entity.HasNoKey();

                entity.HasIndex(e => e.Fecha, "IX_DIASFERIADOS_FECHA")
                    .IsClustered();

                entity.Property(e => e.Fecha)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.IdenDiasferiados)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_diasferiados");
            });

            modelBuilder.Entity<DiasUsuario>(entity =>
            {
                entity.HasKey(e => new { e.Fecha, e.Usuario })
                    .HasName("PK_DIASUSUARIOS");

                entity.Property(e => e.Fecha)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Usuario)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.IdenDiasusuarios)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_diasusuarios");
            });

            modelBuilder.Entity<DiasVencModeloFact>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("DiasVencModeloFact");

                entity.HasIndex(e => new { e.IdModelo, e.Fecha }, "IX_DiasVencModeloFact_Principal")
                    .IsClustered();

                entity.Property(e => e.Fecha)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.IdModelo)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.IdenDiasvencmodelofact)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_diasvencmodelofact");

                entity.HasOne(d => d.IdModeloNavigation)
                    .WithMany()
                    .HasForeignKey(d => d.IdModelo)
                    .HasConstraintName("FK_DiasVencModeloFact_FACTMODELOH");
            });

            modelBuilder.Entity<DiasxBu>(entity =>
            {
                entity.HasKey(e => new { e.Fecha, e.Bu })
                    .HasName("PK_DIASXBU");

                entity.ToTable("DiasxBU");

                entity.Property(e => e.Fecha)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Bu)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("BU");

                entity.Property(e => e.IdenDiasxbu)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_diasxbu");

                entity.Property(e => e.Permitir)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.HasOne(d => d.BuNavigation)
                    .WithMany(p => p.DiasxBus)
                    .HasForeignKey(d => d.Bu)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_DiasxBU_BU");

                entity.HasOne(d => d.FechaNavigation)
                    .WithMany(p => p.DiasxBus)
                    .HasForeignKey(d => d.Fecha)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_DiasxBU_DIAS");
            });

            modelBuilder.Entity<Diccionario>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("DICCIONARIO");

                entity.Property(e => e.Campo)
                    .HasMaxLength(4000)
                    .IsUnicode(false)
                    .HasColumnName("CAMPO");

                entity.Property(e => e.Descripcion)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPCION");

                entity.Property(e => e.Idcampo)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IDCAMPO");

                entity.Property(e => e.IdenDiccionario)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_diccionario");

                entity.Property(e => e.Idtabla)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IDTABLA");

                entity.Property(e => e.Mostrar).HasColumnName("MOSTRAR");

                entity.Property(e => e.Tabla)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("TABLA");

                entity.Property(e => e.Tamano).HasColumnName("TAMANO");

                entity.Property(e => e.Tipo)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("TIPO");
            });

            modelBuilder.Entity<DiccionarioIdioma>(entity =>
            {
                entity.HasKey(e => new { e.Id, e.Modulo })
                    .HasName("PK_DICCIONARIOIDIOMA");

                entity.ToTable("DiccionarioIdioma");

                entity.HasIndex(e => new { e.Modulo, e.Frase }, "UQ_DICCIONARIOIDIOMA_FRASE_MODULO")
                    .IsUnique();

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.Modulo)
                    .HasMaxLength(254)
                    .IsUnicode(false)
                    .HasColumnName("MODULO")
                    .HasDefaultValueSql("('HOTELES')");

                entity.Property(e => e.Aleman)
                    .HasMaxLength(254)
                    .IsUnicode(false)
                    .HasColumnName("ALEMAN");

                entity.Property(e => e.Forma)
                    .HasMaxLength(128)
                    .IsUnicode(false)
                    .HasColumnName("FORMA");

                entity.Property(e => e.Frances)
                    .HasMaxLength(254)
                    .IsUnicode(false)
                    .HasColumnName("FRANCES");

                entity.Property(e => e.Frase)
                    .HasMaxLength(254)
                    .IsUnicode(false)
                    .HasColumnName("FRASE");

                entity.Property(e => e.Ingles)
                    .HasMaxLength(254)
                    .IsUnicode(false)
                    .HasColumnName("INGLES");

                entity.Property(e => e.Italiano)
                    .HasMaxLength(254)
                    .IsUnicode(false)
                    .HasColumnName("ITALIANO");

                entity.Property(e => e.Portugues)
                    .HasMaxLength(254)
                    .IsUnicode(false)
                    .HasColumnName("PORTUGUES");
            });

            modelBuilder.Entity<DiccionarioMensaje>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Diccionario_Mensajes");

                entity.Property(e => e.IdenDiccionarioMensajes)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_diccionario_mensajes");

                entity.Property(e => e.Idioma)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Mensaje)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Modulo)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("MODULO");
            });

            modelBuilder.Entity<Difecon>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("DIFECON");

                entity.Property(e => e.Auxiliadif)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("AUXILIADIF")
                    .IsFixedLength();

                entity.Property(e => e.Bu)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("BU")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Cencosdif)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("CENCOSDIF")
                    .IsFixedLength();

                entity.Property(e => e.CliPrv)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.CodigoPresupuestal)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.CodigoPropiedad1)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.CodigoPropiedad2)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.CodigoPropiedad3)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.CodigoPropiedad4)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.CodigoPropiedad5)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Codigodif)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("CODIGODIF")
                    .IsFixedLength();

                entity.Property(e => e.Iddif)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("IDDIF")
                    .IsFixedLength();

                entity.Property(e => e.IdenDifecon)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_difecon");

                entity.Property(e => e.IdenSecciones).HasColumnName("Iden_Secciones");

                entity.Property(e => e.Itemdif)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("ITEMDIF")
                    .IsFixedLength();

                entity.Property(e => e.Numefac)
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.PeriodicidadVcto)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')")
                    .IsFixedLength();

                entity.Property(e => e.Porcedif)
                    .HasColumnType("money")
                    .HasColumnName("PORCEDIF");

                entity.Property(e => e.Refefac)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.ReservaPresupuestal)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Revelacion).IsUnicode(false);

                entity.Property(e => e.Tercerdif)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("TERCERDIF");

                entity.Property(e => e.TipoFac)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.TipoTrans)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')")
                    .IsFixedLength();

                entity.Property(e => e.TipoVcto)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')")
                    .IsFixedLength();

                entity.Property(e => e.Valordif)
                    .HasColumnType("money")
                    .HasColumnName("VALORDIF");

                entity.Property(e => e.VenceCada)
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Vencefac)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.HasOne(d => d.CodigodifNavigation)
                    .WithMany()
                    .HasForeignKey(d => d.Codigodif)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_DIFECON_MAECONT");

                entity.HasOne(d => d.IddifNavigation)
                    .WithMany()
                    .HasForeignKey(d => d.Iddif)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_DIFECON_DIFEPAR");
            });

            modelBuilder.Entity<Difegen>(entity =>
            {
                entity.HasKey(e => new { e.Iddif, e.Fechaplic, e.IdenDifegen })
                    .IsClustered(false);

                entity.ToTable("DIFEGEN");

                entity.HasIndex(e => e.Fechaplic, "IX_DIFEGEN_FECHAPLIC");

                entity.HasIndex(e => e.Iddif, "IX_DIFEGEN_IDDIF")
                    .IsClustered();

                entity.HasIndex(e => new { e.Idfuente, e.Numdoctra }, "IX_DIFEGEN_IDFUENTE_NUMDOCTRA");

                entity.Property(e => e.Iddif)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("IDDIF")
                    .IsFixedLength();

                entity.Property(e => e.Fechaplic)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("FECHAPLIC")
                    .IsFixedLength();

                entity.Property(e => e.IdenDifegen)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_difegen");

                entity.Property(e => e.Idfuente)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("IDFUENTE")
                    .IsFixedLength();

                entity.Property(e => e.Numdoctra)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("NUMDOCTRA")
                    .IsFixedLength();

                entity.Property(e => e.Statustra)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("STATUSTRA")
                    .HasDefaultValueSql("('')")
                    .IsFixedLength();

                entity.Property(e => e.Vrmesdif)
                    .HasColumnType("money")
                    .HasColumnName("VRMESDIF");
            });

            modelBuilder.Entity<Difepar>(entity =>
            {
                entity.HasKey(e => e.Iddif)
                    .IsClustered(false);

                entity.ToTable("DIFEPAR");

                entity.Property(e => e.Iddif)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("IDDIF")
                    .IsFixedLength();

                entity.Property(e => e.Auxiliadif)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("AUXILIADIF")
                    .IsFixedLength();

                entity.Property(e => e.Bu)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("BU")
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.Cencosdif)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("CENCOSDIF")
                    .IsFixedLength();

                entity.Property(e => e.CliPrv)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.CodigoPresupuestal)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.CodigoPropiedad1)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.CodigoPropiedad2)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.CodigoPropiedad3)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.CodigoPropiedad4)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.CodigoPropiedad5)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Codigodif)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("CODIGODIF")
                    .IsFixedLength();

                entity.Property(e => e.Consecutradoc).HasColumnName("CONSECUTRADOC");

                entity.Property(e => e.Cuotadif)
                    .HasColumnType("money")
                    .HasColumnName("CUOTADIF");

                entity.Property(e => e.Dbcrdif)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("DBCRDIF")
                    .IsFixedLength();

                entity.Property(e => e.Descdif)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("DESCDIF");

                entity.Property(e => e.Estado)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("ESTADO")
                    .HasDefaultValueSql("(space((1)))")
                    .IsFixedLength();

                entity.Property(e => e.Fecfindif)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("FECFINDIF")
                    .IsFixedLength();

                entity.Property(e => e.Fechaper)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("FECHAPER")
                    .HasDefaultValueSql("(getdate())")
                    .IsFixedLength();

                entity.Property(e => e.Fecinidif)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("FECINIDIF")
                    .IsFixedLength();

                entity.Property(e => e.Feultact)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("FEULTACT")
                    .HasDefaultValueSql("(getdate())")
                    .IsFixedLength();

                entity.Property(e => e.Formudif)
                    .HasMaxLength(240)
                    .IsUnicode(false)
                    .HasColumnName("FORMUDIF");

                entity.Property(e => e.Fuentedif)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("FUENTEDIF")
                    .IsFixedLength();

                entity.Property(e => e.Fuentedoc)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("FUENTEDOC")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.IdDifCancelacion)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.IdenDifepar)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_difepar");

                entity.Property(e => e.IdenSecciones).HasColumnName("Iden_Secciones");

                entity.Property(e => e.Itemdif)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("ITEMDIF")
                    .IsFixedLength();

                entity.Property(e => e.Numdoctradoc)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("NUMDOCTRADOC")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Numefac)
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.Peraplidif)
                    .HasColumnName("PERAPLIDIF")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Periodif).HasColumnName("PERIODIF");

                entity.Property(e => e.RefeDife)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Refefac)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.ReservaPresupuestal)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Revelacion).IsUnicode(false);

                entity.Property(e => e.Saldodif)
                    .HasColumnType("money")
                    .HasColumnName("SALDODIF")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Tercerdif)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("TERCERDIF");

                entity.Property(e => e.Tipo)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')")
                    .IsFixedLength();

                entity.Property(e => e.TipoFac)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.Totaldif)
                    .HasColumnType("money")
                    .HasColumnName("TOTALDIF");

                entity.Property(e => e.Vencefac)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Vrmesdif)
                    .HasColumnType("money")
                    .HasColumnName("VRMESDIF");

                entity.HasOne(d => d.BuNavigation)
                    .WithMany(p => p.Difepars)
                    .HasForeignKey(d => d.Bu)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_DIFEPAR_BU");

                entity.HasOne(d => d.CodigodifNavigation)
                    .WithMany(p => p.Difepars)
                    .HasForeignKey(d => d.Codigodif)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_DIFEPAR_MAECONT");
            });

            modelBuilder.Entity<Dinner>(entity =>
            {
                entity.ToTable("Dinner");

                entity.Property(e => e.Codigo)
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.Detalle)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.FechaFinal).HasColumnType("smalldatetime");

                entity.Property(e => e.FechaInicial).HasColumnType("smalldatetime");

                entity.Property(e => e.FormatoArchivoPlano)
                    .HasMaxLength(30)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<DinnerMovimiento>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("DinnerMovimiento");

                entity.Property(e => e.BaseIva).HasColumnType("money");

                entity.Property(e => e.BaseIvaCero).HasColumnType("money");

                entity.Property(e => e.Bu)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Codicta)
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.CodigoEstablecimiento)
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.DocumentoRecaudo)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.FechaTransaccion).HasColumnType("smalldatetime");

                entity.Property(e => e.FuenteRecaudo)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.Id).ValueGeneratedOnAdd();

                entity.Property(e => e.IdCliPrv)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Iva)
                    .HasColumnType("money")
                    .HasColumnName("IVA");

                entity.Property(e => e.Neto).HasColumnType("money");

                entity.Property(e => e.NombreCliente)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.NroAutorizacion)
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.NroComprobante)
                    .HasMaxLength(7)
                    .IsUnicode(false);

                entity.Property(e => e.Numefac)
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.NumeroTarjeta)
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.Propina).HasColumnType("money");

                entity.Property(e => e.Refefac)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Tipofac)
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.ValorTransaccion).HasColumnType("money");

                entity.Property(e => e.Vencefac)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdDinnerNavigation)
                    .WithMany()
                    .HasForeignKey(d => d.IdDinner)
                    .HasConstraintName("FK_DinnerMovimiento_Dinner");
            });

            modelBuilder.Entity<DinnersDatosPoshotele>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("DinnersDatosPOSHoteles");

                entity.Property(e => e.BaseIvaCero).HasColumnType("money");

                entity.Property(e => e.Cliprv)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("CLIPRV");

                entity.Property(e => e.Codicta)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("CODICTA");

                entity.Property(e => e.CodigoEstablecimiento)
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.FechaTransaccion)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.IdAccionSoc)
                    .HasMaxLength(11)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Iden)
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Iva)
                    .HasMaxLength(18)
                    .IsUnicode(false);

                entity.Property(e => e.Numefac)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("NUMEFAC")
                    .IsFixedLength();

                entity.Property(e => e.NumeroAutorizacion)
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.NumeroComprobante)
                    .HasMaxLength(7)
                    .IsUnicode(false);

                entity.Property(e => e.NumeroCuotas)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.NumeroTarjeta)
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.Refefac)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("REFEFAC");

                entity.Property(e => e.Secuencia)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.TipoRegistro)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Tipofac)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("TIPOFAC");

                entity.Property(e => e.ValorBaseIva)
                    .HasMaxLength(18)
                    .IsUnicode(false);

                entity.Property(e => e.ValorNeto)
                    .HasMaxLength(18)
                    .IsUnicode(false);

                entity.Property(e => e.ValorPropina)
                    .HasMaxLength(18)
                    .IsUnicode(false);

                entity.Property(e => e.ValorTransaccion)
                    .HasMaxLength(18)
                    .IsUnicode(false)
                    .HasColumnName("valorTransaccion");

                entity.Property(e => e.Vencefac)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("VENCEFAC")
                    .IsFixedLength();
            });

            modelBuilder.Entity<Divpolitica>(entity =>
            {
                entity.HasKey(e => e.Iddivpolitica)
                    .HasName("pk_DIVPOLITICA")
                    .IsClustered(false);

                entity.ToTable("DIVPOLITICA");

                entity.Property(e => e.Iddivpolitica)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("IDDIVPOLITICA")
                    .IsFixedLength();

                entity.Property(e => e.Codigodane)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("CODIGODANE")
                    .IsFixedLength();

                entity.Property(e => e.Depdivpolitica)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("DEPDIVPOLITICA");

                entity.Property(e => e.Desdivpolitica)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("DESDIVPOLITICA")
                    .IsFixedLength();

                entity.Property(e => e.Fecdivpolitica)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("FECDIVPOLITICA");

                entity.Property(e => e.IdenDivpolitica)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_divpolitica");

                entity.Property(e => e.Ncddivpolitica).HasColumnName("NCDDIVPOLITICA");

                entity.Property(e => e.Nivdivpolitica).HasColumnName("NIVDIVPOLITICA");

                entity.Property(e => e.Tipodivpolitica)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("TIPODIVPOLITICA")
                    .IsFixedLength();

                entity.Property(e => e.VersionDeLaFila)
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<Document>(entity =>
            {
                entity.HasKey(e => new { e.Fntedcto, e.Numedcto })
                    .IsClustered(false);

                entity.ToTable("DOCUMENT");

                entity.HasIndex(e => e.Fechdcto, "IX_DOCUMENT_FECHDCTO");

                entity.HasIndex(e => new { e.Fntedcto, e.Numtdcto }, "IX_DOCUMENT_FNTEDCTO_NUMTDCTO");

                entity.HasIndex(e => e.Iactdcto, "IX_DOCUMENT_IACTDCTO");

                entity.HasIndex(e => e.IdDocumentoExterno, "IX_DOCUMENT_IdDocumentoExterno");

                entity.HasIndex(e => e.Numedcto, "IX_DOCUMENT_NUMEDCTO");

                entity.HasIndex(e => new { e.Numtdcto, e.Sudbdcto, e.Sucrdcto, e.Numedcto }, "IX_DOCUMENT_NUMTDCTO_SUDBDCTO_SUCRDCTO_NUMEDCTO");

                entity.Property(e => e.Fntedcto)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("FNTEDCTO")
                    .IsFixedLength();

                entity.Property(e => e.Numedcto)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("NUMEDCTO")
                    .IsFixedLength();

                entity.Property(e => e.AgruparNit)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("AgruparNIT")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AjusteInflacion)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')")
                    .IsFixedLength();

                entity.Property(e => e.Anodcto)
                    .HasMaxLength(7)
                    .IsUnicode(false)
                    .HasColumnName("ANODCTO");

                entity.Property(e => e.AreaEmpresa)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.AutorizoPreContab)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("Autorizo_PreContab")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AutorizoRevision)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("Autorizo_Revision")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Auxiliar)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("AUXILIAR");

                entity.Property(e => e.Benefdcto)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("BENEFDCTO");

                entity.Property(e => e.BlGenChequesPosfechados).HasColumnName("bl_GenChequesPosfechados");

                entity.Property(e => e.BlRevisado).HasColumnName("bl_Revisado");

                entity.Property(e => e.Bu)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("BU")
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.Cbadcto)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("CBADCTO");

                entity.Property(e => e.Chedcto)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("CHEDCTO")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ChequeEntregado).HasDefaultValueSql("((0))");

                entity.Property(e => e.Cierre)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('N')")
                    .IsFixedLength();

                entity.Property(e => e.CodTipoIdentificacion)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("Cod_TipoIdentificacion");

                entity.Property(e => e.Descdcto)
                    .HasMaxLength(120)
                    .IsUnicode(false)
                    .HasColumnName("DESCDCTO");

                entity.Property(e => e.Enfdcto)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("ENFDCTO")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Entregado)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("ENTREGADO");

                entity.Property(e => e.EstadoPreContab)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("Estado_PreContab")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.FechaEntregaAreaEmpresa)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("FechaEntrega_AreaEmpresa");

                entity.Property(e => e.FechaPreContabilizacion)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("Fecha_PreContabilizacion");

                entity.Property(e => e.FechaRevision)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("Fecha_Revision");

                entity.Property(e => e.Fechdcto)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("FECHDCTO")
                    .IsFixedLength();

                entity.Property(e => e.GenEsquema)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('N')")
                    .IsFixedLength();

                entity.Property(e => e.Iactdcto)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("IACTDCTO");

                entity.Property(e => e.IdAplicacionesZeus).HasColumnName("Id_AplicacionesZeus");

                entity.Property(e => e.IdDocumentoExterno)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Idbanco)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("IDBANCO")
                    .IsFixedLength();

                entity.Property(e => e.Idcenco)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("IDCENCO");

                entity.Property(e => e.Idcliprv)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("IDCLIPRV");

                entity.Property(e => e.IdenDatosImpuestos)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("Iden_DatosImpuestos");

                entity.Property(e => e.IdenDocument)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_document");

                entity.Property(e => e.Idtercero)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("IDTERCERO");

                entity.Property(e => e.Impricheque)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("IMPRICHEQUE")
                    .IsFixedLength();

                entity.Property(e => e.IndContabPrestamo)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('N')")
                    .IsFixedLength();

                entity.Property(e => e.Item)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("ITEM");

                entity.Property(e => e.Moneda)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.MontoMoneda)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.Montoletras)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("MONTOLETRAS");

                entity.Property(e => e.Ncf)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("NCF")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.NcfModificado)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("NCF_Modificado")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Ndrecdcto)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("NDRECDCTO");

                entity.Property(e => e.Nreversiones)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("NReversiones")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.NumVales).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.NumValesConciliados).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.Numtdcto)
                    .HasColumnName("NUMTDCTO")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.PaagAcu)
                    .HasColumnType("money")
                    .HasColumnName("Paag_Acu")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.PaagMes)
                    .HasColumnType("money")
                    .HasColumnName("Paag_Mes")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Statusdcto)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("STATUSDCTO")
                    .IsFixedLength();

                entity.Property(e => e.Sucrdcto)
                    .HasColumnType("money")
                    .HasColumnName("SUCRDCTO")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Sudbdcto)
                    .HasColumnType("money")
                    .HasColumnName("SUDBDCTO")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.TasaCambio).HasColumnType("money");

                entity.Property(e => e.Tprecdcto)
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .HasColumnName("TPRECDCTO");

                entity.Property(e => e.Vchdcto)
                    .HasColumnType("money")
                    .HasColumnName("VCHDCTO")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.VencCheque)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.VersionDeLaFila)
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.VrMoneda).HasColumnType("money");

                entity.Property(e => e.XmlAdicionales)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.HasOne(d => d.AreaEmpresaNavigation)
                    .WithMany(p => p.Documents)
                    .HasForeignKey(d => d.AreaEmpresa)
                    .HasConstraintName("FK_Document_Areas");

                entity.HasOne(d => d.BuNavigation)
                    .WithMany(p => p.Documents)
                    .HasForeignKey(d => d.Bu)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_DOCUMENT_BU");
            });

            modelBuilder.Entity<DocumentCheque>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("DOCUMENT_CHEQUES");

                entity.Property(e => e.AreaEmpresa)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Beneficiario)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.CodTipoIdentificacion)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("Cod_TipoIdentificacion");

                entity.Property(e => e.Cuenta)
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.Documento)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Entregado)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Estado)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('US')");

                entity.Property(e => e.FechaEntrega).HasColumnType("smalldatetime");

                entity.Property(e => e.FechaEntregaAreaEmpresa)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("FechaEntrega_AreaEmpresa");

                entity.Property(e => e.Fuente)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.Iden)
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.ImpriCheque)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Moneda)
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.MontoMoneda)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Montoletras)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.NumDocEntrega)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.NumeroCheque)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Numero_cheque");

                entity.Property(e => e.TipoDocEntrega)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Valor).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.Vencimiento)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.VrMoneda).HasColumnType("numeric(18, 2)");
            });

            modelBuilder.Entity<DocumentInsertar>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Document_Insertar");

                entity.HasIndex(e => e.SpId, "IX_DOCUMENT_INSERTAR_SPID_FNTEDCTO_NUMEDCTO")
                    .IsClustered();

                entity.Property(e => e.AgruparNit)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("AgruparNIT")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AjusteInflacion)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')")
                    .IsFixedLength();

                entity.Property(e => e.Anodcto)
                    .HasMaxLength(7)
                    .IsUnicode(false)
                    .HasColumnName("ANODCTO")
                    .IsFixedLength();

                entity.Property(e => e.Aplicacion)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Auxiliar)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("AUXILIAR");

                entity.Property(e => e.Benefdcto)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("BENEFDCTO");

                entity.Property(e => e.BlGenChequesPosfechados)
                    .HasColumnName("bl_GenChequesPosfechados")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Bu)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("bu")
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.Cbadcto)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("CBADCTO");

                entity.Property(e => e.Chedcto)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("CHEDCTO");

                entity.Property(e => e.Descdcto)
                    .HasMaxLength(120)
                    .IsUnicode(false)
                    .HasColumnName("DESCDCTO");

                entity.Property(e => e.Enfdcto)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("ENFDCTO");

                entity.Property(e => e.Entregado)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("ENTREGADO");

                entity.Property(e => e.Fechdcto)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("FECHDCTO")
                    .IsFixedLength();

                entity.Property(e => e.Fntedcto)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("FNTEDCTO")
                    .IsFixedLength();

                entity.Property(e => e.Iactdcto)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("IACTDCTO");

                entity.Property(e => e.IdAplicacionesZeus).HasColumnName("Id_AplicacionesZeus");

                entity.Property(e => e.IdDocumentoExterno)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Idbanco)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("IDBANCO")
                    .IsFixedLength();

                entity.Property(e => e.Idcenco)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("IDCENCO");

                entity.Property(e => e.Idcliprv)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("IDCLIPRV");

                entity.Property(e => e.IdenDatosImpuestos)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("Iden_DatosImpuestos");

                entity.Property(e => e.IdenDocumentInsertar)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_document_insertar");

                entity.Property(e => e.Idtercero)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("IDTERCERO");

                entity.Property(e => e.Impricheque)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("IMPRICHEQUE")
                    .IsFixedLength();

                entity.Property(e => e.IndContabPrestamo)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('N')")
                    .IsFixedLength();

                entity.Property(e => e.Item)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("ITEM");

                entity.Property(e => e.Moneda)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.MontoMoneda)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.Montoletras)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("MONTOLETRAS");

                entity.Property(e => e.Ncf)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("NCF")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.NcfModificado)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("NCF_Modificado")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Ndrecdcto)
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .HasColumnName("NDRECDCTO");

                entity.Property(e => e.Nreversiones)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("NReversiones")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.NumVales)
                    .HasColumnType("numeric(18, 0)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.NumValesConciliados)
                    .HasColumnType("numeric(18, 0)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Numedcto)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("NUMEDCTO")
                    .IsFixedLength();

                entity.Property(e => e.Numtdcto).HasColumnName("NUMTDCTO");

                entity.Property(e => e.PaagAcu)
                    .HasColumnType("money")
                    .HasColumnName("Paag_Acu")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.PaagMes)
                    .HasColumnType("money")
                    .HasColumnName("Paag_Mes")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Statusdcto)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("STATUSDCTO")
                    .IsFixedLength();

                entity.Property(e => e.Sucrdcto)
                    .HasColumnType("money")
                    .HasColumnName("SUCRDCTO");

                entity.Property(e => e.Sudbdcto)
                    .HasColumnType("money")
                    .HasColumnName("SUDBDCTO");

                entity.Property(e => e.TasaCambio)
                    .HasColumnType("money")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Tprecdcto)
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .HasColumnName("TPRECDCTO");

                entity.Property(e => e.Vchdcto)
                    .HasColumnType("money")
                    .HasColumnName("VCHDCTO");

                entity.Property(e => e.VencCheque)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.VrMoneda)
                    .HasColumnType("money")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.XmlAdicionales)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");
            });

            modelBuilder.Entity<DocumentPreparacion>(entity =>
            {
                entity.HasKey(e => e.Consecutivo)
                    .IsClustered(false);

                entity.ToTable("DOCUMENT_PREPARACION");

                entity.Property(e => e.Consecutivo)
                    .ValueGeneratedNever()
                    .HasColumnName("CONSECUTIVO");

                entity.Property(e => e.AjusteInflacion)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')")
                    .IsFixedLength();

                entity.Property(e => e.Anodcto)
                    .HasMaxLength(7)
                    .IsUnicode(false)
                    .HasColumnName("ANODCTO");

                entity.Property(e => e.Auxiliar)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("AUXILIAR");

                entity.Property(e => e.Benefdcto)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("BENEFDCTO");

                entity.Property(e => e.Bu)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("BU")
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.Cbadcto)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("CBADCTO");

                entity.Property(e => e.Chedcto)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("CHEDCTO");

                entity.Property(e => e.Descdcto)
                    .HasMaxLength(120)
                    .IsUnicode(false)
                    .HasColumnName("DESCDCTO");

                entity.Property(e => e.Enfdcto)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("ENFDCTO")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Entregado)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("ENTREGADO");

                entity.Property(e => e.Fechdcto)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("FECHDCTO")
                    .IsFixedLength();

                entity.Property(e => e.Fntedcto)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("FNTEDCTO")
                    .IsFixedLength();

                entity.Property(e => e.GenEsquema)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('N')")
                    .IsFixedLength();

                entity.Property(e => e.Iactdcto)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("IACTDCTO");

                entity.Property(e => e.Idbanco)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("IDBANCO")
                    .IsFixedLength();

                entity.Property(e => e.Idcenco)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("IDCENCO");

                entity.Property(e => e.Idcliprv)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("IDCLIPRV");

                entity.Property(e => e.IdenDocumentPreparacion)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_document_preparacion");

                entity.Property(e => e.Idtercero)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("IDTERCERO");

                entity.Property(e => e.Impricheque)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("IMPRICHEQUE")
                    .IsFixedLength();

                entity.Property(e => e.IndContabPrestamo)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('N')")
                    .IsFixedLength();

                entity.Property(e => e.Item)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("ITEM");

                entity.Property(e => e.Moneda)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.MontoMoneda)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.Montoletras)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("MONTOLETRAS");

                entity.Property(e => e.Ncf)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("NCF")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.NcfModificado)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("NCF_Modificado")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Ndrecdcto)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("NDRECDCTO");

                entity.Property(e => e.Nreversiones)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("NReversiones")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.NumVales).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.NumValesConciliados).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.Numedcto)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("NUMEDCTO")
                    .IsFixedLength();

                entity.Property(e => e.Numtdcto)
                    .HasColumnName("NUMTDCTO")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.PaagAcu)
                    .HasColumnType("money")
                    .HasColumnName("Paag_Acu")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.PaagMes)
                    .HasColumnType("money")
                    .HasColumnName("Paag_Mes")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Statusdcto)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("STATUSDCTO")
                    .IsFixedLength();

                entity.Property(e => e.Sucrdcto)
                    .HasColumnType("money")
                    .HasColumnName("SUCRDCTO")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Sudbdcto)
                    .HasColumnType("money")
                    .HasColumnName("SUDBDCTO")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.TasaCambio).HasColumnType("money");

                entity.Property(e => e.Tprecdcto)
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .HasColumnName("TPRECDCTO");

                entity.Property(e => e.Vchdcto)
                    .HasColumnType("money")
                    .HasColumnName("VCHDCTO")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.VencCheque)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.VrMoneda).HasColumnType("money");
            });

            modelBuilder.Entity<DocumentRev>(entity =>
            {
                entity.HasKey(e => new { e.Fuente, e.Documento })
                    .IsClustered(false);

                entity.ToTable("Document_Rev");

                entity.HasIndex(e => new { e.Documento, e.Fuente }, "IX_DOCUMENT_REV_DOCUMENTO_FUENTE");

                entity.Property(e => e.Fuente)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Documento)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Beneficiario)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Bu)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("BU")
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.Entregado)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.FechaEntregado)
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.IdenDocumentRev)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_document_rev");

                entity.Property(e => e.ImpresionCheque)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Moneda)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')")
                    .IsFixedLength();

                entity.Property(e => e.MontoLetras)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.MontoMoneda)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.Ncheque)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("NCheque")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.NdocEntregado)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("NDocEntregado");

                entity.Property(e => e.TasaCambio).HasColumnType("money");

                entity.Property(e => e.TpDocEntregado)
                    .HasMaxLength(4)
                    .IsUnicode(false);

                entity.Property(e => e.ValorCheque)
                    .HasColumnType("money")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.VencCheque)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.VrMoneda).HasColumnType("money");

                entity.HasOne(d => d.BuNavigation)
                    .WithMany(p => p.DocumentRevs)
                    .HasForeignKey(d => d.Bu)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_DOCUMENT_REV_BU");
            });

            modelBuilder.Entity<DocumentTemp>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("DOCUMENT_TEMP");

                entity.HasIndex(e => new { e.Fechdcto, e.Aplicacion }, "IX_DOCUMENT_TEMP_APLICACION_FECHDCTO");

                entity.HasIndex(e => new { e.Fntedcto, e.Fechdcto, e.Aplicacion }, "IX_DOCUMENT_TEMP_APLICACION_FECHDCTO_FNTEDCTO");

                entity.HasIndex(e => new { e.Fntedcto, e.Numedcto }, "IX_DOCUMENT_TEMP_FNTEDCTO_NUMEDCTO");

                entity.HasIndex(e => e.IdenDocumentTemp, "IX_DOCUMENT_TEMP_Iden_document_temp");

                entity.Property(e => e.Anodcto)
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .HasColumnName("ANODCTO")
                    .IsFixedLength();

                entity.Property(e => e.Aplicacion)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("APLICACION");

                entity.Property(e => e.Auxiliar)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("AUXILIAR");

                entity.Property(e => e.Benefdcto)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("BENEFDCTO");

                entity.Property(e => e.Bu)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("BU")
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.Cbadcto)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("CBADCTO");

                entity.Property(e => e.Chedcto)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("CHEDCTO");

                entity.Property(e => e.Descdcto)
                    .HasMaxLength(120)
                    .IsUnicode(false)
                    .HasColumnName("DESCDCTO");

                entity.Property(e => e.Enfdcto)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("ENFDCTO");

                entity.Property(e => e.Entregado)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("ENTREGADO");

                entity.Property(e => e.Fechdcto)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("FECHDCTO")
                    .IsFixedLength();

                entity.Property(e => e.Fntedcto)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("FNTEDCTO")
                    .IsFixedLength();

                entity.Property(e => e.Iactdcto)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("IACTDCTO");

                entity.Property(e => e.IdAplicacionesZeus).HasColumnName("Id_AplicacionesZeus");

                entity.Property(e => e.IdDocumentoExterno)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Idbanco)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("IDBANCO")
                    .IsFixedLength();

                entity.Property(e => e.Idcenco)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("IDCENCO");

                entity.Property(e => e.Idcliprv)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("IDCLIPRV");

                entity.Property(e => e.IdenDocumentTemp)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_document_temp");

                entity.Property(e => e.Idtercero)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("IDTERCERO");

                entity.Property(e => e.Impricheque)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("IMPRICHEQUE")
                    .IsFixedLength();

                entity.Property(e => e.Item)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("ITEM");

                entity.Property(e => e.Montoletras)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("MONTOLETRAS");

                entity.Property(e => e.Ncf)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("NCF")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.NcfModificado)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("NCF_Modificado")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Ndrecdcto)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("NDRECDCTO");

                entity.Property(e => e.Numedcto)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("NUMEDCTO")
                    .IsFixedLength();

                entity.Property(e => e.Numtdcto).HasColumnName("NUMTDCTO");

                entity.Property(e => e.Procesado).HasColumnName("PROCESADO");

                entity.Property(e => e.Statusdcto)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("STATUSDCTO")
                    .IsFixedLength();

                entity.Property(e => e.Sucrdcto)
                    .HasColumnType("money")
                    .HasColumnName("SUCRDCTO");

                entity.Property(e => e.Sudbdcto)
                    .HasColumnType("money")
                    .HasColumnName("SUDBDCTO");

                entity.Property(e => e.TasaCambio).HasColumnType("money");

                entity.Property(e => e.Tprecdcto)
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .HasColumnName("TPRECDCTO");

                entity.Property(e => e.Vchdcto)
                    .HasColumnType("money")
                    .HasColumnName("VCHDCTO");

                entity.Property(e => e.XmlAdicionales)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.HasOne(d => d.BuNavigation)
                    .WithMany()
                    .HasForeignKey(d => d.Bu)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_DOCUMENT_TEMP_BU");
            });

            modelBuilder.Entity<DocumentXmlAdicionalesLog>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("DOCUMENT_XmlAdicionales_Log");

                entity.Property(e => e.FechaGrabacion).HasColumnType("datetime");

                entity.Property(e => e.Fntedcto)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("FNTEDCTO")
                    .IsFixedLength();

                entity.Property(e => e.Iden)
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Numedcto)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("NUMEDCTO")
                    .IsFixedLength();

                entity.Property(e => e.XmlAdicionales).IsUnicode(false);
            });

            modelBuilder.Entity<DocumentosContingencium>(entity =>
            {
                entity.HasKey(e => new { e.IdContingencia, e.IdFuente, e.Documento });

                entity.Property(e => e.IdContingencia).HasColumnName("idContingencia");

                entity.Property(e => e.IdFuente)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.Documento)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Iden).ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<DocumentosRelacionAdjunto>(entity =>
            {
                entity.Property(e => e.IdArchivosadjuntos).HasColumnName("id_Archivosadjuntos");

                entity.Property(e => e.IdEntidades).HasColumnName("Id_entidades");

                entity.Property(e => e.KeyDocumento)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("Key_documento");

                entity.HasOne(d => d.IdArchivosadjuntosNavigation)
                    .WithMany(p => p.DocumentosRelacionAdjuntos)
                    .HasForeignKey(d => d.IdArchivosadjuntos)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_DocumentosRelacionAdjuntos_id_Archivosadjuntos");

                entity.HasOne(d => d.IdEntidadesNavigation)
                    .WithMany(p => p.DocumentosRelacionAdjuntos)
                    .HasForeignKey(d => d.IdEntidades)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_DocumentosRelacionAdjuntos_Id_entidades");
            });

            modelBuilder.Entity<DocumentosRevertir>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Documentos_Revertir");

                entity.HasIndex(e => new { e.Estado, e.Iden }, "IX_DOCUMENTOS_REVERTIR_ESTADO_IDEN")
                    .IsClustered();

                entity.Property(e => e.Aplicacion)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.FechaIngreso).HasColumnType("datetime");

                entity.Property(e => e.FechaProceso).HasColumnType("datetime");

                entity.Property(e => e.IdFuente)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Iden)
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Numdoctra)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.UltimoError).IsUnicode(false);

                entity.Property(e => e.Usuario)
                    .HasMaxLength(250)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<EmailQueue>(entity =>
            {
                entity.HasKey(e => e.IdEmail);

                entity.ToTable("EmailQueue");

                entity.Property(e => e.IdEmail).HasColumnName("id_email");

                entity.Property(e => e.AmDeliveryTimes).HasColumnName("am_delivery_times");

                entity.Property(e => e.AmSentTimes).HasColumnName("am_sent_times");

                entity.Property(e => e.CdEmailbody)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cd_emailbody");

                entity.Property(e => e.CdSection)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("cd_section");

                entity.Property(e => e.DsBccEmail)
                    .HasMaxLength(80)
                    .IsUnicode(false)
                    .HasColumnName("ds_bcc_email")
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.DsBccName)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ds_bcc_name")
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.DsBody)
                    .HasColumnType("text")
                    .HasColumnName("ds_body");

                entity.Property(e => e.DsBody2)
                    .HasColumnType("text")
                    .HasColumnName("ds_body2");

                entity.Property(e => e.DsBody3)
                    .HasColumnType("text")
                    .HasColumnName("ds_body3");

                entity.Property(e => e.DsBody4)
                    .HasColumnType("text")
                    .HasColumnName("ds_body4");

                entity.Property(e => e.DsCcEmail)
                    .HasMaxLength(80)
                    .IsUnicode(false)
                    .HasColumnName("ds_cc_email")
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.DsCcName)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ds_cc_name")
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.DsFromEmail)
                    .HasMaxLength(80)
                    .IsUnicode(false)
                    .HasColumnName("ds_from_email");

                entity.Property(e => e.DsFromName)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ds_from_name");

                entity.Property(e => e.DsSubject)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("ds_subject");

                entity.Property(e => e.DsToEmail)
                    .HasMaxLength(80)
                    .IsUnicode(false)
                    .HasColumnName("ds_to_email");

                entity.Property(e => e.DsToName)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ds_to_name");

                entity.Property(e => e.DtNextDelivery)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("dt_next_delivery");

                entity.Property(e => e.DtUpdated)
                    .HasColumnType("datetime")
                    .HasColumnName("dt_updated")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.IdEmailtype).HasColumnName("id_emailtype");

                entity.Property(e => e.IdUpdated).HasColumnName("id_updated");

                entity.Property(e => e.InHtml)
                    .HasColumnName("in_html")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Message)
                    .HasColumnType("text")
                    .HasColumnName("message");
            });

            modelBuilder.Entity<Entidad>(entity =>
            {
                entity.HasKey(e => e.Idbanco)
                    .IsClustered(false);

                entity.ToTable("ENTIDAD");

                entity.Property(e => e.Idbanco)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("IDBANCO")
                    .IsFixedLength();

                entity.Property(e => e.Entidad1)
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .HasColumnName("ENTIDAD")
                    .IsFixedLength();

                entity.Property(e => e.IdenEntidad)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_entidad");
            });

            modelBuilder.Entity<Entidade>(entity =>
            {
                entity.HasIndex(e => e.Nombre, "UQ_Entidades_Nombre")
                    .IsUnique();

                entity.Property(e => e.Descripcion)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.IdenEntidades)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_entidades");

                entity.Property(e => e.Nombre)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<EnvioEmailConfiguracion>(entity =>
            {
                entity.HasKey(e => new { e.Codigo, e.Tipo })
                    .HasName("PK_ENVIOEMAIL_CONFIGURACION");

                entity.ToTable("EnvioEmail_Configuracion");

                entity.Property(e => e.Codigo)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Tipo)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')")
                    .IsFixedLength();

                entity.Property(e => e.ClienteF)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ClienteI)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.CodAlternoF)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.CodAlternoI)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.CuentaF)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')")
                    .IsFixedLength();

                entity.Property(e => e.CuentaI)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')")
                    .IsFixedLength();

                entity.Property(e => e.DiasVencF).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.DiasVencI).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.DivPoliticaF)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')")
                    .IsFixedLength();

                entity.Property(e => e.DivPoliticaI)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')")
                    .IsFixedLength();

                entity.Property(e => e.FechaAnalisis)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')")
                    .IsFixedLength();

                entity.Property(e => e.GrEmpresarialF)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.GrEmpresarialI)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Iden).ValueGeneratedOnAdd();

                entity.Property(e => e.IndDiasVenc)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.IndVencimiento)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.IndVendedor)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')")
                    .IsFixedLength();

                entity.Property(e => e.IndVrMonExtranjera)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.IndVrMonLocal)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.IndZona)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Nombre)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Orden1)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Orden2)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Orden3)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Orden4)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Orden5)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.PaisF)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.PaisI)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Plantilla)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SegmentoF)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')")
                    .IsFixedLength();

                entity.Property(e => e.SegmentoI)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')")
                    .IsFixedLength();

                entity.Property(e => e.TerceroF)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.TerceroI)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.TipoClienteF)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.TipoClienteI)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.TipoEmail).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.TipoFacturaF)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')")
                    .IsFixedLength();

                entity.Property(e => e.TipoFacturaI)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')")
                    .IsFixedLength();

                entity.Property(e => e.UbiGeograficaF)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.UbiGeograficaI)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.VencimientoF)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.VencimientoI)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.VendedorF)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')")
                    .IsFixedLength();

                entity.Property(e => e.VendedorI)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')")
                    .IsFixedLength();

                entity.Property(e => e.VrMonExtranjeraF).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.VrMonExtranjeraI).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.VrMonLocalF).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.VrMonLocalI).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.ZonaF)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')")
                    .IsFixedLength();

                entity.Property(e => e.ZonaI)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')")
                    .IsFixedLength();
            });

            modelBuilder.Entity<EscenariosAplicaIcat>(entity =>
            {
                entity.HasKey(e => e.Iden);

                entity.ToTable("Escenarios_AplicaICAT");

                entity.Property(e => e.Iden).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.IdenEscenariosAplicaicat)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_escenarios_aplicaicat");

                entity.Property(e => e.Nombre)
                    .HasMaxLength(200)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<EscenariosCategoriaImpuesto>(entity =>
            {
                entity.HasKey(e => e.Iden);

                entity.ToTable("Escenarios_CategoriaImpuesto");

                entity.Property(e => e.Iden)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.IdenEscenariosCategoriaimpuesto)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_escenarios_categoriaimpuesto");

                entity.Property(e => e.Nombre)
                    .HasMaxLength(200)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<EscenariosCategoriaTributariaIva>(entity =>
            {
                entity.HasKey(e => e.Iden);

                entity.ToTable("Escenarios_CategoriaTributariaIVA");

                entity.Property(e => e.Iden).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.IdenEscenariosCategoriatributariaiva)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_escenarios_categoriatributariaiva");

                entity.Property(e => e.Nombre)
                    .HasMaxLength(200)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<EscenariosCategoriaTributarium>(entity =>
            {
                entity.HasKey(e => e.Iden);

                entity.ToTable("Escenarios_CategoriaTributaria");

                entity.Property(e => e.Iden)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.IdenEscenariosCategoriatributaria)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_escenarios_categoriatributaria");

                entity.Property(e => e.Nombre)
                    .HasMaxLength(1000)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<EscenariosCiudad>(entity =>
            {
                entity.HasKey(e => e.Iden);

                entity.ToTable("Escenarios_Ciudad");

                entity.HasIndex(e => e.Codigo, "IX_Escenarios_Ciudad_Codigo")
                    .IsUnique();

                entity.Property(e => e.Iden)
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Codigo)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Nombre)
                    .HasMaxLength(200)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<EscenariosClaseContribuyente>(entity =>
            {
                entity.HasKey(e => e.Iden);

                entity.ToTable("Escenarios_ClaseContribuyente");

                entity.Property(e => e.Iden).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.IdenEscenariosClasecontribuyente)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_escenarios_clasecontribuyente");

                entity.Property(e => e.Nombre)
                    .HasMaxLength(200)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<EscenariosConceptoRetencion>(entity =>
            {
                entity.HasKey(e => e.Iden);

                entity.ToTable("Escenarios_ConceptoRetencion");

                entity.Property(e => e.Iden)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.IdenEscenariosConceptoretencion)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_escenarios_conceptoretencion");

                entity.Property(e => e.Nombre)
                    .HasMaxLength(200)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<EscenariosCuenta>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Escenarios_Cuentas");

                entity.Property(e => e.Codigo)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Id)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("ID")
                    .IsFixedLength();

                entity.Property(e => e.Nombre)
                    .HasMaxLength(40)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<EscenariosDocumento>(entity =>
            {
                entity.HasKey(e => e.Iden);

                entity.ToTable("Escenarios_Documentos");

                entity.HasIndex(e => e.EscenariosPaisIden, "IX_Escenarios_Documentos_Escenarios_Pais_Iden");

                entity.HasIndex(e => e.Fuente, "IX_Escenarios_Documentos_Fuente");

                entity.HasIndex(e => new { e.Fuente, e.Documento }, "IX_Escenarios_Documentos_Fuente_Documento");

                entity.HasIndex(e => e.Moneda, "IX_Escenarios_Documentos_Moneda");

                entity.HasIndex(e => e.Tercero, "IX_Escenarios_Documentos_Tercero");

                entity.Property(e => e.Iden)
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Documento)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.EscenariosPaisIden)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("Escenarios_Pais_Iden");

                entity.Property(e => e.Fecha).HasColumnType("smalldatetime");

                entity.Property(e => e.Fuente)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.Modulo)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Moneda)
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.TasaCambio).HasColumnType("numeric(18, 6)");

                entity.Property(e => e.Tercero)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.TipoOperacion)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Total).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.TotalBruto).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.TotalBrutoMoneda).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.TotalInc)
                    .HasColumnType("numeric(18, 2)")
                    .HasColumnName("TotalINC");

                entity.Property(e => e.TotalIncmoneda)
                    .HasColumnType("numeric(18, 2)")
                    .HasColumnName("TotalINCMoneda");

                entity.Property(e => e.TotalIva)
                    .HasColumnType("numeric(18, 2)")
                    .HasColumnName("TotalIVA");

                entity.Property(e => e.TotalIvamoneda)
                    .HasColumnType("numeric(18, 2)")
                    .HasColumnName("TotalIVAMoneda");

                entity.Property(e => e.TotalMoneda).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.TotalRetencion).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.TotalRetencionMoneda).HasColumnType("numeric(18, 2)");

                entity.HasOne(d => d.EscenariosPaisIdenNavigation)
                    .WithMany(p => p.EscenariosDocumentos)
                    .HasPrincipalKey(p => p.IdenPais)
                    .HasForeignKey(d => d.EscenariosPaisIden)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Escenarios_Documentos_Paises");
            });

            modelBuilder.Entity<EscenariosDocumentosLinea>(entity =>
            {
                entity.HasKey(e => e.Iden);

                entity.ToTable("Escenarios_Documentos_Lineas");

                entity.HasIndex(e => e.Ciudad, "IX_Escenarios_Documentos_Lineas_Ciudad");

                entity.HasIndex(e => e.EscenariosCategoriaTributariaIden, "IX_Escenarios_Documentos_Lineas_Escenarios_CategoriaTributaria_Iden");

                entity.HasIndex(e => e.EscenariosDocumentosIden, "IX_Escenarios_Documentos_Lineas_Escenarios_Documentos_Iden");

                entity.HasIndex(e => new { e.EscenariosDocumentosIden, e.EscenariosEscenarioIden, e.Modo }, "IX_Escenarios_Documentos_Lineas_Escenarios_Documentos_Iden_Escenarios_Escenario_Iden_Modo");

                entity.HasIndex(e => new { e.EscenariosDocumentosIden, e.Linea }, "IX_Escenarios_Documentos_Lineas_Escenarios_Documentos_Iden_Linea")
                    .IsUnique();

                entity.HasIndex(e => new { e.EscenariosDocumentosIden, e.Modo }, "IX_Escenarios_Documentos_Lineas_Escenarios_Documentos_Iden_Modo");

                entity.HasIndex(e => e.EscenariosEscenarioIden, "IX_Escenarios_Documentos_Lineas_Escenarios_Escenario_Iden");

                entity.HasIndex(e => e.EscenariosFiscalesIden, "IX_Escenarios_Documentos_Lineas_Escenarios_Fiscales_Iden");

                entity.HasIndex(e => e.EscenariosImpuestosIden1, "IX_Escenarios_Documentos_Lineas_Escenarios_Impuestos_Iden1");

                entity.HasIndex(e => e.EscenariosImpuestosIden2, "IX_Escenarios_Documentos_Lineas_Escenarios_Impuestos_Iden2");

                entity.HasIndex(e => e.EscenariosImpuestosIden3, "IX_Escenarios_Documentos_Lineas_Escenarios_Impuestos_Iden3");

                entity.HasIndex(e => e.EscenariosImpuestosIden4, "IX_Escenarios_Documentos_Lineas_Escenarios_Impuestos_Iden4");

                entity.HasIndex(e => e.EscenariosImpuestosIden5, "IX_Escenarios_Documentos_Lineas_Escenarios_Impuestos_Iden5");

                entity.HasIndex(e => e.EscenariosSubCategoriaEfecCompraIden, "IX_Escenarios_Documentos_Lineas_Escenarios_SubCategoriaEfecCompra_Iden");

                entity.HasIndex(e => e.EscenariosTributarioConsumoIden, "IX_Escenarios_Documentos_Lineas_Escenarios_TributarioConsumo_Iden");

                entity.HasIndex(e => e.EscenariosTributarioIcatIden, "IX_Escenarios_Documentos_Lineas_Escenarios_TributarioICAT_Iden");

                entity.HasIndex(e => e.EscenariosTributarioRentaIden, "IX_Escenarios_Documentos_Lineas_Escenarios_TributarioRenta_Iden");

                entity.HasIndex(e => e.Linea, "IX_Escenarios_Documentos_Lineas_Linea");

                entity.Property(e => e.Iden)
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Cantidad)
                    .HasColumnType("numeric(18, 6)")
                    .HasColumnName("cantidad");

                entity.Property(e => e.Ciudad).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.Codigo1)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Codigo2)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.CuentaMovimiento)
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.Detalle)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.EscenariosCategoriaTributariaIden)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Escenarios_CategoriaTributaria_Iden");

                entity.Property(e => e.EscenariosDocumentosIden)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("Escenarios_Documentos_Iden");

                entity.Property(e => e.EscenariosEscenarioIden)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("Escenarios_Escenario_Iden");

                entity.Property(e => e.EscenariosFiscalesIden)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("Escenarios_Fiscales_Iden");

                entity.Property(e => e.EscenariosImpuestosIden1)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("Escenarios_Impuestos_Iden1");

                entity.Property(e => e.EscenariosImpuestosIden2)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("Escenarios_Impuestos_Iden2");

                entity.Property(e => e.EscenariosImpuestosIden3)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("Escenarios_Impuestos_Iden3");

                entity.Property(e => e.EscenariosImpuestosIden4)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("Escenarios_Impuestos_Iden4");

                entity.Property(e => e.EscenariosImpuestosIden5)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("Escenarios_Impuestos_Iden5");

                entity.Property(e => e.EscenariosSubCategoriaEfecCompraIden)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("Escenarios_SubCategoriaEfecCompra_Iden");

                entity.Property(e => e.EscenariosTributarioConsumoIden)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("Escenarios_TributarioConsumo_Iden");

                entity.Property(e => e.EscenariosTributarioIcatIden)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("Escenarios_TributarioICAT_Iden");

                entity.Property(e => e.EscenariosTributarioRentaIden)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("Escenarios_TributarioRenta_Iden");

                entity.Property(e => e.Linea)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.MaxIncdescontable)
                    .HasColumnType("numeric(18, 6)")
                    .HasColumnName("MaxINCDescontable");

                entity.Property(e => e.MaxIvadescontable)
                    .HasColumnType("numeric(18, 6)")
                    .HasColumnName("MaxIVADescontable");

                entity.Property(e => e.Modo)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.PorcentajeInc)
                    .HasColumnType("numeric(18, 4)")
                    .HasColumnName("PorcentajeINC");

                entity.Property(e => e.PorcentajeIva)
                    .HasColumnType("numeric(18, 4)")
                    .HasColumnName("PorcentajeIVA");

                entity.Property(e => e.TipoLinea)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Total).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.TotalBruto).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.TotalBrutoMoneda).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.TotalInc)
                    .HasColumnType("numeric(18, 2)")
                    .HasColumnName("TotalINC");

                entity.Property(e => e.TotalIncasumido)
                    .HasColumnType("numeric(18, 2)")
                    .HasColumnName("TotalINCAsumido");

                entity.Property(e => e.TotalIncasumidoMoneda)
                    .HasColumnType("numeric(18, 2)")
                    .HasColumnName("TotalINCAsumidoMoneda");

                entity.Property(e => e.TotalInccr)
                    .HasColumnType("numeric(18, 2)")
                    .HasColumnName("TotalINCCR");

                entity.Property(e => e.TotalInccrmoneda)
                    .HasColumnType("numeric(18, 2)")
                    .HasColumnName("TotalINCCRMoneda");

                entity.Property(e => e.TotalIncdb)
                    .HasColumnType("numeric(18, 2)")
                    .HasColumnName("TotalINCDB");

                entity.Property(e => e.TotalIncdbmoneda)
                    .HasColumnType("numeric(18, 2)")
                    .HasColumnName("TotalINCDBMoneda");

                entity.Property(e => e.TotalIncmoneda)
                    .HasColumnType("numeric(18, 2)")
                    .HasColumnName("TotalINCMoneda");

                entity.Property(e => e.TotalIva)
                    .HasColumnType("numeric(18, 2)")
                    .HasColumnName("TotalIVA");

                entity.Property(e => e.TotalIvaasumido)
                    .HasColumnType("numeric(18, 2)")
                    .HasColumnName("TotalIVAAsumido");

                entity.Property(e => e.TotalIvaasumidoMoneda)
                    .HasColumnType("numeric(18, 2)")
                    .HasColumnName("TotalIVAAsumidoMoneda");

                entity.Property(e => e.TotalIvacr)
                    .HasColumnType("numeric(18, 2)")
                    .HasColumnName("TotalIVACR");

                entity.Property(e => e.TotalIvacrmoneda)
                    .HasColumnType("numeric(18, 2)")
                    .HasColumnName("TotalIVACRMoneda");

                entity.Property(e => e.TotalIvadb)
                    .HasColumnType("numeric(18, 2)")
                    .HasColumnName("TotalIVADB");

                entity.Property(e => e.TotalIvadbmoneda)
                    .HasColumnType("numeric(18, 2)")
                    .HasColumnName("TotalIVADBMoneda");

                entity.Property(e => e.TotalIvamoneda)
                    .HasColumnType("numeric(18, 2)")
                    .HasColumnName("TotalIVAMoneda");

                entity.Property(e => e.TotalMoneda).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.TotalRetencion).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.TotalRetencionCr)
                    .HasColumnType("numeric(18, 2)")
                    .HasColumnName("TotalRetencionCR");

                entity.Property(e => e.TotalRetencionCrmoneda)
                    .HasColumnType("numeric(18, 2)")
                    .HasColumnName("TotalRetencionCRMoneda");

                entity.Property(e => e.TotalRetencionDb)
                    .HasColumnType("numeric(18, 2)")
                    .HasColumnName("TotalRetencionDB");

                entity.Property(e => e.TotalRetencionDbmoneda)
                    .HasColumnType("numeric(18, 2)")
                    .HasColumnName("TotalRetencionDBMoneda");

                entity.Property(e => e.TotalRetencionMoneda).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.ValorImpuesto1).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.ValorImpuesto2).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.ValorImpuesto3).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.ValorImpuesto4).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.ValorImpuesto5).HasColumnType("numeric(18, 2)");

                entity.HasOne(d => d.CiudadNavigation)
                    .WithMany(p => p.EscenariosDocumentosLineas)
                    .HasForeignKey(d => d.Ciudad)
                    .HasConstraintName("FK_Escenarios_Documentos_Lineas_Escenarios_Ciudad");

                entity.HasOne(d => d.EscenariosCategoriaTributariaIdenNavigation)
                    .WithMany(p => p.EscenariosDocumentosLineas)
                    .HasForeignKey(d => d.EscenariosCategoriaTributariaIden)
                    .HasConstraintName("FK_Escenarios_Documentos_Lineas_Escenarios_CategoriaTributaria");

                entity.HasOne(d => d.EscenariosEscenarioIdenNavigation)
                    .WithMany(p => p.EscenariosDocumentosLineas)
                    .HasForeignKey(d => d.EscenariosEscenarioIden)
                    .HasConstraintName("FK_Escenarios_Documentos_Lineas_Escenarios_Escenario");

                entity.HasOne(d => d.EscenariosImpuestosIden1Navigation)
                    .WithMany(p => p.EscenariosDocumentosLineaEscenariosImpuestosIden1Navigations)
                    .HasForeignKey(d => d.EscenariosImpuestosIden1)
                    .HasConstraintName("FK_Escenarios_Documentos_Lineas_Escenarios_Impuestos");

                entity.HasOne(d => d.EscenariosImpuestosIden2Navigation)
                    .WithMany(p => p.EscenariosDocumentosLineaEscenariosImpuestosIden2Navigations)
                    .HasForeignKey(d => d.EscenariosImpuestosIden2)
                    .HasConstraintName("FK_Escenarios_Documentos_Lineas_Escenarios_Impuestos1");

                entity.HasOne(d => d.EscenariosImpuestosIden3Navigation)
                    .WithMany(p => p.EscenariosDocumentosLineaEscenariosImpuestosIden3Navigations)
                    .HasForeignKey(d => d.EscenariosImpuestosIden3)
                    .HasConstraintName("FK_Escenarios_Documentos_Lineas_Escenarios_Impuestos2");

                entity.HasOne(d => d.EscenariosImpuestosIden4Navigation)
                    .WithMany(p => p.EscenariosDocumentosLineaEscenariosImpuestosIden4Navigations)
                    .HasForeignKey(d => d.EscenariosImpuestosIden4)
                    .HasConstraintName("FK_Escenarios_Documentos_Lineas_Escenarios_Impuestos3");

                entity.HasOne(d => d.EscenariosImpuestosIden5Navigation)
                    .WithMany(p => p.EscenariosDocumentosLineaEscenariosImpuestosIden5Navigations)
                    .HasForeignKey(d => d.EscenariosImpuestosIden5)
                    .HasConstraintName("FK_Escenarios_Documentos_Lineas_Escenarios_Impuestos4");

                entity.HasOne(d => d.EscenariosSubCategoriaEfecCompraIdenNavigation)
                    .WithMany(p => p.EscenariosDocumentosLineas)
                    .HasForeignKey(d => d.EscenariosSubCategoriaEfecCompraIden)
                    .HasConstraintName("FK_Escenarios_Documentos_Lineas_Escenarios_SubCategoriaEfecCompra");

                entity.HasOne(d => d.EscenariosTributarioConsumoIdenNavigation)
                    .WithMany(p => p.EscenariosDocumentosLineas)
                    .HasForeignKey(d => d.EscenariosTributarioConsumoIden)
                    .HasConstraintName("FK_Escenarios_Documentos_Lineas_Escenarios_TributarioConsumo");

                entity.HasOne(d => d.EscenariosTributarioIcatIdenNavigation)
                    .WithMany(p => p.EscenariosDocumentosLineas)
                    .HasForeignKey(d => d.EscenariosTributarioIcatIden)
                    .HasConstraintName("FK_Escenarios_Documentos_Lineas_Escenarios_TributarioICAT");

                entity.HasOne(d => d.EscenariosTributarioRentaIdenNavigation)
                    .WithMany(p => p.EscenariosDocumentosLineas)
                    .HasForeignKey(d => d.EscenariosTributarioRentaIden)
                    .HasConstraintName("FK_Escenarios_Documentos_Lineas_Escenarios_TributarioRenta");
            });

            modelBuilder.Entity<EscenariosDocumentosLineasDetalle>(entity =>
            {
                entity.HasKey(e => e.Iden);

                entity.ToTable("Escenarios_Documentos_LineasDetalle");

                entity.HasIndex(e => new { e.EscenariosDocumentosLineas, e.ImpuestoRetencion, e.TipoAplicacionImpuestoIden, e.CuentaMovimientoDb }, "IX_Escenarios_Documentos_LineasDetalle_1");

                entity.HasIndex(e => new { e.EscenariosDocumentosLineas, e.ImpuestoRetencion, e.TipoAplicacionImpuestoIden, e.CuentaMovimientoCr }, "IX_Escenarios_Documentos_LineasDetalle_2");

                entity.HasIndex(e => e.EscenariosDocumentosLineas, "IX_Escenarios_Documentos_LineasDetalle_Escenarios_Documentos_Lineas");

                entity.HasIndex(e => new { e.EscenariosDocumentosLineas, e.Iden }, "IX_Escenarios_Documentos_LineasDetalle_Escenarios_Documentos_Lineas_Iden");

                entity.HasIndex(e => new { e.EscenariosDocumentosLineas, e.ImpuestoRetencion }, "IX_Escenarios_Documentos_LineasDetalle_Escenarios_Documentos_Lineas_ImpuestoRetencion");

                entity.HasIndex(e => new { e.EscenariosDocumentosLineas, e.ImpuestoRetencion, e.TipoAplicacionImpuestoIden, e.Naturaleza }, "IX_Escenarios_Documentos_LineasDetalle_Escenarios_Documentos_Lineas_ImpuestoRetencion_TipoAplicacionImpuesto_Iden_Naturaleza");

                entity.HasIndex(e => e.EscenariosImpuestosIden, "IX_Escenarios_Documentos_LineasDetalle_Escenarios_Impuestos_Iden");

                entity.HasIndex(e => e.EscenariosRetencionesIden, "IX_Escenarios_Documentos_LineasDetalle_Escenarios_Retenciones_Iden");

                entity.HasIndex(e => new { e.EscenariosDocumentosLineas, e.ImpuestoRetencion, e.TipoImpuesto, e.TipoAplicacionImpuestoIden }, "IX_Escenarios_Documentos_Lineas_ImpuestoRetencion_TipoImpuesto_TipoAplicacionImpuesto_Iden");

                entity.Property(e => e.Iden)
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Base)
                    .HasColumnType("numeric(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.BaseMoneda).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.CuentaMovimientoCr)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("CuentaMovimientoCR");

                entity.Property(e => e.CuentaMovimientoDb)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("CuentaMovimientoDB");

                entity.Property(e => e.EscenariosConceptoRetencionIden)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Escenarios_ConceptoRetencion_Iden");

                entity.Property(e => e.EscenariosDocumentosLineas)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("Escenarios_Documentos_Lineas");

                entity.Property(e => e.EscenariosImpuestosIden)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("Escenarios_Impuestos_Iden");

                entity.Property(e => e.EscenariosRetencionesIden)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("Escenarios_Retenciones_Iden");

                entity.Property(e => e.EscenariosTipoTasaIden)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Escenarios_TipoTasa_Iden");

                entity.Property(e => e.ImpuestoRetencion)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Interfaz).HasDefaultValueSql("((0))");

                entity.Property(e => e.Naturaleza)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('Credito')");

                entity.Property(e => e.Observacion)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Porcentaje).HasColumnType("numeric(18, 6)");

                entity.Property(e => e.PorcentajeDeLaBase)
                    .HasColumnType("numeric(18, 4)")
                    .HasDefaultValueSql("((100))");

                entity.Property(e => e.Redondeo).HasDefaultValueSql("((0))");

                entity.Property(e => e.SubLinea)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.TipoAplicacionImpuestoIden)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("TipoAplicacionImpuesto_Iden");

                entity.Property(e => e.TipoImpuesto)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Total).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.TotalAsumido).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.TotalCr)
                    .HasColumnType("numeric(18, 2)")
                    .HasColumnName("TotalCR");

                entity.Property(e => e.TotalDb)
                    .HasColumnType("numeric(18, 2)")
                    .HasColumnName("TotalDB");

                entity.Property(e => e.TotalMoneda).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.TotalMonedaAsumido).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.TotalMonedaCr)
                    .HasColumnType("numeric(18, 2)")
                    .HasColumnName("TotalMonedaCR");

                entity.Property(e => e.TotalMonedaDb)
                    .HasColumnType("numeric(18, 2)")
                    .HasColumnName("TotalMonedaDB");

                entity.HasOne(d => d.EscenariosImpuestosIdenNavigation)
                    .WithMany(p => p.EscenariosDocumentosLineasDetalles)
                    .HasForeignKey(d => d.EscenariosImpuestosIden)
                    .HasConstraintName("FK_Escenarios_Documentos_LineasDetalle_Escenarios_Impuestos");

                entity.HasOne(d => d.EscenariosRetencionesIdenNavigation)
                    .WithMany(p => p.EscenariosDocumentosLineasDetalles)
                    .HasForeignKey(d => d.EscenariosRetencionesIden)
                    .HasConstraintName("FK_Escenarios_Documentos_LineasDetalle_Escenarios_Retenciones");
            });

            modelBuilder.Entity<EscenariosDocumentosLineasSpId>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Escenarios_Documentos_Lineas_SpId");

                entity.HasIndex(e => new { e.Spid, e.Linea }, "IX_Escenarios_Documentos_Lineas_SpId_SpId_Linea")
                    .IsUnique()
                    .IsClustered();

                entity.Property(e => e.Cantidad)
                    .HasColumnType("numeric(18, 6)")
                    .HasColumnName("cantidad");

                entity.Property(e => e.Ciudad).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.Codigo1)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Codigo2)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.CuentaMovimiento)
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.Detalle)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.EscenariosEscenarioIden)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("Escenarios_Escenario_Iden");

                entity.Property(e => e.EscenariosImpuestosIden1)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("Escenarios_Impuestos_Iden1");

                entity.Property(e => e.EscenariosImpuestosIden2)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("Escenarios_Impuestos_Iden2");

                entity.Property(e => e.EscenariosImpuestosIden3)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("Escenarios_Impuestos_Iden3");

                entity.Property(e => e.EscenariosImpuestosIden4)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("Escenarios_Impuestos_Iden4");

                entity.Property(e => e.EscenariosImpuestosIden5)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("Escenarios_Impuestos_Iden5");

                entity.Property(e => e.EscenariosSubCategoriaEfecCompraIden)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("Escenarios_SubCategoriaEfecCompra_Iden");

                entity.Property(e => e.EscenariosTributarioConsumoIden)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("Escenarios_TributarioConsumo_Iden");

                entity.Property(e => e.EscenariosTributarioIcatIden)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("Escenarios_TributarioICAT_Iden");

                entity.Property(e => e.EscenariosTributarioRentaIden)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("Escenarios_TributarioRenta_Iden");

                entity.Property(e => e.IdenEscenariosDocumentosLineasSpid)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_escenarios_documentos_lineas_spid");

                entity.Property(e => e.Linea)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.PorcentajeInc)
                    .HasColumnType("numeric(18, 4)")
                    .HasColumnName("PorcentajeINC");

                entity.Property(e => e.PorcentajeIva)
                    .HasColumnType("numeric(18, 4)")
                    .HasColumnName("PorcentajeIVA");

                entity.Property(e => e.Spid).HasColumnName("spid");

                entity.Property(e => e.TipoLinea)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.TotalBrutoMoneda).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.ValorImpuesto1).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.ValorImpuesto2).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.ValorImpuesto3).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.ValorImpuesto4).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.ValorImpuesto5).HasColumnType("numeric(18, 2)");
            });

            modelBuilder.Entity<EscenariosDocumentosRevertido>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Escenarios_Documentos_Revertidos");

                entity.Property(e => e.Documento)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Fuente)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.Iden).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.IdenEscenariosDocumentosRevertidos)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_escenarios_documentos_revertidos");

                entity.HasOne(d => d.IdenNavigation)
                    .WithMany()
                    .HasForeignKey(d => d.Iden)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Escenarios_Documentos_Revertidos_Iden");
            });

            modelBuilder.Entity<EscenariosEsAutorretenedor>(entity =>
            {
                entity.HasKey(e => e.Iden);

                entity.ToTable("Escenarios_EsAutorretenedor");

                entity.Property(e => e.Iden).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.IdenEscenariosEsautorretenedor)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_escenarios_esautorretenedor");

                entity.Property(e => e.Nombre)
                    .HasMaxLength(200)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<EscenariosEscenario>(entity =>
            {
                entity.HasKey(e => e.Iden);

                entity.ToTable("Escenarios_Escenario");

                entity.HasIndex(e => e.Codigo, "IX_Escenarios_Escenario_Codigo")
                    .IsUnique();

                entity.Property(e => e.Iden)
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Codigo)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Nombre)
                    .HasMaxLength(200)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<EscenariosEscenarioRetencione>(entity =>
            {
                entity.HasKey(e => e.Iden);

                entity.ToTable("Escenarios_Escenario_Retenciones");

                entity.HasIndex(e => e.ConceptoCrId, "IX_Escenarios_Escenario_Retenciones_ConceptoCR_Id");

                entity.HasIndex(e => e.EscenariosEscenarioIden, "IX_Escenarios_Escenario_Retenciones_Escenarios_Escenario_Iden");

                entity.HasIndex(e => new { e.EscenariosEscenarioIden, e.EscenariosRetencionesIden, e.ConceptoCrId }, "IX_Escenarios_Escenario_Retenciones_Escenarios_Escenario_Iden_Escenarios_Retenciones_Iden_ConceptoCR_Id");

                entity.HasIndex(e => new { e.EscenariosEscenarioIden, e.EscenariosRetencionesIden, e.FechaEfectiva }, "IX_Escenarios_Escenario_Retenciones_Escenarios_Escenario_Iden_Escenarios_Retenciones_Iden_FechaEfectiva")
                    .IsUnique();

                entity.HasIndex(e => e.EscenariosRetencionesIden, "IX_Escenarios_Escenario_Retenciones_Escenarios_Retenciones_Iden");

                entity.Property(e => e.Iden)
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.ConceptoCrId)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("ConceptoCR_Id");

                entity.Property(e => e.ConceptoDbId)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("ConceptoDB_Id");

                entity.Property(e => e.EscenariosEscenarioIden)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("Escenarios_Escenario_Iden");

                entity.Property(e => e.EscenariosRetencionesIden)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("Escenarios_Retenciones_Iden");

                entity.Property(e => e.FechaEfectiva).HasColumnType("smalldatetime");

                entity.Property(e => e.Naturaleza)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('Credito')");

                entity.Property(e => e.Porcentaje).HasColumnType("numeric(18, 6)");

                entity.Property(e => e.PorcentajeDeLaBase)
                    .HasColumnType("numeric(18, 4)")
                    .HasDefaultValueSql("((100))");

                entity.HasOne(d => d.EscenariosEscenarioIdenNavigation)
                    .WithMany(p => p.EscenariosEscenarioRetenciones)
                    .HasForeignKey(d => d.EscenariosEscenarioIden)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Escenarios_Fiscales_Retenciones_Escenarios_Escenario");

                entity.HasOne(d => d.EscenariosRetencionesIdenNavigation)
                    .WithMany(p => p.EscenariosEscenarioRetenciones)
                    .HasForeignKey(d => d.EscenariosRetencionesIden)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Escenarios_Escenario_Retenciones_Escenarios_Retenciones");
            });

            modelBuilder.Entity<EscenariosFiscale>(entity =>
            {
                entity.HasKey(e => e.Iden);

                entity.ToTable("Escenarios_Fiscales");

                entity.HasIndex(e => e.EscenariosCategoriaTributariaIden, "IX_Escenarios_Fiscales_Escenarios_CategoriaTributaria_Iden");

                entity.HasIndex(e => new { e.EscenariosCategoriaTributariaIden, e.EscenariosTributarioConsumoIden, e.EscenariosTributarioRentaIden, e.EscenariosSubCategoriaEfecCompraIden, e.Tipo, e.FechaEfectiva }, "IX_Escenarios_Fiscales_Escenarios_CategoriaTributaria_Iden_Escenarios_TributarioConsumo_Iden_Escenarios_TributarioRenta_Iden")
                    .IsUnique();

                entity.HasIndex(e => e.EscenariosEscenarioIden, "IX_Escenarios_Fiscales_Escenarios_Escenario_Iden");

                entity.HasIndex(e => e.EscenariosSubCategoriaEfecCompraIden, "IX_Escenarios_Fiscales_Escenarios_SubCategoriaEfecCompra_Iden");

                entity.HasIndex(e => e.EscenariosTributarioConsumoIden, "IX_Escenarios_Fiscales_Escenarios_TributarioConsumo_Iden");

                entity.HasIndex(e => e.EscenariosTributarioIcatIden, "IX_Escenarios_Fiscales_Escenarios_TributarioICAT_Iden");

                entity.HasIndex(e => e.EscenariosTributarioRentaIden, "IX_Escenarios_Fiscales_Escenarios_TributarioRenta_Iden");

                entity.Property(e => e.Iden)
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.EscenariosCategoriaTributariaIden)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Escenarios_CategoriaTributaria_Iden");

                entity.Property(e => e.EscenariosEscenarioIden)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("Escenarios_Escenario_Iden");

                entity.Property(e => e.EscenariosSubCategoriaEfecCompraIden)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("Escenarios_SubCategoriaEfecCompra_Iden");

                entity.Property(e => e.EscenariosTributarioConsumoIden)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("Escenarios_TributarioConsumo_Iden");

                entity.Property(e => e.EscenariosTributarioIcatIden)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("Escenarios_TributarioICAT_Iden");

                entity.Property(e => e.EscenariosTributarioRentaIden)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("Escenarios_TributarioRenta_Iden");

                entity.Property(e => e.FechaEfectiva).HasColumnType("smalldatetime");

                entity.Property(e => e.PorcentajeResultanteInc)
                    .HasColumnType("numeric(18, 6)")
                    .HasColumnName("PorcentajeResultanteINC");

                entity.Property(e => e.PorcentajeResultanteIva)
                    .HasColumnType("numeric(18, 6)")
                    .HasColumnName("PorcentajeResultanteIVA");

                entity.Property(e => e.Tipo)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.HasOne(d => d.EscenariosCategoriaTributariaIdenNavigation)
                    .WithMany(p => p.EscenariosFiscales)
                    .HasForeignKey(d => d.EscenariosCategoriaTributariaIden)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Escenarios_Fiscales_Escenarios_CategoriaTributaria");

                entity.HasOne(d => d.EscenariosEscenarioIdenNavigation)
                    .WithMany(p => p.EscenariosFiscales)
                    .HasForeignKey(d => d.EscenariosEscenarioIden)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Escenarios_Fiscales_Escenarios_Escenario");

                entity.HasOne(d => d.EscenariosSubCategoriaEfecCompraIdenNavigation)
                    .WithMany(p => p.EscenariosFiscales)
                    .HasForeignKey(d => d.EscenariosSubCategoriaEfecCompraIden)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Escenarios_Fiscales_Escenarios_SubCategoriaEfecCompra");

                entity.HasOne(d => d.EscenariosTributarioConsumoIdenNavigation)
                    .WithMany(p => p.EscenariosFiscales)
                    .HasForeignKey(d => d.EscenariosTributarioConsumoIden)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Escenarios_Fiscales_Escenarios_TributarioConsumo");

                entity.HasOne(d => d.EscenariosTributarioIcatIdenNavigation)
                    .WithMany(p => p.EscenariosFiscales)
                    .HasForeignKey(d => d.EscenariosTributarioIcatIden)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Escenarios_Fiscales_Escenarios_TributarioICAT");

                entity.HasOne(d => d.EscenariosTributarioRentaIdenNavigation)
                    .WithMany(p => p.EscenariosFiscales)
                    .HasForeignKey(d => d.EscenariosTributarioRentaIden)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Escenarios_Fiscales_Escenarios_TributarioRenta");
            });

            modelBuilder.Entity<EscenariosFiscalesImpuesto>(entity =>
            {
                entity.HasKey(e => e.Iden);

                entity.ToTable("Escenarios_Fiscales_Impuestos");

                entity.HasIndex(e => e.EscenariosFiscalesIden, "IX_Escenarios_Fiscales_Impuestos_Escenarios_Fiscales_Iden");

                entity.HasIndex(e => new { e.EscenariosFiscalesIden, e.EscenariosImpuestosIden }, "IX_Escenarios_Fiscales_Impuestos_Escenarios_Fiscales_Iden_Escenarios_Impuestos_Iden");

                entity.HasIndex(e => e.EscenariosImpuestosIden, "IX_Escenarios_Fiscales_Impuestos_Escenarios_Impuestos_Iden");

                entity.Property(e => e.Iden)
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.EscenariosFiscalesIden)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("Escenarios_Fiscales_Iden");

                entity.Property(e => e.EscenariosImpuestosIden)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("Escenarios_Impuestos_Iden");

                entity.HasOne(d => d.EscenariosFiscalesIdenNavigation)
                    .WithMany(p => p.EscenariosFiscalesImpuestos)
                    .HasForeignKey(d => d.EscenariosFiscalesIden)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Escenarios_Fiscales_Impuestos_Escenarios_Fiscales");

                entity.HasOne(d => d.EscenariosImpuestosIdenNavigation)
                    .WithMany(p => p.EscenariosFiscalesImpuestos)
                    .HasForeignKey(d => d.EscenariosImpuestosIden)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Escenarios_Fiscales_Impuestos_Escenarios_Impuestos");
            });

            modelBuilder.Entity<EscenariosImpuesto>(entity =>
            {
                entity.HasKey(e => e.Iden);

                entity.ToTable("Escenarios_Impuestos");

                entity.HasIndex(e => e.CategoriaIden, "IX_Escenarios_Impuestos_Categoria_Iden");

                entity.HasIndex(e => e.Codigo, "IX_Escenarios_Impuestos_Codigo")
                    .IsUnique();

                entity.Property(e => e.Iden)
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.CategoriaIden)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Categoria_Iden");

                entity.Property(e => e.Codigo)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CompraVenta)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Nombre)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.VchTipo)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("vchTipo");

                entity.HasOne(d => d.CategoriaIdenNavigation)
                    .WithMany(p => p.EscenariosImpuestos)
                    .HasForeignKey(d => d.CategoriaIden)
                    .HasConstraintName("FK_Escenarios_Impuestos_Escenarios_CategoriaImpuesto");
            });

            modelBuilder.Entity<EscenariosImpuestosPai>(entity =>
            {
                entity.HasKey(e => e.Iden);

                entity.ToTable("Escenarios_Impuestos_Pais");

                entity.HasIndex(e => e.EscenariosImpuestosIden, "IX_Escenarios_Impuestos_Pais_Escenarios_Impuestos_Iden");

                entity.HasIndex(e => new { e.EscenariosImpuestosIden, e.EscenariosPaisIden, e.FechaEfectiva }, "IX_Escenarios_Impuestos_Pais_Escenarios_Impuestos_Iden_Escenarios_Pais_Iden_FechaEfectiva")
                    .IsUnique();

                entity.HasIndex(e => e.EscenariosPaisIden, "IX_Escenarios_Impuestos_Pais_Escenarios_Pais_Iden");

                entity.HasIndex(e => e.TipoAplicacionImpuestoIden, "IX_Escenarios_Impuestos_Pais_TipoAplicacionImpuesto_Iden");

                entity.Property(e => e.Iden)
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.ConceptoCrId)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("ConceptoCR_Id");

                entity.Property(e => e.ConceptoDbId)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("ConceptoDB_Id");

                entity.Property(e => e.EscenariosImpuestosIden)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("Escenarios_Impuestos_Iden");

                entity.Property(e => e.EscenariosPaisIden)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("Escenarios_Pais_Iden");

                entity.Property(e => e.FechaEfectiva).HasColumnType("smalldatetime");

                entity.Property(e => e.FechaModificacion).HasColumnType("smalldatetime");

                entity.Property(e => e.Porcentaje).HasColumnType("numeric(18, 6)");

                entity.Property(e => e.PorcentajeResultante).HasColumnType("numeric(18, 6)");

                entity.Property(e => e.Redondeo).HasDefaultValueSql("((0))");

                entity.Property(e => e.TipoAplicacionImpuestoIden)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("TipoAplicacionImpuesto_Iden");

                entity.HasOne(d => d.EscenariosImpuestosIdenNavigation)
                    .WithMany(p => p.EscenariosImpuestosPais)
                    .HasForeignKey(d => d.EscenariosImpuestosIden)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Escenarios_Impuestos_Pais_Escenarios_Impuestos");

                entity.HasOne(d => d.EscenariosPaisIdenNavigation)
                    .WithMany(p => p.EscenariosImpuestosPais)
                    .HasPrincipalKey(p => p.IdenPais)
                    .HasForeignKey(d => d.EscenariosPaisIden)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Escenarios_Impuestos_Pais_Escenarios_Pais");

                entity.HasOne(d => d.TipoAplicacionImpuestoIdenNavigation)
                    .WithMany(p => p.EscenariosImpuestosPais)
                    .HasForeignKey(d => d.TipoAplicacionImpuestoIden)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Escenarios_Impuestos_Pais_Escenarios_TipoAplicacionImpuesto");
            });

            modelBuilder.Entity<EscenariosImpuestosPaisMoneda>(entity =>
            {
                entity.HasKey(e => e.Iden);

                entity.ToTable("Escenarios_Impuestos_Pais_Monedas");

                entity.HasIndex(e => new { e.EscenariosImpuestosPaisIden, e.IdMoneda }, "IX_Escenarios_Impuestos_Pais_Monedas_Escenarios_Impuestos_Pais_Iden_IdMoneda")
                    .IsUnique();

                entity.Property(e => e.Iden)
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.EscenariosImpuestosPaisIden)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("Escenarios_Impuestos_Pais_Iden");

                entity.Property(e => e.IdMoneda)
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.HasOne(d => d.EscenariosImpuestosPaisIdenNavigation)
                    .WithMany(p => p.EscenariosImpuestosPaisMoneda)
                    .HasForeignKey(d => d.EscenariosImpuestosPaisIden)
                    .HasConstraintName("FK_Escenarios_Impuestos_Pais_Moneda_Escenarios_Impuestos_Pais");
            });

            modelBuilder.Entity<EscenariosMovimiento>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Escenarios_Movimientos");

                entity.HasIndex(e => new { e.EscenariosDocumentosIden, e.Linea, e.SubLinea, e.Iden }, "IX_Escenarios_Movimientos");

                entity.HasIndex(e => new { e.EscenariosDocumentosIden, e.Linea, e.ImpuestoRetencion, e.TipoImpuesto, e.MayorValor }, "IX_Escenarios_Movimientos_Escenarios");

                entity.HasIndex(e => e.EscenariosDocumentosIden, "IX_Escenarios_Movimientos_Escenarios_Documentos_Iden")
                    .IsClustered();

                entity.HasIndex(e => new { e.EscenariosDocumentosIden, e.ImpuestoRetencion, e.MayorValor }, "IX_Escenarios_Movimientos_Escenarios_Documentos_Iden_ImpuestoRetencion_MayorValor");

                entity.HasIndex(e => e.EscenariosImpuestosIden, "IX_Escenarios_Movimientos_Escenarios_Impuestos_Iden");

                entity.HasIndex(e => e.EscenariosRetencionesIden, "IX_Escenarios_Movimientos_Escenarios_Retenciones_Iden");

                entity.HasIndex(e => e.Iden, "IX_Escenarios_Movimientos_Iden");

                entity.Property(e => e.Base).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.BaseMoneda).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.Cuenta)
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.EscenariosConceptoRetencionIden)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Escenarios_ConceptoRetencion_Iden");

                entity.Property(e => e.EscenariosDocumentosIden)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("Escenarios_Documentos_Iden");

                entity.Property(e => e.EscenariosImpuestosIden)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("Escenarios_Impuestos_Iden");

                entity.Property(e => e.EscenariosRetencionesIden)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("Escenarios_Retenciones_Iden");

                entity.Property(e => e.EscenariosTipoTasaIden)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Escenarios_TipoTasa_Iden");

                entity.Property(e => e.Iden)
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.ImpuestoRetencion)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Linea)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Porcentaje).HasColumnType("numeric(18, 6)");

                entity.Property(e => e.SubLinea)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.TipoImpuesto)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Valor).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.ValorMoneda).HasColumnType("numeric(18, 2)");

                entity.HasOne(d => d.EscenariosImpuestosIdenNavigation)
                    .WithMany()
                    .HasForeignKey(d => d.EscenariosImpuestosIden)
                    .HasConstraintName("FK_Escenarios_Movimientos_Escenarios_Impuestos");

                entity.HasOne(d => d.EscenariosRetencionesIdenNavigation)
                    .WithMany()
                    .HasForeignKey(d => d.EscenariosRetencionesIden)
                    .HasConstraintName("FK_Escenarios_Movimientos_Escenarios_Retenciones");
            });

            modelBuilder.Entity<EscenariosPai>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Escenarios_Pais");

                entity.Property(e => e.Codigo)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Iden)
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Nombre)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<EscenariosProveedore>(entity =>
            {
                entity.HasKey(e => e.Iden);

                entity.ToTable("Escenarios_Proveedores");

                entity.HasIndex(e => e.Codigo, "IX_Escenarios_Proveedores_Codigo")
                    .IsUnique();

                entity.HasIndex(e => e.EscenariosCiudadIden, "IX_Escenarios_Proveedores_Escenarios_Ciudad_Iden");

                entity.Property(e => e.Iden)
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Codigo)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.EscenariosCiudadIden)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("Escenarios_Ciudad_Iden");

                entity.HasOne(d => d.EscenariosCiudadIdenNavigation)
                    .WithMany(p => p.EscenariosProveedores)
                    .HasForeignKey(d => d.EscenariosCiudadIden)
                    .HasConstraintName("FK_Escenarios_Proveedores_Escenarios_Ciudad");
            });

            modelBuilder.Entity<EscenariosResultado>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Escenarios_Resultado");

                entity.HasIndex(e => e.Spid, "IX_Escenarios_Resultado_SpId");

                entity.Property(e => e.Base).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.Cuenta)
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.Iden)
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.ImpuestoRetencion)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Linea)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Porcentaje).HasColumnType("numeric(18, 6)");

                entity.Property(e => e.Spid).HasColumnName("spid");

                entity.Property(e => e.SubLinea)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.TipoImpuesto)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Valor).HasColumnType("numeric(18, 2)");
            });

            modelBuilder.Entity<EscenariosRetencione>(entity =>
            {
                entity.HasKey(e => e.Iden);

                entity.ToTable("Escenarios_Retenciones");

                entity.HasIndex(e => e.Codigo, "IX_Escenarios_Retenciones_Codigo")
                    .IsUnique();

                entity.HasIndex(e => e.EscenariosConceptoRetencionIden, "IX_Escenarios_Retenciones_Escenarios_ConceptoRetencion_Iden");

                entity.HasIndex(e => e.EscenariosTipoTasaIden, "IX_Escenarios_Retenciones_Escenarios_TipoTasa_Iden");

                entity.Property(e => e.Iden)
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.BaseMinima).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.Codigo)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.EscenariosConceptoRetencionIden)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Escenarios_ConceptoRetencion_Iden");

                entity.Property(e => e.EscenariosTipoTasaIden)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Escenarios_TipoTasa_Iden");

                entity.Property(e => e.Nombre)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.ValorBase)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.EscenariosConceptoRetencionIdenNavigation)
                    .WithMany(p => p.EscenariosRetenciones)
                    .HasForeignKey(d => d.EscenariosConceptoRetencionIden)
                    .HasConstraintName("FK_Escenarios_Retenciones_Escenarios_ConceptoRetencion");

                entity.HasOne(d => d.EscenariosTipoTasaIdenNavigation)
                    .WithMany(p => p.EscenariosRetenciones)
                    .HasForeignKey(d => d.EscenariosTipoTasaIden)
                    .HasConstraintName("FK_Escenarios_Retenciones_Escenarios_TipoTasa");
            });

            modelBuilder.Entity<EscenariosRetencionesMoneda>(entity =>
            {
                entity.HasKey(e => e.Iden);

                entity.ToTable("Escenarios_Retenciones_Monedas");

                entity.HasIndex(e => e.EscenariosRetencionesIden, "IX_Escenarios_Retenciones_Monedas_Escenarios_Retenciones_Iden");

                entity.HasIndex(e => new { e.EscenariosRetencionesIden, e.IdMoneda }, "IX_Escenarios_Retenciones_Monedas_Escenarios_Retenciones_Iden_IdMoneda")
                    .IsUnique();

                entity.Property(e => e.Iden)
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.EscenariosRetencionesIden)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("Escenarios_Retenciones_Iden");

                entity.Property(e => e.IdMoneda)
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.HasOne(d => d.EscenariosRetencionesIdenNavigation)
                    .WithMany(p => p.EscenariosRetencionesMoneda)
                    .HasForeignKey(d => d.EscenariosRetencionesIden)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Escenarios_Retenciones_Monedas_Escenarios_Retenciones");
            });

            modelBuilder.Entity<EscenariosSubCategoriaEfecCompra>(entity =>
            {
                entity.HasKey(e => e.Iden);

                entity.ToTable("Escenarios_SubCategoriaEfecCompra");

                entity.HasIndex(e => e.Codigo, "IX_Escenarios_SubCategoriaEfecCompra_Codigo")
                    .IsUnique();

                entity.Property(e => e.Iden)
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Codigo)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Nombre)
                    .HasMaxLength(200)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<EscenariosTercero>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Escenarios_Terceros");

                entity.Property(e => e.CategoriaTributaria)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Codigo)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.EscenariosAplicaIcatIden)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("Escenarios_AplicaICAT_Iden");

                entity.Property(e => e.EscenariosCategoriaTributaria)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Escenarios_CategoriaTributaria");

                entity.Property(e => e.EscenariosCategoriaTributariaIvaIden)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("Escenarios_CategoriaTributariaIVA_Iden");

                entity.Property(e => e.EscenariosClaseContribuyenteIden)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("Escenarios_ClaseContribuyente_Iden");

                entity.Property(e => e.EscenariosEsAutorretenedorIden)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("Escenarios_EsAutorretenedor_Iden");

                entity.Property(e => e.EscenariosPaisIden)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("Escenarios_Pais_Iden");

                entity.Property(e => e.EscenariosTipoContribuyenteIden)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("Escenarios_TipoContribuyente_Iden");

                entity.Property(e => e.EscenariosTipoRetencionIvaIden)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("Escenarios_TipoRetencionIVA_Iden");
            });

            modelBuilder.Entity<EscenariosTipoAplicacionImpuesto>(entity =>
            {
                entity.HasKey(e => e.Iden);

                entity.ToTable("Escenarios_TipoAplicacionImpuesto");

                entity.Property(e => e.Iden)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.IdenEscenariosTipoaplicacionimpuesto)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_escenarios_tipoaplicacionimpuesto");

                entity.Property(e => e.Nombre)
                    .HasMaxLength(200)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<EscenariosTipoContribuyente>(entity =>
            {
                entity.HasKey(e => e.Iden);

                entity.ToTable("Escenarios_TipoContribuyente");

                entity.Property(e => e.Iden).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.IdenEscenariosTipocontribuyente)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_escenarios_tipocontribuyente");

                entity.Property(e => e.Nombre)
                    .HasMaxLength(200)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<EscenariosTipoRetencionIva>(entity =>
            {
                entity.HasKey(e => e.Iden);

                entity.ToTable("Escenarios_TipoRetencionIVA");

                entity.Property(e => e.Iden).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.IdenEscenariosTiporetencioniva)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_escenarios_tiporetencioniva");

                entity.Property(e => e.Nombre)
                    .HasMaxLength(200)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<EscenariosTipoTasa>(entity =>
            {
                entity.HasKey(e => e.Iden);

                entity.ToTable("Escenarios_TipoTasa");

                entity.Property(e => e.Iden)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.IdenEscenariosTipotasa)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_escenarios_tipotasa");

                entity.Property(e => e.Nombre)
                    .HasMaxLength(200)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<EscenariosTributarioConsumo>(entity =>
            {
                entity.HasKey(e => e.Iden);

                entity.ToTable("Escenarios_TributarioConsumo");

                entity.HasIndex(e => e.Codigo, "IX_Escenarios_TributarioConsumo_Codigo")
                    .IsUnique();

                entity.Property(e => e.Iden)
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Codigo)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Nombre)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.ValorFijo).HasColumnType("numeric(18, 6)");
            });

            modelBuilder.Entity<EscenariosTributarioIcat>(entity =>
            {
                entity.HasKey(e => e.Iden);

                entity.ToTable("Escenarios_TributarioICAT");

                entity.HasIndex(e => e.Codigo, "IX_Escenarios_TributarioICAT_Codigo")
                    .IsUnique();

                entity.Property(e => e.Iden)
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Codigo)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Nombre)
                    .HasMaxLength(200)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<EscenariosTributarioIcatCiudad>(entity =>
            {
                entity.HasKey(e => e.Iden);

                entity.ToTable("Escenarios_TributarioICAT_Ciudad");

                entity.HasIndex(e => e.EscenariosCiudadIden, "IX_Escenarios_TributarioICAT_Ciudad_Escenarios_Ciudad_Iden");

                entity.HasIndex(e => e.EscenariosTributarioIcatIden, "IX_Escenarios_TributarioICAT_Ciudad_Escenarios_TributarioICAT_Iden");

                entity.HasIndex(e => new { e.EscenariosTributarioIcatIden, e.EscenariosCiudadIden, e.FechaEfectiva }, "IX_Escenarios_TributarioICAT_Ciudad_Escenarios_TributarioICAT_Iden_Escenarios_Ciudad_Iden_FechaEfectiva")
                    .IsUnique();

                entity.Property(e => e.Iden)
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.EscenariosCiudadIden)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("Escenarios_Ciudad_Iden");

                entity.Property(e => e.EscenariosTributarioIcatIden)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("Escenarios_TributarioICAT_Iden");

                entity.Property(e => e.FechaEfectiva).HasColumnType("smalldatetime");

                entity.Property(e => e.Porcentaje).HasColumnType("numeric(18, 6)");

                entity.HasOne(d => d.EscenariosCiudadIdenNavigation)
                    .WithMany(p => p.EscenariosTributarioIcatCiudads)
                    .HasForeignKey(d => d.EscenariosCiudadIden)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Escenarios_TributarioICAT_Ciudad_Escenarios_Ciudad");

                entity.HasOne(d => d.EscenariosTributarioIcatIdenNavigation)
                    .WithMany(p => p.EscenariosTributarioIcatCiudads)
                    .HasForeignKey(d => d.EscenariosTributarioIcatIden)
                    .HasConstraintName("FK_Escenarios_TributarioICAT_Ciudad_Escenarios_TributarioICAT");
            });

            modelBuilder.Entity<EscenariosTributarioRentum>(entity =>
            {
                entity.HasKey(e => e.Iden);

                entity.ToTable("Escenarios_TributarioRenta");

                entity.HasIndex(e => e.Codigo, "IX_Escenarios_TributarioRenta_Codigo")
                    .IsUnique();

                entity.Property(e => e.Iden)
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Codigo)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Nombre)
                    .HasMaxLength(200)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Esquema>(entity =>
            {
                entity.HasKey(e => e.Iden);

                entity.ToTable("Esquema");

                entity.Property(e => e.Iden)
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Codigo)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.IdenPlantilla).HasColumnName("Iden_Plantilla");

                entity.Property(e => e.Nivel).HasDefaultValueSql("((1))");

                entity.Property(e => e.Nombre)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdenPlantillaNavigation)
                    .WithMany(p => p.Esquemas)
                    .HasForeignKey(d => d.IdenPlantilla)
                    .HasConstraintName("FK_Esquema_Esquema_Plantilla");
            });

            modelBuilder.Entity<EsquemaAplicacionesZeu>(entity =>
            {
                entity.HasKey(e => new { e.IdenEsquema, e.IdAplicacionesZeus });

                entity.ToTable("Esquema_AplicacionesZeus");

                entity.Property(e => e.IdenEsquema)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("Iden_Esquema");

                entity.Property(e => e.IdAplicacionesZeus).HasColumnName("Id_AplicacionesZeus");

                entity.Property(e => e.IdenEsquemaAplicacioneszeus)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_esquema_aplicacioneszeus");

                entity.HasOne(d => d.IdenEsquemaNavigation)
                    .WithMany(p => p.EsquemaAplicacionesZeus)
                    .HasForeignKey(d => d.IdenEsquema)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Esquema_AplicacionesZeus_Esquema");
            });

            modelBuilder.Entity<EsquemaCondicion>(entity =>
            {
                entity.HasKey(e => e.Iden);

                entity.ToTable("Esquema_Condicion");

                entity.Property(e => e.Iden)
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.AuxiAuxFinal)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("AuxiAux_Final");

                entity.Property(e => e.AuxiAuxInicial)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("AuxiAux_Inicial");

                entity.Property(e => e.AuxiAuxNot).HasColumnName("AuxiAux_Not");

                entity.Property(e => e.AuxiAuxTodos).HasColumnName("AuxiAux_Todos");

                entity.Property(e => e.BancoFinal)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("Banco_Final");

                entity.Property(e => e.BancoInicial)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("Banco_Inicial");

                entity.Property(e => e.BancoNot).HasColumnName("Banco_Not");

                entity.Property(e => e.BancoTodos).HasColumnName("Banco_Todos");

                entity.Property(e => e.BuFinal)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("BU_Final");

                entity.Property(e => e.BuInicial)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("BU_Inicial");

                entity.Property(e => e.BuNot).HasColumnName("Bu_Not");

                entity.Property(e => e.BuTodos).HasColumnName("BU_Todos");

                entity.Property(e => e.CliPrvFinal)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("CliPrv_Final");

                entity.Property(e => e.CliPrvInicial)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("CliPrv_Inicial");

                entity.Property(e => e.CliprvNot).HasColumnName("Cliprv_Not");

                entity.Property(e => e.CliprvTodos).HasColumnName("Cliprv_Todos");

                entity.Property(e => e.CodictaFinal)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("Codicta_Final");

                entity.Property(e => e.CodictaInicial)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("Codicta_Inicial");

                entity.Property(e => e.CodictaNot).HasColumnName("Codicta_Not");

                entity.Property(e => e.CodictaTodos).HasColumnName("Codicta_Todos");

                entity.Property(e => e.Esquema).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.Formula)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.IdCencoFinal)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("IdCenco_Final");

                entity.Property(e => e.IdCencoInicial)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("IdCenco_Inicial");

                entity.Property(e => e.IdCencoNot).HasColumnName("IdCenco_Not");

                entity.Property(e => e.IdCencoTodos).HasColumnName("IdCenco_Todos");

                entity.Property(e => e.IdFuenteFinal)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("IdFuente_Final");

                entity.Property(e => e.IdFuenteNot).HasColumnName("IdFuente_Not");

                entity.Property(e => e.IdFuenteTodos).HasColumnName("IdFuente_Todos");

                entity.Property(e => e.IdenEsquemaCondicionRel)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("Iden_EsquemaCondicionRel");

                entity.Property(e => e.IdenLibroBu)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("Iden_LibroBu");

                entity.Property(e => e.IdfuenteInicial)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("Idfuente_Inicial");

                entity.Property(e => e.ItemFinal)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("Item_Final");

                entity.Property(e => e.ItemInicial)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("Item_inicial");

                entity.Property(e => e.ItemNot).HasColumnName("Item_Not");

                entity.Property(e => e.ItemTodos).HasColumnName("Item_Todos");

                entity.Property(e => e.LibroBu)
                    .HasColumnName("LibroBU")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.MonedaFinal)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("Moneda_Final")
                    .IsFixedLength();

                entity.Property(e => e.MonedaInicial)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("Moneda_Inicial")
                    .IsFixedLength();

                entity.Property(e => e.MonedaNingun).HasColumnName("Moneda_Ningun");

                entity.Property(e => e.MonedaTodos).HasColumnName("Moneda_Todos");

                entity.Property(e => e.NittraFinal)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("Nittra_Final");

                entity.Property(e => e.NittraInicial)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("Nittra_Inicial");

                entity.Property(e => e.NittraNot).HasColumnName("Nittra_Not");

                entity.Property(e => e.NittraTodos).HasColumnName("Nittra_Todos");

                entity.Property(e => e.OrdenInsert).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.PlazaFinal)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("Plaza_Final");

                entity.Property(e => e.PlazaInicial)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("Plaza_Inicial");

                entity.Property(e => e.PlazaNot).HasColumnName("Plaza_Not");

                entity.Property(e => e.PlazaTodos).HasColumnName("Plaza_Todos");

                entity.Property(e => e.TipoFactFinal)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("TipoFact_Final")
                    .IsFixedLength();

                entity.Property(e => e.TipoFactInicial)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("TipoFact_Inicial")
                    .IsFixedLength();

                entity.Property(e => e.TipoFactNot).HasColumnName("TipoFact_Not");

                entity.Property(e => e.TipoFactTodos).HasColumnName("TipoFact_Todos");

                entity.Property(e => e.TipoValor)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Valor).HasColumnType("money");

                entity.Property(e => e.ValorTodos).HasColumnName("Valor_Todos");

                entity.Property(e => e.VendedorFinal)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("Vendedor_Final");

                entity.Property(e => e.VendedorInicial)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("Vendedor_Inicial");

                entity.Property(e => e.VendedorNot).HasColumnName("Vendedor_Not");

                entity.Property(e => e.VendedorTodos).HasColumnName("Vendedor_Todos");

                entity.Property(e => e.ZonaFinal)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("Zona_Final")
                    .IsFixedLength();

                entity.Property(e => e.ZonaInicial)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("Zona_Inicial")
                    .IsFixedLength();

                entity.Property(e => e.ZonaNot).HasColumnName("Zona_Not");

                entity.Property(e => e.ZonaTodos).HasColumnName("Zona_Todos");

                entity.HasOne(d => d.EsquemaNavigation)
                    .WithMany(p => p.EsquemaCondicions)
                    .HasForeignKey(d => d.Esquema)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Esquema_Condicion_Esquema");
            });

            modelBuilder.Entity<EsquemaCondicionLog>(entity =>
            {
                entity.HasKey(e => e.Iden);

                entity.ToTable("Esquema_Condicion_Log");

                entity.Property(e => e.Iden).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.AuxiAuxFinal)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("AuxiAux_Final");

                entity.Property(e => e.AuxiAuxInicial)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("AuxiAux_Inicial");

                entity.Property(e => e.AuxiAuxNot).HasColumnName("AuxiAux_Not");

                entity.Property(e => e.AuxiAuxTodos).HasColumnName("AuxiAux_Todos");

                entity.Property(e => e.BancoFinal)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("Banco_Final");

                entity.Property(e => e.BancoInicial)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("Banco_Inicial");

                entity.Property(e => e.BancoNot).HasColumnName("Banco_Not");

                entity.Property(e => e.BancoTodos).HasColumnName("Banco_Todos");

                entity.Property(e => e.BuFinal)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("BU_Final");

                entity.Property(e => e.BuInicial)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("BU_Inicial");

                entity.Property(e => e.BuNot).HasColumnName("Bu_Not");

                entity.Property(e => e.BuTodos).HasColumnName("BU_Todos");

                entity.Property(e => e.CliPrvFinal)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("CliPrv_Final");

                entity.Property(e => e.CliPrvInicial)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("CliPrv_Inicial");

                entity.Property(e => e.CliprvNot).HasColumnName("Cliprv_Not");

                entity.Property(e => e.CliprvTodos).HasColumnName("Cliprv_Todos");

                entity.Property(e => e.CodictaFinal)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("Codicta_Final");

                entity.Property(e => e.CodictaInicial)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("Codicta_Inicial");

                entity.Property(e => e.CodictaNot).HasColumnName("Codicta_Not");

                entity.Property(e => e.CodictaTodos).HasColumnName("Codicta_Todos");

                entity.Property(e => e.Esquema).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.FechaCreacion)
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Formula)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.IdCencoFinal)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("IdCenco_Final");

                entity.Property(e => e.IdCencoInicial)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("IdCenco_Inicial");

                entity.Property(e => e.IdCencoNot).HasColumnName("IdCenco_Not");

                entity.Property(e => e.IdCencoTodos).HasColumnName("IdCenco_Todos");

                entity.Property(e => e.IdFuenteFinal)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("IdFuente_Final");

                entity.Property(e => e.IdFuenteNot).HasColumnName("IdFuente_Not");

                entity.Property(e => e.IdFuenteTodos).HasColumnName("IdFuente_Todos");

                entity.Property(e => e.IdenEsquemaCondicionLog)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_esquema_condicion_log");

                entity.Property(e => e.IdenEsquemaCondicionRel)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("Iden_EsquemaCondicionRel");

                entity.Property(e => e.IdenLibroBu)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("Iden_LibroBu");

                entity.Property(e => e.IdfuenteInicial)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("Idfuente_Inicial");

                entity.Property(e => e.ItemFinal)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("Item_Final");

                entity.Property(e => e.ItemInicial)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("Item_inicial");

                entity.Property(e => e.ItemNot).HasColumnName("Item_Not");

                entity.Property(e => e.ItemTodos).HasColumnName("Item_Todos");

                entity.Property(e => e.LibroBu)
                    .HasColumnName("LibroBU")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.MonedaFinal)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("Moneda_Final")
                    .IsFixedLength();

                entity.Property(e => e.MonedaInicial)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("Moneda_Inicial")
                    .IsFixedLength();

                entity.Property(e => e.MonedaNingun).HasColumnName("Moneda_Ningun");

                entity.Property(e => e.MonedaTodos).HasColumnName("Moneda_Todos");

                entity.Property(e => e.NittraFinal)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("Nittra_Final");

                entity.Property(e => e.NittraInicial)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("Nittra_Inicial");

                entity.Property(e => e.NittraNot).HasColumnName("Nittra_Not");

                entity.Property(e => e.NittraTodos).HasColumnName("Nittra_Todos");

                entity.Property(e => e.PlazaFinal)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("Plaza_Final");

                entity.Property(e => e.PlazaInicial)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("Plaza_Inicial");

                entity.Property(e => e.PlazaNot).HasColumnName("Plaza_Not");

                entity.Property(e => e.PlazaTodos).HasColumnName("Plaza_Todos");

                entity.Property(e => e.TipoFactFinal)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("TipoFact_Final")
                    .IsFixedLength();

                entity.Property(e => e.TipoFactInicial)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("TipoFact_Inicial")
                    .IsFixedLength();

                entity.Property(e => e.TipoFactNot).HasColumnName("TipoFact_Not");

                entity.Property(e => e.TipoFactTodos).HasColumnName("TipoFact_Todos");

                entity.Property(e => e.TipoValor)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Valor).HasColumnType("money");

                entity.Property(e => e.ValorTodos).HasColumnName("Valor_Todos");

                entity.Property(e => e.VendedorFinal)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("Vendedor_Final");

                entity.Property(e => e.VendedorInicial)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("Vendedor_Inicial");

                entity.Property(e => e.VendedorNot).HasColumnName("Vendedor_Not");

                entity.Property(e => e.VendedorTodos).HasColumnName("Vendedor_Todos");

                entity.Property(e => e.ZonaFinal)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("Zona_Final")
                    .IsFixedLength();

                entity.Property(e => e.ZonaInicial)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("Zona_Inicial")
                    .IsFixedLength();

                entity.Property(e => e.ZonaNot).HasColumnName("Zona_Not");

                entity.Property(e => e.ZonaTodos).HasColumnName("Zona_Todos");

                entity.HasOne(d => d.EsquemaNavigation)
                    .WithMany(p => p.EsquemaCondicionLogs)
                    .HasForeignKey(d => d.Esquema)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Esquema_Condicion_Log_Esquema");
            });

            modelBuilder.Entity<EsquemaCondicionTransaccione>(entity =>
            {
                entity.HasKey(e => e.Iden);

                entity.ToTable("Esquema_Condicion_Transacciones");

                entity.Property(e => e.Iden)
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Adicional1)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("adicional_1");

                entity.Property(e => e.Adicional2)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("adicional_2");

                entity.Property(e => e.Anotra)
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Autorizacion)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("autorizacion");

                entity.Property(e => e.Auxiaux)
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.Baseretetra)
                    .HasColumnType("money")
                    .HasColumnName("baseretetra");

                entity.Property(e => e.Bu)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("bu");

                entity.Property(e => e.Cliprv)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("cliprv");

                entity.Property(e => e.Codicta)
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.Codpresu)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("codpresu")
                    .IsFixedLength();

                entity.Property(e => e.Conciltra)
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Descritra)
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.EsquemaCondicion)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("Esquema_Condicion");

                entity.Property(e => e.FechaCreacion)
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Fechafact)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("fechafact")
                    .IsFixedLength();

                entity.Property(e => e.Fechatra)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.FormulaAdicional1)
                    .IsUnicode(false)
                    .HasColumnName("Formula_Adicional_1")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.FormulaAdicional2)
                    .IsUnicode(false)
                    .HasColumnName("Formula_Adicional_2")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.FormulaAutorizacion)
                    .IsUnicode(false)
                    .HasColumnName("Formula_Autorizacion")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.FormulaAuxiaux)
                    .IsUnicode(false)
                    .HasColumnName("Formula_Auxiaux")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.FormulaBaseretetra)
                    .IsUnicode(false)
                    .HasColumnName("Formula_Baseretetra")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.FormulaBu)
                    .IsUnicode(false)
                    .HasColumnName("Formula_Bu")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.FormulaCliprv)
                    .IsUnicode(false)
                    .HasColumnName("Formula_Cliprv")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.FormulaCodicta)
                    .IsUnicode(false)
                    .HasColumnName("Formula_Codicta")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.FormulaCodpresu)
                    .IsUnicode(false)
                    .HasColumnName("Formula_Codpresu")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.FormulaConciltra)
                    .IsUnicode(false)
                    .HasColumnName("Formula_Conciltra")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.FormulaDescritra)
                    .IsUnicode(false)
                    .HasColumnName("Formula_Descritra")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.FormulaFechafact)
                    .IsUnicode(false)
                    .HasColumnName("Formula_Fechafact")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.FormulaIdbanco)
                    .IsUnicode(false)
                    .HasColumnName("Formula_Idbanco")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.FormulaIdcenco)
                    .IsUnicode(false)
                    .HasColumnName("Formula_Idcenco")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.FormulaIditem)
                    .IsUnicode(false)
                    .HasColumnName("Formula_Iditem")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.FormulaIdplaza)
                    .IsUnicode(false)
                    .HasColumnName("Formula_Idplaza")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.FormulaIdunidad1)
                    .IsUnicode(false)
                    .HasColumnName("Formula_Idunidad1")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.FormulaIdunidad2)
                    .IsUnicode(false)
                    .HasColumnName("Formula_Idunidad2")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.FormulaIdunidad3)
                    .IsUnicode(false)
                    .HasColumnName("Formula_Idunidad3")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.FormulaIdvende)
                    .IsUnicode(false)
                    .HasColumnName("Formula_Idvende")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.FormulaIdzona)
                    .IsUnicode(false)
                    .HasColumnName("Formula_Idzona")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.FormulaNcf)
                    .IsUnicode(false)
                    .HasColumnName("Formula_Ncf")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.FormulaNcfModificado)
                    .IsUnicode(false)
                    .HasColumnName("Formula_Ncf_modificado")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.FormulaNittra)
                    .IsUnicode(false)
                    .HasColumnName("Formula_Nittra")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.FormulaNreserva)
                    .IsUnicode(false)
                    .HasColumnName("Formula_Nreserva")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.FormulaNumefac)
                    .IsUnicode(false)
                    .HasColumnName("Formula_Numefac")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.FormulaPorretetra)
                    .IsUnicode(false)
                    .HasColumnName("Formula_Porretetra")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.FormulaPropiedad1)
                    .IsUnicode(false)
                    .HasColumnName("Formula_Propiedad1")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.FormulaPropiedad2)
                    .IsUnicode(false)
                    .HasColumnName("Formula_Propiedad2")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.FormulaPropiedad3)
                    .IsUnicode(false)
                    .HasColumnName("Formula_Propiedad3")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.FormulaPropiedad4)
                    .IsUnicode(false)
                    .HasColumnName("Formula_Propiedad4")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.FormulaPropiedad5)
                    .IsUnicode(false)
                    .HasColumnName("Formula_Propiedad5")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.FormulaRefefac)
                    .IsUnicode(false)
                    .HasColumnName("Formula_Refefac")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.FormulaSerie)
                    .IsUnicode(false)
                    .HasColumnName("Formula_Serie")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.FormulaTasacambio)
                    .IsUnicode(false)
                    .HasColumnName("Formula_Tasacambio")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.FormulaTipofac)
                    .IsUnicode(false)
                    .HasColumnName("Formula_Tipofac")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.FormulaValormoneda)
                    .IsUnicode(false)
                    .HasColumnName("Formula_Valormoneda")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.FormulaValortra)
                    .IsUnicode(false)
                    .HasColumnName("Formula_Valortra")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.FormulaValorutra1)
                    .IsUnicode(false)
                    .HasColumnName("Formula_Valorutra1")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.FormulaValorutra2)
                    .IsUnicode(false)
                    .HasColumnName("Formula_Valorutra2")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.FormulaValorutra3)
                    .IsUnicode(false)
                    .HasColumnName("Formula_Valorutra3")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.FormulaVencefac)
                    .IsUnicode(false)
                    .HasColumnName("Formula_Vencefac")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.FormulaVoucher)
                    .IsUnicode(false)
                    .HasColumnName("Formula_Voucher")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Idbanco)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Idcenco)
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.IdenLibroBu)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("Iden_LibroBu");

                entity.Property(e => e.Idfuente)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Iditem)
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.Idplaza)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("idplaza")
                    .IsFixedLength();

                entity.Property(e => e.Idunidad1)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("idunidad1")
                    .IsFixedLength();

                entity.Property(e => e.Idunidad2)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("idunidad2")
                    .IsFixedLength();

                entity.Property(e => e.Idunidad3)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("idunidad3")
                    .IsFixedLength();

                entity.Property(e => e.Idvende)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("idvende")
                    .IsFixedLength();

                entity.Property(e => e.Idzona)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("idzona")
                    .IsFixedLength();

                entity.Property(e => e.Ncf)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("ncf");

                entity.Property(e => e.NcfModificado)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("ncf_modificado");

                entity.Property(e => e.Nittra)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Nreserva)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("nreserva")
                    .IsFixedLength();

                entity.Property(e => e.Numdoctra)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Numefac)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("numefac");

                entity.Property(e => e.Porretetra)
                    .HasColumnType("numeric(18, 4)")
                    .HasColumnName("porretetra");

                entity.Property(e => e.Propiedad1)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Propiedad2)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Propiedad3)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Propiedad4)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Propiedad5)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Refefac)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("refefac");

                entity.Property(e => e.Serie)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("serie");

                entity.Property(e => e.Tasacambio)
                    .HasColumnType("money")
                    .HasColumnName("tasacambio");

                entity.Property(e => e.TipoAdicional1)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("Tipo_adicional_1");

                entity.Property(e => e.TipoAdicional2)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("Tipo_adicional_2");

                entity.Property(e => e.TipoAnotra)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("Tipo_Anotra");

                entity.Property(e => e.TipoAutorizacion)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("Tipo_Autorizacion");

                entity.Property(e => e.TipoAuxiAux)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("Tipo_AuxiAux");

                entity.Property(e => e.TipoBaseretetra)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("tipo_baseretetra");

                entity.Property(e => e.TipoBu)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("Tipo_bu");

                entity.Property(e => e.TipoCliprv)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("tipo_cliprv");

                entity.Property(e => e.TipoCodicta)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("Tipo_Codicta");

                entity.Property(e => e.TipoCodpresu)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("tipo_codpresu");

                entity.Property(e => e.TipoConciltra)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("Tipo_Conciltra");

                entity.Property(e => e.TipoDescritra)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("Tipo_Descritra");

                entity.Property(e => e.TipoFechafact)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("Tipo_Fechafact");

                entity.Property(e => e.TipoFechatra)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("Tipo_Fechatra");

                entity.Property(e => e.TipoIdBanco)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("Tipo_IdBanco");

                entity.Property(e => e.TipoIdCenco)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("Tipo_IdCenco");

                entity.Property(e => e.TipoIdFuente)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("Tipo_IdFuente");

                entity.Property(e => e.TipoIdItem)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("Tipo_IdItem");

                entity.Property(e => e.TipoIdplaza)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("Tipo_idplaza");

                entity.Property(e => e.TipoIdunidad1)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("Tipo_idunidad1");

                entity.Property(e => e.TipoIdunidad2)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("Tipo_idunidad2");

                entity.Property(e => e.TipoIdunidad3)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("Tipo_idunidad3");

                entity.Property(e => e.TipoIdvende)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("Tipo_Idvende");

                entity.Property(e => e.TipoIdzona)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("tipo_Idzona");

                entity.Property(e => e.TipoNcf)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("Tipo_NCF");

                entity.Property(e => e.TipoNcfModificado)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("Tipo_ncf_modificado");

                entity.Property(e => e.TipoNittra)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("Tipo_Nittra");

                entity.Property(e => e.TipoNreserva)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("tipo_nreserva");

                entity.Property(e => e.TipoNumdoctra)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("Tipo_Numdoctra");

                entity.Property(e => e.TipoNumefac)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("Tipo_Numefac");

                entity.Property(e => e.TipoPorretetra)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("tipo_porretetra");

                entity.Property(e => e.TipoPropiedad1)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.TipoPropiedad2)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.TipoPropiedad3)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.TipoPropiedad4)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.TipoPropiedad5)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.TipoRefefac)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("Tipo_refefac");

                entity.Property(e => e.TipoSerie)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("Tipo_Serie");

                entity.Property(e => e.TipoTasacambio)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("Tipo_tasacambio");

                entity.Property(e => e.TipoTipofac)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("Tipo_Tipofac");

                entity.Property(e => e.TipoValormoneda)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("tipo_valormoneda");

                entity.Property(e => e.TipoValortra)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("Tipo_valortra");

                entity.Property(e => e.TipoValorutra1)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("Tipo_valorutra1");

                entity.Property(e => e.TipoValorutra2)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("Tipo_valorutra2");

                entity.Property(e => e.TipoValorutra3)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("Tipo_valorutra3");

                entity.Property(e => e.TipoVencefac)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("Tipo_Vencefac");

                entity.Property(e => e.TipoVoucher)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("Tipo_voucher");

                entity.Property(e => e.Tipofac)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("tipofac");

                entity.Property(e => e.Valormoneda)
                    .HasColumnType("numeric(18, 2)")
                    .HasColumnName("valormoneda");

                entity.Property(e => e.Valortra).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.Valorutra1)
                    .HasColumnType("money")
                    .HasColumnName("valorutra1");

                entity.Property(e => e.Valorutra2)
                    .HasColumnType("money")
                    .HasColumnName("valorutra2");

                entity.Property(e => e.Valorutra3)
                    .HasColumnType("money")
                    .HasColumnName("valorutra3");

                entity.Property(e => e.Vencefac)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("vencefac")
                    .IsFixedLength();

                entity.Property(e => e.Voucher)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("voucher");

                entity.HasOne(d => d.EsquemaCondicionNavigation)
                    .WithMany(p => p.EsquemaCondicionTransacciones)
                    .HasForeignKey(d => d.EsquemaCondicion)
                    .HasConstraintName("FK_Esquema_Condicion_Transacciones_Esquema_Condicion");
            });

            modelBuilder.Entity<EsquemaCondicionTransaccionesLog>(entity =>
            {
                entity.HasKey(e => e.Iden);

                entity.ToTable("Esquema_Condicion_Transacciones_Log");

                entity.Property(e => e.Iden).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.Adicional1)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("adicional_1");

                entity.Property(e => e.Adicional2)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("adicional_2");

                entity.Property(e => e.Anotra)
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Autorizacion)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("autorizacion");

                entity.Property(e => e.Auxiaux)
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.Baseretetra)
                    .HasColumnType("money")
                    .HasColumnName("baseretetra");

                entity.Property(e => e.Bu)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("bu");

                entity.Property(e => e.Cliprv)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("cliprv");

                entity.Property(e => e.Codicta)
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.Codpresu)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("codpresu")
                    .IsFixedLength();

                entity.Property(e => e.Conciltra)
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Descritra)
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.EsquemaCondicion)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("Esquema_Condicion");

                entity.Property(e => e.Fechafact)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("fechafact")
                    .IsFixedLength();

                entity.Property(e => e.Fechatra)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.FormulaAdicional1)
                    .IsUnicode(false)
                    .HasColumnName("Formula_Adicional_1")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.FormulaAdicional2)
                    .IsUnicode(false)
                    .HasColumnName("Formula_Adicional_2")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.FormulaAutorizacion)
                    .IsUnicode(false)
                    .HasColumnName("Formula_Autorizacion")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.FormulaAuxiaux)
                    .IsUnicode(false)
                    .HasColumnName("Formula_Auxiaux")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.FormulaBaseretetra)
                    .IsUnicode(false)
                    .HasColumnName("Formula_Baseretetra")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.FormulaBu)
                    .IsUnicode(false)
                    .HasColumnName("Formula_Bu")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.FormulaCliprv)
                    .IsUnicode(false)
                    .HasColumnName("Formula_Cliprv")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.FormulaCodicta)
                    .IsUnicode(false)
                    .HasColumnName("Formula_Codicta")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.FormulaCodpresu)
                    .IsUnicode(false)
                    .HasColumnName("Formula_Codpresu")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.FormulaConciltra)
                    .IsUnicode(false)
                    .HasColumnName("Formula_Conciltra")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.FormulaDescritra)
                    .IsUnicode(false)
                    .HasColumnName("Formula_Descritra")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.FormulaFechafact)
                    .IsUnicode(false)
                    .HasColumnName("Formula_Fechafact")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.FormulaIdbanco)
                    .IsUnicode(false)
                    .HasColumnName("Formula_Idbanco")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.FormulaIdcenco)
                    .IsUnicode(false)
                    .HasColumnName("Formula_Idcenco")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.FormulaIditem)
                    .IsUnicode(false)
                    .HasColumnName("Formula_Iditem");

                entity.Property(e => e.FormulaIdplaza)
                    .IsUnicode(false)
                    .HasColumnName("Formula_Idplaza")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.FormulaIdunidad1)
                    .IsUnicode(false)
                    .HasColumnName("Formula_Idunidad1")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.FormulaIdunidad2)
                    .IsUnicode(false)
                    .HasColumnName("Formula_Idunidad2")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.FormulaIdunidad3)
                    .IsUnicode(false)
                    .HasColumnName("Formula_Idunidad3")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.FormulaIdvende)
                    .IsUnicode(false)
                    .HasColumnName("Formula_Idvende")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.FormulaIdzona)
                    .IsUnicode(false)
                    .HasColumnName("Formula_Idzona")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.FormulaNcf)
                    .IsUnicode(false)
                    .HasColumnName("Formula_Ncf")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.FormulaNcfModificado)
                    .IsUnicode(false)
                    .HasColumnName("Formula_Ncf_modificado")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.FormulaNittra)
                    .IsUnicode(false)
                    .HasColumnName("Formula_Nittra")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.FormulaNreserva)
                    .IsUnicode(false)
                    .HasColumnName("Formula_Nreserva")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.FormulaNumefac)
                    .IsUnicode(false)
                    .HasColumnName("Formula_Numefac")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.FormulaPorretetra)
                    .IsUnicode(false)
                    .HasColumnName("Formula_Porretetra")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.FormulaPropiedad1)
                    .IsUnicode(false)
                    .HasColumnName("Formula_Propiedad1")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.FormulaPropiedad2)
                    .IsUnicode(false)
                    .HasColumnName("Formula_Propiedad2")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.FormulaPropiedad3)
                    .IsUnicode(false)
                    .HasColumnName("Formula_Propiedad3")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.FormulaPropiedad4)
                    .IsUnicode(false)
                    .HasColumnName("Formula_Propiedad4")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.FormulaPropiedad5)
                    .IsUnicode(false)
                    .HasColumnName("Formula_Propiedad5")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.FormulaRefefac)
                    .IsUnicode(false)
                    .HasColumnName("Formula_Refefac")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.FormulaSerie)
                    .IsUnicode(false)
                    .HasColumnName("Formula_Serie")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.FormulaTasacambio)
                    .IsUnicode(false)
                    .HasColumnName("Formula_Tasacambio")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.FormulaTipofac)
                    .IsUnicode(false)
                    .HasColumnName("Formula_Tipofac")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.FormulaValormoneda)
                    .IsUnicode(false)
                    .HasColumnName("Formula_Valormoneda")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.FormulaValortra)
                    .IsUnicode(false)
                    .HasColumnName("Formula_Valortra")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.FormulaValorutra1)
                    .IsUnicode(false)
                    .HasColumnName("Formula_Valorutra1")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.FormulaValorutra2)
                    .IsUnicode(false)
                    .HasColumnName("Formula_Valorutra2")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.FormulaValorutra3)
                    .IsUnicode(false)
                    .HasColumnName("Formula_Valorutra3")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.FormulaVencefac)
                    .IsUnicode(false)
                    .HasColumnName("Formula_Vencefac")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.FormulaVoucher)
                    .IsUnicode(false)
                    .HasColumnName("Formula_Voucher")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Idbanco)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Idcenco)
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.IdenEsquemaCondicionTransaccionesLog)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_esquema_condicion_transacciones_log");

                entity.Property(e => e.IdenLibroBu)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("Iden_LibroBu");

                entity.Property(e => e.Idfuente)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Iditem)
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.Idplaza)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("idplaza")
                    .IsFixedLength();

                entity.Property(e => e.Idunidad1)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("idunidad1")
                    .IsFixedLength();

                entity.Property(e => e.Idunidad2)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("idunidad2")
                    .IsFixedLength();

                entity.Property(e => e.Idunidad3)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("idunidad3")
                    .IsFixedLength();

                entity.Property(e => e.Idvende)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("idvende")
                    .IsFixedLength();

                entity.Property(e => e.Idzona)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("idzona")
                    .IsFixedLength();

                entity.Property(e => e.Ncf)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("ncf");

                entity.Property(e => e.NcfModificado)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("ncf_modificado");

                entity.Property(e => e.Nittra)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Nreserva)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("nreserva")
                    .IsFixedLength();

                entity.Property(e => e.Numdoctra)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Numefac)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("numefac");

                entity.Property(e => e.Porretetra)
                    .HasColumnType("numeric(18, 4)")
                    .HasColumnName("porretetra");

                entity.Property(e => e.Propiedad1)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Propiedad2)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Propiedad3)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Propiedad4)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Propiedad5)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Refefac)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("refefac");

                entity.Property(e => e.Serie)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("serie");

                entity.Property(e => e.Tasacambio)
                    .HasColumnType("money")
                    .HasColumnName("tasacambio");

                entity.Property(e => e.TipoAdicional1)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("Tipo_adicional_1");

                entity.Property(e => e.TipoAdicional2)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("Tipo_adicional_2");

                entity.Property(e => e.TipoAnotra)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("Tipo_Anotra");

                entity.Property(e => e.TipoAutorizacion)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("Tipo_Autorizacion");

                entity.Property(e => e.TipoAuxiAux)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("Tipo_AuxiAux");

                entity.Property(e => e.TipoBaseretetra)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("tipo_baseretetra");

                entity.Property(e => e.TipoBu)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("Tipo_bu");

                entity.Property(e => e.TipoCliprv)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("tipo_cliprv");

                entity.Property(e => e.TipoCodicta)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("Tipo_Codicta");

                entity.Property(e => e.TipoCodpresu)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("tipo_codpresu");

                entity.Property(e => e.TipoConciltra)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("Tipo_Conciltra");

                entity.Property(e => e.TipoDescritra)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("Tipo_Descritra");

                entity.Property(e => e.TipoFechafact)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("Tipo_Fechafact");

                entity.Property(e => e.TipoFechatra)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("Tipo_Fechatra");

                entity.Property(e => e.TipoIdBanco)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("Tipo_IdBanco");

                entity.Property(e => e.TipoIdCenco)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("Tipo_IdCenco");

                entity.Property(e => e.TipoIdFuente)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("Tipo_IdFuente");

                entity.Property(e => e.TipoIdItem)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("Tipo_IdItem");

                entity.Property(e => e.TipoIdplaza)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("Tipo_idplaza");

                entity.Property(e => e.TipoIdunidad1)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("Tipo_idunidad1");

                entity.Property(e => e.TipoIdunidad2)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("Tipo_idunidad2");

                entity.Property(e => e.TipoIdunidad3)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("Tipo_idunidad3");

                entity.Property(e => e.TipoIdvende)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("Tipo_Idvende");

                entity.Property(e => e.TipoIdzona)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("tipo_Idzona");

                entity.Property(e => e.TipoNcf)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("Tipo_NCF");

                entity.Property(e => e.TipoNcfModificado)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("Tipo_ncf_modificado");

                entity.Property(e => e.TipoNittra)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("Tipo_Nittra");

                entity.Property(e => e.TipoNreserva)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("tipo_nreserva");

                entity.Property(e => e.TipoNumdoctra)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("Tipo_Numdoctra");

                entity.Property(e => e.TipoNumefac)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("Tipo_Numefac");

                entity.Property(e => e.TipoPorretetra)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("tipo_porretetra");

                entity.Property(e => e.TipoPropiedad1)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.TipoPropiedad2)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.TipoPropiedad3)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.TipoPropiedad4)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.TipoPropiedad5)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.TipoRefefac)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("Tipo_refefac");

                entity.Property(e => e.TipoSerie)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("Tipo_Serie");

                entity.Property(e => e.TipoTasacambio)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("Tipo_tasacambio");

                entity.Property(e => e.TipoTipofac)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("Tipo_Tipofac");

                entity.Property(e => e.TipoValormoneda)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("tipo_valormoneda");

                entity.Property(e => e.TipoValortra)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("Tipo_valortra");

                entity.Property(e => e.TipoValorutra1)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("Tipo_valorutra1");

                entity.Property(e => e.TipoValorutra2)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("Tipo_valorutra2");

                entity.Property(e => e.TipoValorutra3)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("Tipo_valorutra3");

                entity.Property(e => e.TipoVencefac)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("Tipo_Vencefac");

                entity.Property(e => e.TipoVoucher)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("Tipo_voucher");

                entity.Property(e => e.Tipofac)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("tipofac");

                entity.Property(e => e.Valormoneda)
                    .HasColumnType("numeric(18, 2)")
                    .HasColumnName("valormoneda");

                entity.Property(e => e.Valortra).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.Valorutra1)
                    .HasColumnType("money")
                    .HasColumnName("valorutra1");

                entity.Property(e => e.Valorutra2)
                    .HasColumnType("money")
                    .HasColumnName("valorutra2");

                entity.Property(e => e.Valorutra3)
                    .HasColumnType("money")
                    .HasColumnName("valorutra3");

                entity.Property(e => e.Vencefac)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("vencefac")
                    .IsFixedLength();

                entity.Property(e => e.Voucher)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("voucher");

                entity.HasOne(d => d.EsquemaCondicionNavigation)
                    .WithMany(p => p.EsquemaCondicionTransaccionesLogs)
                    .HasForeignKey(d => d.EsquemaCondicion)
                    .HasConstraintName("FK_Esquema_Condicion_Transacciones_Log_Esquema_Condicion_Log");
            });

            modelBuilder.Entity<EsquemaDatosPlantilla>(entity =>
            {
                entity.HasKey(e => new { e.IdenEsquema, e.IdenPlanillaCampo });

                entity.ToTable("Esquema_DatosPlantilla");

                entity.Property(e => e.IdenEsquema)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("Iden_Esquema");

                entity.Property(e => e.IdenPlanillaCampo).HasColumnName("Iden_PlanillaCampo");

                entity.Property(e => e.IdenEsquemaDatosplantilla)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_esquema_datosplantilla");

                entity.Property(e => e.Valor)
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.HasOne(d => d.IdenEsquemaNavigation)
                    .WithMany(p => p.EsquemaDatosPlantillas)
                    .HasForeignKey(d => d.IdenEsquema)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Esquema_DatosPlantilla_Esquema");

                entity.HasOne(d => d.IdenPlanillaCampoNavigation)
                    .WithMany(p => p.EsquemaDatosPlantillas)
                    .HasForeignKey(d => d.IdenPlanillaCampo)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Esquema_DatosPlantilla_Esquema_PlantillaCampos");
            });

            modelBuilder.Entity<EsquemaDocumento>(entity =>
            {
                entity.HasKey(e => new { e.Fuente, e.Documento });

                entity.ToTable("Esquema_Documentos");

                entity.Property(e => e.Fuente)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.Documento)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Error)
                    .HasMaxLength(8000)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Iden)
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Intentos).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.Usuario)
                    .HasMaxLength(250)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<EsquemaErrorDocument>(entity =>
            {
                entity.HasKey(e => e.Iden);

                entity.ToTable("Esquema_Error_Document");

                entity.Property(e => e.DescripcionAuditoria)
                    .HasMaxLength(8000)
                    .IsUnicode(false);

                entity.Property(e => e.Documento)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.ErroresContables)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.FechaAuditoria)
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.FechaProceso)
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Fuente)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.Usuario)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioAuditoria)
                    .HasMaxLength(250)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<EsquemaErrorDocumentLogAuditorium>(entity =>
            {
                entity.HasKey(e => e.Iden);

                entity.ToTable("Esquema_Error_Document_LogAuditoria");

                entity.Property(e => e.DescripcionAuditoria)
                    .HasMaxLength(8000)
                    .IsUnicode(false);

                entity.Property(e => e.FechaAuditoria)
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.IdenEsquemaErrorDocument).HasColumnName("Iden_Esquema_Error_Document");

                entity.Property(e => e.UsuarioAuditoria)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdenEsquemaErrorDocumentNavigation)
                    .WithMany(p => p.EsquemaErrorDocumentLogAuditoria)
                    .HasForeignKey(d => d.IdenEsquemaErrorDocument)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Esquema_Error_Document_LogAuditoria_Esquema_Error_Document");
            });

            modelBuilder.Entity<EsquemaErrorTransac>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Esquema_Error_Transac");

                entity.Property(e => e.Documento)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.FechaProceso)
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Fuente)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.IdenEsquemaErrorTransac)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_esquema_error_transac");

                entity.Property(e => e.IdenEsquemaTransaccion)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("Iden_EsquemaTransaccion");

                entity.Property(e => e.Usuario)
                    .HasMaxLength(250)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<EsquemaPlantilla>(entity =>
            {
                entity.HasKey(e => e.Iden);

                entity.ToTable("Esquema_Plantilla");

                entity.Property(e => e.Codigo)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Descripcion)
                    .HasMaxLength(4000)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.IdenEsquemaPlantilla)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("Iden_EsquemaPlantilla");

                entity.Property(e => e.Nombre)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdenEsquemaPlantillaNavigation)
                    .WithMany(p => p.EsquemaPlantillas)
                    .HasForeignKey(d => d.IdenEsquemaPlantilla)
                    .HasConstraintName("FK_Esquema_Plantilla_Esquema");
            });

            modelBuilder.Entity<EsquemaPlantillaCampo>(entity =>
            {
                entity.HasKey(e => e.Iden)
                    .HasName("PK_Esquema_PlantillaCampos_1");

                entity.ToTable("Esquema_PlantillaCampos");

                entity.Property(e => e.Campo)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Descripcion)
                    .HasMaxLength(4000)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.IdenPlanilla).HasColumnName("Iden_Planilla");

                entity.HasOne(d => d.IdenPlanillaNavigation)
                    .WithMany(p => p.EsquemaPlantillaCampos)
                    .HasForeignKey(d => d.IdenPlanilla)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Esquema_PlantillaCampos_Esquema_Plantilla");
            });

            modelBuilder.Entity<EstadosFinancierosNiifCabecera>(entity =>
            {
                entity.ToTable("EstadosFinancierosNIIF_Cabecera");

                entity.HasIndex(e => new { e.Codigo, e.IdEstadosFinancierosNiifLibros }, "UQ_EstadosFinancierosNIIF_Cabecera_Codigo_Id_EstadosFinancierosNIIF_Libros")
                    .IsUnique();

                entity.Property(e => e.Codigo)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.IdCategoriaEstadosFinancierosNiif).HasColumnName("Id_CategoriaEstadosFinancierosNIIF");

                entity.Property(e => e.IdEstadosFinancierosNiifCabeceraPadre).HasColumnName("Id_EstadosFinancierosNIIF_CabeceraPadre");

                entity.Property(e => e.IdEstadosFinancierosNiifLibros).HasColumnName("Id_EstadosFinancierosNIIF_Libros");

                entity.Property(e => e.IdTasasConversion).HasColumnName("Id_TasasConversion");

                entity.Property(e => e.Nombre)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdCategoriaEstadosFinancierosNiifNavigation)
                    .WithMany(p => p.EstadosFinancierosNiifCabeceras)
                    .HasForeignKey(d => d.IdCategoriaEstadosFinancierosNiif)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_EstadosFinancierosNIIF_Cabecera_CategoriaEstadosFinancierosNIIF");

                entity.HasOne(d => d.IdEstadosFinancierosNiifCabeceraPadreNavigation)
                    .WithMany(p => p.InverseIdEstadosFinancierosNiifCabeceraPadreNavigation)
                    .HasForeignKey(d => d.IdEstadosFinancierosNiifCabeceraPadre)
                    .HasConstraintName("FK_EstadosFinancierosNIIF_Cabecera_EstadosFinancierosNIIF_Cabecera");

                entity.HasOne(d => d.IdEstadosFinancierosNiifLibrosNavigation)
                    .WithMany(p => p.EstadosFinancierosNiifCabeceras)
                    .HasForeignKey(d => d.IdEstadosFinancierosNiifLibros)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_EstadosFinancierosNIIF_Cabecera_EstadosFinancierosNIIF_Libros");

                entity.HasOne(d => d.IdTasasConversionNavigation)
                    .WithMany(p => p.EstadosFinancierosNiifCabeceras)
                    .HasForeignKey(d => d.IdTasasConversion)
                    .HasConstraintName("FK_EstadosFinancierosNIIF_Cabecera_TasasConversion");
            });

            modelBuilder.Entity<EstadosFinancierosNiifDetalle>(entity =>
            {
                entity.ToTable("EstadosFinancierosNIIF_Detalle");

                entity.Property(e => e.CodCtaFin)
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.CodCtaIni)
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.IdEstadosFinancierosNiifCabecera).HasColumnName("Id_EstadosFinancierosNIIF_Cabecera");

                entity.Property(e => e.NomCtaFin)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NomCtaIni)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdEstadosFinancierosNiifCabeceraNavigation)
                    .WithMany(p => p.EstadosFinancierosNiifDetalles)
                    .HasForeignKey(d => d.IdEstadosFinancierosNiifCabecera)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_EstadosFinancierosNIIF_Detalle_EstadosFinancierosNIIF_Cabecera");
            });

            modelBuilder.Entity<EstadosFinancierosNiifLibro>(entity =>
            {
                entity.ToTable("EstadosFinancierosNIIF_Libros");

                entity.HasIndex(e => e.CodLibro, "UQ_EstadosFinancierosNIIF_Libros_CODLIBRO")
                    .IsUnique();

                entity.Property(e => e.CodLibro)
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Descripcion)
                    .HasMaxLength(512)
                    .IsUnicode(false);

                entity.Property(e => e.NomLibro)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Reporte)
                    .HasMaxLength(512)
                    .IsUnicode(false);

                entity.Property(e => e.StoredProcedure)
                    .HasMaxLength(512)
                    .IsUnicode(false);

                entity.Property(e => e.SubReporte)
                    .HasMaxLength(512)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<EtiquetaAtributo>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Etiqueta_Atributos");

                entity.Property(e => e.Atributo)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Codigo)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Cuenta)
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.IdEtiqueta).HasColumnName("Id_Etiqueta");

                entity.Property(e => e.IdenEtiquetaAtributos)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_etiqueta_atributos");

                entity.HasOne(d => d.IdEtiquetaNavigation)
                    .WithMany()
                    .HasForeignKey(d => d.IdEtiqueta)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Etiqueta_Atributos_Etiqueta");
            });

            modelBuilder.Entity<Etiquetum>(entity =>
            {
                entity.Property(e => e.Codigo)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.IdTipoEtiqueta).HasColumnName("Id_TipoEtiqueta");

                entity.Property(e => e.Nombre)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdTipoEtiquetaNavigation)
                    .WithMany(p => p.Etiqueta)
                    .HasForeignKey(d => d.IdTipoEtiqueta)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Etiqueta_TipoEtiqueta");
            });

            modelBuilder.Entity<ExcelInfodesignperfil>(entity =>
            {
                entity.HasKey(e => new { e.Idcodigo, e.Idperfil });

                entity.ToTable("EXCEL_INFODESIGNPERFIL");

                entity.Property(e => e.Idcodigo)
                    .HasMaxLength(256)
                    .IsUnicode(false)
                    .HasColumnName("IDCODIGO");

                entity.Property(e => e.Idperfil).HasColumnName("IDPERFIL");

                entity.Property(e => e.IdenExcelInfodesignperfil)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_excel_infodesignperfil");

                entity.Property(e => e.Permiso).HasColumnName("PERMISO");

                entity.HasOne(d => d.IdcodigoNavigation)
                    .WithMany(p => p.ExcelInfodesignperfils)
                    .HasForeignKey(d => d.Idcodigo)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_EXCEL_INFODESIGNPERFIL_INFODESIGN");
            });

            modelBuilder.Entity<ExcelInfodesignusuario>(entity =>
            {
                entity.HasKey(e => new { e.Idcodigo, e.Idusuario });

                entity.ToTable("EXCEL_INFODESIGNUSUARIO");

                entity.Property(e => e.Idcodigo)
                    .HasMaxLength(256)
                    .IsUnicode(false)
                    .HasColumnName("IDCODIGO");

                entity.Property(e => e.Idusuario)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("IDUSUARIO");

                entity.Property(e => e.IdenExcelInfodesignusuario)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_excel_infodesignusuario");

                entity.Property(e => e.Permiso).HasColumnName("PERMISO");

                entity.HasOne(d => d.IdcodigoNavigation)
                    .WithMany(p => p.ExcelInfodesignusuarios)
                    .HasForeignKey(d => d.Idcodigo)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_EXCEL_USUARIOINFODESIGN_INFODESIGN");

                entity.HasOne(d => d.IdusuarioNavigation)
                    .WithMany(p => p.ExcelInfodesignusuarios)
                    .HasForeignKey(d => d.Idusuario)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_EXCEL_USUARIOINFODESIGN_USUARIOS");
            });

            modelBuilder.Entity<ExcelRemoto>(entity =>
            {
                entity.ToTable("ExcelRemoto");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Bodegas)
                    .HasMaxLength(8000)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Caption)
                    .HasMaxLength(512)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.CentrosdeCosto)
                    .HasMaxLength(8000)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Error)
                    .HasMaxLength(8000)
                    .IsUnicode(false);

                entity.Property(e => e.Escala).HasDefaultValueSql("((1))");

                entity.Property(e => e.FechaFunc)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Filedesign)
                    .HasColumnType("image")
                    .HasColumnName("FILEDESIGN");

                entity.Property(e => e.GrupoContable)
                    .HasMaxLength(8000)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Grupos)
                    .HasMaxLength(8000)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Idcodigo)
                    .HasMaxLength(8000)
                    .IsUnicode(false)
                    .HasColumnName("IDCODIGO");

                entity.Property(e => e.Origen)
                    .HasMaxLength(400)
                    .IsUnicode(false);

                entity.Property(e => e.Parametros)
                    .HasMaxLength(8000)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Valores)
                    .HasMaxLength(8000)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");
            });

            modelBuilder.Entity<ExportarEstructura>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Exportar_Estructura");

                entity.Property(e => e.Campo)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Definicion)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Expresion)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ExpresionGrupo)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Filtrohaving)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.IdenExportarEstructura)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_exportar_estructura");

                entity.Property(e => e.ValorDefault)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ExportarMovExportado>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Exportar_MovExportado");

                entity.HasIndex(e => e.Consecutra, "IX_EXPORTAR_MOVEXPORTADO_CONSECUTRA")
                    .IsClustered();

                entity.Property(e => e.FechaGrabacion).HasColumnType("smalldatetime");

                entity.Property(e => e.Fechatra)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.IdenExportarMovexportado)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_exportar_movexportado");

                entity.Property(e => e.Idfuente)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Numdoctra)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Usuario)
                    .HasMaxLength(250)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ExportarTransaccione>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Exportar_Transacciones");

                entity.Property(e => e.Campo)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Constante)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Cuenta)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.IdenExportarTransacciones)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_exportar_transacciones");

                entity.Property(e => e.Variables).HasColumnType("numeric(18, 0)");
            });

            modelBuilder.Entity<ExportarVariable>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Exportar_Variables");

                entity.Property(e => e.Descripcion)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Formulacion)
                    .HasMaxLength(8000)
                    .IsUnicode(false);

                entity.Property(e => e.IdVariable).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.IdenExportarVariables)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_exportar_variables");
            });

            modelBuilder.Entity<FactBodyDocumentoModelo>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("FactBody_Documento_Modelo");

                entity.Property(e => e.ConsecuFbo).HasColumnName("CONSECU_FBO");

                entity.Property(e => e.DocumFbo)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("DOCUM_FBO")
                    .IsFixedLength();

                entity.Property(e => e.FuenteFbo)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("FUENTE_FBO")
                    .IsFixedLength();

                entity.Property(e => e.IdDocumentoAuto)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("IdDocumento_Auto");

                entity.Property(e => e.Iden)
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<FactCliModHistorico>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("FactCliModHistorico");

                entity.Property(e => e.Bu)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("BU")
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.Fecha).HasColumnType("smalldatetime");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.IdCliente)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.IdDocumento)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.IdModelo)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.IdUsuario)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Operacion)
                    .HasMaxLength(3)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<FactConcAtributo>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("FactConc_Atributos");

                entity.HasIndex(e => e.ConcFco, "UQ_FactConc_Atributos_Conc_Fco")
                    .IsUnique();

                entity.Property(e => e.ConcFco)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("Conc_Fco")
                    .IsFixedLength();

                entity.Property(e => e.Iden).ValueGeneratedOnAdd();

                entity.HasOne(d => d.ConcFcoNavigation)
                    .WithOne()
                    .HasForeignKey<FactConcAtributo>(d => d.ConcFco)
                    .HasConstraintName("FK_FactConc_Atributos_FactConc");
            });

            modelBuilder.Entity<FactConcFormulaSql>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("FactConc_FormulaSQL");

                entity.Property(e => e.ConcFco)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("Conc_Fco")
                    .IsFixedLength();

                entity.Property(e => e.FormulaCantidadSql)
                    .IsUnicode(false)
                    .HasColumnName("Formula_Cantidad_SQL");

                entity.Property(e => e.FormulaValorSql)
                    .IsUnicode(false)
                    .HasColumnName("Formula_Valor_SQL");

                entity.Property(e => e.Iden)
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd();

                entity.HasOne(d => d.ConcFcoNavigation)
                    .WithMany()
                    .HasForeignKey(d => d.ConcFco)
                    .HasConstraintName("FK_FactConc_FormulaSQL_FactConc");
            });

            modelBuilder.Entity<FactConcTipoTotalizador>(entity =>
            {
                entity.HasKey(e => e.Codigo)
                    .HasName("PK_FACTCONCTIPOTOTALIZADOR");

                entity.ToTable("FactConcTipoTotalizador");

                entity.Property(e => e.Codigo)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Descripcion)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.IdenFactconctipototalizador)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_factconctipototalizador");
            });

            modelBuilder.Entity<FactConcValorPeriodo>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("FactConc_ValorPeriodos");

                entity.Property(e => e.Anno)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("ANNO");

                entity.Property(e => e.Bu)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("BU");

                entity.Property(e => e.Concepto)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("CONCEPTO")
                    .IsFixedLength();

                entity.Property(e => e.Idcliente)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("IDCLIENTE");

                entity.Property(e => e.Iden).ValueGeneratedOnAdd();

                entity.Property(e => e.Mes)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("MES");

                entity.Property(e => e.Valor)
                    .HasColumnType("money")
                    .HasColumnName("VALOR");
            });

            modelBuilder.Entity<FactConcVarImpuesto>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("FactConc_VarImpuestos");

                entity.Property(e => e.ConcFco)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("Conc_Fco")
                    .IsFixedLength();

                entity.Property(e => e.Cuenta)
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.Iden)
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.PorceivaFco)
                    .HasColumnType("numeric(18, 6)")
                    .HasColumnName("PORCEIVA_FCO");

                entity.HasOne(d => d.ConcFcoNavigation)
                    .WithMany()
                    .HasForeignKey(d => d.ConcFco)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_FactConc_VarImpuestos_FactConc");
            });

            modelBuilder.Entity<FactConceptosRelacionado>(entity =>
            {
                entity.HasKey(e => new { e.ConceptoPadre, e.ConceptoHijo });

                entity.Property(e => e.ConceptoPadre)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.ConceptoHijo)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Auxiliar)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.IdenFactconceptosrelacionados)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_factconceptosrelacionados");

                entity.Property(e => e.Tercero)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.TipoAuxiliar)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.TipoTercero)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.HasOne(d => d.ConceptoHijoNavigation)
                    .WithMany(p => p.FactConceptosRelacionadoConceptoHijoNavigations)
                    .HasForeignKey(d => d.ConceptoHijo)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_FactConceptosRelacionados_FACTCONC1");

                entity.HasOne(d => d.ConceptoPadreNavigation)
                    .WithMany(p => p.FactConceptosRelacionadoConceptoPadreNavigations)
                    .HasForeignKey(d => d.ConceptoPadre)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_FactConceptosRelacionados_FACTCONC");
            });

            modelBuilder.Entity<FactConceptosRelacionadosC>(entity =>
            {
                entity.HasKey(e => new { e.ConceptoPadre, e.ConceptoHijo });

                entity.ToTable("FactConceptosRelacionadosC");

                entity.Property(e => e.ConceptoPadre)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.ConceptoHijo)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.IdenFactconceptosrelacionadosc)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_factconceptosrelacionadosc");
            });

            modelBuilder.Entity<FactHeadAdicional>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("FactHead_Adicional");

                entity.Property(e => e.CodigoControl)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Documento)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Fuente)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.IdenFactheadAdicional)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_facthead_adicional");

                entity.Property(e => e.QrGenerado)
                    .HasColumnType("image")
                    .HasColumnName("QR_Generado");

                entity.Property(e => e.SpId).HasColumnType("numeric(18, 0)");
            });

            modelBuilder.Entity<FactHeadRelacionCompra>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("FactHead_RelacionCompra");

                entity.HasIndex(e => new { e.FuenteCompra, e.DocumentoCompra }, "IX_FactHead_RelacionCompra_Fuente_Compra_Documento_Compra");

                entity.HasIndex(e => new { e.FuenteFhe, e.DocumentoFhe }, "IX_FactHead_RelacionCompra_Fuente_FHE_Documento_FHE");

                entity.Property(e => e.DocumentoCompra)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("Documento_Compra")
                    .IsFixedLength();

                entity.Property(e => e.DocumentoFhe)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("Documento_FHE")
                    .IsFixedLength();

                entity.Property(e => e.FuenteCompra)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("Fuente_Compra")
                    .IsFixedLength();

                entity.Property(e => e.FuenteFhe)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("Fuente_FHE")
                    .IsFixedLength();

                entity.Property(e => e.Id)
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<FactModeloDatosAdiconalesTransaccion>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("FactModelo_DatosAdiconalesTransaccion");

                entity.Property(e => e.Concepto)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.IdDocumento)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.IdModelo)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Idcliente)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("IDCLIENTE");

                entity.Property(e => e.Iden)
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.IdenMaestro)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("IDEN_Maestro");

                entity.Property(e => e.IdenVariable)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("IDEN_Variable");

                entity.Property(e => e.ValorFecha).HasColumnType("smalldatetime");

                entity.Property(e => e.ValorNumerico).HasColumnType("numeric(18, 6)");

                entity.Property(e => e.ValorVarchar)
                    .HasMaxLength(8000)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<FactNotaCausacion>(entity =>
            {
                entity.HasKey(e => e.Iden);

                entity.ToTable("Fact_NotaCausacion");

                entity.Property(e => e.CodigoPropiedad1)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.CodigoPropiedad2)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.CodigoPropiedad3)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.CodigoPropiedad4)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.CodigoPropiedad5)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Concepto)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.ConsecutivoRelacionado).HasColumnType("numeric(10, 0)");

                entity.Property(e => e.CuentaIva)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CuentaOrden)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Documento)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Estado)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Fuente)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.PorcentajeIva).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.SaldoConcepto).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.SaldoIva).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.SaldoTotalConcepto).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.VrCausadoConcepto).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.VrCausadoIva).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.VrConcepto).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.VrIva).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.VrTotalCausado).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.VrTotalConcepto).HasColumnType("numeric(18, 2)");

                entity.HasOne(d => d.ConceptoNavigation)
                    .WithMany(p => p.FactNotaCausacions)
                    .HasForeignKey(d => d.Concepto)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Fact_NotaCausacion_FACTCONC");

                entity.HasOne(d => d.CuentaIvaNavigation)
                    .WithMany(p => p.FactNotaCausacionCuentaIvaNavigations)
                    .HasForeignKey(d => d.CuentaIva)
                    .HasConstraintName("FK_Fact_NotaCausacion_MAECONT2");

                entity.HasOne(d => d.CuentaOrdenNavigation)
                    .WithMany(p => p.FactNotaCausacionCuentaOrdenNavigations)
                    .HasForeignKey(d => d.CuentaOrden)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Fact_NotaCausacion_MAECONT");

                entity.HasOne(d => d.Document)
                    .WithMany(p => p.FactNotaCausacions)
                    .HasForeignKey(d => new { d.Fuente, d.Documento })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Fact_NotaCausacion_DOCUMENT");
            });

            modelBuilder.Entity<FactRelacionCausacion>(entity =>
            {
                entity.HasKey(e => e.Iden);

                entity.ToTable("Fact_RelacionCausacion");

                entity.Property(e => e.Concepto)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.DocumentoFa)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("Documento_FA")
                    .IsFixedLength();

                entity.Property(e => e.DocumentoRc)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("Documento_RC")
                    .IsFixedLength();

                entity.Property(e => e.EstadoRc)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Estado_RC");

                entity.Property(e => e.FuenteFa)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("Fuente_FA")
                    .IsFixedLength();

                entity.Property(e => e.FuenteRc)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("Fuente_RC")
                    .IsFixedLength();

                entity.Property(e => e.IdenRelacionado).HasColumnName("Iden_Relacionado");

                entity.Property(e => e.VrCausadoConcepto).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.VrCausadoIva).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.VrTotalCausado).HasColumnType("numeric(18, 2)");

                entity.HasOne(d => d.ConceptoNavigation)
                    .WithMany(p => p.FactRelacionCausacions)
                    .HasForeignKey(d => d.Concepto)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Fact_RelacionCausacion_FACTCONC");

                entity.HasOne(d => d.IdenRelacionadoNavigation)
                    .WithMany(p => p.FactRelacionCausacions)
                    .HasForeignKey(d => d.IdenRelacionado)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Fact_RelacionCausacion_Fact_NotaCausacion");

                entity.HasOne(d => d.Document)
                    .WithMany(p => p.FactRelacionCausacionDocuments)
                    .HasForeignKey(d => new { d.FuenteFa, d.DocumentoFa })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Fact_RelacionCausacion_DOCUMENT1");

                entity.HasOne(d => d.DocumentNavigation)
                    .WithMany(p => p.FactRelacionCausacionDocumentNavigations)
                    .HasForeignKey(d => new { d.FuenteRc, d.DocumentoRc })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Fact_RelacionCausacion_DOCUMENT");
            });

            modelBuilder.Entity<Factbody>(entity =>
            {
                entity.HasKey(e => new { e.ConceFbo, e.FuenteFbo, e.DocumFbo, e.ConsecuFbo })
                    .IsClustered(false);

                entity.ToTable("FACTBODY");

                entity.HasIndex(e => new { e.FuenteFbo, e.DocumFbo }, "IX_FACTBODY_DOCUM_FBO_FUENTE_FBO");

                entity.HasIndex(e => e.Novedad, "IX_Factbody_Novedad");

                entity.Property(e => e.ConceFbo)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("CONCE_FBO")
                    .IsFixedLength();

                entity.Property(e => e.FuenteFbo)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("FUENTE_FBO")
                    .IsFixedLength();

                entity.Property(e => e.DocumFbo)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("DOCUM_FBO")
                    .IsFixedLength();

                entity.Property(e => e.ConsecuFbo)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("CONSECU_FBO");

                entity.Property(e => e.AuxiliarFbo)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("AUXILIAR_FBO")
                    .IsFixedLength();

                entity.Property(e => e.BaseivaFbo)
                    .HasColumnType("money")
                    .HasColumnName("BASEIVA_FBO");

                entity.Property(e => e.BaseretFbo)
                    .HasColumnType("money")
                    .HasColumnName("BASERET_FBO");

                entity.Property(e => e.Bu)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("BU")
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.CambioIva)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CantiFbo)
                    .HasColumnType("numeric(18, 6)")
                    .HasColumnName("CANTI_FBO");

                entity.Property(e => e.CcostoFbo)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("CCOSTO_FBO")
                    .IsFixedLength();

                entity.Property(e => e.CliprvFbo)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("CLIPRV_FBO");

                entity.Property(e => e.CodigoCxC)
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.CodigoPropiedad1Fbo)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("CodigoPropiedad1_FBO");

                entity.Property(e => e.CodigoPropiedad2Fbo)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("CodigoPropiedad2_FBO");

                entity.Property(e => e.CodigoPropiedad3Fbo)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("CodigoPropiedad3_FBO");

                entity.Property(e => e.CodigoPropiedad4Fbo)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("CodigoPropiedad4_FBO");

                entity.Property(e => e.CodigoPropiedad5Fbo)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("CodigoPropiedad5_FBO");

                entity.Property(e => e.CodpresuFbo)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("CODPRESU_FBO")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ConceRelacionado)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.CuentaAjuste)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')")
                    .IsFixedLength();

                entity.Property(e => e.DbcrFbo)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("DBCR_FBO")
                    .IsFixedLength();

                entity.Property(e => e.DctoFbo)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("DCTO_FBO");

                entity.Property(e => e.DeslargaFbo)
                    .HasMaxLength(128)
                    .IsUnicode(false)
                    .HasColumnName("DESLARGA_FBO");

                entity.Property(e => e.ItemFbo)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("ITEM_FBO")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Mandato)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.MonedaFbo)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("MONEDA_FBO")
                    .IsFixedLength();

                entity.Property(e => e.Novedad)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("NOVEDAD");

                entity.Property(e => e.PordesFbo)
                    .HasColumnType("money")
                    .HasColumnName("PORDES_FBO");

                entity.Property(e => e.PorivaFbo)
                    .HasColumnType("numeric(18, 6)")
                    .HasColumnName("PORIVA_FBO");

                entity.Property(e => e.PorretFbo)
                    .HasColumnType("money")
                    .HasColumnName("PORRET_FBO");

                entity.Property(e => e.RefeFbo)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("REFE_FBO");

                entity.Property(e => e.ReservapresuFbo)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("RESERVAPRESU_FBO");

                entity.Property(e => e.SubtotalFbo)
                    .HasColumnType("numeric(18, 2)")
                    .HasColumnName("SUBTOTAL_FBO")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.TdFbo)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("TD_FBO")
                    .IsFixedLength();

                entity.Property(e => e.Tercero)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Unidad1Fbo)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("UNIDAD1_FBO")
                    .HasDefaultValueSql("('')")
                    .IsFixedLength();

                entity.Property(e => e.Unidad2Fbo)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("UNIDAD2_FBO")
                    .HasDefaultValueSql("('')")
                    .IsFixedLength();

                entity.Property(e => e.Unidad3Fbo)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("UNIDAD3_FBO")
                    .HasDefaultValueSql("('')")
                    .IsFixedLength();

                entity.Property(e => e.ValorAjuste).HasColumnType("money");

                entity.Property(e => e.VctoFbo)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("VCTO_FBO")
                    .IsFixedLength();

                entity.Property(e => e.Vendedor)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')")
                    .IsFixedLength();

                entity.Property(e => e.VersionDeLaFila)
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.VlrBaseivaOrig)
                    .HasColumnType("money")
                    .HasColumnName("VLR_BASEIVA_ORIG");

                entity.Property(e => e.VlrIvaOrig)
                    .HasColumnType("money")
                    .HasColumnName("VLR_IVA_ORIG");

                entity.Property(e => e.VrtotFbo)
                    .HasColumnType("money")
                    .HasColumnName("VRTOT_FBO");

                entity.Property(e => e.VrtotdesFbo)
                    .HasColumnType("numeric(18, 2)")
                    .HasColumnName("VRTOTDES_FBO")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.VrtotivaFbo)
                    .HasColumnType("numeric(18, 2)")
                    .HasColumnName("VRTOTIVA_FBO")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.VruniFbo)
                    .HasColumnType("money")
                    .HasColumnName("VRUNI_FBO");

                entity.Property(e => e.Vrunidad1Fbo)
                    .HasColumnType("numeric(18, 4)")
                    .HasColumnName("VRUNIDAD1_FBO")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Vrunidad2Fbo)
                    .HasColumnType("numeric(18, 4)")
                    .HasColumnName("VRUNIDAD2_FBO")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Vrunidad3Fbo)
                    .HasColumnType("numeric(18, 4)")
                    .HasColumnName("VRUNIDAD3_FBO")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.VrunimonedaFbo)
                    .HasColumnType("numeric(18, 4)")
                    .HasColumnName("VRUNIMONEDA_FBO")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Zona)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')")
                    .IsFixedLength();

                entity.HasOne(d => d.BuNavigation)
                    .WithMany(p => p.Factbodies)
                    .HasForeignKey(d => d.Bu)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_FACTBODY_BU");

                entity.HasOne(d => d.ConceFboNavigation)
                    .WithMany(p => p.Factbodies)
                    .HasForeignKey(d => d.ConceFbo)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_FACTBODY_FACTCONC");

                entity.HasOne(d => d.FuenteFboNavigation)
                    .WithMany(p => p.Factbodies)
                    .HasForeignKey(d => d.FuenteFbo)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_FACTBODY_FUENTES");

                entity.HasOne(d => d.MandatoNavigation)
                    .WithMany(p => p.Factbodies)
                    .HasPrincipalKey(p => p.Codigo)
                    .HasForeignKey(d => d.Mandato)
                    .HasConstraintName("FK_FactBody_MandatoItem");

                entity.HasOne(d => d.Facthead)
                    .WithMany(p => p.Factbodies)
                    .HasForeignKey(d => new { d.FuenteFbo, d.DocumFbo })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_FACTBODY_FACTHEAD");
            });

            modelBuilder.Entity<FactbodyRev>(entity =>
            {
                entity.HasKey(e => new { e.ConceFbo, e.FuenteFbo, e.DocumFbo, e.ConsecuFbo })
                    .IsClustered(false);

                entity.ToTable("FACTBODY_REV");

                entity.HasIndex(e => new { e.FuenteFbo, e.DocumFbo }, "IX_FACTBODY_REV_DOCUM_FBO_FUENTE_FBO");

                entity.Property(e => e.ConceFbo)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("CONCE_FBO")
                    .IsFixedLength();

                entity.Property(e => e.FuenteFbo)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("FUENTE_FBO")
                    .IsFixedLength();

                entity.Property(e => e.DocumFbo)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("DOCUM_FBO")
                    .IsFixedLength();

                entity.Property(e => e.ConsecuFbo).HasColumnName("CONSECU_FBO");

                entity.Property(e => e.AuxiliarFbo)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("AUXILIAR_FBO")
                    .IsFixedLength();

                entity.Property(e => e.BaseivaFbo)
                    .HasColumnType("money")
                    .HasColumnName("BASEIVA_FBO");

                entity.Property(e => e.BaseretFbo)
                    .HasColumnType("money")
                    .HasColumnName("BASERET_FBO");

                entity.Property(e => e.Bu)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("BU")
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.CambioIva)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CantiFbo)
                    .HasColumnType("numeric(18, 6)")
                    .HasColumnName("CANTI_FBO");

                entity.Property(e => e.CcostoFbo)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("CCOSTO_FBO")
                    .IsFixedLength();

                entity.Property(e => e.CliprvFbo)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("CLIPRV_FBO");

                entity.Property(e => e.CodigoCxC)
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.CodigoPropiedad1Fbo)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("CodigoPropiedad1_FBO");

                entity.Property(e => e.CodigoPropiedad2Fbo)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("CodigoPropiedad2_FBO");

                entity.Property(e => e.CodigoPropiedad3Fbo)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("CodigoPropiedad3_FBO");

                entity.Property(e => e.CodigoPropiedad4Fbo)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("CodigoPropiedad4_FBO");

                entity.Property(e => e.CodigoPropiedad5Fbo)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("CodigoPropiedad5_FBO");

                entity.Property(e => e.CodpresuFbo)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("CODPRESU_FBO")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ConceRelacionado)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.CuentaAjuste)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')")
                    .IsFixedLength();

                entity.Property(e => e.DbcrFbo)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("DBCR_FBO")
                    .IsFixedLength();

                entity.Property(e => e.DctoFbo)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("DCTO_FBO");

                entity.Property(e => e.DeslargaFbo)
                    .HasMaxLength(128)
                    .IsUnicode(false)
                    .HasColumnName("DESLARGA_FBO");

                entity.Property(e => e.IdenFactbodyRev)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_factbody_rev");

                entity.Property(e => e.ItemFbo)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("ITEM_FBO")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Mandato)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.MonedaFbo)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("MONEDA_FBO")
                    .IsFixedLength();

                entity.Property(e => e.Novedad)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("NOVEDAD");

                entity.Property(e => e.PordesFbo)
                    .HasColumnType("money")
                    .HasColumnName("PORDES_FBO");

                entity.Property(e => e.PorivaFbo)
                    .HasColumnType("numeric(18, 6)")
                    .HasColumnName("PORIVA_FBO");

                entity.Property(e => e.PorretFbo)
                    .HasColumnType("money")
                    .HasColumnName("PORRET_FBO");

                entity.Property(e => e.RefeFbo)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("REFE_FBO");

                entity.Property(e => e.ReservapresuFbo)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("RESERVAPRESU_FBO");

                entity.Property(e => e.SubtotalFbo)
                    .HasColumnType("numeric(18, 2)")
                    .HasColumnName("SUBTOTAL_FBO")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.TdFbo)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("TD_FBO")
                    .IsFixedLength();

                entity.Property(e => e.Tercero)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Unidad1Fbo)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("UNIDAD1_FBO")
                    .HasDefaultValueSql("('')")
                    .IsFixedLength();

                entity.Property(e => e.Unidad2Fbo)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("UNIDAD2_FBO")
                    .HasDefaultValueSql("('')")
                    .IsFixedLength();

                entity.Property(e => e.Unidad3Fbo)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("UNIDAD3_FBO")
                    .HasDefaultValueSql("('')")
                    .IsFixedLength();

                entity.Property(e => e.ValorAjuste).HasColumnType("money");

                entity.Property(e => e.VctoFbo)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("VCTO_FBO")
                    .IsFixedLength();

                entity.Property(e => e.Vendedor)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')")
                    .IsFixedLength();

                entity.Property(e => e.VlrBaseivaOrig)
                    .HasColumnType("money")
                    .HasColumnName("VLR_BASEIVA_ORIG");

                entity.Property(e => e.VlrIvaOrig)
                    .HasColumnType("money")
                    .HasColumnName("VLR_IVA_ORIG");

                entity.Property(e => e.VrtotFbo)
                    .HasColumnType("money")
                    .HasColumnName("VRTOT_FBO");

                entity.Property(e => e.VrtotdesFbo)
                    .HasColumnType("numeric(18, 2)")
                    .HasColumnName("VRTOTDES_FBO")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.VrtotivaFbo)
                    .HasColumnType("numeric(18, 2)")
                    .HasColumnName("VRTOTIVA_FBO")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.VruniFbo)
                    .HasColumnType("money")
                    .HasColumnName("VRUNI_FBO");

                entity.Property(e => e.Vrunidad1Fbo)
                    .HasColumnType("numeric(18, 4)")
                    .HasColumnName("VRUNIDAD1_FBO")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Vrunidad2Fbo)
                    .HasColumnType("numeric(18, 4)")
                    .HasColumnName("VRUNIDAD2_FBO")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Vrunidad3Fbo)
                    .HasColumnType("numeric(18, 4)")
                    .HasColumnName("VRUNIDAD3_FBO")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.VrunimonedaFbo)
                    .HasColumnType("numeric(18, 4)")
                    .HasColumnName("VRUNIMONEDA_FBO")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Zona)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')")
                    .IsFixedLength();

                entity.HasOne(d => d.BuNavigation)
                    .WithMany(p => p.FactbodyRevs)
                    .HasForeignKey(d => d.Bu)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_FACTBODY_REV_BU");

                entity.HasOne(d => d.ConceFboNavigation)
                    .WithMany(p => p.FactbodyRevs)
                    .HasForeignKey(d => d.ConceFbo)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_FACTBODY_REV_FACTCONC");

                entity.HasOne(d => d.FuenteFboNavigation)
                    .WithMany(p => p.FactbodyRevs)
                    .HasForeignKey(d => d.FuenteFbo)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_FACTBODY_REV_FUENTES");

                entity.HasOne(d => d.FactheadRev)
                    .WithMany(p => p.FactbodyRevs)
                    .HasForeignKey(d => new { d.FuenteFbo, d.DocumFbo })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_FACTBODY_REV_FACTHEAD_REV");
            });

            modelBuilder.Entity<FactbodyTemp>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("FACTBODY_TEMP");

                entity.Property(e => e.Automatico).HasDefaultValueSql("((0))");

                entity.Property(e => e.AuxBto)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Bu)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("BU")
                    .HasDefaultValueSql("('Local')");

                entity.Property(e => e.Cantidad).HasColumnType("numeric(18, 6)");

                entity.Property(e => e.Ccosto)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("CCosto")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Cliprv)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("CLIPRV")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Concepto)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Descripcion)
                    .HasMaxLength(128)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Doc)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("DOC")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Documento)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Fuente)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.Id)
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Item)
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.PorDcto).HasColumnType("numeric(18, 6)");

                entity.Property(e => e.PorIva)
                    .HasColumnType("numeric(18, 6)")
                    .HasColumnName("PorIVA");

                entity.Property(e => e.Ref)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("REF")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SubTotal).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.Tdcto)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("TDCTO")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Total).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.TotalDcto).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.TotalIva)
                    .HasColumnType("numeric(18, 2)")
                    .HasColumnName("TotalIVA");

                entity.Property(e => e.Unidad1)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Unidad2)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Unidad3)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Vcto)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("VCTO")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.VrUnidad).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.VrUnidad1)
                    .HasColumnType("numeric(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.VrUnidad2)
                    .HasColumnType("numeric(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.VrUnidad3)
                    .HasColumnType("numeric(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.VrUnidadMoneda).HasColumnType("numeric(18, 2)");
            });

            modelBuilder.Entity<Factciclo>(entity =>
            {
                entity.HasKey(e => e.Codigo)
                    .HasName("PK_FACTCICLOS")
                    .IsClustered(false);

                entity.ToTable("FACTCiclos");

                entity.HasIndex(e => new { e.FechaInicial, e.FechaFinal, e.Finaliza }, "IX_FACTCICLOS_FECHAFINAL_FECHAINICIAL_FINALIZA");

                entity.HasIndex(e => e.FechaInicial, "IX_FACTCICLOS_FECHAINICIAL");

                entity.HasIndex(e => e.Iden, "IX_FACTCICLOS_IDEN")
                    .IsClustered();

                entity.Property(e => e.Codigo)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Bu)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("BU");

                entity.Property(e => e.Descripcion)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.FechaFinal).HasColumnType("smalldatetime");

                entity.Property(e => e.FechaInicial).HasColumnType("smalldatetime");

                entity.Property(e => e.Iden)
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("IDEN");

                entity.Property(e => e.Nombre)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Tipo)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('VE')");
            });

            modelBuilder.Entity<FactciclosFacturado>(entity =>
            {
                entity.HasKey(e => new { e.Ciclo, e.UltimaFechaFact, e.FacturacionAuto })
                    .IsClustered(false);

                entity.ToTable("FACTCiclosFacturados");

                entity.HasIndex(e => e.Ciclo, "IX_FACTCICLOSFACTURADOS_CICLO");

                entity.HasIndex(e => e.Iden, "IX_FACTCICLOSFACTURADOS_IDEN")
                    .IsClustered();

                entity.Property(e => e.Ciclo)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.UltimaFechaFact).HasColumnType("smalldatetime");

                entity.Property(e => e.FacturacionAuto).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.Bu)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("BU");

                entity.Property(e => e.Iden)
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("IDEN");

                entity.HasOne(d => d.CicloNavigation)
                    .WithMany(p => p.FactciclosFacturados)
                    .HasForeignKey(d => d.Ciclo)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_FACTCiclosFacturados_FACTCiclos");
            });

            modelBuilder.Entity<FactciclosFacturadosBu>(entity =>
            {
                entity.HasKey(e => new { e.Ciclo, e.Bu, e.UltimaFechaFact })
                    .HasName("PK_FACTCICLOSFACTURADOSBU");

                entity.ToTable("FACTCiclosFacturadosBU");

                entity.Property(e => e.Ciclo)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Bu)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("BU");

                entity.Property(e => e.UltimaFechaFact).HasColumnType("smalldatetime");

                entity.Property(e => e.FacturacionAuto).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.Iden)
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("IDEN");
            });

            modelBuilder.Entity<FactciclosMesDium>(entity =>
            {
                entity.HasKey(e => new { e.Ciclo, e.Mes, e.Dia });

                entity.ToTable("FACTCiclosMesDia");

                entity.HasIndex(e => new { e.Ciclo, e.Mes }, "IX_FACTCICLOSMESDIA_CICLO_MES");

                entity.Property(e => e.Ciclo)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.IdenFactciclosmesdia)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_factciclosmesdia");

                entity.HasOne(d => d.CicloNavigation)
                    .WithMany(p => p.FactciclosMesDia)
                    .HasForeignKey(d => d.Ciclo)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_FACTCiclosMesDia_FACTCiclos");
            });

            modelBuilder.Entity<Factclimod>(entity =>
            {
                entity.HasKey(e => new { e.Idcliente, e.Iddocum, e.Idmodelo, e.Bu })
                    .IsClustered(false);

                entity.ToTable("FACTCLIMOD");

                entity.HasIndex(e => e.Idmodelo, "IX_FactCliMod_IDMODELO");

                entity.Property(e => e.Idcliente)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("IDCLIENTE");

                entity.Property(e => e.Iddocum)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("IDDOCUM")
                    .IsFixedLength();

                entity.Property(e => e.Idmodelo)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("IDMODELO")
                    .IsFixedLength();

                entity.Property(e => e.Bu)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("BU")
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.Auxiliar)
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.Centrocosto)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("CENTROCOSTO");

                entity.Property(e => e.Ciclo)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("CICLO");

                entity.Property(e => e.CodigoPropiedad1)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.CodigoPropiedad2)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.CodigoPropiedad3)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.CodigoPropiedad4)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.CodigoPropiedad5)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.ConfAuxiliar).HasColumnName("Conf_Auxiliar");

                entity.Property(e => e.CxC)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Fechafacturacion)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("FECHAFACTURACION")
                    .HasDefaultValueSql("('FA')")
                    .IsFixedLength();

                entity.Property(e => e.Fechaini)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("FECHAINI")
                    .IsFixedLength();

                entity.Property(e => e.Fechfact)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("FECHFACT")
                    .HasDefaultValueSql("(space((10)))")
                    .IsFixedLength();

                entity.Property(e => e.GenerarNcuotas).HasColumnName("GenerarNCuotas");

                entity.Property(e => e.Iddocumento)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("IDDOCUMENTO")
                    .HasDefaultValueSql("(space((10)))")
                    .IsFixedLength();

                entity.Property(e => e.IdenFactclimod)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_factclimod");

                entity.Property(e => e.Idfuente)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("IDFUENTE")
                    .HasDefaultValueSql("(space((2)))")
                    .IsFixedLength();

                entity.Property(e => e.Idvende)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("IDVENDE");

                entity.Property(e => e.Idzona)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("IDZONA");

                entity.Property(e => e.Item)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Numeroperiodos)
                    .HasColumnName("NUMEROPERIODOS")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Periodicidad).HasColumnName("PERIODICIDAD");

                entity.Property(e => e.Periodocontrol)
                    .HasColumnName("PERIODOCONTROL")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Status)
                    .HasColumnName("STATUS")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Ultimovalorfac)
                    .HasColumnType("money")
                    .HasColumnName("ULTIMOVALORFAC")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.VencimientoDiaHabil)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.VencimientoModelo)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.HasOne(d => d.BuNavigation)
                    .WithMany(p => p.Factclimods)
                    .HasForeignKey(d => d.Bu)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_FACTCLIMOD_BU");
            });

            modelBuilder.Entity<Factconc>(entity =>
            {
                entity.HasKey(e => e.ConcFco);

                entity.ToTable("FACTCONC");

                entity.Property(e => e.ConcFco)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("CONC_FCO")
                    .IsFixedLength();

                entity.Property(e => e.AuxiabtoFco)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("AUXIABTO_FCO")
                    .IsFixedLength();

                entity.Property(e => e.AuxiliarIngreso)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')")
                    .IsFixedLength();

                entity.Property(e => e.BienServicio)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.CambiarIva)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("CambiarIVA")
                    .HasDefaultValueSql("('N')")
                    .IsFixedLength();

                entity.Property(e => e.CencoIngreso)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')")
                    .IsFixedLength();

                entity.Property(e => e.CencostoFco)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("CENCOSTO_FCO")
                    .IsFixedLength();

                entity.Property(e => e.CodiFco)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("CODI_FCO")
                    .IsFixedLength();

                entity.Property(e => e.CodigoAlterno)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.CodigoCxC)
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.CodigoPropiedad1)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.CodigoPropiedad2)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.CodigoPropiedad3)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.CodigoPropiedad4)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.CodigoPropiedad5)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.CodigodescFco)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("CODIGODESC_FCO")
                    .IsFixedLength();

                entity.Property(e => e.CodigoivaFco)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("CODIGOIVA_FCO")
                    .IsFixedLength();

                entity.Property(e => e.CodigoreteFco)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("CODIGORETE_FCO")
                    .IsFixedLength();

                entity.Property(e => e.ConfAuxiliar).HasColumnName("Conf_Auxiliar");

                entity.Property(e => e.CostoFijo).HasColumnType("numeric(18, 6)");

                entity.Property(e => e.CtaGastoProrrateo)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CtaIngDevolucion)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CtaIngreso)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')")
                    .IsFixedLength();

                entity.Property(e => e.CtaIvadevolucion)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("CtaIVADevolucion")
                    .IsFixedLength();

                entity.Property(e => e.CtaIvaprorrateo)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("CtaIVAProrrateo")
                    .IsFixedLength();

                entity.Property(e => e.CuentaGastoProvision)
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.DbcrFco)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("DBCR_FCO")
                    .IsFixedLength();

                entity.Property(e => e.DepConcepto)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')")
                    .IsFixedLength();

                entity.Property(e => e.DescFco)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("DESC_FCO")
                    .IsFixedLength();

                entity.Property(e => e.DetalleFco)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("DETALLE_FCO");

                entity.Property(e => e.FormulaCantidadFco)
                    .HasMaxLength(8000)
                    .IsUnicode(false)
                    .HasColumnName("FormulaCantidad_FCO")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.FormulaFco)
                    .HasMaxLength(8000)
                    .IsUnicode(false)
                    .HasColumnName("FORMULA_FCO");

                entity.Property(e => e.GeneraCr).HasColumnName("GeneraCR");

                entity.Property(e => e.IdCategoria)
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.IdenFactconc)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_factconc");

                entity.Property(e => e.IndidescFco).HasColumnName("INDIDESC_FCO");

                entity.Property(e => e.IndiivaFco).HasColumnName("INDIIVA_FCO");

                entity.Property(e => e.IndireteFco).HasColumnName("INDIRETE_FCO");

                entity.Property(e => e.Item)
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.LeyendaValera)
                    .HasMaxLength(188)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.Mandato)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.MoneFco)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("MONE_FCO")
                    .IsFixedLength();

                entity.Property(e => e.Ncdconcepto).HasColumnName("NCDconcepto");

                entity.Property(e => e.NivConcepto).HasDefaultValueSql("((1))");

                entity.Property(e => e.NotaCuenta)
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.NotaIva)
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.PorcedescFco)
                    .HasColumnType("numeric(18, 2)")
                    .HasColumnName("PORCEDESC_FCO")
                    .HasDefaultValueSql("((0.00))");

                entity.Property(e => e.PorceivaFco)
                    .HasColumnType("numeric(18, 6)")
                    .HasColumnName("PORCEIVA_FCO")
                    .HasDefaultValueSql("((0.00))");

                entity.Property(e => e.PorcentajeComision).HasColumnType("numeric(18, 6)");

                entity.Property(e => e.PorcentajeCosto).HasColumnType("numeric(18, 6)");

                entity.Property(e => e.PorcereteFco)
                    .HasColumnType("numeric(18, 2)")
                    .HasColumnName("PORCERETE_FCO")
                    .HasDefaultValueSql("((0.00))");

                entity.Property(e => e.ReservaPresupuesto)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.RubroPresupuesto)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.TipoConce)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('D')")
                    .IsFixedLength();

                entity.Property(e => e.TipoFco).HasColumnName("TIPO_FCO");

                entity.Property(e => e.TipoTotalizador)
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.VersionDeLaFila)
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.VfijFco)
                    .HasColumnType("money")
                    .HasColumnName("VFIJ_FCO");

                entity.Property(e => e.VuniFco)
                    .HasColumnType("money")
                    .HasColumnName("VUNI_FCO");

                entity.HasOne(d => d.CencostoFcoNavigation)
                    .WithMany(p => p.Factconcs)
                    .HasForeignKey(d => d.CencostoFco)
                    .HasConstraintName("FK_FACTCONC_MAECCO");

                entity.HasOne(d => d.CodiFcoNavigation)
                    .WithMany(p => p.Factconcs)
                    .HasForeignKey(d => d.CodiFco)
                    .HasConstraintName("FK_FACTCONC_MAECONT");

                entity.HasOne(d => d.IdCategoriaNavigation)
                    .WithMany(p => p.Factconcs)
                    .HasForeignKey(d => d.IdCategoria)
                    .HasConstraintName("FK_FACTCONC_MaeCategorias");

                entity.HasOne(d => d.MoneFcoNavigation)
                    .WithMany(p => p.Factconcs)
                    .HasForeignKey(d => d.MoneFco)
                    .HasConstraintName("FK_FACTCONC_MONEDAS");
            });

            modelBuilder.Entity<FactconcUbicacione>(entity =>
            {
                entity.HasKey(e => new { e.Concepto, e.CodigoUbicacion, e.CodigoUbicacionUsuario });

                entity.ToTable("FACTCONC_UBICACIONES");

                entity.Property(e => e.Concepto)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CodigoUbicacion)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.CodigoUbicacionUsuario)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.IdenFactconcUbicaciones)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_factconc_ubicaciones");

                entity.HasOne(d => d.CodigoUbicacionNavigation)
                    .WithMany(p => p.FactconcUbicacioneCodigoUbicacionNavigations)
                    .HasForeignKey(d => d.CodigoUbicacion)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_FACTCONC_UBICACIONES_UBICACIONGEOGRAFICA");

                entity.HasOne(d => d.CodigoUbicacionUsuarioNavigation)
                    .WithMany(p => p.FactconcUbicacioneCodigoUbicacionUsuarioNavigations)
                    .HasForeignKey(d => d.CodigoUbicacionUsuario)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_FACTCONC_UBICACIONES_UBICACIONGEOGRAFICA1");

                entity.HasOne(d => d.ConceptoNavigation)
                    .WithMany(p => p.FactconcUbicaciones)
                    .HasForeignKey(d => d.Concepto)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_FACTCONC_UBICACIONES_FACTCONC");
            });

            modelBuilder.Entity<FactcuotaRev>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("FACTCUOTA_REV");

                entity.Property(e => e.Bu)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("BU");

                entity.Property(e => e.CodigoCxC)
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.CuotasCuo).HasColumnName("CUOTAS_CUO");

                entity.Property(e => e.DocumCuo)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("DOCUM_CUO")
                    .IsFixedLength();

                entity.Property(e => e.FuenteCuo)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("FUENTE_CUO")
                    .IsFixedLength();

                entity.Property(e => e.IdenFactcuotaRev)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_factcuota_rev");

                entity.Property(e => e.ValorCuo)
                    .HasColumnType("money")
                    .HasColumnName("VALOR_CUO");

                entity.Property(e => e.ValorMonedaCuo)
                    .HasColumnType("money")
                    .HasColumnName("ValorMoneda_Cuo");

                entity.Property(e => e.VctoiniCuo)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("VCTOINI_CUO")
                    .IsFixedLength();
            });

            modelBuilder.Entity<Factcuotum>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("FACTCUOTA");

                entity.HasIndex(e => new { e.DocumCuo, e.FuenteCuo }, "IX_FACTCUOTA_DOCUM_CUO_FUENTE_CUO");

                entity.Property(e => e.Bu)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("BU");

                entity.Property(e => e.CodigoCxC)
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.CuotasCuo).HasColumnName("CUOTAS_CUO");

                entity.Property(e => e.DocumCuo)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("DOCUM_CUO")
                    .IsFixedLength();

                entity.Property(e => e.FuenteCuo)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("FUENTE_CUO")
                    .IsFixedLength();

                entity.Property(e => e.IdenFactcuota)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_factcuota");

                entity.Property(e => e.ValorCuo)
                    .HasColumnType("money")
                    .HasColumnName("VALOR_CUO");

                entity.Property(e => e.ValorMonedaCuo)
                    .HasColumnType("money")
                    .HasColumnName("ValorMoneda_Cuo");

                entity.Property(e => e.VctoiniCuo)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("VCTOINI_CUO")
                    .IsFixedLength();

                entity.Property(e => e.VersionDeLaFila)
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<Factcxcanticipo>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("FACTCXCANTICIPOS");

                entity.Property(e => e.CuentaCxc)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("CuentaCXC");

                entity.Property(e => e.Documento)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Estado)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.Fuente)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.Id)
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.ValorAnticipo).HasColumnType("numeric(18, 2)");
            });

            modelBuilder.Entity<FactdocBody>(entity =>
            {
                entity.HasKey(e => new { e.ConceFbo, e.FuenteFbo, e.DocumentoFbo, e.ConsecuFbo });

                entity.ToTable("FACTDOC_BODY");

                entity.Property(e => e.ConceFbo)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("CONCE_FBO")
                    .IsFixedLength();

                entity.Property(e => e.FuenteFbo)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("FUENTE_FBO")
                    .IsFixedLength();

                entity.Property(e => e.DocumentoFbo)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("DOCUMENTO_FBO")
                    .IsFixedLength();

                entity.Property(e => e.ConsecuFbo)
                    .HasColumnType("numeric(10, 0)")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("CONSECU_FBO");

                entity.Property(e => e.AuxiliarFbo)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("AUXILIAR_FBO")
                    .IsFixedLength();

                entity.Property(e => e.BaseivaFbo)
                    .HasColumnType("money")
                    .HasColumnName("BASEIVA_FBO");

                entity.Property(e => e.BaseretFbo)
                    .HasColumnType("money")
                    .HasColumnName("BASERET_FBO");

                entity.Property(e => e.Bu)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("BU")
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.CambioIva)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CantiFbo)
                    .HasColumnType("numeric(18, 6)")
                    .HasColumnName("CANTI_FBO");

                entity.Property(e => e.CcostoFbo)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("CCOSTO_FBO")
                    .IsFixedLength();

                entity.Property(e => e.CliprvFbo)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("CLIPRV_FBO");

                entity.Property(e => e.Codicta)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("CODICTA")
                    .HasDefaultValueSql("('')")
                    .IsFixedLength();

                entity.Property(e => e.CodigoCxC)
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.CodigoPropiedad1Fbo)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("CodigoPropiedad1_FBO");

                entity.Property(e => e.CodigoPropiedad2Fbo)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("CodigoPropiedad2_FBO");

                entity.Property(e => e.CodigoPropiedad3Fbo)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("CodigoPropiedad3_FBO");

                entity.Property(e => e.CodigoPropiedad4Fbo)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("CodigoPropiedad4_FBO");

                entity.Property(e => e.CodigoPropiedad5Fbo)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("CodigoPropiedad5_FBO");

                entity.Property(e => e.CodpresuFbo)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("CODPRESU_FBO")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.CuentaAjuste)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')")
                    .IsFixedLength();

                entity.Property(e => e.DbcrFbo)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("DBCR_FBO")
                    .IsFixedLength();

                entity.Property(e => e.DctoFbo)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("DCTO_FBO");

                entity.Property(e => e.DeslargaFbo)
                    .HasMaxLength(128)
                    .IsUnicode(false)
                    .HasColumnName("DESLARGA_FBO");

                entity.Property(e => e.DocumentoExportFbo)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("DOCUMENTO_EXPORT_FBO")
                    .HasDefaultValueSql("('')")
                    .IsFixedLength();

                entity.Property(e => e.FuenteExportFbo)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("FUENTE_EXPORT_FBO")
                    .HasDefaultValueSql("('')")
                    .IsFixedLength();

                entity.Property(e => e.IdDatosAdicionalesReembolsoGastos).HasColumnName("Id_DatosAdicionales_ReembolsoGastos");

                entity.Property(e => e.IdenRelacionado)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("IDEN_RELACIONADO");

                entity.Property(e => e.ItemFbo)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("ITEM_FBO")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Mandato)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.MonedaFbo)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("MONEDA_FBO")
                    .IsFixedLength();

                entity.Property(e => e.PordesFbo)
                    .HasColumnType("money")
                    .HasColumnName("PORDES_FBO");

                entity.Property(e => e.PorivaFbo)
                    .HasColumnType("numeric(18, 6)")
                    .HasColumnName("PORIVA_FBO");

                entity.Property(e => e.PorretFbo)
                    .HasColumnType("money")
                    .HasColumnName("PORRET_FBO");

                entity.Property(e => e.RefeFbo)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("REFE_FBO");

                entity.Property(e => e.ReservapresuFbo)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("RESERVAPRESU_FBO")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SatisfechoCantFbo)
                    .HasColumnType("numeric(18, 4)")
                    .HasColumnName("SATISFECHO_CANT_FBO");

                entity.Property(e => e.SatisfechoFbo)
                    .HasColumnType("money")
                    .HasColumnName("SATISFECHO_FBO");

                entity.Property(e => e.SubtotalFbo)
                    .HasColumnType("money")
                    .HasColumnName("SUBTOTAL_FBO");

                entity.Property(e => e.TdFbo)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("TD_FBO")
                    .IsFixedLength();

                entity.Property(e => e.TerceroFbo)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Tercero_Fbo");

                entity.Property(e => e.TipodctoFbo)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("TIPODCTO_FBO")
                    .IsFixedLength();

                entity.Property(e => e.Unidad1Fbo)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("UNIDAD1_FBO")
                    .HasDefaultValueSql("('')")
                    .IsFixedLength();

                entity.Property(e => e.Unidad2Fbo)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("UNIDAD2_FBO")
                    .HasDefaultValueSql("('')")
                    .IsFixedLength();

                entity.Property(e => e.Unidad3Fbo)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("UNIDAD3_FBO")
                    .HasDefaultValueSql("('')")
                    .IsFixedLength();

                entity.Property(e => e.ValorAjuste).HasColumnType("money");

                entity.Property(e => e.VctoFbo)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("VCTO_FBO")
                    .IsFixedLength();

                entity.Property(e => e.Vendedor)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')")
                    .IsFixedLength();

                entity.Property(e => e.VersionDeLaFila)
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.VlrBaseivaOrig)
                    .HasColumnType("money")
                    .HasColumnName("VLR_BASEIVA_ORIG");

                entity.Property(e => e.VlrIvaOrig)
                    .HasColumnType("money")
                    .HasColumnName("VLR_IVA_ORIG");

                entity.Property(e => e.VrtotFbo)
                    .HasColumnType("money")
                    .HasColumnName("VRTOT_FBO");

                entity.Property(e => e.VrtotdesFbo)
                    .HasColumnType("money")
                    .HasColumnName("VRTOTDES_FBO");

                entity.Property(e => e.VrtotivaFbo)
                    .HasColumnType("money")
                    .HasColumnName("VRTOTIVA_FBO");

                entity.Property(e => e.VruniFbo)
                    .HasColumnType("money")
                    .HasColumnName("VRUNI_FBO");

                entity.Property(e => e.Vrunidad1Fbo)
                    .HasColumnType("money")
                    .HasColumnName("VRUNIDAD1_FBO");

                entity.Property(e => e.Vrunidad2Fbo)
                    .HasColumnType("money")
                    .HasColumnName("VRUNIDAD2_FBO");

                entity.Property(e => e.Vrunidad3Fbo)
                    .HasColumnType("money")
                    .HasColumnName("VRUNIDAD3_FBO");

                entity.Property(e => e.VrunimonedaFbo)
                    .HasColumnType("numeric(18, 2)")
                    .HasColumnName("VRUNIMONEDA_FBO")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Zona)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')")
                    .IsFixedLength();

                entity.HasOne(d => d.BuNavigation)
                    .WithMany(p => p.FactdocBodies)
                    .HasForeignKey(d => d.Bu)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_FACTDOC_BODY_BU");

                entity.HasOne(d => d.ConceFboNavigation)
                    .WithMany(p => p.FactdocBodies)
                    .HasForeignKey(d => d.ConceFbo)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_FACTDOC_BODY_FACTCONC");

                entity.HasOne(d => d.FuenteFboNavigation)
                    .WithMany(p => p.FactdocBodies)
                    .HasForeignKey(d => d.FuenteFbo)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_FACTDOC_BODY_FUENTES");

                entity.HasOne(d => d.IdDatosAdicionalesReembolsoGastosNavigation)
                    .WithMany(p => p.FactdocBodies)
                    .HasForeignKey(d => d.IdDatosAdicionalesReembolsoGastos)
                    .HasConstraintName("FK_FACTDOC_BODY_Id_DatosAdicionales_ReembolsoGastos");

                entity.HasOne(d => d.MandatoNavigation)
                    .WithMany(p => p.FactdocBodies)
                    .HasPrincipalKey(p => p.Codigo)
                    .HasForeignKey(d => d.Mandato)
                    .HasConstraintName("FK_FactDoc_Body_MandatoItem");
            });

            modelBuilder.Entity<FactdocCuotum>(entity =>
            {
                entity.HasKey(e => e.Iden);

                entity.ToTable("FACTDOC_CUOTA");

                entity.HasIndex(e => new { e.FuenteCuo, e.DocumentoCuo }, "IX_FACTDOC_CUOTA_DOCUMENTO_CUO_FUENTE_CUO");

                entity.Property(e => e.Iden)
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("IDEN");

                entity.Property(e => e.Bu)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("BU");

                entity.Property(e => e.CodigoCxC)
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.CuotasCuo).HasColumnName("CUOTAS_CUO");

                entity.Property(e => e.DocumentoCuo)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("DOCUMENTO_CUO")
                    .IsFixedLength();

                entity.Property(e => e.DocumentoExportCuo)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("DOCUMENTO_EXPORT_CUO")
                    .HasDefaultValueSql("('')")
                    .IsFixedLength();

                entity.Property(e => e.FuenteCuo)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("FUENTE_CUO")
                    .IsFixedLength();

                entity.Property(e => e.FuenteExportCuo)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("FUENTE_EXPORT_CUO")
                    .HasDefaultValueSql("('')")
                    .IsFixedLength();

                entity.Property(e => e.IdenRelacionado)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("IDEN_RELACIONADO");

                entity.Property(e => e.ValorCuo)
                    .HasColumnType("money")
                    .HasColumnName("VALOR_CUO");

                entity.Property(e => e.ValorMonedaCuo)
                    .HasColumnType("money")
                    .HasColumnName("ValorMoneda_Cuo");

                entity.Property(e => e.VctoiniCuo)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("VCTOINI_CUO")
                    .IsFixedLength();

                entity.Property(e => e.VersionDeLaFila)
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.FuenteCuoNavigation)
                    .WithMany(p => p.FactdocCuota)
                    .HasForeignKey(d => d.FuenteCuo)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_FACTDOC_CUOTA_FUENTES");
            });

            modelBuilder.Entity<FactdocHead>(entity =>
            {
                entity.HasKey(e => new { e.FuenteFhe, e.DocumentoFhe })
                    .IsClustered(false);

                entity.ToTable("FACTDOC_HEAD");

                entity.HasIndex(e => new { e.FuenteFhe, e.DocumentoFhe, e.StatusFhe }, "IX_FACTDOC_HEAD_DOCUMENTO_FHE_FUENTE_FHE_STATUS_FHE");

                entity.HasIndex(e => new { e.TipodctoFhe, e.ProveedorFhe, e.NumefacFhe }, "IX_FACTDOC_HEAD_NUMEFAC_FHE_PROVEEDOR_FHE_TIPODCTO_FHE");

                entity.Property(e => e.FuenteFhe)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("FUENTE_FHE")
                    .IsFixedLength();

                entity.Property(e => e.DocumentoFhe)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("DOCUMENTO_FHE")
                    .IsFixedLength();

                entity.Property(e => e.AprobadoporFhe)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("APROBADOPOR_FHE");

                entity.Property(e => e.AutorizacionFhe)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("AUTORIZACION_FHE")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.BienRete)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Bu)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("BU")
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.CentrocostoFhe)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("CENTROCOSTO_FHE");

                entity.Property(e => e.CicloFhe)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("CICLO_FHE");

                entity.Property(e => e.ClienteFhe)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("CLIENTE_FHE");

                entity.Property(e => e.CodigoPropiedad1Fhe)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("CodigoPropiedad1_FHE");

                entity.Property(e => e.CodigoPropiedad2Fhe)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("CodigoPropiedad2_FHE");

                entity.Property(e => e.CodigoPropiedad3Fhe)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("CodigoPropiedad3_FHE");

                entity.Property(e => e.CodigoPropiedad4Fhe)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("CodigoPropiedad4_FHE");

                entity.Property(e => e.CodigoPropiedad5Fhe)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("CodigoPropiedad5_FHE");

                entity.Property(e => e.ComprobanteImpuestoFhe)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ComprobanteImpuesto_Fhe");

                entity.Property(e => e.ConceptoFhe)
                    .HasMaxLength(512)
                    .IsUnicode(false)
                    .HasColumnName("CONCEPTO_FHE");

                entity.Property(e => e.ConsecutivoControlDocumentario).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.CtacajaFhe)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("CTACAJA_FHE")
                    .IsFixedLength();

                entity.Property(e => e.CuentaFhe)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("CUENTA_FHE")
                    .IsFixedLength();

                entity.Property(e => e.DiasvenFhe).HasColumnName("DIASVEN_FHE");

                entity.Property(e => e.DocumRegPresupFhe)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("DocumRegPresup_FHE")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DocumRelacionadoPresupFhe)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("DocumRelacionadoPresup_FHE")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.FactorFhe)
                    .HasColumnType("numeric(14, 4)")
                    .HasColumnName("FACTOR_FHE");

                entity.Property(e => e.FechaCaducidadFhe)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("FechaCaducidad_Fhe");

                entity.Property(e => e.FechaFhe)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("FECHA_FHE")
                    .IsFixedLength();

                entity.Property(e => e.FechafactFhe)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("FECHAFACT_FHE")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.FormapagoFhe).HasColumnName("FORMAPAGO_FHE");

                entity.Property(e => e.FuenteRegPresuFhe)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("FuenteRegPresu_FHE")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.FuenteRelacionadoPresuFhe)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("FuenteRelacionadoPresu_FHE")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.IddocumFhe)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("IDDOCUM_FHE");

                entity.Property(e => e.IdenAutorizacionCiFhe).HasColumnName("IdenAutorizacionCI_Fhe");

                entity.Property(e => e.IdenFactdocHead)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_factdoc_head");

                entity.Property(e => e.IdmodeloFhe)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("IDMODELO_FHE");

                entity.Property(e => e.ItemFhe)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("Item_FHE");

                entity.Property(e => e.MonedaFhe)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("MONEDA_FHE")
                    .IsFixedLength();

                entity.Property(e => e.MontoFhe)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("MONTO_FHE");

                entity.Property(e => e.NcfFhe)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("NCF_FHE")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.NcfModificadoFhe)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("NCF_Modificado_FHE")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.NovedadFhe)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("NOVEDAD_FHE");

                entity.Property(e => e.NumefacFhe)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("NUMEFAC_FHE")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ObservFhe)
                    .HasMaxLength(512)
                    .IsUnicode(false)
                    .HasColumnName("OBSERV_FHE");

                entity.Property(e => e.OrdenCompraPresupFhe)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("OrdenCompraPresup_Fhe");

                entity.Property(e => e.PlantillaFhe)
                    .HasColumnName("PLANTILLA_FHE")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ProveedorFhe)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("PROVEEDOR_FHE");

                entity.Property(e => e.ReferenciaFhe)
                    .HasMaxLength(128)
                    .IsUnicode(false)
                    .HasColumnName("REFERENCIA_FHE");

                entity.Property(e => e.SerieFhe)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("SERIE_FHE")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.StatusFhe)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("STATUS_FHE");

                entity.Property(e => e.TcambioFhe)
                    .HasColumnType("money")
                    .HasColumnName("TCAMBIO_FHE");

                entity.Property(e => e.TipodctoFhe)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("TIPODCTO_FHE")
                    .IsFixedLength();

                entity.Property(e => e.TipofactFhe)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("TIPOFACT_FHE")
                    .IsFixedLength();

                entity.Property(e => e.UsuarioFhe)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("USUARIO_FHE");

                entity.Property(e => e.VendedorFhe)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("VENDEDOR_FHE")
                    .IsFixedLength();

                entity.Property(e => e.VersionDeLaFila)
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.VranticipoFhe)
                    .HasColumnType("money")
                    .HasColumnName("VRANTICIPO_FHE");

                entity.Property(e => e.VrconceFhe)
                    .HasColumnType("money")
                    .HasColumnName("VRCONCE_FHE");

                entity.Property(e => e.VrdsctoFhe)
                    .HasColumnType("money")
                    .HasColumnName("VRDSCTO_FHE");

                entity.Property(e => e.VrivaFhe)
                    .HasColumnType("money")
                    .HasColumnName("VRIVA_FHE");

                entity.HasOne(d => d.BuNavigation)
                    .WithMany(p => p.FactdocHeads)
                    .HasForeignKey(d => d.Bu)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_FACTDOC_HEAD_BU");

                entity.HasOne(d => d.ConsecutivoControlDocumentarioNavigation)
                    .WithMany(p => p.FactdocHeads)
                    .HasForeignKey(d => d.ConsecutivoControlDocumentario)
                    .HasConstraintName("FK_FACTDOC_HEAD_ConsecutivoControlDocumentario_ControlDocumentario_RecepcionDocumento");

                entity.HasOne(d => d.FuenteFheNavigation)
                    .WithMany(p => p.FactdocHeads)
                    .HasForeignKey(d => d.FuenteFhe)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_FACTDOC_HEAD_FUENTES");
            });

            modelBuilder.Entity<FactdocImportacion>(entity =>
            {
                entity.HasKey(e => new { e.FuenteImport, e.DocumentoImport, e.FuenteExport, e.DocumentoExport })
                    .IsClustered(false);

                entity.ToTable("FACTDOC_IMPORTACION");

                entity.HasIndex(e => new { e.FuenteImport, e.DocumentoImport }, "IX_FACTDOC_IMPORTACION_DOCUMENTO_IMPORT_FUENTE_IMPORT");

                entity.Property(e => e.FuenteImport)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("FUENTE_IMPORT")
                    .HasDefaultValueSql("('')")
                    .IsFixedLength();

                entity.Property(e => e.DocumentoImport)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("DOCUMENTO_IMPORT")
                    .HasDefaultValueSql("('')")
                    .IsFixedLength();

                entity.Property(e => e.FuenteExport)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("FUENTE_EXPORT")
                    .HasDefaultValueSql("('')")
                    .IsFixedLength();

                entity.Property(e => e.DocumentoExport)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("DOCUMENTO_EXPORT")
                    .HasDefaultValueSql("('')")
                    .IsFixedLength();

                entity.Property(e => e.Iden)
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("IDEN");
            });

            modelBuilder.Entity<FactdocPago>(entity =>
            {
                entity.HasKey(e => e.Iden);

                entity.ToTable("FACTDOC_PAGOS");

                entity.HasIndex(e => new { e.FuentePag, e.DocumentoPag }, "IX_FACTDOC_PAGOS_DOCUMENTO_PAG_FUENTE_PAG");

                entity.Property(e => e.Iden)
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("IDEN");

                entity.Property(e => e.AutorizacionPag)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("AUTORIZACION_PAG");

                entity.Property(e => e.BancoPag)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("BANCO_PAG");

                entity.Property(e => e.DocumentoExportPag)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("DOCUMENTO_EXPORT_PAG")
                    .HasDefaultValueSql("('')")
                    .IsFixedLength();

                entity.Property(e => e.DocumentoPag)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("DOCUMENTO_PAG")
                    .IsFixedLength();

                entity.Property(e => e.DocumentoconPag)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("DOCUMENTOCON_PAG");

                entity.Property(e => e.FechaPag)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("FECHA_PAG");

                entity.Property(e => e.Fechagrabacion)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("FECHAGRABACION")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.FuenteExportPag)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("FUENTE_EXPORT_PAG")
                    .HasDefaultValueSql("('')")
                    .IsFixedLength();

                entity.Property(e => e.FuentePag)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("FUENTE_PAG")
                    .IsFixedLength();

                entity.Property(e => e.IdenRelacionado)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("IDEN_RELACIONADO");

                entity.Property(e => e.IvainformadoPag)
                    .HasColumnType("money")
                    .HasColumnName("IVAINFORMADO_PAG");

                entity.Property(e => e.MonedaPag)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("MONEDA_PAG");

                entity.Property(e => e.PlazaPag)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("PLAZA_PAG");

                entity.Property(e => e.ReferenciaPag)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("REFERENCIA_PAG");

                entity.Property(e => e.ValorpagoPag)
                    .HasColumnType("numeric(19, 2)")
                    .HasColumnName("VALORPAGO_PAG");

                entity.Property(e => e.ValorpagomonedaPag)
                    .HasColumnType("numeric(19, 2)")
                    .HasColumnName("VALORPAGOMONEDA_PAG");

                entity.HasOne(d => d.FuentePagNavigation)
                    .WithMany(p => p.FactdocPagos)
                    .HasForeignKey(d => d.FuentePag)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_FACTDOC_PAGOS_FUENTES");
            });

            modelBuilder.Entity<Factexclusion>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("FACTExclusion");

                entity.Property(e => e.Bu)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("BU");

                entity.Property(e => e.Codigo)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Documento)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Estado)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.FechaAnulacion).HasColumnType("datetime");

                entity.Property(e => e.FechaExclusion).HasColumnType("datetime");

                entity.Property(e => e.FechaFin)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.FechaIni)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("id");

                entity.Property(e => e.IdCliente)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("idCliente");

                entity.Property(e => e.MotivoAnulacion)
                    .HasMaxLength(2000)
                    .IsUnicode(false);

                entity.Property(e => e.MotivoExclusion)
                    .HasMaxLength(2000)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioAnulacion)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioExclusion)
                    .HasMaxLength(250)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Facthead>(entity =>
            {
                entity.HasKey(e => new { e.FuenteFhe, e.DocumFhe })
                    .IsClustered(false);

                entity.ToTable("FACTHEAD");

                entity.HasIndex(e => new { e.ClienteFhe, e.FuenteFhe, e.DocumFhe }, "IX_FACTHEAD_CLIENTE_FHE_DOCUM_FHE_FUENTE_FHE");

                entity.HasIndex(e => e.FactAutoFhe, "IX_FACTHEAD_FACTAUTO_FHE");

                entity.HasIndex(e => e.Fechafacturacion, "IX_FACTHEAD_FECHAFACTURACION");

                entity.HasIndex(e => e.FechaFhe, "IX_FACTHEAD_FECHA_FHE");

                entity.Property(e => e.FuenteFhe)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("FUENTE_FHE")
                    .IsFixedLength();

                entity.Property(e => e.DocumFhe)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("DOCUM_FHE")
                    .IsFixedLength();

                entity.Property(e => e.AuxiliarFhe)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("AUXILIAR_FHE")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Bu)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("BU")
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.CcostoFhe)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("CCOSTO_FHE")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.CicloFhe)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("CICLO_FHE")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ClienteFhe)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("CLIENTE_FHE");

                entity.Property(e => e.CodigoPropiedad1Fhe)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("CodigoPropiedad1_FHE");

                entity.Property(e => e.CodigoPropiedad2Fhe)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("CodigoPropiedad2_FHE");

                entity.Property(e => e.CodigoPropiedad3Fhe)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("CodigoPropiedad3_FHE");

                entity.Property(e => e.CodigoPropiedad4Fhe)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("CodigoPropiedad4_FHE");

                entity.Property(e => e.CodigoPropiedad5Fhe)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("CodigoPropiedad5_FHE");

                entity.Property(e => e.ComprobantefiscalFhe)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("COMPROBANTEFISCAL_FHE")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ConceptoFhe)
                    .HasMaxLength(512)
                    .IsUnicode(false)
                    .HasColumnName("CONCEPTO_FHE");

                entity.Property(e => e.CtaanticipoFhe)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("CTAANTICIPO_FHE")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.CtacajaFhe)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("CTACAJA_FHE")
                    .IsFixedLength();

                entity.Property(e => e.CxcFhe)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("CXC_FHE")
                    .IsFixedLength();

                entity.Property(e => e.DiasvenFhe).HasColumnName("DIASVEN_FHE");

                entity.Property(e => e.FactAutoFhe)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("FactAuto_FHE");

                entity.Property(e => e.FactorFhe)
                    .HasColumnType("numeric(14, 4)")
                    .HasColumnName("FACTOR_FHE")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.FechaFhe)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("FECHA_FHE")
                    .IsFixedLength();

                entity.Property(e => e.FechaRegistroFhe)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("FechaRegistro_FHE");

                entity.Property(e => e.Fechafacturacion)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("FECHAFACTURACION");

                entity.Property(e => e.FechatcambioFhe)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("FECHATCAMBIO_FHE");

                entity.Property(e => e.HostFhe)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Host_FHE");

                entity.Property(e => e.IddocumFhe)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("IDDOCUM_FHE")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.IdenAutorizacionCiFhe).HasColumnName("IdenAutorizacionCI_Fhe");

                entity.Property(e => e.IdenFacthead)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_facthead");

                entity.Property(e => e.IdenTipoNotaDbcr)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("Iden_TipoNotaDBCR");

                entity.Property(e => e.IdmodeloFhe)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("IDMODELO_FHE")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ItemFhe)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("Item_FHE");

                entity.Property(e => e.MonedaFhe)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("MONEDA_FHE")
                    .IsFixedLength();

                entity.Property(e => e.MontoFhe)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("MONTO_FHE");

                entity.Property(e => e.NcfFhe)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("NCF_FHE")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.NcfModificadoFhe)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("NCF_Modificado_FHE")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.NovedadFhe)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("NOVEDAD_FHE");

                entity.Property(e => e.NumefacFhe)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("NUMEFAC_FHE");

                entity.Property(e => e.NumeroOrdenCompra)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Numero_Orden_Compra")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ObservFhe)
                    .HasMaxLength(256)
                    .IsUnicode(false)
                    .HasColumnName("OBSERV_FHE");

                entity.Property(e => e.Prefijo)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ReferenciaFhe)
                    .HasMaxLength(128)
                    .IsUnicode(false)
                    .HasColumnName("REFERENCIA_FHE");

                entity.Property(e => e.StatusFhe)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("STATUS_FHE")
                    .IsFixedLength();

                entity.Property(e => e.TcambioFhe)
                    .HasColumnType("money")
                    .HasColumnName("TCAMBIO_FHE");

                entity.Property(e => e.TfacFhe)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("TFAC_FHE")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.TipofacFhe)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("TIPOFAC_FHE")
                    .IsFixedLength();

                entity.Property(e => e.UsuarioFhe)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("USUARIO_FHE");

                entity.Property(e => e.VendedorFhe)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("VENDEDOR_FHE")
                    .IsFixedLength();

                entity.Property(e => e.VersionDeLaFila)
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.VranticipoFhe)
                    .HasColumnType("money")
                    .HasColumnName("VRANTICIPO_FHE");

                entity.Property(e => e.VrconceFhe)
                    .HasColumnType("money")
                    .HasColumnName("VRCONCE_FHE");

                entity.Property(e => e.VrdsctoFhe)
                    .HasColumnType("money")
                    .HasColumnName("VRDSCTO_FHE");

                entity.Property(e => e.VrivaFhe)
                    .HasColumnType("money")
                    .HasColumnName("VRIVA_FHE");

                entity.HasOne(d => d.BuNavigation)
                    .WithMany(p => p.Factheads)
                    .HasForeignKey(d => d.Bu)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_FACTHEAD_BU");

                entity.HasOne(d => d.FuenteFheNavigation)
                    .WithMany(p => p.Factheads)
                    .HasForeignKey(d => d.FuenteFhe)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_FACTHEAD_FUENTES");

                entity.HasOne(d => d.IdenTipoNotaDbcrNavigation)
                    .WithMany(p => p.Factheads)
                    .HasForeignKey(d => d.IdenTipoNotaDbcr)
                    .HasConstraintName("FK_FactHead_TipoNotaDBCR");
            });

            modelBuilder.Entity<FactheadRev>(entity =>
            {
                entity.HasKey(e => new { e.FuenteFhe, e.DocumFhe });

                entity.ToTable("FACTHEAD_REV");

                entity.HasIndex(e => new { e.ClienteFhe, e.FuenteFhe, e.DocumFhe }, "IX_FACTHEAD_REV_CLIENTE_FHE_DOCUM_FHE_FUENTE_FHE");

                entity.HasIndex(e => e.FechaFhe, "IX_FACTHEAD_REV_FECHA_FHE");

                entity.Property(e => e.FuenteFhe)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("FUENTE_FHE")
                    .IsFixedLength();

                entity.Property(e => e.DocumFhe)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("DOCUM_FHE")
                    .IsFixedLength();

                entity.Property(e => e.AuxiliarFhe)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("AUXILIAR_FHE")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Bu)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("BU")
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.CcostoFhe)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("CCOSTO_FHE")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.CicloFhe)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("CICLO_FHE")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ClienteFhe)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("CLIENTE_FHE");

                entity.Property(e => e.CodigoPropiedad1Fhe)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("CodigoPropiedad1_FHE");

                entity.Property(e => e.CodigoPropiedad2Fhe)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("CodigoPropiedad2_FHE");

                entity.Property(e => e.CodigoPropiedad3Fhe)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("CodigoPropiedad3_FHE");

                entity.Property(e => e.CodigoPropiedad4Fhe)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("CodigoPropiedad4_FHE");

                entity.Property(e => e.CodigoPropiedad5Fhe)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("CodigoPropiedad5_FHE");

                entity.Property(e => e.ComprobantefiscalFhe)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("COMPROBANTEFISCAL_FHE")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ConceptoFhe)
                    .HasMaxLength(512)
                    .IsUnicode(false)
                    .HasColumnName("CONCEPTO_FHE");

                entity.Property(e => e.CtaanticipoFhe)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("CTAANTICIPO_FHE")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.CtacajaFhe)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("CTACAJA_FHE")
                    .IsFixedLength();

                entity.Property(e => e.CxcFhe)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("CXC_FHE")
                    .IsFixedLength();

                entity.Property(e => e.DiasvenFhe).HasColumnName("DIASVEN_FHE");

                entity.Property(e => e.FactAutoFhe)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("FactAuto_FHE");

                entity.Property(e => e.FactorFhe)
                    .HasColumnType("numeric(14, 4)")
                    .HasColumnName("FACTOR_FHE")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.FechaFhe)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("FECHA_FHE")
                    .IsFixedLength();

                entity.Property(e => e.Fechafacturacion)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("FECHAFACTURACION");

                entity.Property(e => e.FechatcambioFhe)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("FECHATCAMBIO_FHE");

                entity.Property(e => e.IddocumFhe)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("IDDOCUM_FHE")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.IdenAutorizacionCiFhe).HasColumnName("IdenAutorizacionCI_Fhe");

                entity.Property(e => e.IdenFactheadRev)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_facthead_rev");

                entity.Property(e => e.IdenTipoNotaDbcr)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("Iden_TipoNotaDBCR");

                entity.Property(e => e.IdmodeloFhe)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("IDMODELO_FHE")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ItemFhe)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("Item_FHE");

                entity.Property(e => e.MonedaFhe)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("MONEDA_FHE")
                    .IsFixedLength();

                entity.Property(e => e.MontoFhe)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("MONTO_FHE");

                entity.Property(e => e.NcfFhe)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("NCF_FHE")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.NcfModificadoFhe)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("NCF_Modificado_FHE")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.NovedadFhe)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("NOVEDAD_FHE");

                entity.Property(e => e.NumefacFhe)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("NUMEFAC_FHE");

                entity.Property(e => e.NumeroOrdenCompra)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Numero_Orden_Compra")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ObservFhe)
                    .HasMaxLength(256)
                    .IsUnicode(false)
                    .HasColumnName("OBSERV_FHE");

                entity.Property(e => e.Prefijo)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ReferenciaFhe)
                    .HasMaxLength(128)
                    .IsUnicode(false)
                    .HasColumnName("REFERENCIA_FHE");

                entity.Property(e => e.StatusFhe)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("STATUS_FHE")
                    .IsFixedLength();

                entity.Property(e => e.TcambioFhe)
                    .HasColumnType("money")
                    .HasColumnName("TCAMBIO_FHE");

                entity.Property(e => e.TfacFhe)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("TFAC_FHE")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.TipofacFhe)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("TIPOFAC_FHE")
                    .IsFixedLength();

                entity.Property(e => e.UsuarioFhe)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("USUARIO_FHE");

                entity.Property(e => e.VendedorFhe)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("VENDEDOR_FHE")
                    .IsFixedLength();

                entity.Property(e => e.VranticipoFhe)
                    .HasColumnType("money")
                    .HasColumnName("VRANTICIPO_FHE");

                entity.Property(e => e.VrconceFhe)
                    .HasColumnType("money")
                    .HasColumnName("VRCONCE_FHE");

                entity.Property(e => e.VrdsctoFhe)
                    .HasColumnType("money")
                    .HasColumnName("VRDSCTO_FHE");

                entity.Property(e => e.VrivaFhe)
                    .HasColumnType("money")
                    .HasColumnName("VRIVA_FHE");

                entity.HasOne(d => d.BuNavigation)
                    .WithMany(p => p.FactheadRevs)
                    .HasForeignKey(d => d.Bu)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_FACTHEAD_REV_BU");

                entity.HasOne(d => d.FuenteFheNavigation)
                    .WithMany(p => p.FactheadRevs)
                    .HasForeignKey(d => d.FuenteFhe)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_FACTHEAD_REV_FUENTES");
            });

            modelBuilder.Entity<FactheadTemp>(entity =>
            {
                entity.HasKey(e => new { e.Fuente, e.Documento, e.Consecutivo });

                entity.ToTable("FACTHEAD_TEMP");

                entity.Property(e => e.Fuente)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.Documento)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Anular).HasDefaultValueSql("((0))");

                entity.Property(e => e.Auxiliar)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Bu)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("BU")
                    .HasDefaultValueSql("('Local')");

                entity.Property(e => e.CentroCosto)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Cliente)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Ctaanticipo)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CTAAnticipo")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Ctacaja)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("CTACAJA");

                entity.Property(e => e.Ctacxc)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("CTACXC");

                entity.Property(e => e.Descripcion)
                    .HasMaxLength(512)
                    .IsUnicode(false);

                entity.Property(e => e.DiasVen).HasDefaultValueSql("((0))");

                entity.Property(e => e.Error).HasDefaultValueSql("('')");

                entity.Property(e => e.Fecha)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.FechaGrabacion)
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.FechaPs)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("FechaPS");

                entity.Property(e => e.FechaTcambio)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("FechaTCambio")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.FormaPago)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Id)
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Item)
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.Moneda)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Observacion)
                    .HasMaxLength(256)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Procesado).HasDefaultValueSql("((0))");

                entity.Property(e => e.Referencia)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.TasaCambio)
                    .HasColumnType("numeric(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.TipoFac)
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Vendedor)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.VrAnticipo).HasColumnType("numeric(18, 2)");
            });

            modelBuilder.Entity<FactheadTempError>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("FACTHEAD_TEMP_ERROR");

                entity.Property(e => e.Documento)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Error)
                    .HasMaxLength(8000)
                    .IsUnicode(false);

                entity.Property(e => e.Fuente)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.Id)
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("id");
            });

            modelBuilder.Entity<FactmodeloValor>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("FACTMODELO_VALOR");

                entity.HasIndex(e => new { e.Idcliente, e.IdDocumento, e.IdModelo, e.Concepto }, "UQ_FACTMODELO_VALOR_MODELO_CONCEPTO")
                    .IsUnique();

                entity.Property(e => e.Cantidad).HasColumnType("numeric(18, 6)");

                entity.Property(e => e.Concepto)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.IdDocumento)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.IdModelo)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Idcliente)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("IDCLIENTE");

                entity.Property(e => e.Iden)
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Valor).HasColumnType("numeric(18, 2)");
            });

            modelBuilder.Entity<Factmodelob>(entity =>
            {
                entity.HasKey(e => new { e.Codigo, e.Concepto })
                    .IsClustered(false);

                entity.ToTable("FACTMODELOB");

                entity.Property(e => e.Codigo)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("CODIGO")
                    .IsFixedLength();

                entity.Property(e => e.Concepto)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("CONCEPTO")
                    .IsFixedLength();

                entity.Property(e => e.CodigoivaFco)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("CODIGOIVA_FCO")
                    .HasDefaultValueSql("('')")
                    .IsFixedLength();

                entity.Property(e => e.Orden)
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ORDEN");

                entity.Property(e => e.PorceivaFco)
                    .HasColumnType("numeric(18, 6)")
                    .HasColumnName("PORCEIVA_FCO")
                    .HasDefaultValueSql("((0))");

                entity.HasOne(d => d.CodigoNavigation)
                    .WithMany(p => p.Factmodelobs)
                    .HasForeignKey(d => d.Codigo)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_FACTMODELOB_FACTMODELOH");

                entity.HasOne(d => d.ConceptoNavigation)
                    .WithMany(p => p.Factmodelobs)
                    .HasForeignKey(d => d.Concepto)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_FACTMODELOB_FACTCONC");
            });

            modelBuilder.Entity<Factmodeloh>(entity =>
            {
                entity.HasKey(e => e.Codigo)
                    .IsClustered(false);

                entity.ToTable("FACTMODELOH");

                entity.Property(e => e.Codigo)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("CODIGO")
                    .IsFixedLength();

                entity.Property(e => e.Descripcion)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPCION");

                entity.Property(e => e.DiaFechaVencimientoProgNom)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("DiaFechaVencimientoProg_Nom");

                entity.Property(e => e.DocAgenerar).HasColumnName("DocAGenerar");

                entity.Property(e => e.GenerarNcuotas).HasColumnName("GenerarNCuotas");

                entity.Property(e => e.IdenFactmodeloh)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_factmodeloh");

                entity.Property(e => e.Referencia)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.Tipo)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("TIPO");

                entity.Property(e => e.TipoOperacion)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.VencimientoDiaHabil)
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Factopcione>(entity =>
            {
                entity.HasKey(e => e.Nombre);

                entity.ToTable("FACTOPCIONES");

                entity.Property(e => e.Nombre)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Aplicacion)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Descripcion)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DescripcionLarga)
                    .HasMaxLength(254)
                    .IsUnicode(false);

                entity.Property(e => e.Execsql)
                    .HasMaxLength(4000)
                    .IsUnicode(false)
                    .HasColumnName("EXECSQL");

                entity.Property(e => e.IdenFactopciones)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_factopciones");

                entity.Property(e => e.Orden).HasDefaultValueSql("((0))");

                entity.Property(e => e.Presentacion)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.ValorDefault)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");
            });

            modelBuilder.Entity<Factpago>(entity =>
            {
                entity.HasKey(e => e.Iden);

                entity.ToTable("FACTPAGOS");

                entity.Property(e => e.Iden)
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("IDEN");

                entity.Property(e => e.AutorizacionPag)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("AUTORIZACION_PAG");

                entity.Property(e => e.BancoPag)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("BANCO_PAG");

                entity.Property(e => e.DocumentoPag)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("DOCUMENTO_PAG")
                    .IsFixedLength();

                entity.Property(e => e.DocumentoconPag)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("DOCUMENTOCON_PAG");

                entity.Property(e => e.FechaPag)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("FECHA_PAG");

                entity.Property(e => e.Fechagrabacion)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("FECHAGRABACION")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.FuentePag)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("FUENTE_PAG")
                    .IsFixedLength();

                entity.Property(e => e.IvainformadoPag)
                    .HasColumnType("money")
                    .HasColumnName("IVAINFORMADO_PAG");

                entity.Property(e => e.MonedaPag)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("MONEDA_PAG");

                entity.Property(e => e.PlazaPag)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("PLAZA_PAG");

                entity.Property(e => e.ReferenciaPag)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("REFERENCIA_PAG");

                entity.Property(e => e.ValorPag)
                    .HasColumnType("numeric(19, 2)")
                    .HasColumnName("VALOR_PAG");

                entity.Property(e => e.ValormonedaPag)
                    .HasColumnType("numeric(19, 2)")
                    .HasColumnName("VALORMONEDA_PAG");
            });

            modelBuilder.Entity<FactpagosRev>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("FACTPAGOS_REV");

                entity.Property(e => e.AutorizacionPag)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("AUTORIZACION_PAG");

                entity.Property(e => e.BancoPag)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("BANCO_PAG");

                entity.Property(e => e.DocumentoPag)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("DOCUMENTO_PAG")
                    .IsFixedLength();

                entity.Property(e => e.DocumentoconPag)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("DOCUMENTOCON_PAG");

                entity.Property(e => e.FechaPag)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("FECHA_PAG");

                entity.Property(e => e.Fechagrabacion)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("FECHAGRABACION")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.FuentePag)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("FUENTE_PAG")
                    .IsFixedLength();

                entity.Property(e => e.Iden)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("IDEN");

                entity.Property(e => e.IdenFactpagosRev)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_factpagos_rev");

                entity.Property(e => e.IvainformadoPag)
                    .HasColumnType("money")
                    .HasColumnName("IVAINFORMADO_PAG");

                entity.Property(e => e.MonedaPag)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("MONEDA_PAG");

                entity.Property(e => e.PlazaPag)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("PLAZA_PAG");

                entity.Property(e => e.ReferenciaPag)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("REFERENCIA_PAG");

                entity.Property(e => e.ValorPag)
                    .HasColumnType("numeric(19, 2)")
                    .HasColumnName("VALOR_PAG");

                entity.Property(e => e.ValormonedaPag)
                    .HasColumnType("numeric(19, 2)")
                    .HasColumnName("VALORMONEDA_PAG");
            });

            modelBuilder.Entity<Factradicacion>(entity =>
            {
                entity.HasKey(e => e.Iden);

                entity.ToTable("FACTRADICACION");

                entity.HasIndex(e => new { e.FechaRadicacion, e.Fuente, e.Documento, e.Deshabilitado }, "IX_FACTRADICACION_DESHABILITADO_DOCUMENTO_FECHA_RADICACION_FUENTE")
                    .IsUnique();

                entity.HasIndex(e => new { e.Fuente, e.Documento }, "IX_FACTRADICACION_DOCUMENTO_FUENTE");

                entity.HasIndex(e => e.FechaRadicacion, "IX_FACTRADICACION_FECHA_RADICACION");

                entity.Property(e => e.Iden)
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("IDEN");

                entity.Property(e => e.Documento)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.FechaFact)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.FechaGrabacion)
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.FechaRadicacion)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("Fecha_Radicacion");

                entity.Property(e => e.Fuente)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.Observacion)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Usuario)
                    .HasMaxLength(250)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<FacturaElectronicaExtensionesDinamica>(entity =>
            {
                entity.HasKey(e => e.Iden)
                    .HasName("PK_FacturacionElectronica_ExtensionesDinamicas");

                entity.ToTable("FacturaElectronica_ExtensionesDinamicas");

                entity.HasIndex(e => e.Codigo, "UK_FacturacionElectronica_ExtensionesDinamicas")
                    .IsUnique();

                entity.Property(e => e.Iden)
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.CampoSelect)
                    .HasMaxLength(256)
                    .IsUnicode(false);

                entity.Property(e => e.Codigo)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Funcion)
                    .HasMaxLength(256)
                    .IsUnicode(false);

                entity.Property(e => e.Nodo)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Nombre)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Query).IsUnicode(false);

                entity.Property(e => e.Sql)
                    .IsUnicode(false)
                    .HasColumnName("SQL");

                entity.Property(e => e.Tabla)
                    .HasMaxLength(256)
                    .IsUnicode(false);

                entity.Property(e => e.Tipo1)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Tipo2)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Tipo3)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Tipo4)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Tipo5)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<FacturaElectronicaExtensionesDinamicasMapeo>(entity =>
            {
                entity.HasKey(e => e.Iden);

                entity.ToTable("FacturaElectronica_ExtensionesDinamicas_Mapeo");

                entity.HasIndex(e => new { e.Codigo, e.CampoVista }, "UK_FacturaElectronica_ExtensionesDinamicas_Mapeo")
                    .IsUnique();

                entity.Property(e => e.Iden)
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.CampoVista)
                    .HasMaxLength(256)
                    .IsUnicode(false);

                entity.Property(e => e.Codigo)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<FacturaElectronicaExtensionesDinamicasRelacione>(entity =>
            {
                entity.HasKey(e => e.Iden);

                entity.ToTable("FacturaElectronica_ExtensionesDinamicas_Relaciones");

                entity.HasIndex(e => new { e.ExtensionDinamicaIden, e.CampoJoin, e.CampoVista }, "UK_FacturaElectronica_ExtensionesDinamicas_Relaciones")
                    .IsUnique();

                entity.Property(e => e.Iden)
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.CampoJoin)
                    .HasMaxLength(256)
                    .IsUnicode(false);

                entity.Property(e => e.CampoVista)
                    .HasMaxLength(256)
                    .IsUnicode(false);

                entity.Property(e => e.ExtensionDinamicaIden).HasColumnType("numeric(18, 0)");

                entity.HasOne(d => d.ExtensionDinamicaIdenNavigation)
                    .WithMany(p => p.FacturaElectronicaExtensionesDinamicasRelaciones)
                    .HasForeignKey(d => d.ExtensionDinamicaIden)
                    .HasConstraintName("FK_FacturaElectronica_ExtensionesDinamicas_Relaciones_FacturaElectronica_ExtensionesDinamicas");
            });

            modelBuilder.Entity<FacturaElectronicaFacturadore>(entity =>
            {
                entity.HasKey(e => e.Codigo);

                entity.ToTable("FacturaElectronica_Facturadores");

                entity.Property(e => e.Codigo)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.IdenFacturaelectronicaFacturadores)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_facturaelectronica_facturadores");

                entity.Property(e => e.Nombre)
                    .HasMaxLength(200)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<FacturaElectronicaFacturadoresAsignacionVariable>(entity =>
            {
                entity.HasKey(e => new { e.Facturador, e.TipoMaestro, e.Variable });

                entity.ToTable("FacturaElectronica_Facturadores_AsignacionVariables");

                entity.Property(e => e.Facturador)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.TipoMaestro)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Variable)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.IdenFacturaelectronicaFacturadoresAsignacionvariables)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_facturaelectronica_facturadores_asignacionvariables");

                entity.Property(e => e.Orden).HasDefaultValueSql("((0))");

                entity.HasOne(d => d.FacturadorNavigation)
                    .WithMany(p => p.FacturaElectronicaFacturadoresAsignacionVariables)
                    .HasForeignKey(d => d.Facturador)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_FacturaElectronica_Facturadores_AsignacionVariables_FacturaElectronica_Facturadores");

                entity.HasOne(d => d.VariableNavigation)
                    .WithMany(p => p.FacturaElectronicaFacturadoresAsignacionVariables)
                    .HasForeignKey(d => d.Variable)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_FacturaElectronica_Facturadores_AsignacionVariables_FacturaElectronica_Variables");
            });

            modelBuilder.Entity<FacturaElectronicaFacturadoresEquivalencium>(entity =>
            {
                entity.HasKey(e => new { e.Facturador, e.TipoMaestro, e.Variable, e.CodigoMaestro });

                entity.ToTable("FacturaElectronica_Facturadores_Equivalencia");

                entity.Property(e => e.Facturador)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.TipoMaestro)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Variable)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CodigoMaestro)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.IdenFacturaelectronicaFacturadoresEquivalencia)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_facturaelectronica_facturadores_equivalencia");

                entity.Property(e => e.Valor)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.HasOne(d => d.FacturadorNavigation)
                    .WithMany(p => p.FacturaElectronicaFacturadoresEquivalencia)
                    .HasForeignKey(d => d.Facturador)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_FacturaElectronica_Facturadores_Equivalencia_FacturaElectronica_Facturadores");

                entity.HasOne(d => d.VariableNavigation)
                    .WithMany(p => p.FacturaElectronicaFacturadoresEquivalencia)
                    .HasForeignKey(d => d.Variable)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_FacturaElectronica_Facturadores_Equivalencia_FacturaElectronica_Variables");
            });

            modelBuilder.Entity<FacturaElectronicaFreeRiskCompRetencion>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("FacturaElectronica_FreeRisk_CompRetencion");

                entity.Property(e => e.Documento)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Fecha)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Fuente)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.IdTransaccionFacturacionElectronica)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("ID_Transaccion_FacturacionElectronica");

                entity.Property(e => e.Iden)
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Usuario)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdTransaccionFacturacionElectronicaNavigation)
                    .WithMany()
                    .HasForeignKey(d => d.IdTransaccionFacturacionElectronica)
                    .HasConstraintName("FK_FacturaElectronica_FreeRisk_CompRetencion_FacturaElectronica_Transaccion");
            });

            modelBuilder.Entity<FacturaElectronicaGrupoDeExtensione>(entity =>
            {
                entity.HasKey(e => e.Iden);

                entity.ToTable("FacturaElectronica_GrupoDeExtensiones");

                entity.Property(e => e.Iden)
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Codigo)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Nombre)
                    .HasMaxLength(60)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<FacturaElectronicaLiquidacionesdeCompra>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("FacturaElectronica_LiquidacionesdeCompras");

                entity.Property(e => e.Documento)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Fecha)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Fuente)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.IdTransaccionFacturacionElectronica)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("ID_Transaccion_FacturacionElectronica");

                entity.Property(e => e.Iden)
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Usuario)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdTransaccionFacturacionElectronicaNavigation)
                    .WithMany()
                    .HasForeignKey(d => d.IdTransaccionFacturacionElectronica)
                    .HasConstraintName("FK_FacturaElectronica_LiquidacionesdeCompras_FacturaElectronica_Transaccion");
            });

            modelBuilder.Entity<FacturaElectronicaMaestro>(entity =>
            {
                entity.HasKey(e => e.Codigo);

                entity.ToTable("FacturaElectronica_Maestros");

                entity.Property(e => e.Codigo)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.IdenFacturaelectronicaMaestros)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_facturaelectronica_maestros");

                entity.Property(e => e.Nombre)
                    .HasMaxLength(200)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<FacturaElectronicaMaestroDato>(entity =>
            {
                entity.HasKey(e => new { e.MaestroCodigo, e.Codigo });

                entity.ToTable("FacturaElectronica_Maestro_Datos");

                entity.Property(e => e.MaestroCodigo)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Maestro_Codigo");

                entity.Property(e => e.Codigo)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Depende)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.IdenFacturaelectronicaMaestroDatos)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_facturaelectronica_maestro_datos");

                entity.Property(e => e.Nombre)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.HasOne(d => d.MaestroCodigoNavigation)
                    .WithMany(p => p.FacturaElectronicaMaestroDatos)
                    .HasForeignKey(d => d.MaestroCodigo)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_FacturaElectronica_Maestro_Datos_FacturaElectronica_Maestros");
            });

            modelBuilder.Entity<FacturaElectronicaMaestrosAdicionale>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("FacturaElectronica_MaestrosAdicionales");

                entity.Property(e => e.Codigo)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Desc1)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Desc2)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Desc3)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Desc4)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Desc5)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Facturador)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Iden).ValueGeneratedOnAdd();

                entity.Property(e => e.Maestro)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.MaestroCodigo)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Maestro_Codigo");

                entity.Property(e => e.Nombre)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NombreMaestroHijo)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Nombre_Maestro_Hijo");
            });

            modelBuilder.Entity<FacturaElectronicaTipoMaestro>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("FacturaElectronica_TipoMaestros");

                entity.Property(e => e.Codigo)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CodigoBuscador).IsUnicode(false);

                entity.Property(e => e.ColumnaDescripcionMaestro).IsUnicode(false);

                entity.Property(e => e.Descripcion).IsUnicode(false);

                entity.Property(e => e.IdAplicacionesZeus).HasColumnName("Id_AplicacionesZeus");

                entity.Property(e => e.IdenFacturaelectronicaTipomaestros)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_facturaelectronica_tipomaestros");

                entity.Property(e => e.Ini)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("ini");

                entity.Property(e => e.SeccionIni)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdAplicacionesZeusNavigation)
                    .WithMany()
                    .HasForeignKey(d => d.IdAplicacionesZeus)
                    .HasConstraintName("FK_FacturaElectronica_TipoMaestros_AplicacionesZeus");
            });

            modelBuilder.Entity<FacturaElectronicaTransaccion>(entity =>
            {
                entity.HasKey(e => e.Iden);

                entity.ToTable("FacturaElectronica_Transaccion");

                entity.HasIndex(e => new { e.Categoria, e.Operacion, e.Llave1, e.Llave2, e.Llave3, e.Llave4 }, "IX_FacturaElectronica_Transaccion");

                entity.Property(e => e.Iden)
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Categoria)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Estado)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Fecha).HasColumnType("datetime");

                entity.Property(e => e.FechaHoraGrabacion)
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.IdFacture).HasColumnName("id_facture");

                entity.Property(e => e.Llave1)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Llave2)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Llave3)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Llave4)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.MensajeContenidoTecnicoDs)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("Mensaje_contenido_tecnico_ds");

                entity.Property(e => e.MensajeDocumentoId)
                    .HasMaxLength(18)
                    .IsUnicode(false)
                    .HasColumnName("Mensaje_documento_id");

                entity.Property(e => e.MensajeErrorInd)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("Mensaje_error_ind");

                entity.Property(e => e.MensajeFactureTipoCd)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("Mensaje_facture_tipo_cd");

                entity.Property(e => e.MensajeNumeroCd)
                    .HasMaxLength(18)
                    .IsUnicode(false)
                    .HasColumnName("Mensaje_numero_cd");

                entity.Property(e => e.MensajeRespuestaDs)
                    .IsUnicode(false)
                    .HasColumnName("Mensaje_respuesta_ds");

                entity.Property(e => e.MensajeVisorPublicoUrl)
                    .IsUnicode(false)
                    .HasColumnName("Mensaje_visor_publico_url");

                entity.Property(e => e.Modulo)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Operacion)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.ParametrosAdiconles).IsUnicode(false);

                entity.Property(e => e.PeticionXml)
                    .IsUnicode(false)
                    .HasColumnName("peticion_xml");

                entity.Property(e => e.Procesado).HasColumnType("datetime");

                entity.Property(e => e.TransaccionGuid)
                    .HasColumnName("transaccion_guid")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.UltimoMensaje)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.XmlRespuesta)
                    .IsUnicode(false)
                    .HasColumnName("XML_Respuesta");
            });

            modelBuilder.Entity<FacturaElectronicaTransaccionLogRespuesta>(entity =>
            {
                entity.HasKey(e => e.Iden);

                entity.ToTable("FacturaElectronica_Transaccion_LogRespuestas");

                entity.HasIndex(e => e.FacturaElectronicaTransaccionId, "IX_FacturaElectronica_Transaccion_LogRespuestas");

                entity.Property(e => e.Iden)
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Estado)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.FacturaElectronicaTransaccionId)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("FacturaElectronica_Transaccion_Id");

                entity.Property(e => e.Mensaje)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.Procesado).HasColumnType("datetime");

                entity.Property(e => e.XmlRespuesta)
                    .IsUnicode(false)
                    .HasColumnName("XML_Respuesta");

                entity.HasOne(d => d.FacturaElectronicaTransaccion)
                    .WithMany(p => p.FacturaElectronicaTransaccionLogRespuesta)
                    .HasForeignKey(d => d.FacturaElectronicaTransaccionId)
                    .HasConstraintName("FK_FacturaElectronica_Transaccion_LogRespuestas_FacturaElectronica_Transaccion");
            });

            modelBuilder.Entity<FacturaElectronicaVariable>(entity =>
            {
                entity.HasKey(e => e.Codigo);

                entity.ToTable("FacturaElectronica_Variables");

                entity.Property(e => e.Codigo)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CodigoBuscador).IsUnicode(false);

                entity.Property(e => e.ColumnaDescripcionMaestro).IsUnicode(false);

                entity.Property(e => e.Descripcion)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.IdenFacturaelectronicaVariables)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_facturaelectronica_variables");

                entity.Property(e => e.ListaPosibilidades)
                    .HasMaxLength(2000)
                    .IsUnicode(false);

                entity.Property(e => e.Nombre)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.OpcionesSelecionables).IsUnicode(false);

                entity.Property(e => e.SeccionAyuda)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.SeccionAyudaMaestroGenerico)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Titulo)
                    .HasMaxLength(500)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<FacturaRcCodbar>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("FACTURA_RC_CODBAR");

                entity.Property(e => e.Bu)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Codicta)
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.Idcliprv)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.IdenFacturaRcCodbar)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_factura_rc_codbar");

                entity.Property(e => e.Numefac)
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.Refefac)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Tipofact)
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Vencefac)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.VrAplicar).HasColumnType("money");
            });

            modelBuilder.Entity<FacturacionAut>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("FACTURACION_AUT");

                entity.Property(e => e.Auxabto)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("AUXABTO")
                    .IsFixedLength();

                entity.Property(e => e.Baserete)
                    .HasColumnType("money")
                    .HasColumnName("BASERETE");

                entity.Property(e => e.BlNovedad).HasColumnName("bl_novedad");

                entity.Property(e => e.Bu)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("BU");

                entity.Property(e => e.CambioIva)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Cantidad)
                    .HasColumnType("numeric(18, 6)")
                    .HasColumnName("CANTIDAD");

                entity.Property(e => e.Codcenco)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("CODCENCO")
                    .IsFixedLength();

                entity.Property(e => e.Codcliente1)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("CODCLIENTE1");

                entity.Property(e => e.CodiFco)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("CODI_FCO")
                    .IsFixedLength();

                entity.Property(e => e.CodigoPropiedad1)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.CodigoPropiedad2)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.CodigoPropiedad3)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.CodigoPropiedad4)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.CodigoPropiedad5)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.CodigodescFco)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("CODIGODESC_FCO")
                    .IsFixedLength();

                entity.Property(e => e.CodigoivaFco)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("CODIGOIVA_FCO")
                    .IsFixedLength();

                entity.Property(e => e.CodigoreteFco)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("CODIGORETE_FCO")
                    .IsFixedLength();

                entity.Property(e => e.Codvendedor)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("CODVENDEDOR")
                    .IsFixedLength();

                entity.Property(e => e.Concepto)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("CONCEPTO")
                    .IsFixedLength();

                entity.Property(e => e.DbcrFco)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("DBCR_FCO")
                    .IsFixedLength();

                entity.Property(e => e.Desclarga)
                    .HasMaxLength(240)
                    .IsUnicode(false)
                    .HasColumnName("DESCLARGA");

                entity.Property(e => e.DetalleFco)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("DETALLE_FCO");

                entity.Property(e => e.Idcliente)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("IDCLIENTE");

                entity.Property(e => e.Iddocumento)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("IDDOCUMENTO")
                    .IsFixedLength();

                entity.Property(e => e.IdenFacturacionAut)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_facturacion_aut");

                entity.Property(e => e.Idtercero)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("IDTERCERO");

                entity.Property(e => e.Idzona)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("IDZONA")
                    .IsFixedLength();

                entity.Property(e => e.Item)
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.MoneFco)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("MONE_FCO")
                    .IsFixedLength();

                entity.Property(e => e.Nomcliente)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("NOMCLIENTE");

                entity.Property(e => e.Nomconcepto)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("NOMCONCEPTO");

                entity.Property(e => e.Novedad)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("NOVEDAD");

                entity.Property(e => e.Numdoc)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("NUMDOC")
                    .IsFixedLength();

                entity.Property(e => e.Porcdes)
                    .HasColumnType("money")
                    .HasColumnName("PORCDES");

                entity.Property(e => e.Porciva)
                    .HasColumnType("numeric(18, 6)")
                    .HasColumnName("PORCIVA");

                entity.Property(e => e.Porcrete)
                    .HasColumnType("money")
                    .HasColumnName("PORCRETE");

                entity.Property(e => e.Refe)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("REFE");

                entity.Property(e => e.Spid).HasColumnName("SPID");

                entity.Property(e => e.Td)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("TD")
                    .IsFixedLength();

                entity.Property(e => e.Totalconcepto)
                    .HasColumnType("money")
                    .HasColumnName("TOTALCONCEPTO");

                entity.Property(e => e.Vcto)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("VCTO")
                    .IsFixedLength();

                entity.Property(e => e.VlrBaseivaMod)
                    .HasColumnType("money")
                    .HasColumnName("VLR_BASEIVA_MOD");

                entity.Property(e => e.VlrBaseivaOrig)
                    .HasColumnType("money")
                    .HasColumnName("VLR_BASEIVA_ORIG");

                entity.Property(e => e.VlrIvaOrig)
                    .HasColumnType("money")
                    .HasColumnName("VLR_IVA_ORIG");

                entity.Property(e => e.Vrdescuento)
                    .HasColumnType("money")
                    .HasColumnName("VRDESCUENTO");

                entity.Property(e => e.Vriva)
                    .HasColumnType("money")
                    .HasColumnName("VRIVA");

                entity.Property(e => e.Vrrete)
                    .HasColumnType("money")
                    .HasColumnName("VRRETE");

                entity.Property(e => e.Vrunitario)
                    .HasColumnType("money")
                    .HasColumnName("VRUNITARIO");
            });

            modelBuilder.Entity<FacturacionAutoConcepto>(entity =>
            {
                entity.HasKey(e => e.Iden);

                entity.ToTable("Facturacion_Auto_Concepto");

                entity.HasIndex(e => new { e.Cliente, e.Documento }, "IX_Facturacion_Auto_Concepto_Cliente_Documento");

                entity.HasIndex(e => e.Consecutivo, "IX_Facturacion_Auto_Concepto_Consecutivo");

                entity.HasIndex(e => e.IdenFacturacion, "IX_Facturacion_Auto_Concepto_IDEN_Facturacion");

                entity.Property(e => e.Iden)
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("IDEN");

                entity.Property(e => e.Bu)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.CambioIva)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Cantidad).HasColumnType("numeric(18, 6)");

                entity.Property(e => e.Cliente)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Concepto)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Consecutivo).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.Descripcion)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Documento)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.IdenFacturacion)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("IDEN_Facturacion");

                entity.Property(e => e.NumeroFactura)
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.PorcentajeDcto).HasColumnType("numeric(18, 6)");

                entity.Property(e => e.PorcentajeIva)
                    .HasColumnType("numeric(18, 6)")
                    .HasColumnName("PorcentajeIVA");

                entity.Property(e => e.Proveedor)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Referencia)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.SubTotal).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.TasaCambio).HasColumnType("numeric(18, 6)");

                entity.Property(e => e.TipoFactura)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Total).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.TotalDescuento).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.TotalIva)
                    .HasColumnType("numeric(18, 2)")
                    .HasColumnName("TotalIVA");

                entity.Property(e => e.ValorUnidad).HasColumnType("numeric(18, 6)");

                entity.Property(e => e.ValorUnidadMoneda).HasColumnType("numeric(18, 6)");

                entity.Property(e => e.Vencimiento)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.VlrBaseivaMod)
                    .HasColumnType("money")
                    .HasColumnName("VLR_BASEIVA_MOD");

                entity.Property(e => e.VlrBaseivaOrig)
                    .HasColumnType("money")
                    .HasColumnName("VLR_BASEIVA_ORIG");

                entity.Property(e => e.VlrIvaOrig)
                    .HasColumnType("money")
                    .HasColumnName("VLR_IVA_ORIG");

                entity.HasOne(d => d.ClienteNavigation)
                    .WithMany(p => p.FacturacionAutoConceptos)
                    .HasForeignKey(d => d.Cliente)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Facturacion_Auto_Concepto_CLIENTES");

                entity.HasOne(d => d.ConceptoNavigation)
                    .WithMany(p => p.FacturacionAutoConceptos)
                    .HasForeignKey(d => d.Concepto)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Facturacion_Auto_Concepto_FACTCONC");

                entity.HasOne(d => d.IdenFacturacionNavigation)
                    .WithMany(p => p.FacturacionAutoConceptos)
                    .HasForeignKey(d => d.IdenFacturacion)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Facturacion_Auto_Concepto_Facturacion_Auto_Novedades");
            });

            modelBuilder.Entity<FacturacionAutoConceptoTemp>(entity =>
            {
                entity.HasKey(e => e.Iden);

                entity.ToTable("Facturacion_Auto_Concepto_Temp");

                entity.HasIndex(e => e.SpId, "IX_FACTURACION_AUTO_CONCEPTO_TEMP_SPID");

                entity.Property(e => e.Iden)
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("IDEN");

                entity.Property(e => e.Bu)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.CambioIva)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Cantidad).HasColumnType("numeric(18, 6)");

                entity.Property(e => e.Cliente)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Concepto)
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.Descripcion)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Documento)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.NumeroFactura)
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.PorcentajeDcto).HasColumnType("numeric(18, 6)");

                entity.Property(e => e.PorcentajeIva)
                    .HasColumnType("numeric(18, 6)")
                    .HasColumnName("PorcentajeIVA");

                entity.Property(e => e.Proveedor)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Referencia)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.SpId).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.SubTotal).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.TasaCambio).HasColumnType("numeric(18, 6)");

                entity.Property(e => e.TipoFactura)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Total).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.TotalDescuento).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.TotalIva)
                    .HasColumnType("numeric(18, 2)")
                    .HasColumnName("TotalIVA");

                entity.Property(e => e.ValorUnidad).HasColumnType("numeric(18, 6)");

                entity.Property(e => e.ValorUnidadMoneda).HasColumnType("numeric(18, 6)");

                entity.Property(e => e.Vencimiento)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.VlrBaseivaMod)
                    .HasColumnType("money")
                    .HasColumnName("VLR_BASEIVA_MOD");

                entity.Property(e => e.VlrBaseivaOrig)
                    .HasColumnType("money")
                    .HasColumnName("VLR_BASEIVA_ORIG");

                entity.Property(e => e.VlrIvaOrig)
                    .HasColumnType("money")
                    .HasColumnName("VLR_IVA_ORIG");
            });

            modelBuilder.Entity<FacturacionAutoNovedade>(entity =>
            {
                entity.HasKey(e => e.Iden)
                    .IsClustered(false);

                entity.ToTable("Facturacion_Auto_Novedades");

                entity.HasIndex(e => e.Consecutivo, "UQ_FACTURACION_AUTO_NOVEDADES_CONSECUTIVO")
                    .IsUnique();

                entity.Property(e => e.Iden)
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("IDEN");

                entity.Property(e => e.Consecutivo).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.Descripcion)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Estado)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Fecha).HasColumnType("smalldatetime");

                entity.Property(e => e.FechaProgramacionFinal)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.FechaProgramacionInicial)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.FechaTasa).HasColumnType("smalldatetime");

                entity.Property(e => e.Moneda)
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.TasaCambio).HasColumnType("numeric(18, 3)");

                entity.Property(e => e.Usuario)
                    .HasMaxLength(250)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<FacturacionAutoNovedadesProgramacion>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Facturacion_Auto_Novedades_Programacion");

                entity.Property(e => e.Consecutivo).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.DiaSeleccionDia).IsUnicode(false);

                entity.Property(e => e.IdenFacturacionAutoNovedadesProgramacion)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_facturacion_auto_novedades_programacion");

                entity.Property(e => e.MesSeleccionMes).IsUnicode(false);

                entity.Property(e => e.TipoConfiguracion)
                    .HasMaxLength(25)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<FacturacionAutoNovedadesProgramacionCalendario>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Facturacion_Auto_Novedades_Programacion_Calendario");

                entity.Property(e => e.Consecutivo)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Fecha)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.IdenFacturacionAutoNovedadesProgramacionCalendario)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_facturacion_auto_novedades_programacion_calendario");
            });

            modelBuilder.Entity<FacturacionAutomatica>(entity =>
            {
                entity.HasKey(e => e.Iden);

                entity.ToTable("Facturacion_Automatica");

                entity.Property(e => e.Iden)
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("IDEN");

                entity.Property(e => e.Bu)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("BU")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Cantidad).HasColumnType("numeric(18, 6)");

                entity.Property(e => e.Ciclos)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.CtaCobrar)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.CxCnc)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("CxCNC")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DocumentoF)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.DocumentoI)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.DocumentoNotaF)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DocumentoNotaI)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Fecha)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.FechaPvencimiento)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("FechaPVencimiento");

                entity.Property(e => e.Fuente)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.FuenteNota)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Moneda)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.MonedaNc)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("MonedaNC")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.RegistroNovedad).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.TasaCambio).HasColumnType("numeric(18, 6)");

                entity.Property(e => e.TipoFactura)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.TipoFacturaNc)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("TipoFacturaNC")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Usuario)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Valor).HasColumnType("numeric(18, 6)");
            });

            modelBuilder.Entity<FacturacionAutomaticaDetalle>(entity =>
            {
                entity.HasKey(e => e.Iden)
                    .HasName("PK_Facturacion_Automatica_detalle");

                entity.ToTable("Facturacion_Automatica_Detalle");

                entity.HasIndex(e => e.IdFacturacionAutomatica, "IX_Facturacion_Automatica_Detalle_Id_Facturacion_Automatica");

                entity.HasIndex(e => new { e.IdFacturacionAutomatica, e.Fuente, e.Documento }, "IX_Facturacion_Automatica_Detalle_Id_Facturacion_Automatica_Fuente_Documento");

                entity.Property(e => e.Iden)
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("IDEN");

                entity.Property(e => e.Documento)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Estado)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Fuente)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.IdFacturacionAutomatica)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("Id_Facturacion_Automatica");

                entity.Property(e => e.Idtipodoc)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("IDTIPODOC")
                    .HasDefaultValueSql("('')");

                entity.HasOne(d => d.IdFacturacionAutomaticaNavigation)
                    .WithMany(p => p.FacturacionAutomaticaDetalles)
                    .HasForeignKey(d => d.IdFacturacionAutomatica)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Facturacion_Automatica_Detalle_Id_Facturacion_Automatica");
            });

            modelBuilder.Entity<FacturasAuditoriaImpresion>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Facturas_AuditoriaImpresion");

                entity.Property(e => e.Documento)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Fecha)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Fuente)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.Id).ValueGeneratedOnAdd();

                entity.Property(e => e.Usuario)
                    .HasMaxLength(250)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<FacturasBu>(entity =>
            {
                entity.HasKey(e => new { e.Anomesfac, e.Bu, e.Codicta, e.Idunidad, e.Idcliprv, e.Tipofact, e.Numefac, e.Vencfac, e.Refefac });

                entity.ToTable("FACTURAS_BU");

                entity.HasIndex(e => e.Bu, "IX_FACTURAS_BU");

                entity.HasIndex(e => new { e.Bu, e.Codicta, e.Idunidad, e.Idcliprv, e.Tipofact, e.Numefac, e.Vencfac, e.Refefac, e.Anomesfac }, "IX_FACTURAS_BU_BU_CODICTA_IDUNIDAD_IDCLIPRV_TIPOFACT_NUMEFAC_VENCFAC_REFEFAC_ANOMESFAC");

                entity.HasIndex(e => new { e.Bu, e.Fechfac, e.Clasecp, e.Idcliprv }, "IX_FACTURAS_BU_BU_FECHFAC_ClaseCP_IdCliPrv");

                entity.HasIndex(e => e.Codicta, "IX_FACTURAS_BU_MAECONT");

                entity.Property(e => e.Anomesfac)
                    .HasMaxLength(7)
                    .IsUnicode(false)
                    .HasColumnName("ANOMESFAC")
                    .IsFixedLength();

                entity.Property(e => e.Bu)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("BU");

                entity.Property(e => e.Codicta)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("CODICTA")
                    .IsFixedLength();

                entity.Property(e => e.Idunidad)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("IDUNIDAD")
                    .IsFixedLength();

                entity.Property(e => e.Idcliprv)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("IDCLIPRV");

                entity.Property(e => e.Tipofact)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("TIPOFACT")
                    .IsFixedLength();

                entity.Property(e => e.Numefac)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("NUMEFAC");

                entity.Property(e => e.Vencfac)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("VENCFAC")
                    .IsFixedLength();

                entity.Property(e => e.Refefac)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("REFEFAC");

                entity.Property(e => e.Autorizacion)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("AUTORIZACION");

                entity.Property(e => e.Clasecp)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("CLASECP")
                    .IsFixedLength();

                entity.Property(e => e.Fechacaducidad)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("FECHACADUCIDAD");

                entity.Property(e => e.Fecharadicado)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("FECHARADICADO");

                entity.Property(e => e.Fechfac)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("FECHFAC");

                entity.Property(e => e.Feumfac)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("FEUMFAC");

                entity.Property(e => e.IdenFacturasBu)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_facturas_bu");

                entity.Property(e => e.Idvende)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("IDVENDE")
                    .IsFixedLength();

                entity.Property(e => e.Idzona)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("IDZONA")
                    .IsFixedLength();

                entity.Property(e => e.Mvcrfac)
                    .HasColumnType("money")
                    .HasColumnName("MVCRFAC");

                entity.Property(e => e.Mvcrmfac)
                    .HasColumnType("money")
                    .HasColumnName("MVCRMFAC");

                entity.Property(e => e.Mvcrmon1)
                    .HasColumnType("money")
                    .HasColumnName("MVCRMON1");

                entity.Property(e => e.Mvcrmon2)
                    .HasColumnType("money")
                    .HasColumnName("MVCRMON2");

                entity.Property(e => e.Mvdbfac)
                    .HasColumnType("money")
                    .HasColumnName("MVDBFAC");

                entity.Property(e => e.Mvdbmfac)
                    .HasColumnType("money")
                    .HasColumnName("MVDBMFAC");

                entity.Property(e => e.Mvdbmon1)
                    .HasColumnType("money")
                    .HasColumnName("MVDBMON1");

                entity.Property(e => e.Mvdbmon2)
                    .HasColumnType("money")
                    .HasColumnName("MVDBMON2");

                entity.Property(e => e.Sactfac)
                    .HasColumnType("money")
                    .HasColumnName("SACTFAC");

                entity.Property(e => e.Sactmfac)
                    .HasColumnType("money")
                    .HasColumnName("SACTMFAC");

                entity.Property(e => e.Santfac)
                    .HasColumnType("money")
                    .HasColumnName("SANTFAC");

                entity.Property(e => e.Santmfac)
                    .HasColumnType("money")
                    .HasColumnName("SANTMFAC");

                entity.Property(e => e.Sdacmon1)
                    .HasColumnType("money")
                    .HasColumnName("SDACMON1");

                entity.Property(e => e.Sdacmon2)
                    .HasColumnType("money")
                    .HasColumnName("SDACMON2");

                entity.Property(e => e.Sdanmon1)
                    .HasColumnType("money")
                    .HasColumnName("SDANMON1");

                entity.Property(e => e.Sdanmon2)
                    .HasColumnType("money")
                    .HasColumnName("SDANMON2");

                entity.Property(e => e.Serie)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("SERIE");

                entity.Property(e => e.Vencradicado)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("VENCRADICADO");

                entity.Property(e => e.VersionDeLaFila)
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.BuNavigation)
                    .WithMany(p => p.FacturasBus)
                    .HasForeignKey(d => d.Bu)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_FACTURAS_BU_BU");

                entity.HasOne(d => d.CodictaNavigation)
                    .WithMany(p => p.FacturasBus)
                    .HasForeignKey(d => d.Codicta)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_FACTURAS_BU_MAECONT");
            });

            modelBuilder.Entity<FacturasBuLibroPrincipal>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("FacturasBU_LibroPrincipal");

                entity.Property(e => e.Anomesfac)
                    .HasMaxLength(7)
                    .IsUnicode(false)
                    .HasColumnName("ANOMESFAC")
                    .IsFixedLength();

                entity.Property(e => e.Autorizacion)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("AUTORIZACION");

                entity.Property(e => e.Bu)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("BU");

                entity.Property(e => e.Clasecp)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("CLASECP")
                    .IsFixedLength();

                entity.Property(e => e.Codicta)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("CODICTA")
                    .IsFixedLength();

                entity.Property(e => e.Fechacaducidad)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("FECHACADUCIDAD");

                entity.Property(e => e.Fecharadicado)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("FECHARADICADO");

                entity.Property(e => e.Fechfac)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("FECHFAC");

                entity.Property(e => e.Feumfac)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("FEUMFAC");

                entity.Property(e => e.Idcliprv)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("IDCLIPRV");

                entity.Property(e => e.Idunidad)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("IDUNIDAD")
                    .IsFixedLength();

                entity.Property(e => e.Idvende)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("IDVENDE")
                    .IsFixedLength();

                entity.Property(e => e.Idzona)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("IDZONA")
                    .IsFixedLength();

                entity.Property(e => e.Mvcrfac)
                    .HasColumnType("money")
                    .HasColumnName("MVCRFAC");

                entity.Property(e => e.Mvcrmfac)
                    .HasColumnType("money")
                    .HasColumnName("MVCRMFAC");

                entity.Property(e => e.Mvdbfac)
                    .HasColumnType("money")
                    .HasColumnName("MVDBFAC");

                entity.Property(e => e.Mvdbmfac)
                    .HasColumnType("money")
                    .HasColumnName("MVDBMFAC");

                entity.Property(e => e.Numefac)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("NUMEFAC");

                entity.Property(e => e.Refefac)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("REFEFAC");

                entity.Property(e => e.Sactfac)
                    .HasColumnType("money")
                    .HasColumnName("SACTFAC");

                entity.Property(e => e.Sactmfac)
                    .HasColumnType("money")
                    .HasColumnName("SACTMFAC");

                entity.Property(e => e.Santfac)
                    .HasColumnType("money")
                    .HasColumnName("SANTFAC");

                entity.Property(e => e.Santmfac)
                    .HasColumnType("money")
                    .HasColumnName("SANTMFAC");

                entity.Property(e => e.Serie)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("SERIE");

                entity.Property(e => e.Tipofact)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("TIPOFACT")
                    .IsFixedLength();

                entity.Property(e => e.Vencfac)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("VENCFAC")
                    .IsFixedLength();

                entity.Property(e => e.Vencradicado)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("VENCRADICADO");
            });

            modelBuilder.Entity<FacturasI>(entity =>
            {
                entity.HasKey(e => e.Anomesfac)
                    .IsClustered(false);

                entity.ToTable("FACTURAS_I");

                entity.Property(e => e.Anomesfac)
                    .HasMaxLength(7)
                    .IsUnicode(false)
                    .HasColumnName("ANOMESFAC");

                entity.Property(e => e.IdenFacturasI)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_facturas_i");

                entity.Property(e => e.Mvcrfac)
                    .HasColumnType("money")
                    .HasColumnName("MVCRFAC");

                entity.Property(e => e.Mvcrmfac)
                    .HasColumnType("money")
                    .HasColumnName("MVCRMFAC");

                entity.Property(e => e.Mvcrmon1)
                    .HasColumnType("money")
                    .HasColumnName("MVCRMON1");

                entity.Property(e => e.Mvcrmon2)
                    .HasColumnType("money")
                    .HasColumnName("MVCRMON2");

                entity.Property(e => e.Mvdbfac)
                    .HasColumnType("money")
                    .HasColumnName("MVDBFAC");

                entity.Property(e => e.Mvdbmfac)
                    .HasColumnType("money")
                    .HasColumnName("MVDBMFAC");

                entity.Property(e => e.Mvdbmon1)
                    .HasColumnType("money")
                    .HasColumnName("MVDBMON1");

                entity.Property(e => e.Mvdbmon2)
                    .HasColumnType("money")
                    .HasColumnName("MVDBMON2");

                entity.Property(e => e.Sactfac)
                    .HasColumnType("money")
                    .HasColumnName("SACTFAC");

                entity.Property(e => e.Sactmfac)
                    .HasColumnType("money")
                    .HasColumnName("SACTMFAC");

                entity.Property(e => e.Santfac)
                    .HasColumnType("money")
                    .HasColumnName("SANTFAC");

                entity.Property(e => e.Santmfac)
                    .HasColumnType("money")
                    .HasColumnName("SANTMFAC");

                entity.Property(e => e.Sdacmon1)
                    .HasColumnType("money")
                    .HasColumnName("SDACMON1");

                entity.Property(e => e.Sdacmon2)
                    .HasColumnType("money")
                    .HasColumnName("SDACMON2");

                entity.Property(e => e.Sdanmon1)
                    .HasColumnType("money")
                    .HasColumnName("SDANMON1");

                entity.Property(e => e.Sdanmon2)
                    .HasColumnType("money")
                    .HasColumnName("SDANMON2");
            });

            modelBuilder.Entity<FacturasImpresion>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Facturas_Impresion");

                entity.Property(e => e.Documento)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Fuente)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.IdenFacturasImpresion)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_facturas_impresion");

                entity.Property(e => e.Original)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");
            });

            modelBuilder.Entity<FacturasIntNovedade>(entity =>
            {
                entity.HasKey(e => e.Iden)
                    .HasName("PK_facturasint_novedades");

                entity.ToTable("FacturasInt_Novedades");

                entity.HasIndex(e => new { e.Bu, e.Codicta, e.Idcliprv, e.Tipofac, e.Numefac, e.Vencefac, e.Refefac }, "IX_facturasint_novedades");

                entity.Property(e => e.Iden)
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("iden");

                entity.Property(e => e.Bu)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("bu");

                entity.Property(e => e.Codicta)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("codicta");

                entity.Property(e => e.Consecutra).HasColumnName("consecutra");

                entity.Property(e => e.Fechacausacion)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("fechacausacion")
                    .IsFixedLength();

                entity.Property(e => e.Fechafinal)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("fechafinal")
                    .IsFixedLength();

                entity.Property(e => e.Fechainicial)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("fechainicial")
                    .IsFixedLength();

                entity.Property(e => e.Idcliprv)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("idcliprv");

                entity.Property(e => e.Idfuente)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("idfuente")
                    .IsFixedLength();

                entity.Property(e => e.Intereses)
                    .HasColumnType("money")
                    .HasColumnName("intereses");

                entity.Property(e => e.LogIdenTasaVariable)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("logIdenTasaVariable");

                entity.Property(e => e.LogPorcentaje).HasColumnName("logPorcentaje");

                entity.Property(e => e.LogSpread).HasColumnName("logSpread");

                entity.Property(e => e.LogtipoSpread)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("logtipoSpread");

                entity.Property(e => e.Logtipotasa)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("logtipotasa");

                entity.Property(e => e.Numdoctra)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("numdoctra")
                    .IsFixedLength();

                entity.Property(e => e.Numefac)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("numefac");

                entity.Property(e => e.Porcentaje).HasColumnName("porcentaje");

                entity.Property(e => e.Refefac)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("refefac");

                entity.Property(e => e.Saldo)
                    .HasColumnType("money")
                    .HasColumnName("saldo");

                entity.Property(e => e.Spread).HasColumnName("spread");

                entity.Property(e => e.Tipofac)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("tipofac")
                    .IsFixedLength();

                entity.Property(e => e.Vencefac)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("vencefac")
                    .IsFixedLength();
            });

            modelBuilder.Entity<FacturasLibroPrincipal>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Facturas_LibroPrincipal");

                entity.Property(e => e.Anomesfac)
                    .HasMaxLength(7)
                    .IsUnicode(false)
                    .HasColumnName("ANOMESFAC")
                    .IsFixedLength();

                entity.Property(e => e.Autorizacion)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("AUTORIZACION");

                entity.Property(e => e.Clasecp)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("CLASECP")
                    .IsFixedLength();

                entity.Property(e => e.Codicta)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("CODICTA")
                    .IsFixedLength();

                entity.Property(e => e.Fechacaducidad)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("FECHACADUCIDAD");

                entity.Property(e => e.Fecharadicado)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("FECHARADICADO");

                entity.Property(e => e.Fechfac)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("FECHFAC");

                entity.Property(e => e.Feumfac)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("FEUMFAC");

                entity.Property(e => e.Idcliprv)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("IDCLIPRV");

                entity.Property(e => e.Idunidad)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("IDUNIDAD")
                    .IsFixedLength();

                entity.Property(e => e.Idvende)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("IDVENDE")
                    .IsFixedLength();

                entity.Property(e => e.Idzona)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("IDZONA")
                    .IsFixedLength();

                entity.Property(e => e.Mvcrfac)
                    .HasColumnType("money")
                    .HasColumnName("MVCRFAC");

                entity.Property(e => e.Mvcrmfac)
                    .HasColumnType("money")
                    .HasColumnName("MVCRMFAC");

                entity.Property(e => e.Mvdbfac)
                    .HasColumnType("money")
                    .HasColumnName("MVDBFAC");

                entity.Property(e => e.Mvdbmfac)
                    .HasColumnType("money")
                    .HasColumnName("MVDBMFAC");

                entity.Property(e => e.Numefac)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("NUMEFAC");

                entity.Property(e => e.Refefac)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("REFEFAC");

                entity.Property(e => e.Sactfac)
                    .HasColumnType("money")
                    .HasColumnName("SACTFAC");

                entity.Property(e => e.Sactmfac)
                    .HasColumnType("money")
                    .HasColumnName("SACTMFAC");

                entity.Property(e => e.Santfac)
                    .HasColumnType("money")
                    .HasColumnName("SANTFAC");

                entity.Property(e => e.Santmfac)
                    .HasColumnType("money")
                    .HasColumnName("SANTMFAC");

                entity.Property(e => e.Serie)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("SERIE");

                entity.Property(e => e.Tipofact)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("TIPOFACT")
                    .IsFixedLength();

                entity.Property(e => e.Vencfac)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("VENCFAC")
                    .IsFixedLength();

                entity.Property(e => e.Vencradicado)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("VENCRADICADO");
            });

            modelBuilder.Entity<FacturasPasoban2001>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("FacturasPAsoban2001");

                entity.Property(e => e.Bu)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("BU");

                entity.Property(e => e.Cliente)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Codicta)
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.IdenFacturaspasoban2001)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_facturaspasoban2001");

                entity.Property(e => e.Numefac)
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.Refefac)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Spid).HasColumnName("spid");

                entity.Property(e => e.Tipofact)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Vencfac)
                    .HasMaxLength(10)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<FacturasProgramacion>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Facturas_Programacion");

                entity.Property(e => e.Bu)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("BU")
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.Codicta)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("CODICTA")
                    .IsFixedLength();

                entity.Property(e => e.Estado)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("ESTADO")
                    .IsFixedLength();

                entity.Property(e => e.Fecprog)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("FECPROG")
                    .IsFixedLength();

                entity.Property(e => e.Idcliprv)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("IDCLIPRV");

                entity.Property(e => e.IdenFacturasProgramacion)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_facturas_programacion");

                entity.Property(e => e.Numefac)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("NUMEFAC");

                entity.Property(e => e.Refefac)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("REFEFAC");

                entity.Property(e => e.SaldoFact).HasColumnType("money");

                entity.Property(e => e.SaldoFactMon).HasColumnType("money");

                entity.Property(e => e.Tipofact)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("TIPOFACT")
                    .IsFixedLength();

                entity.Property(e => e.ValorIntCorriente).HasColumnType("money");

                entity.Property(e => e.ValorMoneda).HasColumnType("money");

                entity.Property(e => e.Valprog)
                    .HasColumnType("money")
                    .HasColumnName("VALPROG");

                entity.Property(e => e.Vencfac)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("VENCFAC")
                    .IsFixedLength();

                entity.HasOne(d => d.BuNavigation)
                    .WithMany()
                    .HasForeignKey(d => d.Bu)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Facturas_Programacion_BU");
            });

            modelBuilder.Entity<FacturasSaldoIntere>(entity =>
            {
                entity.HasKey(e => new { e.IdFuente, e.Numdoctra })
                    .HasName("PK_FACTURAS_SALDOINTERES");

                entity.ToTable("Facturas_SaldoInteres");

                entity.Property(e => e.IdFuente)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.Numdoctra)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.CliPrv)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.IdenFacturasSaldointeres)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_facturas_saldointeres");

                entity.Property(e => e.Mora).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.MoraM).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.SaldoVencido).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.SaldoVencidoM).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.TasaInteres).HasColumnType("numeric(18, 2)");
            });

            modelBuilder.Entity<FacturasVsCobro>(entity =>
            {
                entity.HasKey(e => e.Iden);

                entity.ToTable("FacturasVsCobro");

                entity.HasIndex(e => e.Cuenta, "IX_FacturasVsCobro_MAECONT");

                entity.HasIndex(e => new { e.Cuenta, e.Cliente, e.TipoFactura, e.NumeroFactura, e.Vencimiento, e.Referencia, e.Bu }, "UQ_FACTURASVSCOBRO_BU_CLIENTE_CUENTA_NUMEROFACTURA_REFERENCIA_TIPOFACTURA_VENCIMIENTO")
                    .IsUnique();

                entity.Property(e => e.Iden)
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Adicional1)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Adicional_1");

                entity.Property(e => e.Adicional2)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Adicional_2");

                entity.Property(e => e.AjusteCxP)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('N')")
                    .IsFixedLength();

                entity.Property(e => e.Bu)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("BU");

                entity.Property(e => e.Cliente)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Cuenta)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Documento)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Fecha)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Fuente)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.IdenPersonaCobro).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.NumeroFactura)
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.Referencia)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.TipoFactura)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.ValorInicial).HasColumnType("money");

                entity.Property(e => e.ValorInicialMoneda)
                    .HasColumnType("money")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Vencimiento)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.HasOne(d => d.CuentaNavigation)
                    .WithMany(p => p.FacturasVsCobros)
                    .HasForeignKey(d => d.Cuenta)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_FacturasVsCobro_MAECONT");

                entity.HasOne(d => d.IdenPersonaCobroNavigation)
                    .WithMany(p => p.FacturasVsCobros)
                    .HasForeignKey(d => d.IdenPersonaCobro)
                    .HasConstraintName("FK_FacturasVsCobro_SC_Cobrador");

                entity.HasOne(d => d.TipoFacturaNavigation)
                    .WithMany(p => p.FacturasVsCobros)
                    .HasForeignKey(d => d.TipoFactura)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_FacturasVsCobro_TIPOFACT");
            });

            modelBuilder.Entity<FacturasVsCobroLog>(entity =>
            {
                entity.HasKey(e => e.Iden);

                entity.ToTable("FacturasVsCobroLog");

                entity.HasIndex(e => e.Cuenta, "IX_FacturasVsCobroLog_MAECONT");

                entity.Property(e => e.Iden)
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Bu)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("BU");

                entity.Property(e => e.Cliente)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Cuenta)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Descripcion)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Fecha).HasColumnType("smalldatetime");

                entity.Property(e => e.IdenCobradorActual).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.IdenCobradorAnterior).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.NumeroFactura)
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.Operacion)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Referencia)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.TipoFactura)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Usuario)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Vencimiento)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.HasOne(d => d.ClienteNavigation)
                    .WithMany(p => p.FacturasVsCobroLogs)
                    .HasForeignKey(d => d.Cliente)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_FacturasVsCobroLog_CLIENTES");

                entity.HasOne(d => d.CuentaNavigation)
                    .WithMany(p => p.FacturasVsCobroLogs)
                    .HasForeignKey(d => d.Cuenta)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_FacturasVsCobroLog_MAECONT");

                entity.HasOne(d => d.IdenCobradorActualNavigation)
                    .WithMany(p => p.FacturasVsCobroLogIdenCobradorActualNavigations)
                    .HasForeignKey(d => d.IdenCobradorActual)
                    .HasConstraintName("FK_FacturasVsCobroLog_SC_Cobrador1");

                entity.HasOne(d => d.IdenCobradorAnteriorNavigation)
                    .WithMany(p => p.FacturasVsCobroLogIdenCobradorAnteriorNavigations)
                    .HasForeignKey(d => d.IdenCobradorAnterior)
                    .HasConstraintName("FK_FacturasVsCobroLog_SC_Cobrador");

                entity.HasOne(d => d.TipoFacturaNavigation)
                    .WithMany(p => p.FacturasVsCobroLogs)
                    .HasForeignKey(d => d.TipoFactura)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_FacturasVsCobroLog_TIPOFACT");

                entity.HasOne(d => d.UsuarioNavigation)
                    .WithMany(p => p.FacturasVsCobroLogs)
                    .HasForeignKey(d => d.Usuario)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_FacturasVsCobroLog_USUARIOS");
            });

            modelBuilder.Entity<Familia>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("FAMILIAS");

                entity.Property(e => e.Base)
                    .HasMaxLength(256)
                    .IsUnicode(false)
                    .HasColumnName("BASE");

                entity.Property(e => e.IdenFamilias)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_familias");

                entity.Property(e => e.Servidor)
                    .HasMaxLength(256)
                    .IsUnicode(false)
                    .HasColumnName("SERVIDOR");

                entity.Property(e => e.Tipo)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("TIPO");
            });

            modelBuilder.Entity<FbancolombiaProcesado>(entity =>
            {
                entity.HasKey(e => new { e.Idfuente, e.Numdoctra })
                    .HasName("PK_FBANCOLOMBIA_PROCESADOS");

                entity.ToTable("FBancolombia_Procesados");

                entity.Property(e => e.Idfuente)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("IDFUENTE");

                entity.Property(e => e.Numdoctra)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("NUMDOCTRA");

                entity.Property(e => e.Fecha)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.IdenFbancolombiaProcesados)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_fbancolombia_procesados");

                entity.Property(e => e.Secuencia)
                    .HasMaxLength(1)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<FbancolombiaSecuencium>(entity =>
            {
                entity.HasKey(e => new { e.Fecha, e.Secuencia })
                    .HasName("PK_FBANCOLOMBIA_SECUENCIA");

                entity.ToTable("FBancolombia_Secuencia");

                entity.Property(e => e.Fecha)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Secuencia)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.IdenFbancolombiaSecuencia)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_fbancolombia_secuencia");

                entity.Property(e => e.Vencimiento)
                    .HasMaxLength(8)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<FechaTipoPlazoFactura>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("FechaTipoPlazoFactura");

                entity.Property(e => e.Fecha)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.IdenFechatipoplazofactura)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_fechatipoplazofactura");
            });

            modelBuilder.Entity<FormaPagoAge>(entity =>
            {
                entity.HasKey(e => new { e.IdFormaPago, e.Cuenta, e.Cliente, e.TipoFac, e.Numefac, e.Vencefac, e.Refefac });

                entity.ToTable("FormaPago_Age");

                entity.Property(e => e.IdFormaPago).ValueGeneratedOnAdd();

                entity.Property(e => e.Cuenta)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')")
                    .IsFixedLength();

                entity.Property(e => e.Cliente)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.TipoFac)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')")
                    .IsFixedLength();

                entity.Property(e => e.Numefac)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.Vencefac)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')")
                    .IsFixedLength();

                entity.Property(e => e.Refefac)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.Bu)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("BU")
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.Documento)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')")
                    .IsFixedLength();

                entity.Property(e => e.FormaPago)
                    .HasMaxLength(1520)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.Fuente)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')")
                    .IsFixedLength();
            });

            modelBuilder.Entity<Fuente>(entity =>
            {
                entity.HasKey(e => e.Idfuente)
                    .HasName("pk_fuentes")
                    .IsClustered(false);

                entity.ToTable("FUENTES");

                entity.HasIndex(e => e.Idtipdoc, "IX_FUENTES_IDTIPDOC");

                entity.Property(e => e.Idfuente)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("IDFUENTE")
                    .IsFixedLength();

                entity.Property(e => e.Autorizacion)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('N')")
                    .IsFixedLength();

                entity.Property(e => e.BlPreContabiliza).HasColumnName("bl_PreContabiliza");

                entity.Property(e => e.Cierre)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('N')")
                    .IsFixedLength();

                entity.Property(e => e.Desfuente)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("DESFUENTE");

                entity.Property(e => e.Estilo)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("ESTILO")
                    .IsFixedLength();

                entity.Property(e => e.IdenFuentes)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_fuentes");

                entity.Property(e => e.Idtipdoc)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("IDTIPDOC")
                    .IsFixedLength();

                entity.Property(e => e.Rptcontable)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("RPTCONTABLE");

                entity.Property(e => e.Rptformato)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("RPTFORMATO");

                entity.Property(e => e.SpAperturaDcto)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SpCierreDcto)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SpCreacionDcto)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SpReutilizacionDcto)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SpReversionDcto)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.VersionDeLaFila)
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.IdtipdocNavigation)
                    .WithMany(p => p.Fuentes)
                    .HasForeignKey(d => d.Idtipdoc)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_FUENTES_TIPODCTOS");
            });

            modelBuilder.Entity<FuentesExcluirNcf>(entity =>
            {
                entity.ToTable("FuentesExcluirNCF");

                entity.HasIndex(e => e.IdFuente, "IX_FUENTESEXCLUIRNCF_IDFUENTE")
                    .IsUnique();

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.IdFuente)
                    .HasMaxLength(2)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Ger07ciudade>(entity =>
            {
                entity.HasKey(e => e.CodCiudad);

                entity.ToTable("Ger_07Ciudades");

                entity.Property(e => e.CodCiudad)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.IdenGer07ciudades)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_ger_07ciudades");

                entity.Property(e => e.Nombre)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Ger07entidade>(entity =>
            {
                entity.HasKey(e => e.IdBanco);

                entity.ToTable("Ger_07Entidades");

                entity.Property(e => e.IdBanco)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CodEntidad)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.IdenGer07entidades)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_ger_07entidades");
            });

            modelBuilder.Entity<Ger07general>(entity =>
            {
                entity.HasKey(e => new { e.Cuenta, e.TipoCuenta });

                entity.ToTable("Ger_07General");

                entity.Property(e => e.Cuenta)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.TipoCuenta)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.DigVerificacion)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('N')")
                    .IsFixedLength();

                entity.Property(e => e.Enviar)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.EnviarDecimales)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.EnviarRegistroCorreoE)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.FechaAplicacion)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')")
                    .IsFixedLength();

                entity.Property(e => e.FechaTransmision)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')")
                    .IsFixedLength();

                entity.Property(e => e.IdenGer07general)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_ger_07general");

                entity.Property(e => e.Medida)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.MedidaA)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");
            });

            modelBuilder.Entity<Ger07pabGeneral>(entity =>
            {
                entity.HasKey(e => new { e.Cuenta, e.TipoCuenta });

                entity.ToTable("Ger_07PabGeneral");

                entity.Property(e => e.Cuenta)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.TipoCuenta)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Aplicacion)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.ClaseTransaccion)
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.FechaAplicacion)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')")
                    .IsFixedLength();

                entity.Property(e => e.FechaTransmision)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')")
                    .IsFixedLength();

                entity.Property(e => e.IdenGer07pabgeneral)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_ger_07pabgeneral");

                entity.Property(e => e.Medida)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.MedidaA)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Secuencia)
                    .HasMaxLength(2)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Ger07pabProveedore>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Ger_07PabProveedores");

                entity.HasIndex(e => new { e.CodigoTercero, e.CodProveedor, e.TipoMatricula, e.CodigoMatricula }, "UQ_GER_07PABPROVEEDORES_CODIGOTERCERO_CODPROVEEDOR_TIPOMATRICULA_CODIGOMATRICULA")
                    .IsUnique();

                entity.Property(e => e.Banco)
                    .HasMaxLength(9)
                    .IsUnicode(false);

                entity.Property(e => e.CodProveedor)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.CodigoMatricula)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.CodigoTercero)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Cuenta)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Email)
                    .HasMaxLength(80)
                    .IsUnicode(false);

                entity.Property(e => e.Fax)
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.FechaAplicacion)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')")
                    .IsFixedLength();

                entity.Property(e => e.IdenGer07pabproveedores)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_ger_07pabproveedores");

                entity.Property(e => e.LugarPago)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.MedidaA)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.NidentificacionA)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("NIdentificacionA");

                entity.Property(e => e.Oficina)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Principal).HasDefaultValueSql("((1))");

                entity.Property(e => e.TipoDocumento)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.TipoMatricula)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.TipoTransaccion)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.HasOne(d => d.CodProveedorNavigation)
                    .WithMany()
                    .HasForeignKey(d => d.CodProveedor)
                    .HasConstraintName("FK_Ger_07PabProveedores_PROVEEDORES");

                entity.HasOne(d => d.CodigoTerceroNavigation)
                    .WithMany()
                    .HasForeignKey(d => d.CodigoTercero)
                    .HasConstraintName("FK_Ger_07PabProveedores_TERCEROS1");
            });

            modelBuilder.Entity<Ger07proveedore>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Ger_07Proveedores");

                entity.HasIndex(e => new { e.CodigoTercero, e.CodProveedor, e.TipoMatricula, e.CodigoMatricula }, "UQ_GER_07PROVEEDORES_CODIGOTERCERO_CODPROVEEDOR_TIPOMATRICULA_CODIGOMATRICULA")
                    .IsUnique();

                entity.Property(e => e.Banco)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CodProveedor)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.CodTercero)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.CodigoMatricula)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.CodigoTercero)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Cuenta)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DescReferencia)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.IdenGer07proveedores)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_ger_07proveedores");

                entity.Property(e => e.LugarPago)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Mostrar)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Principal).HasDefaultValueSql("((1))");

                entity.Property(e => e.TipoMatricula)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.TipoReferencia)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.TipoTransaccion)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.HasOne(d => d.CodProveedorNavigation)
                    .WithMany()
                    .HasForeignKey(d => d.CodProveedor)
                    .HasConstraintName("FK_Ger_07Proveedores_PROVEEDORES");

                entity.HasOne(d => d.CodigoTerceroNavigation)
                    .WithMany()
                    .HasForeignKey(d => d.CodigoTercero)
                    .HasConstraintName("FK_Ger_07Proveedores_TERCEROS1");
            });

            modelBuilder.Entity<Ger14general>(entity =>
            {
                entity.HasKey(e => e.IdTercero);

                entity.ToTable("Ger_14General");

                entity.Property(e => e.IdTercero)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.CaracteresEspeciales)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Cuenta)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.DigVerificacion)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('N')")
                    .IsFixedLength();

                entity.Property(e => e.IdBanco)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')")
                    .IsFixedLength();

                entity.Property(e => e.IdenGer14general)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_ger_14general");

                entity.Property(e => e.MostrarFacturas)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('N')")
                    .IsFixedLength();

                entity.Property(e => e.TipoCuenta)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.HasOne(d => d.IdBancoNavigation)
                    .WithMany(p => p.Ger14generals)
                    .HasForeignKey(d => d.IdBanco)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Ger_14General_BANCOS");

                entity.HasOne(d => d.IdTerceroNavigation)
                    .WithOne(p => p.Ger14general)
                    .HasForeignKey<Ger14general>(d => d.IdTercero)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Ger_14General_TERCEROS");
            });

            modelBuilder.Entity<Ger14proveedore>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Ger_14Proveedores");

                entity.HasIndex(e => new { e.CodigoTercero, e.IdProveedor, e.TipoMatricula, e.CodigoMatricula }, "UQ_GER_14PROVEEDORES_CODIGOTERCERO_IDPROVEEDOR_TIPOMATRICULA_CODIGOMATRICULA")
                    .IsUnique();

                entity.Property(e => e.CargoResponsable)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.CodCiudad)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.CodDpto)
                    .HasMaxLength(4)
                    .IsUnicode(false);

                entity.Property(e => e.CodPais)
                    .HasMaxLength(4)
                    .IsUnicode(false);

                entity.Property(e => e.CodigoMatricula)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.CodigoTercero)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Cuenta)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.Departamento)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.Email)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Fax)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.IdBanco)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')")
                    .IsFixedLength();

                entity.Property(e => e.IdProveedor)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.IdTercero)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.IdenGer14proveedores)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_ger_14proveedores");

                entity.Property(e => e.Identificacion)
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.Mostrar)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')")
                    .IsFixedLength();

                entity.Property(e => e.NombreResponsable)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.Oficial)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Sigla)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.Telefono)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.TipoCuenta)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.TipoMatricula)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.HasOne(d => d.CodigoTerceroNavigation)
                    .WithMany()
                    .HasForeignKey(d => d.CodigoTercero)
                    .HasConstraintName("FK_Ger_14Proveedores_TERCEROS1");

                entity.HasOne(d => d.IdBancoNavigation)
                    .WithMany()
                    .HasForeignKey(d => d.IdBanco)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Ger_14Proveedores_BANCOS");

                entity.HasOne(d => d.IdProveedorNavigation)
                    .WithMany()
                    .HasForeignKey(d => d.IdProveedor)
                    .HasConstraintName("FK_Ger_14Proveedores_PROVEEDORES");
            });

            modelBuilder.Entity<Ger19general>(entity =>
            {
                entity.HasKey(e => e.CodTercero);

                entity.ToTable("Ger_19General");

                entity.Property(e => e.CodTercero)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.BlDigitoVerificacion).HasColumnName("bl_DigitoVerificacion");

                entity.Property(e => e.Clave)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Cuenta)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Fecha)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.IdenGer19general)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_ger_19general");

                entity.Property(e => e.Medida)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Oficina)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.CodTerceroNavigation)
                    .WithOne(p => p.Ger19general)
                    .HasForeignKey<Ger19general>(d => d.CodTercero)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Ger_19General_TERCEROS");
            });

            modelBuilder.Entity<Ger19proveedore>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Ger_19Proveedores");

                entity.HasIndex(e => new { e.CodigoTercero, e.CodProveedor, e.TipoMatricula, e.CodigoMatricula }, "UQ_GER_19PROVEEDORES_CODIGOTERCERO_CODPROVEEDOR_TIPOMATRICULA_CODIGOMATRICULA")
                    .IsUnique();

                entity.Property(e => e.CodBanco)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CodProveedor)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.CodTercero)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.CodigoMatricula)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.CodigoTercero)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Cuenta)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.IdenGer19proveedores)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_ger_19proveedores");

                entity.Property(e => e.Mostrar)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.TipoCuenta)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.TipoIdentificacion)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.TipoMatricula)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.TipoTransaccion)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.HasOne(d => d.CodProveedorNavigation)
                    .WithMany()
                    .HasForeignKey(d => d.CodProveedor)
                    .HasConstraintName("FK_Ger_19Proveedores_PROVEEDORES");

                entity.HasOne(d => d.CodTerceroNavigation)
                    .WithMany()
                    .HasForeignKey(d => d.CodTercero)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Ger_19Proveedores_TERCEROS");

                entity.HasOne(d => d.CodigoTerceroNavigation)
                    .WithMany()
                    .HasForeignKey(d => d.CodigoTercero)
                    .HasConstraintName("FK_Ger_19Proveedores_TERCEROS1");
            });

            modelBuilder.Entity<GerBanBoliviaBisaBanco>(entity =>
            {
                entity.HasKey(e => e.Codigo);

                entity.ToTable("GerBanBoliviaBISA_Bancos");

                entity.Property(e => e.Codigo)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Id).ValueGeneratedOnAdd();

                entity.Property(e => e.Nombre)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<GerBanBoliviaBisaProveedor>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("GerBanBoliviaBISA_Proveedor");

                entity.Property(e => e.ApellidoMaterno)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Banco)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Beneficiario)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.CodigoMatricula)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.CodigoTercero)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Cuenta)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Email)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.FormaEntrega)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.IdProveedor)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.IdTercero)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.IdenGerbanboliviabisaProveedor)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_gerbanboliviabisa_proveedor");

                entity.Property(e => e.NombreCompleto)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.NumeroDocumento)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Sucursal)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Telefono)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.TipoBenef)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.TipoCuenta)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.TipoDocumento)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.TipoMatricula)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.TipoPersona)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.HasOne(d => d.BancoNavigation)
                    .WithMany()
                    .HasForeignKey(d => d.Banco)
                    .HasConstraintName("FK_GerBanBoliviaBISA_Proveedor_Bancos");

                entity.HasOne(d => d.CodigoTerceroNavigation)
                    .WithMany()
                    .HasForeignKey(d => d.CodigoTercero)
                    .HasConstraintName("FK_GerBanBoliviaBISA_Proveedor_CODTERCEROS");

                entity.HasOne(d => d.IdTerceroNavigation)
                    .WithMany()
                    .HasForeignKey(d => d.IdTercero)
                    .HasConstraintName("FK_GerBanBoliviaBISA_Proveedor_IDTERCEROS");

                entity.HasOne(d => d.SucursalNavigation)
                    .WithMany()
                    .HasForeignKey(d => d.Sucursal)
                    .HasConstraintName("FK_GerBanBoliviaBISA_Proveedor_Sucursales");

                entity.HasOne(d => d.TipoDocumentoNavigation)
                    .WithMany()
                    .HasForeignKey(d => d.TipoDocumento)
                    .HasConstraintName("FK_GerBanBoliviaBISA_Proveedor_TipoDoc");
            });

            modelBuilder.Entity<GerBanBoliviaBisaSucursal>(entity =>
            {
                entity.HasKey(e => e.Codigo);

                entity.ToTable("GerBanBoliviaBISA_Sucursal");

                entity.Property(e => e.Codigo)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Id).ValueGeneratedOnAdd();

                entity.Property(e => e.Nombre)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<GerBanBoliviaBisaTiposId>(entity =>
            {
                entity.HasKey(e => e.Codigo);

                entity.ToTable("GerBanBoliviaBISA_TiposID");

                entity.Property(e => e.Codigo)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Id).ValueGeneratedOnAdd();

                entity.Property(e => e.Nombre)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<GerBancoAvVilla>(entity =>
            {
                entity.HasKey(e => e.CodTercero)
                    .HasName("PK_GERBANCOAVVILLAS");

                entity.Property(e => e.CodTercero)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.CodPlaza)
                    .HasMaxLength(4)
                    .IsUnicode(false);

                entity.Property(e => e.Cuenta)
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.IdenGerbancoavvillas)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_gerbancoavvillas");

                entity.Property(e => e.TipoProducto)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.HasOne(d => d.CodPlazaNavigation)
                    .WithMany(p => p.GerBancoAvVillas)
                    .HasForeignKey(d => d.CodPlaza)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_GerBancoAvVillas_GerBancoAvVillas_Prov");

                entity.HasOne(d => d.CodTerceroNavigation)
                    .WithOne(p => p.GerBancoAvVilla)
                    .HasForeignKey<GerBancoAvVilla>(d => d.CodTercero)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_GerBancoAvVillas_Terceros");
            });

            modelBuilder.Entity<GerBancoAvVillasCodigosTransaccion>(entity =>
            {
                entity.HasKey(e => e.CodTran)
                    .HasName("PK_GERBANCOAVVILLAS_CODIGOSTRANSACCION");

                entity.ToTable("GerBancoAvVillas_CodigosTransaccion");

                entity.Property(e => e.CodTran)
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.IdenGerbancoavvillasCodigostransaccion)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_gerbancoavvillas_codigostransaccion");

                entity.Property(e => e.NombTran)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<GerBancoAvVillasPlaza>(entity =>
            {
                entity.HasKey(e => e.CodPlaza)
                    .HasName("PK_GERBANCOAVVILLAS_PLAZAS");

                entity.ToTable("GerBancoAvVillas_Plazas");

                entity.Property(e => e.CodPlaza)
                    .HasMaxLength(4)
                    .IsUnicode(false);

                entity.Property(e => e.IdenGerbancoavvillasPlazas)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_gerbancoavvillas_plazas");

                entity.Property(e => e.NombrePlaza)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<GerBancoAvVillasProv>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("GerBancoAvVillas_Prov");

                entity.HasIndex(e => new { e.CodigoTercero, e.CodProveedor, e.TipoMatricula, e.CodigoMatricula }, "UQ_GERBANCOAVVILLAS_PROV_CODIGOTERCERO_CODPROVEEDOR_TIPOMATRICULA_CODIGOMATRICULA")
                    .IsUnique();

                entity.Property(e => e.CodBanco)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CodPlaza)
                    .HasMaxLength(4)
                    .IsUnicode(false);

                entity.Property(e => e.CodProveedor)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.CodTercero)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.CodTransaccion)
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.CodigoMatricula)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.CodigoTercero)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Cuenta)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.IdenGerbancoavvillasProv)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_gerbancoavvillas_prov");

                entity.Property(e => e.TipoCuenta)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.TipoIdentificacion)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.TipoMatricula)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ValidaId).HasColumnName("Valida_Id");

                entity.HasOne(d => d.CodBancoNavigation)
                    .WithMany()
                    .HasForeignKey(d => d.CodBanco)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_GerBancoAvVillas_Prov_Bancos");

                entity.HasOne(d => d.CodPlazaNavigation)
                    .WithMany()
                    .HasForeignKey(d => d.CodPlaza)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_GerBancoAvVillas_Prov_GerBancoAvVillas_Plazas");

                entity.HasOne(d => d.CodProveedorNavigation)
                    .WithMany()
                    .HasForeignKey(d => d.CodProveedor)
                    .HasConstraintName("FK_GerBancoAvVillas_Prov_Proveedores");

                entity.HasOne(d => d.CodTerceroNavigation)
                    .WithMany()
                    .HasForeignKey(d => d.CodTercero)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_GerBancoAvVillas_Prov_Terceros");

                entity.HasOne(d => d.CodTransaccionNavigation)
                    .WithMany()
                    .HasForeignKey(d => d.CodTransaccion)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_GerBancoAvVillas_Prov_GerBancoAvVillas_CodigosTransaccion");

                entity.HasOne(d => d.CodigoTerceroNavigation)
                    .WithMany()
                    .HasForeignKey(d => d.CodigoTercero)
                    .HasConstraintName("FK_GerBancoAvVillas_Prov_Terceros1");
            });

            modelBuilder.Entity<GerBancoBbvaperu>(entity =>
            {
                entity.HasKey(e => e.CodTercero)
                    .HasName("PK_GERBANCOBBVAPERU");

                entity.ToTable("GerBancoBBVAPeru");

                entity.Property(e => e.CodTercero)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Cuenta)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.DigitosControl)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.HoraProceso)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.IdBanco)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.IdenGerbancobbvaperu)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_gerbancobbvaperu");

                entity.Property(e => e.Oficina)
                    .HasMaxLength(4)
                    .IsUnicode(false);

                entity.Property(e => e.TipoProceso)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdBancoNavigation)
                    .WithMany(p => p.GerBancoBbvaperus)
                    .HasForeignKey(d => d.IdBanco)
                    .HasConstraintName("FK_GerBancoBBVAPeru_Bancos");
            });

            modelBuilder.Entity<GerBancoBbvaperuProv>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("GerBancoBBVAPeru_Prov");

                entity.HasIndex(e => new { e.CodigoTercero, e.CodProveedor, e.TipoMatricula, e.CodigoMatricula }, "UQ_GERBANCOBBVAPERU_PROV_CODIGOTERCERO_CODPROVEEDOR_TIPOMATRICULA_CODIGOMATRICULA")
                    .IsUnique();

                entity.Property(e => e.Cci)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("CCI")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.CodProveedor)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.CodTercero)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.CodigoMatricula)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.CodigoTercero)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Cuenta)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.DigitosControl)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.IdBanco)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.IdenGerbancobbvaperuProv)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_gerbancobbvaperu_prov");

                entity.Property(e => e.MedioAviso)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Oficina)
                    .HasMaxLength(4)
                    .IsUnicode(false);

                entity.Property(e => e.TipoAbono)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.TipoIdentificacion)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.TipoMatricula)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.TipoMedioAviso)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.HasOne(d => d.IdBancoNavigation)
                    .WithMany()
                    .HasForeignKey(d => d.IdBanco)
                    .HasConstraintName("FK_GerBancoBBVAPeru_Prov_Bancos");
            });

            modelBuilder.Entity<GerBancoBolivariano>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("GerBancoBolivariano");

                entity.Property(e => e.BancoBolivariano)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.CodigoAsignado)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.IdenGerbancobolivariano)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_gerbancobolivariano");

                entity.Property(e => e.Nemonico)
                    .HasMaxLength(6)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<GerBancoBolivarianoBanco>(entity =>
            {
                entity.ToTable("GerBancoBolivariano_Bancos");

                entity.Property(e => e.Codigo)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.Nombre)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<GerBancoBolivarianoProv>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("GerBancoBolivariano_Prov");

                entity.HasIndex(e => new { e.CodigoTercero, e.CodProveedor, e.TipoMatricula, e.CodigoMatricula }, "UQ_GERBANCOBOLIVARIANO_PROV_CODIGOTERCERO_CODPROVEEDOR_TIPOMATRICULA_CODIGOMATRICULA")
                    .IsUnique();

                entity.Property(e => e.CodProveedor)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.CodTercero)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.CodigoMatricula)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.CodigoTercero)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.IdenGerbancobolivarianoProv)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_gerbancobolivariano_prov");

                entity.Property(e => e.NumeroCuenta)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.NumeroIdentificacion)
                    .HasMaxLength(14)
                    .IsUnicode(false);

                entity.Property(e => e.RealTipoCta)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.TipoCuenta)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.TipoIdentificacion)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.TipoMatricula)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.HasOne(d => d.CodProveedorNavigation)
                    .WithMany()
                    .HasForeignKey(d => d.CodProveedor)
                    .HasConstraintName("FK_GerBancoBolivariano_Prov_PROVEEDORES");

                entity.HasOne(d => d.CodTerceroNavigation)
                    .WithMany()
                    .HasForeignKey(d => d.CodTercero)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_GerBancoBolivariano_Prov_TERCEROS");

                entity.HasOne(d => d.CodigoTerceroNavigation)
                    .WithMany()
                    .HasForeignKey(d => d.CodigoTercero)
                    .HasConstraintName("FK_GerBancoBolivariano_Prov_TERCEROS1");

                entity.HasOne(d => d.IdBancoNavigation)
                    .WithMany()
                    .HasForeignKey(d => d.IdBanco)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_GerBancoBolivariano_Prov_GerBancoBolivariano_Bancos");
            });

            modelBuilder.Entity<GerBancoCajaSocialBanco>(entity =>
            {
                entity.ToTable("GerBancoCajaSocial_Banco");

                entity.HasIndex(e => e.Codigo, "UQ_GerBancoCajaSocial_Banco_Codigo")
                    .IsUnique();

                entity.Property(e => e.Codigo)
                    .HasMaxLength(9)
                    .IsUnicode(false);

                entity.Property(e => e.Nombre)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<GerBancoCajaSocialProveedor>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("GerBancoCajaSocial_Proveedor");

                entity.HasIndex(e => new { e.CodigoTercero, e.Idprove, e.TipoMatricula, e.CodigoMatricula }, "UQ_GERBANCOCAJASOCIAL_PROVEEDOR_CODIGOTERCERO_CODPROVEEDOR_TIPOMATRICULA_CODIGOMATRICULA")
                    .IsUnique();

                entity.Property(e => e.Banco)
                    .HasMaxLength(9)
                    .IsUnicode(false);

                entity.Property(e => e.CodigoMatricula)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.CodigoTercero)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Cuenta)
                    .HasMaxLength(17)
                    .IsUnicode(false);

                entity.Property(e => e.IdenGerbancocajasocialProveedor)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_gerbancocajasocial_proveedor");

                entity.Property(e => e.Identificacion)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Idprove)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("idprove");

                entity.Property(e => e.TipoCuenta)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.TipoMatricula)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.HasOne(d => d.CodigoTerceroNavigation)
                    .WithMany()
                    .HasForeignKey(d => d.CodigoTercero)
                    .HasConstraintName("FK_GerBancoCajaSocial_Proveedor_Terceros");

                entity.HasOne(d => d.IdproveNavigation)
                    .WithMany()
                    .HasForeignKey(d => d.Idprove)
                    .HasConstraintName("FK_GerBancoCajaSocial_Proveedor_Proveedores");
            });

            modelBuilder.Entity<GerBancoFalabellaEntidade>(entity =>
            {
                entity.HasKey(e => e.IdBanco);

                entity.ToTable("Ger_BancoFalabella_Entidades");

                entity.Property(e => e.IdBanco)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CodigoEntidad)
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Iden)
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<GerBancoFalabellaProveedore>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Ger_BancoFalabella_Proveedores");

                entity.HasIndex(e => new { e.CodigoTercero, e.CodigoProveedor, e.TipoMatricula, e.CodigoMatricula }, "UQ_Ger_BancoFalabella_Proveedores_CodigoTercero_CodigoProveedor_TipoMatricula_CodigoMatricula")
                    .IsUnique();

                entity.Property(e => e.Banco)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.BlPrincipal)
                    .IsRequired()
                    .HasColumnName("bl_Principal")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.CodigoMatricula)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.CodigoProveedor)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.CodigoTercero)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Correo)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Iden)
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.NumeroCuenta)
                    .HasMaxLength(18)
                    .IsUnicode(false);

                entity.Property(e => e.NumeroIdentificacion)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Referencia)
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.TipoCuenta)
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.TipoIdentificacion)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.TipoMatricula)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.HasOne(d => d.CodigoProveedorNavigation)
                    .WithMany()
                    .HasForeignKey(d => d.CodigoProveedor)
                    .HasConstraintName("FK_Ger_BancoFalabella_Proveedores_Proveedores_CodigoProveedor");

                entity.HasOne(d => d.CodigoTerceroNavigation)
                    .WithMany()
                    .HasForeignKey(d => d.CodigoTercero)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Ger_BancoFalabella_Proveedores_Terceros_CodigoTercero");
            });

            modelBuilder.Entity<GerBancoHsbcColombiaProv>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("GerBancoHsbcColombia_Prov");

                entity.HasIndex(e => new { e.CodigoTercero, e.CodProveedor, e.TipoMatricula, e.CodigoMatricula }, "UQ_GERBANCOHSBCCOLOMBIA_PROV_CODIGOTERCERO_CODPROVEEDOR_TIPOMATRICULA_CODIGOMATRICULA")
                    .IsUnique();

                entity.Property(e => e.CodProveedor)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.CodTercero)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.CodigoMatricula)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.CodigoTercero)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Email)
                    .HasMaxLength(70)
                    .IsUnicode(false);

                entity.Property(e => e.IdBanco)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.IdenGerbancohsbccolombiaProv)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_gerbancohsbccolombia_prov");

                entity.Property(e => e.MontoMaximo).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.NumeroCuenta)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.NumeroIdentificacion)
                    .HasMaxLength(11)
                    .IsUnicode(false);

                entity.Property(e => e.TipoCuenta)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.TipoIdentificacion)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.TipoInscripcion)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.TipoMatricula)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.HasOne(d => d.CodProveedorNavigation)
                    .WithMany()
                    .HasForeignKey(d => d.CodProveedor)
                    .HasConstraintName("FK_GerBancoHsbcColombia_Prov_PROVEEDORES");

                entity.HasOne(d => d.CodTerceroNavigation)
                    .WithMany()
                    .HasForeignKey(d => d.CodTercero)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_GerBancoHsbcColombia_Prov_TERCEROS");

                entity.HasOne(d => d.CodigoTerceroNavigation)
                    .WithMany()
                    .HasForeignKey(d => d.CodigoTercero)
                    .HasConstraintName("FK_GerBancoHsbcColombia_Prov_TERCEROS1");

                entity.HasOne(d => d.IdBancoNavigation)
                    .WithMany()
                    .HasForeignKey(d => d.IdBanco)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_GerBancoHsbcColombia_Prov_Bancos");
            });

            modelBuilder.Entity<GerBancoHsbcColombium>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.Cuenta)
                    .HasMaxLength(12)
                    .IsUnicode(false);

                entity.Property(e => e.IdenGerbancohsbccolombia)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_gerbancohsbccolombia");

                entity.Property(e => e.NombreCuenta)
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<GerBancoHsbcCostaRica>(entity =>
            {
                entity.HasKey(e => e.Cuenta)
                    .HasName("PK_GERBANCOHSBCCOSTARICA");

                entity.ToTable("GerBancoHsbcCostaRica");

                entity.Property(e => e.Cuenta)
                    .HasMaxLength(17)
                    .IsUnicode(false)
                    .HasColumnName("CUENTA");

                entity.Property(e => e.Fdebito)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("FDEBITO");

                entity.Property(e => e.IdenGerbancohsbccostarica)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_gerbancohsbccostarica");

                entity.Property(e => e.Moneda)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("MONEDA");

                entity.Property(e => e.Nivelautorizacion)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("NIVELAUTORIZACION");

                entity.Property(e => e.Prioridad)
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .HasColumnName("PRIORIDAD");

                entity.Property(e => e.Tpago).HasColumnName("TPAGO");
            });

            modelBuilder.Entity<GerBancoHsbcCostaRicaProv>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("GerBancoHsbcCostaRica_Prov");

                entity.HasIndex(e => new { e.CodPrvTer, e.Tipo, e.CodigoMatricula }, "UQ_GERBANCOHSBCCOSTARICA_PROV_CODPRVTER_TIPO_CODIGOMATRICULA")
                    .IsUnique();

                entity.Property(e => e.CodPrvTer)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.CodigoMatricula)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Cuenta)
                    .HasMaxLength(17)
                    .IsUnicode(false);

                entity.Property(e => e.Email)
                    .HasMaxLength(70)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.IdenGerbancohsbccostaricaProv)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_gerbancohsbccostarica_prov");

                entity.Property(e => e.Tipo)
                    .HasMaxLength(1)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<GerBancoIndustrialGuatemalaProvTer>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("GerBancoIndustrialGuatemala_ProvTer");

                entity.HasIndex(e => new { e.CodPrvTer, e.Tipo, e.CodigoMatricula }, "UQ_GERBANCOINDUSTRIALGUATEMALA_PROVTER_CODPRVTER_TIPO_CODIGOMATRICULA")
                    .IsUnique();

                entity.Property(e => e.CodPrvTer)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.CodigoMatricula)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Email)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("EMAIL");

                entity.Property(e => e.IdenGerbancoindustrialguatemalaProvter)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_gerbancoindustrialguatemala_provter");

                entity.Property(e => e.Numcta)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("NUMCTA");

                entity.Property(e => e.Tipo)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Tipocta)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("TIPOCTA");
            });

            modelBuilder.Entity<GerBancoItauColombiaEntidade>(entity =>
            {
                entity.HasKey(e => e.IdBanco);

                entity.ToTable("Ger_BancoItauColombia_Entidades");

                entity.Property(e => e.IdBanco)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CodigoEntidad)
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Iden)
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<GerBancoItauColombiaProv>(entity =>
            {
                entity.HasKey(e => e.IdenGerBancoItauColombiaProv);

                entity.ToTable("GerBancoItauColombia_Prov");

                entity.HasIndex(e => new { e.CodigoTercero, e.CodProveedor, e.TipoMatricula, e.CodigoMatricula }, "UQ_GerBancoItauColombia_Prov_CodigoTercero_CodProveedor_TipoMatricula_CodigoMatricula")
                    .IsUnique();

                entity.Property(e => e.IdenGerBancoItauColombiaProv).HasColumnName("iden_GerBancoItauColombia_Prov");

                entity.Property(e => e.CodProveedor)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.CodTercero)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.CodigoMatricula)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.CodigoTercero)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Email)
                    .HasMaxLength(70)
                    .IsUnicode(false);

                entity.Property(e => e.IdBanco)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.MontoMaximo).HasColumnType("numeric(9, 0)");

                entity.Property(e => e.NumeroCuenta)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.NumeroIdentificacion)
                    .HasMaxLength(11)
                    .IsUnicode(false);

                entity.Property(e => e.TipoCuenta)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.TipoIdentificacion)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.TipoInscripcion)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.TipoMatricula)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.HasOne(d => d.CodProveedorNavigation)
                    .WithMany(p => p.GerBancoItauColombiaProvs)
                    .HasForeignKey(d => d.CodProveedor)
                    .HasConstraintName("FK_GerBancoItauColombia_Prov_Proveedores_CodProveedor");

                entity.HasOne(d => d.CodigoTerceroNavigation)
                    .WithMany(p => p.GerBancoItauColombiaProvs)
                    .HasForeignKey(d => d.CodigoTercero)
                    .HasConstraintName("FK_GerBancoItauColombia_Prov_Terceros_CodigoTercero");
            });

            modelBuilder.Entity<GerBancoItauColombium>(entity =>
            {
                entity.HasKey(e => e.IdenGerBancoItauColombia);

                entity.Property(e => e.IdenGerBancoItauColombia).HasColumnName("iden_GerBancoItauColombia");

                entity.Property(e => e.Cuenta)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NombreCuenta)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<GerBancoNacionPeruProvTer>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("GerBancoNacionPeru_ProvTer");

                entity.Property(e => e.Cci)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("CCI")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.CodProveedor)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.CodTercero)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.CodigoMatricula)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.CodigoTercero)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Cuenta)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.IdBanco)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Iden).ValueGeneratedOnAdd();

                entity.Property(e => e.TipoMatricula)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.HasOne(d => d.IdBancoNavigation)
                    .WithMany()
                    .HasForeignKey(d => d.IdBanco)
                    .HasConstraintName("FK_GerBancoNacionPeru_ProvTer");
            });

            modelBuilder.Entity<GerBancoNacionalCostaRica>(entity =>
            {
                entity.HasKey(e => e.Nitcia)
                    .HasName("PK_GERBANCONACIONALCOSTARICA");

                entity.ToTable("GerBancoNacionalCostaRica");

                entity.Property(e => e.Nitcia)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("NITCIA");

                entity.Property(e => e.Dvcta).HasColumnName("DVCTA");

                entity.Property(e => e.IdenGerbanconacionalcostarica)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_gerbanconacionalcostarica");

                entity.Property(e => e.Moneda)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("MONEDA");

                entity.Property(e => e.Numcli)
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .HasColumnName("NUMCLI");

                entity.Property(e => e.Numcta)
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .HasColumnName("NUMCTA");

                entity.Property(e => e.Oficina)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("OFICINA");

                entity.Property(e => e.Producto)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("PRODUCTO");
            });

            modelBuilder.Entity<GerBancoNacionalCostaRicaProvTer>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("GerBancoNacionalCostaRica_ProvTer");

                entity.HasIndex(e => new { e.CodPrvTer, e.Tipo, e.CodigoMatricula }, "UQ_GERBANCONACIONALCOSTARICA_PROVTER_CODPRVTER_TIPO_CODIGOMATRICULA")
                    .IsUnique();

                entity.Property(e => e.CodPrvTer)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.CodigoMatricula)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Dvcta).HasColumnName("DVCTA");

                entity.Property(e => e.IdenGerbanconacionalcostaricaProvter)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_gerbanconacionalcostarica_provter");

                entity.Property(e => e.Moneda)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("MONEDA");

                entity.Property(e => e.Numcta)
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .HasColumnName("NUMCTA");

                entity.Property(e => e.Oficina)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("OFICINA");

                entity.Property(e => e.Producto)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("PRODUCTO");

                entity.Property(e => e.Tipo)
                    .HasMaxLength(1)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<GerBancoOccHondura>(entity =>
            {
                entity.HasKey(e => e.Nitcia)
                    .HasName("PK_GERBANCOOCCHONDURAS");

                entity.Property(e => e.Nitcia)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("NITCIA");

                entity.Property(e => e.IdenGerbancoocchonduras)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_gerbancoocchonduras");

                entity.Property(e => e.Numcta)
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .HasColumnName("NUMCTA");
            });

            modelBuilder.Entity<GerBancoOccHondurasProvTer>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("GerBancoOccHonduras_ProvTer");

                entity.HasIndex(e => new { e.CodPrvTer, e.Tipo, e.CodigoMatricula }, "UQ_GERBANCOOCCHONDURAS_PROVTER_CODPRVTER_TIPO_CODIGOMATRICULA")
                    .IsUnique();

                entity.Property(e => e.CodPrvTer)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.CodigoMatricula)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.IdenGerbancoocchondurasProvter)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_gerbancoocchonduras_provter");

                entity.Property(e => e.Numcta)
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .HasColumnName("NUMCTA");

                entity.Property(e => e.Tipo)
                    .HasMaxLength(1)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<GerBancoPopularDominicanoBanco>(entity =>
            {
                entity.ToTable("GerBancoPopularDominicano_Banco");

                entity.HasIndex(e => e.Codigo, "UQ_GerBancoPopularDominicano_Banco_Codigo")
                    .IsUnique();

                entity.Property(e => e.BancoCont)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Codigo)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.DigVerificacion)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Nombre)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.HasOne(d => d.BancoContNavigation)
                    .WithMany(p => p.GerBancoPopularDominicanoBancos)
                    .HasForeignKey(d => d.BancoCont)
                    .HasConstraintName("FK_GerBancoPopularDominicano_Banco_Bancos");
            });

            modelBuilder.Entity<GerBancoPopularDominicanoProveedor>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("GerBancoPopularDominicano_Proveedor");

                entity.HasIndex(e => new { e.IdProveedor, e.Identificacion, e.TipoMatricula, e.CodigoMatricula }, "UQ_GerBancoPopularDominicano_Proveedor_IdProveedor_Identificacion_TipoMatricula_CodigoMatricula")
                    .IsUnique();

                entity.Property(e => e.Banco)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.CodOperacion)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CodigoMatricula)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Cuenta)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.IdProveedor)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.IdenGerbancopopulardominicanoProveedor)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_gerbancopopulardominicano_proveedor");

                entity.Property(e => e.Identificacion)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Moneda)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.TipoContacto)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.TipoCuenta)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.TipoMatricula)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Vencimiento).HasColumnType("smalldatetime");

                entity.HasOne(d => d.BancoNavigation)
                    .WithMany()
                    .HasPrincipalKey(p => p.Codigo)
                    .HasForeignKey(d => d.Banco)
                    .HasConstraintName("FK_GerBancoPopularDominicano_Proveedor_GerBancoPopularDominicano_Banco");

                entity.HasOne(d => d.IdProveedorNavigation)
                    .WithMany()
                    .HasForeignKey(d => d.IdProveedor)
                    .HasConstraintName("FK_GerBancoPopularDominicano_Proveedor_Proveedores");

                entity.HasOne(d => d.IdentificacionNavigation)
                    .WithMany()
                    .HasForeignKey(d => d.Identificacion)
                    .HasConstraintName("FK_GerBancoPopularDominicano_Proveedor_Terceros");
            });

            modelBuilder.Entity<GerBanescoRepDominicanaBanco>(entity =>
            {
                entity.ToTable("GerBanescoRepDominicana_Banco");

                entity.HasIndex(e => e.Codigo, "UQ_GerBanescoRepDominicana_Banco_Codigo")
                    .IsUnique();

                entity.Property(e => e.BancoCont)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Codigo)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.DigVerificacion)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Nombre)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.HasOne(d => d.BancoContNavigation)
                    .WithMany(p => p.GerBanescoRepDominicanaBancos)
                    .HasForeignKey(d => d.BancoCont)
                    .HasConstraintName("FK_GerBanescoRepDominicana_Banco_Bancos");
            });

            modelBuilder.Entity<GerBanescoRepDominicanaProveedor>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("GerBanescoRepDominicana_Proveedor");

                entity.HasIndex(e => new { e.IdProveedor, e.IdTercero, e.TipoMatricula, e.CodigoMatricula }, "UQ_GerBanescoRepDominicana_Proveedor_IdProveedor_IdTercero_TipoMatricula_CodigoMatricula")
                    .IsUnique();

                entity.Property(e => e.Banco)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.CodigoMatricula)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Cuenta)
                    .HasMaxLength(17)
                    .IsUnicode(false);

                entity.Property(e => e.IdProveedor)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.IdTercero)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.IdenGerbanescorepdominicanaProveedor)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_gerbanescorepdominicana_proveedor");

                entity.Property(e => e.TipoCuenta)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.TipoMatricula)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.HasOne(d => d.BancoNavigation)
                    .WithMany()
                    .HasPrincipalKey(p => p.Codigo)
                    .HasForeignKey(d => d.Banco)
                    .HasConstraintName("FK_GerBanescoRepDominicana_Proveedor_GerBanescoRepDominicana_Banco");

                entity.HasOne(d => d.IdProveedorNavigation)
                    .WithMany()
                    .HasForeignKey(d => d.IdProveedor)
                    .HasConstraintName("FK_GerBanescoRepDominicana_Proveedor_Proveedores");

                entity.HasOne(d => d.IdTerceroNavigation)
                    .WithMany()
                    .HasForeignKey(d => d.IdTercero)
                    .HasConstraintName("FK_GerBanescoRepDominicana_Proveedor_Terceros");
            });

            modelBuilder.Entity<GerBcoSudamerisGeneral>(entity =>
            {
                entity.HasKey(e => e.IdTercero);

                entity.ToTable("GerBcoSudameris_General");

                entity.Property(e => e.IdTercero)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Cuenta)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DigVerificacion)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.IdBanco)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.IdenGerbcosudamerisGeneral)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_gerbcosudameris_general");

                entity.Property(e => e.TipoCuenta)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdBancoNavigation)
                    .WithMany(p => p.GerBcoSudamerisGenerals)
                    .HasForeignKey(d => d.IdBanco)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_GerBcoSudameris_General_Bancos");

                entity.HasOne(d => d.IdTerceroNavigation)
                    .WithOne(p => p.GerBcoSudamerisGeneral)
                    .HasForeignKey<GerBcoSudamerisGeneral>(d => d.IdTercero)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_GerBcoSudameris_General_Terceros");
            });

            modelBuilder.Entity<GerBcoSudamerisProveedor>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("GerBcoSudameris_Proveedor");

                entity.HasIndex(e => new { e.CodigoTercero, e.Idprove, e.TipoMatricula, e.CodigoMatricula }, "UQ_GERBCOSUDAMERIS_PROVEEDOR_CODIGOTERCERO_IDPROVE_TIPOMATRICULA_CODIGOMATRICULA")
                    .IsUnique();

                entity.Property(e => e.Banco)
                    .HasMaxLength(4)
                    .IsUnicode(false);

                entity.Property(e => e.CodigoMatricula)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.CodigoTercero)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Cuenta)
                    .HasMaxLength(17)
                    .IsUnicode(false);

                entity.Property(e => e.IdenGerbcosudamerisProveedor)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_gerbcosudameris_proveedor");

                entity.Property(e => e.Identificacion)
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.Idprove)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("idprove");

                entity.Property(e => e.Principal).HasDefaultValueSql("((1))");

                entity.Property(e => e.TipoCuenta)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.TipoMatricula)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.HasOne(d => d.CodigoTerceroNavigation)
                    .WithMany()
                    .HasForeignKey(d => d.CodigoTercero)
                    .HasConstraintName("FK_GerBcoSudameris_Proveedor_Terceros");

                entity.HasOne(d => d.IdproveNavigation)
                    .WithMany()
                    .HasForeignKey(d => d.Idprove)
                    .HasConstraintName("FK_GerBcoSudameris_Proveedor_Proveedores");
            });

            modelBuilder.Entity<GerBcolPanamaDatosEmpresa>(entity =>
            {
                entity.HasKey(e => e.Cuenta);

                entity.ToTable("Ger_BcolPanama_DatosEmpresa");

                entity.Property(e => e.Cuenta)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CuentaComi)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.IdenGerBcolpanamaDatosempresa)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_ger_bcolpanama_datosempresa");
            });

            modelBuilder.Entity<GerBcolPanamaEntidade>(entity =>
            {
                entity.HasKey(e => e.Codigo);

                entity.ToTable("Ger_BcolPanama_Entidades");

                entity.Property(e => e.Codigo)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Id).ValueGeneratedOnAdd();

                entity.Property(e => e.Nombre)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.TipoTransac)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength();
            });

            modelBuilder.Entity<GerBcolPanamaProvTer>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Ger_BcolPanama_ProvTer");

                entity.HasIndex(e => new { e.CodigoTercero, e.CodProveedor, e.TipoMatricula, e.CodigoMatricula }, "UQ_Ger_BcolPanama_ProvTer_CODIGOTERCERO_CODPROVEEDOR_TIPOMATRICULA_CODIGOMATRICULA")
                    .IsUnique();

                entity.Property(e => e.Banco)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.BancoInterm)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.CodProveedor)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.CodTercero)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.CodigoMatricula)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.CodigoTercero)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Cuenta)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.GastoInterBanc)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.IdenGerBcolpanamaProvter)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_ger_bcolpanama_provter");

                entity.Property(e => e.TipoMatricula)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.HasOne(d => d.BancoNavigation)
                    .WithMany()
                    .HasForeignKey(d => d.Banco)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Ger_BcolPanama_ProvTer_Bancos");

                entity.HasOne(d => d.CodTerceroNavigation)
                    .WithMany()
                    .HasForeignKey(d => d.CodTercero)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Ger_BcolPanama_ProvTer_CodTercero");

                entity.HasOne(d => d.CodigoTerceroNavigation)
                    .WithMany()
                    .HasForeignKey(d => d.CodigoTercero)
                    .HasConstraintName("FK_Ger_BcolPanama_ProvTer_CodigoTercero");
            });

            modelBuilder.Entity<GerBogotaProv>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("GerBogota_Prov");

                entity.HasIndex(e => new { e.CodigoTercero, e.CodProveedor, e.CodigoMatricula, e.TipoMatricula }, "UQ_GERBOGOTA_PROV_CODIGOTERCERO_CODPROVEEDOR_CODIGOMATRICULA_TIPOMATRICULA")
                    .IsUnique();

                entity.Property(e => e.Ciudad)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.CodBanco)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CodBancoGer)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.CodProveedor)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.CodTercero)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.CodigoMatricula)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.CodigoOficina)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('000')");

                entity.Property(e => e.CodigoTercero)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Cuenta)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Email)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.EnviarInfo)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Fax)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.IdenGerbogotaProv)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_gerbogota_prov");

                entity.Property(e => e.Mostrar)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Principal).HasDefaultValueSql("((1))");

                entity.Property(e => e.TipoCuenta)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.TipoIdentificacion)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.TipoMatricula)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.HasOne(d => d.CodBancoNavigation)
                    .WithMany()
                    .HasForeignKey(d => d.CodBanco)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_GerBogota_Prov_BANCOS");

                entity.HasOne(d => d.CodProveedorNavigation)
                    .WithMany()
                    .HasForeignKey(d => d.CodProveedor)
                    .HasConstraintName("FK_GerBogota_Prov_PROVEEDORES");

                entity.HasOne(d => d.CodTerceroNavigation)
                    .WithMany()
                    .HasForeignKey(d => d.CodTercero)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_GerBogota_Prov_TERCEROS");

                entity.HasOne(d => d.CodigoTerceroNavigation)
                    .WithMany()
                    .HasForeignKey(d => d.CodigoTercero)
                    .HasConstraintName("FK_GerBogota_Prov_TERCEROS1");
            });

            modelBuilder.Entity<GerBogotaTarEfectiva>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("GerBogota_TarEfectiva");

                entity.Property(e => e.CodEmpresa)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Cuenta)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.IdenGerbogotaTarefectiva)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_gerbogota_tarefectiva");

                entity.Property(e => e.NoConvenio)
                    .HasMaxLength(4)
                    .IsUnicode(false);

                entity.Property(e => e.TipoCuenta)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.TipoIdentificacion)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();
            });

            modelBuilder.Entity<GerBogotum>(entity =>
            {
                entity.HasKey(e => e.CodTercero);

                entity.Property(e => e.CodTercero)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Ciudad)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Cuenta)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.DigVerificacion)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('N')")
                    .IsFixedLength();

                entity.Property(e => e.IdenGerbogota)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_gerbogota");

                entity.Property(e => e.Oficina)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.TipoCuenta)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.TipoIdentificacion)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.HasOne(d => d.CodTerceroNavigation)
                    .WithOne(p => p.GerBogotum)
                    .HasForeignKey<GerBogotum>(d => d.CodTercero)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_GerBogota_TERCEROS");
            });

            modelBuilder.Entity<GerCitiBank>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("GerCitiBank");

                entity.Property(e => e.Cuenta)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.IdenGercitibank)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_gercitibank");

                entity.Property(e => e.Moneda)
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Pais)
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.TipoCuenta)
                    .HasMaxLength(1)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<GerCitiBankPaisesMoneda>(entity =>
            {
                entity.HasKey(e => e.CodigoPais);

                entity.ToTable("GerCitiBank_PaisesMonedas");

                entity.Property(e => e.CodigoPais)
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.CodigoMoneda)
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.IdenGercitibankPaisesmonedas)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_gercitibank_paisesmonedas");

                entity.Property(e => e.NombreMoneda)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.NombrePais)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<GerCitiBankProveedore>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("GerCitiBank_Proveedores");

                entity.HasIndex(e => new { e.CodigoTercero, e.CodProveedor, e.TipoMatricula, e.CodigoMatricula }, "UQ_GERCITIBANK_PROVEEDORES_CODIGOTERCERO_CODPROVEEDOR_TIPOMATRICULA_CODIGOMATRICULA")
                    .IsUnique();

                entity.Property(e => e.CodProveedor)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.CodTercero)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.CodigoBanco)
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.CodigoMatricula)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.CodigoTercero)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Cuenta)
                    .HasMaxLength(35)
                    .IsUnicode(false);

                entity.Property(e => e.DireccionBanco)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.IdenGercitibankProveedores)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_gercitibank_proveedores");

                entity.Property(e => e.TipoCuenta)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.TipoMatricula)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.HasOne(d => d.CodProveedorNavigation)
                    .WithMany()
                    .HasForeignKey(d => d.CodProveedor)
                    .HasConstraintName("FK_GerCitiBank_Proveedores_PROVEEDORES");

                entity.HasOne(d => d.CodTerceroNavigation)
                    .WithMany()
                    .HasForeignKey(d => d.CodTercero)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_GerCitiBank_Proveedores_TERCEROS");

                entity.HasOne(d => d.CodigoTerceroNavigation)
                    .WithMany()
                    .HasForeignKey(d => d.CodigoTercero)
                    .HasConstraintName("FK_GerCitiBank_Proveedores_TERCEROS1");

                entity.HasOne(d => d.IdSucursalBancoNavigation)
                    .WithMany()
                    .HasForeignKey(d => d.IdSucursalBanco)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_GerCitiBank_Proveedores_GerCitiBank_Sucursales");
            });

            modelBuilder.Entity<GerCitiBankSucursale>(entity =>
            {
                entity.ToTable("GerCitiBank_Sucursales");

                entity.HasIndex(e => new { e.Codigo, e.EsCitiBank }, "UQ_GERCITIBANK_SUCURSALES_CODIGO_ESCITIBANK")
                    .IsUnique();

                entity.Property(e => e.Codigo)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Departamento)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Direccion)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Nombre)
                    .HasMaxLength(40)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<GerColmena>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Ger_Colmena");

                entity.HasIndex(e => new { e.CodigoTercero, e.CodProveedor, e.TipoMatricula, e.CodigoMatricula }, "UQ_GER_COLMENA_PROV_CODIGOTERCERO_CODPROVEEDOR_TIPOMATRICULA_CODIGOMATRICULA")
                    .IsUnique();

                entity.Property(e => e.CodBanco)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CodProveedor)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.CodTercero)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.CodigoMatricula)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.CodigoTercero)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Cuenta)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Iden)
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Mostrar)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.TipoCuenta)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.TipoMatricula)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.HasOne(d => d.CodProveedorNavigation)
                    .WithMany()
                    .HasForeignKey(d => d.CodProveedor)
                    .HasConstraintName("FK_Ger_Colmena_PROVEEDORES");

                entity.HasOne(d => d.CodTerceroNavigation)
                    .WithMany()
                    .HasForeignKey(d => d.CodTercero)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Ger_Colmena_TERCEROS");

                entity.HasOne(d => d.CodigoTerceroNavigation)
                    .WithMany()
                    .HasForeignKey(d => d.CodigoTercero)
                    .HasConstraintName("FK_Ger_Colmena_TERCEROS1");
            });

            modelBuilder.Entity<GerCreditoPeru>(entity =>
            {
                entity.HasKey(e => new { e.CodTercero, e.Fuente });

                entity.ToTable("GerCreditoPeru");

                entity.Property(e => e.CodTercero)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Fuente)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')")
                    .IsFixedLength();

                entity.Property(e => e.Codigo)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Digito)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.IdBanco)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.IdenGercreditoperu)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_gercreditoperu");

                entity.Property(e => e.Indicador)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Moneda)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Sucursal)
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.TipoProducto)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdBancoNavigation)
                    .WithMany(p => p.GerCreditoPerus)
                    .HasForeignKey(d => d.IdBanco)
                    .HasConstraintName("FK_GerCreditoPeru_Bancos");
            });

            modelBuilder.Entity<GerCreditoPeruProv>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("GerCreditoPeru_Prov");

                entity.HasIndex(e => new { e.CodigoTercero, e.CodProveedor, e.TipoMatricula, e.CodigoMatricula }, "UQ_GERCREDITOPERU_PROV_CODIGOTERCERO_CODPROVEEDOR_TIPOMATRICULA_CODIGOMATRICULA")
                    .IsUnique();

                entity.Property(e => e.Cci)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("CCI")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.CodProveedor)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.CodTercero)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Codigo)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.CodigoMatricula)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.CodigoTercero)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Contacto)
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.Departamento)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Digito)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.Direccion)
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.Distrito)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.IdBanco)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.IdenGercreditoperuProv)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_gercreditoperu_prov");

                entity.Property(e => e.Moneda)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Provincia)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Sucursal)
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.TipoAbono)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.TipoDcto)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.TipoIdentificacion)
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.TipoMatricula)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.TipoProducto)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.TipoRegistro)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ValidarRuc).HasColumnName("ValidarRUC");

                entity.HasOne(d => d.CodProveedorNavigation)
                    .WithMany()
                    .HasForeignKey(d => d.CodProveedor)
                    .HasConstraintName("FK_GerCreditoPeru_Prov_PROVEEDORES");

                entity.HasOne(d => d.CodigoTerceroNavigation)
                    .WithMany()
                    .HasForeignKey(d => d.CodigoTercero)
                    .HasConstraintName("FK_GerCreditoPeru_Prov_TERCEROS1");

                entity.HasOne(d => d.IdBancoNavigation)
                    .WithMany()
                    .HasForeignKey(d => d.IdBanco)
                    .HasConstraintName("FK_GerCreditoPeru_Prov_Bancos");
            });

            modelBuilder.Entity<GerDaviviendaProv>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("GerDavivienda_Prov");

                entity.HasIndex(e => new { e.CodigoTercero, e.CodProveedor, e.CodigoMatricula, e.TipoMatricula }, "UQ_GERDAVIVIENDA_PROV_CODIGOTERCERO_CODPROVEEDOR_CODIGOMATRICULA_TIPOMATRICULA")
                    .IsUnique();

                entity.Property(e => e.CodBanco)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CodBancoGer)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.CodProveedor)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.CodTercero)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.CodigoMatricula)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.CodigoTercero)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Cuenta)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.IdenGerdaviviendaProv)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_gerdavivienda_prov");

                entity.Property(e => e.Principal).HasDefaultValueSql("((1))");

                entity.Property(e => e.TipoCuenta)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.TipoIdentificacion)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.TipoMatricula)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ValidaAch).HasColumnName("ValidaACH");

                entity.HasOne(d => d.CodBancoNavigation)
                    .WithMany()
                    .HasForeignKey(d => d.CodBanco)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_GerDavivienda_Prov_BANCOS");

                entity.HasOne(d => d.CodProveedorNavigation)
                    .WithMany()
                    .HasForeignKey(d => d.CodProveedor)
                    .HasConstraintName("FK_GerDavivienda_Prov_PROVEEDORES");

                entity.HasOne(d => d.CodTerceroNavigation)
                    .WithMany()
                    .HasForeignKey(d => d.CodTercero)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_GerDavivienda_Prov_TERCEROS");

                entity.HasOne(d => d.CodigoTerceroNavigation)
                    .WithMany()
                    .HasForeignKey(d => d.CodigoTercero)
                    .HasConstraintName("FK_GerDavivienda_Prov_TERCEROS1");
            });

            modelBuilder.Entity<GerDaviviendum>(entity =>
            {
                entity.HasKey(e => e.CodTercero);

                entity.Property(e => e.CodTercero)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.CodBanco)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CodBancoGer)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.CodSubServicio)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Cuenta)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.DigVerificacion)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('N')");

                entity.Property(e => e.IdenGerdavivienda)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_gerdavivienda");

                entity.Property(e => e.TipoCuenta)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.TipoIdentificacion)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.HasOne(d => d.CodBancoNavigation)
                    .WithMany(p => p.GerDavivienda)
                    .HasForeignKey(d => d.CodBanco)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_GerDavivienda_BANCOS");

                entity.HasOne(d => d.CodTerceroNavigation)
                    .WithOne(p => p.GerDaviviendum)
                    .HasForeignKey<GerDaviviendum>(d => d.CodTercero)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_GerDavivienda_TERCEROS");
            });

            modelBuilder.Entity<GerEcuBancoPichinchaProv>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("GerEcuBancoPichincha_Prov");

                entity.Property(e => e.CodProveedor)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CodTercero)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.CodigoBancoSpi)
                    .HasMaxLength(13)
                    .IsUnicode(false)
                    .HasColumnName("CodigoBancoSPI");

                entity.Property(e => e.CodigoMatricula)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.CodigoTercero)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.FormaPago)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.IdenGerecubancopichinchaProv)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_gerecubancopichincha_prov");

                entity.Property(e => e.LocalidadPago)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Moneda)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Mostrar)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.NumeroCuenta)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.TipoCuenta)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.TipoIdentificacion)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.TipoMatricula)
                    .HasMaxLength(1)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<GerEcuMulticash>(entity =>
            {
                entity.HasKey(e => e.Nit);

                entity.ToTable("GerEcu_Multicash");

                entity.Property(e => e.Nit)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Cuenta)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.IdenGerecuMulticash)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_gerecu_multicash");
            });

            modelBuilder.Entity<GerEcuMulticashEntidad>(entity =>
            {
                entity.HasKey(e => e.Codigo)
                    .HasName("PK_GERECU_MULTICASH_ENTIDAD")
                    .IsClustered(false);

                entity.ToTable("GerEcu_Multicash_Entidad");

                entity.Property(e => e.Codigo)
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.Banco)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.IdenGerecuMulticashEntidad)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_gerecu_multicash_entidad");
            });

            modelBuilder.Entity<GerEcuMulticashProv>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("GerEcu_Multicash_Prov");

                entity.HasIndex(e => new { e.CodigoTercero, e.IdProve, e.TipoMatricula, e.CodigoMatricula }, "UQ_GERECU_MULTICASH_PROV_CODIGOTERCERO_IDPROVE_TIPOMATRICULA_CODIGOMATRICULA")
                    .IsUnique();

                entity.Property(e => e.Ciudad)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("ciudad");

                entity.Property(e => e.CodigoMatricula)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.CodigoTercero)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Cuenta)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Direccion)
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.Email)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Enviaremal).HasColumnName("enviaremal");

                entity.Property(e => e.FormaPago)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.IdProve)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.IdTercero)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.IdenGerecuMulticashProv)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_gerecu_multicash_prov");

                entity.Property(e => e.Identificacion)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("identificacion")
                    .IsFixedLength();

                entity.Property(e => e.Institucion)
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.LocalidadPago)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Moneda)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.NombreProveedor)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Telefono)
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.TipoCuenta)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.TipoMatricula)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.HasOne(d => d.CodigoTerceroNavigation)
                    .WithMany()
                    .HasForeignKey(d => d.CodigoTercero)
                    .HasConstraintName("FK_GerEcu_Multicash_Prov_TERCEROS1");

                entity.HasOne(d => d.IdProveNavigation)
                    .WithMany()
                    .HasForeignKey(d => d.IdProve)
                    .HasConstraintName("FK_GerEcu_Multicash_Prov_PROVEEDORES");
            });

            modelBuilder.Entity<GerEcuOcp>(entity =>
            {
                entity.HasKey(e => e.Nit);

                entity.ToTable("GerEcu_OCP");

                entity.Property(e => e.Nit)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Cuenta)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.IdenGerecuOcp)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_gerecu_ocp");

                entity.Property(e => e.TipoNuc)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("TipoNUC")
                    .IsFixedLength();
            });

            modelBuilder.Entity<GerEcuOcpEntidad>(entity =>
            {
                entity.HasKey(e => e.Codigo);

                entity.ToTable("GerEcu_OCP_Entidad");

                entity.Property(e => e.Codigo)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.Descripcion)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.IdenGerecuOcpEntidad)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_gerecu_ocp_entidad");
            });

            modelBuilder.Entity<GerEcuOcpProveedore>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("GerEcu_OCP_Proveedores");

                entity.HasIndex(e => new { e.CodigoTercero, e.Idproveedor, e.TipoMatricula, e.CodigoMatricula }, "UQ_GERECU_OCP_PROVEEDORES_CODIGOTERCERO_IDPROVEEDOR_TIPOMATRICULA_CODIGOMATRICULA")
                    .IsUnique();

                entity.Property(e => e.AgenciaRetiro)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Codigo)
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.CodigoMatricula)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.CodigoServicio)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('PR')")
                    .IsFixedLength();

                entity.Property(e => e.CodigoTercero)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.CuentaOb)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("CuentaOB")
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.Entidad)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.FormaPago)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.IdenGerecuOcpProveedores)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_gerecu_ocp_proveedores");

                entity.Property(e => e.Idproveedor)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Idtercero)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Localidad)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("localidad");

                entity.Property(e => e.LocalidadRetiro)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Moneda)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.NumeroCuenta)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Telefono)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.TipoCuenta)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.TipoIdentificacion)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.TipoMatricula)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.HasOne(d => d.CodigoTerceroNavigation)
                    .WithMany()
                    .HasForeignKey(d => d.CodigoTercero)
                    .HasConstraintName("FK_GerEcu_OCP_Proveedores_TERCEROS1");

                entity.HasOne(d => d.IdproveedorNavigation)
                    .WithMany()
                    .HasForeignKey(d => d.Idproveedor)
                    .HasConstraintName("FK_GerEcu_OCP_Proveedores_PROVEEDORES");
            });

            modelBuilder.Entity<GerEcuProdubanco>(entity =>
            {
                entity.HasKey(e => e.Nit)
                    .IsClustered(false);

                entity.ToTable("GerEcu_Produbanco");

                entity.Property(e => e.Nit)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Cuenta)
                    .HasMaxLength(11)
                    .IsUnicode(false);

                entity.Property(e => e.IdenGerecuProdubanco)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_gerecu_produbanco");
            });

            modelBuilder.Entity<GerEcuProdubancoProv>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("GerEcu_Produbanco_Prov");

                entity.HasIndex(e => new { e.CodigoTercero, e.IdProve, e.TipoMatricula, e.CodigoMatricula }, "UQ_GERECU_PRODUBANCO_CODIGOTERCERO_IDPROVE_TIPOMATRICULA_CODIGOMATRICULA")
                    .IsUnique();

                entity.Property(e => e.Ciudad)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("ciudad");

                entity.Property(e => e.CodigoMatricula)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.CodigoTercero)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Cuenta)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Direccion)
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.Email)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Enviaremal).HasColumnName("enviaremal");

                entity.Property(e => e.FormaPago)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.IdProve)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.IdTercero)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.IdenGerecuProdubancoProv)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_gerecu_produbanco_prov");

                entity.Property(e => e.Identificacion)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("identificacion")
                    .IsFixedLength();

                entity.Property(e => e.Institucion)
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.LocalidadPago)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Moneda)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.NombreProveedor)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Telefono)
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.TipoCuenta)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.TipoMatricula)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.HasOne(d => d.CodigoTerceroNavigation)
                    .WithMany()
                    .HasForeignKey(d => d.CodigoTercero)
                    .HasConstraintName("FK_GerEcu_Produbanco_Prov_TERCEROS1");

                entity.HasOne(d => d.IdProveNavigation)
                    .WithMany()
                    .HasForeignKey(d => d.IdProve)
                    .HasConstraintName("FK_GerEcu_Produbanco_Prov_PROVEEDORES");
            });

            modelBuilder.Entity<GerSantanderEntidad>(entity =>
            {
                entity.HasKey(e => e.Codigo);

                entity.ToTable("GerSantander_Entidad");

                entity.Property(e => e.Codigo)
                    .HasMaxLength(4)
                    .IsUnicode(false);

                entity.Property(e => e.Descripcion)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.IdenGersantanderEntidad)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_gersantander_entidad");
            });

            modelBuilder.Entity<GerSantanderProv>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("GerSantander_Prov");

                entity.HasIndex(e => new { e.CodigoTercero, e.Idprove, e.TipoMatricula, e.CodigoMatricula }, "UQ_GERSANTANDER_PROV_CODIGOTERCERO_IDPROVE_TIPOMATRICULA_CODIGOMATRICULA")
                    .IsUnique();

                entity.Property(e => e.CodigoBancoDestino)
                    .HasMaxLength(4)
                    .IsUnicode(false);

                entity.Property(e => e.CodigoIdentificacion)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CodigoMatricula)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.CodigoProducto)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CodigoTercero)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Cuenta)
                    .HasMaxLength(17)
                    .IsUnicode(false);

                entity.Property(e => e.IdenGersantanderProv)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_gersantander_prov");

                entity.Property(e => e.Identificacion)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Idprove)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("idprove");

                entity.Property(e => e.Nombre)
                    .HasMaxLength(22)
                    .IsUnicode(false);

                entity.Property(e => e.TipoMatricula)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Validar)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.HasOne(d => d.CodigoTerceroNavigation)
                    .WithMany()
                    .HasForeignKey(d => d.CodigoTercero)
                    .HasConstraintName("FK_GerSantander_Prov_TERCEROS1");

                entity.HasOne(d => d.IdproveNavigation)
                    .WithMany()
                    .HasForeignKey(d => d.Idprove)
                    .HasConstraintName("FK_GerSantander_Prov_PROVEEDORES");
            });

            modelBuilder.Entity<GerScotiabankPeruProv>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("GerScotiabankPeru_Prov");

                entity.HasIndex(e => new { e.CodigoTercero, e.CodProveedor, e.TipoMatricula, e.CodigoMatricula }, "UQ_GERSCOTIABANKPERU_PROV_CODIGOTERCERO_CODPROVEEDOR_TIPOMATRICULA_CODIGOMATRICULA")
                    .IsUnique();

                entity.Property(e => e.Cci)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("CCI")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.CodProveedor)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.CodTercero)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.CodigoMatricula)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.CodigoTercero)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Cuenta)
                    .HasMaxLength(7)
                    .IsUnicode(false);

                entity.Property(e => e.Email)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.FormaPago)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.IdBanco)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.IdenGerscotiabankperuProv)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_gerscotiabankperu_prov");

                entity.Property(e => e.Oficina)
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.TipoMatricula)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdBancoNavigation)
                    .WithMany()
                    .HasForeignKey(d => d.IdBanco)
                    .HasConstraintName("FK_GerScotiabankPeru_Prov_Bancos");
            });

            modelBuilder.Entity<Gerencia>(entity =>
            {
                entity.HasKey(e => e.Iden);

                entity.HasIndex(e => e.Iden, "UQ_GERENCIAS_IDEN")
                    .IsUnique();

                entity.Property(e => e.Iden).ValueGeneratedNever();

                entity.Property(e => e.ClavePgp)
                    .IsUnicode(false)
                    .HasColumnName("ClavePGP")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Contraseña)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.EmailEnvio)
                    .HasMaxLength(8000)
                    .IsUnicode(false);

                entity.Property(e => e.Gerencia1)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("Gerencia");

                entity.Property(e => e.IdenGerencias)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_gerencias");

                entity.Property(e => e.Pais)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<GerenciaAchbacProveedore>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Gerencia_ACHBAC_Proveedores");

                entity.Property(e => e.CodBanco)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CodProveedor)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CodTercero)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.CodigoMatricula)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.CodigoTercero)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Cuenta)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Mostrar)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.TipoCuenta)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.TipoMatricula)
                    .HasMaxLength(1)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<GerenciaAchglobalBankProveedore>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Gerencia_ACHGlobalBank_Proveedores");

                entity.HasIndex(e => new { e.TipoMatricula, e.CodigoMatricula, e.CodProveedor, e.CodigoTercero }, "UQ_Gerencia_ACHGlobalBank_Proveedores_TipoMatricula_CodigoMatricula_CodProveedor_CodigoTercero")
                    .IsUnique();

                entity.Property(e => e.CodBanco)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CodProveedor)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CodTercero)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.CodigoMatricula)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.CodigoTercero)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Cuenta)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.IdenGerenciaAchglobalbankProveedores)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_gerencia_achglobalbank_proveedores");

                entity.Property(e => e.Mostrar)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.TipoCuenta)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.TipoMatricula)
                    .HasMaxLength(1)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<GerenciaAchpanamaBanco>(entity =>
            {
                entity.HasKey(e => e.CodBanco);

                entity.ToTable("Gerencia_ACHPanama_Bancos");

                entity.Property(e => e.CodBanco)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.IdenGerenciaAchpanamaBancos)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_gerencia_achpanama_bancos");

                entity.Property(e => e.Ruta)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.HasOne(d => d.CodBancoNavigation)
                    .WithOne(p => p.GerenciaAchpanamaBanco)
                    .HasForeignKey<GerenciaAchpanamaBanco>(d => d.CodBanco)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Gerencia_ACHPanama_Bancos_BANCOS");
            });

            modelBuilder.Entity<GerenciaAchpanamaProveedore>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Gerencia_ACHPanama_Proveedores");

                entity.HasIndex(e => new { e.CodProveedor, e.CodigoTercero, e.TipoCuenta, e.CodigoMatricula }, "UQ_GERENCIA_ACHPANAMA_PROVEEDORES_CODPROVEEDOR_CODIGOTERCERO_TIPOCUENTA_CODIGOMATRICULA")
                    .IsUnique();

                entity.Property(e => e.CodBanco)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CodProveedor)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.CodTercero)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.CodigoMatricula)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.CodigoTercero)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Cuenta)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.IdenGerenciaAchpanamaProveedores)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_gerencia_achpanama_proveedores");

                entity.Property(e => e.Mostrar)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.TipoCuenta)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.TipoMatricula)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.HasOne(d => d.CodBancoNavigation)
                    .WithMany()
                    .HasForeignKey(d => d.CodBanco)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Gerencia_ACHPanama_Proveedores_BANCOS");

                entity.HasOne(d => d.CodProveedorNavigation)
                    .WithMany()
                    .HasForeignKey(d => d.CodProveedor)
                    .HasConstraintName("FK_Gerencia_ACHPanama_Proveedores_PROVEEDORES");

                entity.HasOne(d => d.CodTerceroNavigation)
                    .WithMany()
                    .HasForeignKey(d => d.CodTercero)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Gerencia_ACHPanama_Proveedores_TERCEROS");

                entity.HasOne(d => d.CodigoTerceroNavigation)
                    .WithMany()
                    .HasForeignKey(d => d.CodigoTercero)
                    .HasConstraintName("FK_Gerencia_ACHPanama_Proveedores_TERCEROS1");
            });

            modelBuilder.Entity<GerenciaAchpanamaTipoCuenta>(entity =>
            {
                entity.HasKey(e => e.CodTipoCuenta);

                entity.ToTable("Gerencia_ACHPanama_TipoCuentas");

                entity.Property(e => e.CodTipoCuenta)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.CodGerencia)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Descripcion)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.IdenGerenciaAchpanamaTipocuentas)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_gerencia_achpanama_tipocuentas");
            });

            modelBuilder.Entity<GerenciaBancoAliadoProveedore>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Gerencia_BancoAliado_Proveedores");

                entity.HasIndex(e => new { e.TipoMatricula, e.CodigoMatricula, e.CodProveedor, e.CodigoTercero }, "UQ_Gerencia_BancoAliado_Proveedores_TipoMatricula_CodigoMatricula_CodProveedor_CodigoTercero")
                    .IsUnique();

                entity.Property(e => e.CodBanco)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CodProveedor)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CodTercero)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.CodigoMatricula)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.CodigoTercero)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Cuenta)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.IdenGerenciaBancoaliadoProveedores)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_gerencia_bancoaliado_proveedores");

                entity.Property(e => e.Mostrar)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.TipoCuenta)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.TipoMatricula)
                    .HasMaxLength(1)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<GerenciaBancoOccidente>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("GERENCIA_BANCO_OCCIDENTE");

                entity.HasIndex(e => new { e.CodigoTercero, e.Idprove, e.TipoMatricula, e.CodigoMatricula }, "UQ_GERENCIA_BANCO_OCCIDENTE_CODIGOTERCERO_IDPROVE_TIPOMATRICULA_CODIGOMATRICULA")
                    .IsUnique();

                entity.Property(e => e.CodigoMatricula)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.CodigoTercero)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Cuenta)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("CUENTA");

                entity.Property(e => e.Formapago)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("FORMAPAGO")
                    .IsFixedLength();

                entity.Property(e => e.Idbanco)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("IDBANCO")
                    .IsFixedLength();

                entity.Property(e => e.IdenGerenciaBancoOccidente)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_gerencia_banco_occidente");

                entity.Property(e => e.Idprove)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("IDPROVE");

                entity.Property(e => e.Idtercero)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("IDTERCERO");

                entity.Property(e => e.TipoMatricula)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Tipocuenta)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("TIPOCUENTA")
                    .IsFixedLength();

                entity.HasOne(d => d.CodigoTerceroNavigation)
                    .WithMany()
                    .HasForeignKey(d => d.CodigoTercero)
                    .HasConstraintName("FK_GERENCIA_BANCO_OCCIDENTE_TERCEROS1");

                entity.HasOne(d => d.IdproveNavigation)
                    .WithMany()
                    .HasForeignKey(d => d.Idprove)
                    .HasConstraintName("FK_GERENCIA_BANCO_OCCIDENTE_PROVEEDORES");
            });

            modelBuilder.Entity<GerenciaBancoOccidenteEmpresa>(entity =>
            {
                entity.HasKey(e => e.Iden);

                entity.ToTable("GERENCIA_BANCO_OCCIDENTE_EMPRESA");

                entity.HasIndex(e => e.CodiCta, "UQ_GERENCIA_BANCO_OCCIDENTE_EMPRESA_CODICTA")
                    .IsUnique();

                entity.Property(e => e.CodiCta)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .IsFixedLength();
            });

            modelBuilder.Entity<GerenciaBanistmoPanamaProveedore>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Gerencia_BanistmoPanama_Proveedores");

                entity.HasIndex(e => new { e.CodProveedor, e.CodigoTercero, e.TipoCuenta, e.CodigoMatricula }, "UQ_GERENCIA_BANISTMOPANAMA_PROVEEDORES_CODPROVEEDOR_CODIGOTERCERO_TIPOCUENTA_CODIGOMATRICULA")
                    .IsUnique();

                entity.Property(e => e.CodBanco)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CodProveedor)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.CodTercero)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.CodigoMatricula)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.CodigoTercero)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Cuenta)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Email)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.IdenGerenciaBanistmopanamaProveedores)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_gerencia_banistmopanama_proveedores");

                entity.Property(e => e.Mostrar)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.TipoCuenta)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.TipoMatricula)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.HasOne(d => d.CodBancoNavigation)
                    .WithMany()
                    .HasForeignKey(d => d.CodBanco)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Gerencia_BanistmoPanama_Proveedores_BANCOS");

                entity.HasOne(d => d.CodProveedorNavigation)
                    .WithMany()
                    .HasForeignKey(d => d.CodProveedor)
                    .HasConstraintName("FK_Gerencia_BanistmoPanama_Proveedores_PROVEEDORES");

                entity.HasOne(d => d.CodTerceroNavigation)
                    .WithMany()
                    .HasForeignKey(d => d.CodTercero)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Gerencia_BanistmoPanama_Proveedores_TERCEROS");

                entity.HasOne(d => d.CodigoTerceroNavigation)
                    .WithMany()
                    .HasForeignKey(d => d.CodigoTercero)
                    .HasConstraintName("FK_Gerencia_BanistmoPanama_Proveedores_TERCEROS1");
            });

            modelBuilder.Entity<GerenciaBbva>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Gerencia_BBVA");

                entity.HasIndex(e => new { e.CodigoTercero, e.CodProveedor, e.TipoMatricula, e.CodigoMatricula }, "UQ_GERENCIA_BBVA_CODIGOTERCERO_CODPROVEEDOR_TIPOMATRICULA_CODIGOMATRICULA")
                    .IsUnique();

                entity.Property(e => e.Banco)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')")
                    .IsFixedLength();

                entity.Property(e => e.CodProveedor)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.CodigoMatricula)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.CodigoTercero)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Cuenta)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.CuentaNacha)
                    .HasMaxLength(17)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.DigitoControlId)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.FormaPago)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.Id)
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.NumeroId)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.Oficina)
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.Principal).HasDefaultValueSql("((1))");

                entity.Property(e => e.TipoCuenta)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.TipoCuentaBbva)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("TipoCuentaBBVA")
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.TipoId)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.TipoMatricula)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.HasOne(d => d.CodProveedorNavigation)
                    .WithMany()
                    .HasForeignKey(d => d.CodProveedor)
                    .HasConstraintName("FK_Gerencia_BBVA_PROVEEDORES");

                entity.HasOne(d => d.CodigoTerceroNavigation)
                    .WithMany()
                    .HasForeignKey(d => d.CodigoTercero)
                    .HasConstraintName("FK_Gerencia_BBVA_TERCEROS1");
            });

            modelBuilder.Entity<GerenciaConavi>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("GERENCIA_CONAVI");

                entity.Property(e => e.Codempresa)
                    .HasMaxLength(13)
                    .IsUnicode(false)
                    .HasColumnName("CODEMPRESA")
                    .IsFixedLength();

                entity.Property(e => e.Codinstalacion)
                    .HasMaxLength(13)
                    .IsUnicode(false)
                    .HasColumnName("CODINSTALACION")
                    .IsFixedLength();

                entity.Property(e => e.Cuenta)
                    .HasMaxLength(11)
                    .IsUnicode(false)
                    .HasColumnName("CUENTA")
                    .IsFixedLength();

                entity.Property(e => e.Entidad)
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .HasColumnName("ENTIDAD")
                    .IsFixedLength();

                entity.Property(e => e.Idbanco)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("IDBANCO")
                    .IsFixedLength();

                entity.Property(e => e.IdenGerenciaConavi)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_gerencia_conavi");

                entity.Property(e => e.Oficina)
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .HasColumnName("OFICINA")
                    .IsFixedLength();

                entity.Property(e => e.Regional)
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .HasColumnName("REGIONAL")
                    .IsFixedLength();

                entity.Property(e => e.Tipocta)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("TIPOCTA")
                    .IsFixedLength();
            });

            modelBuilder.Entity<GerenciaConaviProv>(entity =>
            {
                entity.HasKey(e => e.Idprove);

                entity.ToTable("GERENCIA_CONAVI_PROV");

                entity.Property(e => e.Idprove)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("IDPROVE");

                entity.Property(e => e.Cuenta)
                    .HasMaxLength(17)
                    .IsUnicode(false)
                    .HasColumnName("CUENTA");

                entity.Property(e => e.Entidad)
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .HasColumnName("ENTIDAD")
                    .IsFixedLength();

                entity.Property(e => e.Idbanco)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("IDBANCO")
                    .IsFixedLength();

                entity.Property(e => e.IdenGerenciaConaviProv)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_gerencia_conavi_prov");

                entity.Property(e => e.Oficina)
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .HasColumnName("OFICINA")
                    .IsFixedLength();

                entity.Property(e => e.Regional)
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .HasColumnName("REGIONAL")
                    .IsFixedLength();

                entity.Property(e => e.Tipocuenta)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("TIPOCUENTA")
                    .IsFixedLength();
            });

            modelBuilder.Entity<GerenciaPago>(entity =>
            {
                entity.HasKey(e => new { e.Fuente, e.Documento });

                entity.Property(e => e.Fuente)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Documento)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Banco)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ConsecutivoArchivo).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.Cuenta)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Estado)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.IdenGerenciaPagos)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_GerenciaPagos");

                entity.Property(e => e.IndFormaPago)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasDefaultValueSql("((0))")
                    .IsFixedLength();

                entity.Property(e => e.Proveedor)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Tercero)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.TipoCuenta)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Valor).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.ValorMoneda).HasColumnType("numeric(18, 2)");

                entity.HasOne(d => d.IdenGerenciaNavigation)
                    .WithMany(p => p.GerenciaPagos)
                    .HasForeignKey(d => d.IdenGerencia)
                    .HasConstraintName("FK_GerenciaPagos_Gerencias");
            });

            modelBuilder.Entity<GerenciaPagosDetalle>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("GerenciaPagosDetalle");

                entity.Property(e => e.Banco)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Cuenta)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Documento)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Fuente)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.IdenGerenciapagosdetalle)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_gerenciapagosdetalle");

                entity.Property(e => e.Proveedor)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Tercero)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.TipoCuenta)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Valor).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.ValorMoneda).HasColumnType("numeric(18, 2)");

                entity.HasOne(d => d.IdenGerenciaNavigation)
                    .WithMany()
                    .HasForeignKey(d => d.IdenGerencia)
                    .HasConstraintName("FK_GerenciaPagosDetalle_Gerencias");
            });

            modelBuilder.Entity<GerenciasCuenta>(entity =>
            {
                entity.HasKey(e => e.Iden);

                entity.ToTable("Gerencias_Cuentas");

                entity.HasIndex(e => new { e.IdenGerencia, e.TipoCuenta, e.NumeroCuenta }, "IX_Gerencias_Cuentas_NumeroCuentas");

                entity.Property(e => e.Iden)
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.IdenGerencia).HasColumnName("Iden_Gerencia");

                entity.Property(e => e.NumeroCuenta)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.TipoCuenta)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdenGerenciaNavigation)
                    .WithMany(p => p.GerenciasCuenta)
                    .HasForeignKey(d => d.IdenGerencia)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Gerencias_Cuentas_Gerencias");
            });

            modelBuilder.Entity<GestionAssembly>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.Descripcion)
                    .HasMaxLength(128)
                    .IsUnicode(false);

                entity.Property(e => e.IdAssemblie).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.IdenGestionassemblies)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_gestionassemblies");

                entity.Property(e => e.Procedimiento).HasMaxLength(1024);
            });

            modelBuilder.Entity<GestionJob>(entity =>
            {
                entity.HasKey(e => e.NumId);

                entity.ToTable("GestionJob");

                entity.HasIndex(e => e.VchJob, "IX_GestionJob")
                    .IsUnique();

                entity.Property(e => e.NumId)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("numId");

                entity.Property(e => e.Descripcion).HasMaxLength(512);

                entity.Property(e => e.IdenGestionjob)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_gestionjob");

                entity.Property(e => e.ParametroTiempoEspera)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Procedimiento).HasMaxLength(512);

                entity.Property(e => e.VchJob)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("vchJob");
            });

            modelBuilder.Entity<GrEmpresarial>(entity =>
            {
                entity.HasKey(e => e.CodigoGrEmpresarial);

                entity.ToTable("GrEmpresarial");

                entity.Property(e => e.CodigoGrEmpresarial)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.CupoCliPrv).HasColumnType("money");

                entity.Property(e => e.Fecha).HasColumnType("smalldatetime");

                entity.Property(e => e.IdenGrempresarial)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_grempresarial");

                entity.Property(e => e.Ncd).HasColumnName("NCD");

                entity.Property(e => e.Nombre)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Pertenece)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Tipo)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.VersionDeLaFila)
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<Grupusua>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("GRUPUSUA");

                entity.Property(e => e.Grupo)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("GRUPO");

                entity.Property(e => e.IdenGrupusua)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_grupusua");

                entity.Property(e => e.Ubicacion).HasColumnName("UBICACION");
            });

            modelBuilder.Entity<HistoriaAutorizacionCliente>(entity =>
            {
                entity.HasKey(e => e.Iden);

                entity.ToTable("HistoriaAutorizacionCliente");

                entity.Property(e => e.Iden)
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("IDEN");

                entity.Property(e => e.Auxiliar)
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.Cuenta)
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.ExtraCupo).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.Factura)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Fecha)
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Idcliente)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("IDCLIENTE");

                entity.Property(e => e.Tipo)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.TipoAut)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('C')")
                    .IsFixedLength();

                entity.Property(e => e.Usuario)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.HasOne(d => d.UsuarioNavigation)
                    .WithMany(p => p.HistoriaAutorizacionClientes)
                    .HasForeignKey(d => d.Usuario)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_HistoriaAutorizacionCliente_USUARIOS");
            });

            modelBuilder.Entity<HistoriaCliente>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.Bloqueador)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("BLOQUEADOR");

                entity.Property(e => e.Causa)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("CAUSA");

                entity.Property(e => e.Explicacion)
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasColumnName("EXPLICACION");

                entity.Property(e => e.Fechabloqueo)
                    .HasColumnType("datetime")
                    .HasColumnName("FECHABLOQUEO");

                entity.Property(e => e.Idcliente)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("IDCLIENTE");

                entity.Property(e => e.Nrobloqueo)
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("NROBLOQUEO");

                entity.Property(e => e.Tipo)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('C')")
                    .IsFixedLength();
            });

            modelBuilder.Entity<HistoricoAjustesMonedum>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.Bu)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Cliente)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Cuenta)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Documento)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.DocumentoRv)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("DocumentoRV");

                entity.Property(e => e.FechaAjuste)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.FechaGrabacion).HasColumnType("datetime");

                entity.Property(e => e.FechaGrabacionRv)
                    .HasColumnType("datetime")
                    .HasColumnName("FechaGrabacionRV");

                entity.Property(e => e.Fuente)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.FuenteRv)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("FuenteRV");

                entity.Property(e => e.Iden)
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.MiPc)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("MiPC");

                entity.Property(e => e.MiPcrv)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("MiPCRV");

                entity.Property(e => e.NumeroFactura)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.ReferenciaFactura)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.SaldoLocal).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.SaldoMoneda).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.TasaAjuste).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.TipoAjuste)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.TipoFactura)
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Usuario)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioRv)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("UsuarioRV");

                entity.Property(e => e.ValorAjuste).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.VencimientoFactura)
                    .HasMaxLength(10)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<IdiomaControle>(entity =>
            {
                entity.HasKey(e => e.Iden);

                entity.ToTable("Idioma_Controles");

                entity.HasIndex(e => new { e.Forma, e.TipoControl, e.Control, e.Indice, e.Propiedad, e.Control2, e.Propiedad2 }, "IX_Idioma_Controles")
                    .IsUnique();

                entity.HasIndex(e => e.IdiomaDiccionarioIden, "IX_Idioma_Controles_1");

                entity.HasIndex(e => e.Forma, "IX_Idioma_Controles_2");

                entity.Property(e => e.Iden)
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Control)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Control2)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Forma)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.IdiomaDiccionarioIden)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("Idioma_Diccionario_Iden");

                entity.Property(e => e.Indice).HasDefaultValueSql("((-1))");

                entity.Property(e => e.Propiedad)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Propiedad2)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.TipoControl)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdiomaDiccionarioIdenNavigation)
                    .WithMany(p => p.IdiomaControles)
                    .HasForeignKey(d => d.IdiomaDiccionarioIden)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Idioma_Controles_Idioma_Diccionario");
            });

            modelBuilder.Entity<IdiomaDiccionario>(entity =>
            {
                entity.HasKey(e => e.Iden);

                entity.ToTable("Idioma_Diccionario");

                entity.HasIndex(e => e.Frace, "IX_Idioma_Diccionario")
                    .IsUnique();

                entity.Property(e => e.Iden)
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Frace).IsUnicode(false);
            });

            modelBuilder.Entity<IdiomaTipo>(entity =>
            {
                entity.HasKey(e => e.Iden);

                entity.ToTable("Idioma_Tipos");

                entity.HasIndex(e => e.Codigo, "IX_Idioma_Tipos")
                    .IsUnique();

                entity.Property(e => e.Iden)
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Codigo)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<IdiomaTraduccion>(entity =>
            {
                entity.HasKey(e => e.Iden);

                entity.ToTable("Idioma_Traduccion");

                entity.HasIndex(e => new { e.IdiomaDiccionarioIden, e.IdiomaTiposIden }, "IX_Idioma_Traduccion")
                    .IsUnique();

                entity.HasIndex(e => e.IdiomaDiccionarioIden, "IX_Idioma_Traduccion_Idioma_Diccionario");

                entity.HasIndex(e => e.IdiomaTiposIden, "IX_Idioma_Traduccion_Idioma_Tipos");

                entity.Property(e => e.Iden)
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.IdiomaDiccionarioIden)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("Idioma_Diccionario_Iden");

                entity.Property(e => e.IdiomaTiposIden)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("Idioma_Tipos_Iden");

                entity.Property(e => e.Traduccion)
                    .HasMaxLength(900)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdiomaDiccionarioIdenNavigation)
                    .WithMany(p => p.IdiomaTraduccions)
                    .HasForeignKey(d => d.IdiomaDiccionarioIden)
                    .HasConstraintName("FK_Idioma_Traduccion_Idioma_Diccionario");

                entity.HasOne(d => d.IdiomaTiposIdenNavigation)
                    .WithMany(p => p.IdiomaTraduccions)
                    .HasForeignKey(d => d.IdiomaTiposIden)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Idioma_Traduccion_Idioma_Tipos");
            });

            modelBuilder.Entity<ImpExtractoTipo>(entity =>
            {
                entity.HasKey(e => e.Iden);

                entity.Property(e => e.Codigo)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.ConcilMoneda)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Descripcion)
                    .HasMaxLength(4000)
                    .IsUnicode(false);

                entity.Property(e => e.Nombre)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Sp)
                    .HasMaxLength(256)
                    .HasColumnName("SP");
            });

            modelBuilder.Entity<ImpExtractosCamposTransac>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ImpExtractosCamposTransac");

                entity.Property(e => e.CampoTransac)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DatoContable)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.IdenImpextractoscampostransac)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_impextractoscampostransac");
            });

            modelBuilder.Entity<ImpExtractosCodMovimiento>(entity =>
            {
                entity.HasKey(e => e.Iden);

                entity.HasIndex(e => new { e.IdenExtractoDefinicion, e.CodigoMovimiento }, "UQ_IMPEXTRACTOSCODMOVIMIENTOS_CODIGOMOVIMIENTO_IDEN_EXTRACTODEFINICION")
                    .IsUnique();

                entity.Property(e => e.CodigoMovimiento)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.CtaCodMov)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.DescAusar).HasColumnName("DescAUsar");

                entity.Property(e => e.DescMovimiento)
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.IdAuxiliar)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.IdCenco)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.IdTercero)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.IdenExtractoDefinicion)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("Iden_ExtractoDefinicion");

                entity.Property(e => e.ImpExtractosCodMovimientosTipoConciliacionIden)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("ImpExtractosCodMovimientosTipoConciliacion_Iden");

                entity.HasOne(d => d.CtaCodMovNavigation)
                    .WithMany(p => p.ImpExtractosCodMovimientos)
                    .HasForeignKey(d => d.CtaCodMov)
                    .HasConstraintName("FK_ImpExtractosCodMovimientos_MAECONT");

                entity.HasOne(d => d.IdCencoNavigation)
                    .WithMany(p => p.ImpExtractosCodMovimientos)
                    .HasForeignKey(d => d.IdCenco)
                    .HasConstraintName("FK_ImpExtractosCodMovimientos_MAECCO");

                entity.HasOne(d => d.IdTerceroNavigation)
                    .WithMany(p => p.ImpExtractosCodMovimientos)
                    .HasForeignKey(d => d.IdTercero)
                    .HasConstraintName("FK_ImpExtractosCodMovimientos_TERCEROS");

                entity.HasOne(d => d.IdenExtractoDefinicionNavigation)
                    .WithMany(p => p.ImpExtractosCodMovimientos)
                    .HasForeignKey(d => d.IdenExtractoDefinicion)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ImpExtractosCodMovimientos_ImpExtractosDefinicion");

                entity.HasOne(d => d.ImpExtractosCodMovimientosTipoConciliacionIdenNavigation)
                    .WithMany(p => p.ImpExtractosCodMovimientos)
                    .HasPrincipalKey(p => p.Iden)
                    .HasForeignKey(d => d.ImpExtractosCodMovimientosTipoConciliacionIden)
                    .HasConstraintName("FK_ImpExtractosCodMovimientos_ImpExtractosCodMovimientosTipoConciliacion");
            });

            modelBuilder.Entity<ImpExtractosCodMovimientosTipoConciliacion>(entity =>
            {
                entity.HasKey(e => e.Codigo);

                entity.ToTable("ImpExtractosCodMovimientosTipoConciliacion");

                entity.HasIndex(e => e.Iden, "IX_IMPEXTRACTOSCODMOVIMIENTOSTIPOCONCILIACION_IDEN")
                    .IsUnique();

                entity.Property(e => e.Codigo)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Descripcion)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Iden)
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.ImpExtractosTipoMvtoConciliacionIden)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("ImpExtractosTipoMvtoConciliacion_Iden");

                entity.Property(e => e.NoCaracteres).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.NoDesde).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.NoHasta).HasColumnType("numeric(18, 0)");

                entity.HasOne(d => d.ImpExtractosTipoMvtoConciliacionIdenNavigation)
                    .WithMany(p => p.ImpExtractosCodMovimientosTipoConciliacions)
                    .HasPrincipalKey(p => p.Iden)
                    .HasForeignKey(d => d.ImpExtractosTipoMvtoConciliacionIden)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ImpExtractosCodMovimientosTipoConciliacion_ImpExtractosTipoMvtoConciliacion");
            });

            modelBuilder.Entity<ImpExtractosDefinicion>(entity =>
            {
                entity.HasKey(e => e.Iden);

                entity.ToTable("ImpExtractosDefinicion");

                entity.HasIndex(e => e.CodigoArchivo, "UQ_IMPEXTRACTOSDEFINICION_CODIGOARCHIVO")
                    .IsUnique();

                entity.Property(e => e.Iden)
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.CodigoArchivo)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.CtaBanco)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Descripcion)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.FilaInicial).HasDefaultValueSql("((1))");

                entity.Property(e => e.IdBanco)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.IdMoneda)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.LongitudFila).HasColumnName("longitudFila");

                entity.Property(e => e.OtroSeparador)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.UsaConcilMoneda)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.HasOne(d => d.CtaBancoNavigation)
                    .WithMany(p => p.ImpExtractosDefinicions)
                    .HasForeignKey(d => d.CtaBanco)
                    .HasConstraintName("FK_ImpExtractosDefinicion_MAECONT");

                entity.HasOne(d => d.IdBancoNavigation)
                    .WithMany(p => p.ImpExtractosDefinicions)
                    .HasForeignKey(d => d.IdBanco)
                    .HasConstraintName("FK_ImpExtractosDefinicion_BANCOS");

                entity.HasOne(d => d.IdenTipoArchivoNavigation)
                    .WithMany(p => p.ImpExtractosDefinicions)
                    .HasForeignKey(d => d.IdenTipoArchivo)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ImpExtractosDefinicion_ImpExtractoTipos");
            });

            modelBuilder.Entity<ImpExtractosDefinicionCuenta>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ImpExtractosDefinicion_Cuentas");

                entity.HasIndex(e => new { e.IdenExtractoDefinicion, e.Cuenta }, "UQ_IMPEXTRACTOSDEFINICION_CUENTAS_CUENTA_IDEN_EXTRACTODEFINICION")
                    .IsUnique();

                entity.Property(e => e.Cuenta)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Iden)
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.IdenExtractoDefinicion)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("Iden_ExtractoDefinicion");

                entity.HasOne(d => d.CuentaNavigation)
                    .WithMany()
                    .HasForeignKey(d => d.Cuenta)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ImpExtractosDefinicionCuentas_MAECONT");

                entity.HasOne(d => d.IdenExtractoDefinicionNavigation)
                    .WithMany()
                    .HasForeignKey(d => d.IdenExtractoDefinicion)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ImpExtractosDefinicionCuentas_ImpExtractosDefinicion");
            });

            modelBuilder.Entity<ImpExtractosDefinicionDet>(entity =>
            {
                entity.HasKey(e => e.Iden);

                entity.ToTable("ImpExtractosDefinicionDet");

                entity.HasIndex(e => new { e.IdenExtractoDefinicion, e.Columna }, "IX_IMPEXTRACTOSDEFINICIONDET_COLUMNA_IDEN_EXTRACTODEFINICION");

                entity.HasIndex(e => new { e.IdenExtractoDefinicion, e.CodigoCampo }, "UQ_IMPEXTRACTOSDEFINICIONDET_CODIGOCAMPO_IDEN_EXTRACTODEFINICION")
                    .IsUnique();

                entity.Property(e => e.CampoContable)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.CodigoCampo)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.IdenExtractoDefinicion)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("Iden_ExtractoDefinicion");

                entity.HasOne(d => d.IdenExtractoDefinicionNavigation)
                    .WithMany(p => p.ImpExtractosDefinicionDets)
                    .HasForeignKey(d => d.IdenExtractoDefinicion)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ImpExtractosDefinicionDet_ImpExtractosDefinicion");
            });

            modelBuilder.Entity<ImpExtractosLog>(entity =>
            {
                entity.HasKey(e => e.Iden);

                entity.ToTable("ImpExtractosLog");

                entity.HasIndex(e => new { e.Fecha, e.IdenArchivo, e.Usuario }, "IX_IMPEXTRACTOSLOG_FECHA_IDENARCHIVO_USUARIO");

                entity.Property(e => e.Bu)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("BU");

                entity.Property(e => e.DocumentoF)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.DocumentoI)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Fecha)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Fuente)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.IdenArchivo).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.Path)
                    .HasMaxLength(8000)
                    .IsUnicode(false);

                entity.Property(e => e.Serie)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Usuario)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdenArchivoNavigation)
                    .WithMany(p => p.ImpExtractosLogs)
                    .HasForeignKey(d => d.IdenArchivo)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ImpExtractosLog_ImpExtractosDefinicion");
            });

            modelBuilder.Entity<ImpExtractosTipoMvtoConciliacion>(entity =>
            {
                entity.HasKey(e => e.Codigo);

                entity.ToTable("ImpExtractosTipoMvtoConciliacion");

                entity.HasIndex(e => e.Iden, "IX_IMPEXTRACTOSTIPOMVTOCONCILIACION_IDEN")
                    .IsUnique();

                entity.Property(e => e.Codigo)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Descripcion)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Iden).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.IdenImpextractostipomvtoconciliacion)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_impextractostipomvtoconciliacion");
            });

            modelBuilder.Entity<ImportarArchivo>(entity =>
            {
                entity.HasKey(e => e.Iden)
                    .HasName("PK_IMPORTARARCHIVO");

                entity.ToTable("ImportarArchivo");

                entity.Property(e => e.Iden)
                    .ValueGeneratedNever()
                    .HasColumnName("IDEN");

                entity.Property(e => e.ConsultarColumnas).HasDefaultValueSql("((1))");

                entity.Property(e => e.IdenImportararchivo)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_importararchivo");

                entity.Property(e => e.Maestro)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Separador)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('|')");

                entity.Property(e => e.Sp)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SpExportar)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Tabla)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.TipoReg).HasDefaultValueSql("((1))");
            });

            modelBuilder.Entity<ImportarArchivoCampo>(entity =>
            {
                entity.HasKey(e => new { e.IdenMaestro, e.Campo })
                    .IsClustered(false);

                entity.Property(e => e.IdenMaestro).HasColumnName("IDEN_Maestro");

                entity.Property(e => e.Campo)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Alias)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Iden)
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("IDEN");

                entity.HasOne(d => d.IdenMaestroNavigation)
                    .WithMany(p => p.ImportarArchivoCampos)
                    .HasForeignKey(d => d.IdenMaestro)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ImportarArchivoCampos_ImportarArchivo");
            });

            modelBuilder.Entity<ImpresoraFiscalDocumento>(entity =>
            {
                entity.HasKey(e => e.Iden);

                entity.ToTable("ImpresoraFiscal_Documentos");

                entity.HasIndex(e => new { e.TipoDocumento, e.Fuente, e.Documento }, "IX_IMPRESORAFISCAL_DOCUMENTOS_DOCUMENTO_FUENTE_TIPODOCUMENTO")
                    .IsUnique();

                entity.Property(e => e.Iden)
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Consecutivo).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.Documento)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Fuente)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.NoFiscalImpresora)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NoSerialImpresora)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.TipoDocumento).HasColumnType("numeric(18, 0)");
            });

            modelBuilder.Entity<ImpresoraFiscalFactura>(entity =>
            {
                entity.HasKey(e => e.Iden);

                entity.ToTable("ImpresoraFiscal_Facturas");

                entity.HasIndex(e => e.SpId, "IX_IMPRESORAFISCAL_FACTURAS_SPID");

                entity.Property(e => e.Iden)
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Cantidad).HasColumnType("numeric(18, 6)");

                entity.Property(e => e.Codigo)
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.Descripcion)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Descuento).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.FacturaFechaHora).HasColumnType("datetime");

                entity.Property(e => e.FacturaNumero)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Fecha).HasColumnType("datetime");

                entity.Property(e => e.Formapgo)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Identificacion)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Iva).HasColumnType("numeric(18, 6)");

                entity.Property(e => e.Nomfactu)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Pagosdep).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.Pagosfis).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.Porcentajeiva).HasColumnType("numeric(18, 6)");

                entity.Property(e => e.Serieimpresorafiscal)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Servicio).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.Tipoconsumo)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Total).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.ValorU)
                    .HasColumnType("numeric(18, 2)")
                    .HasColumnName("Valor_u");

                entity.Property(e => e.Valorimpuesto).HasColumnType("numeric(18, 6)");

                entity.Property(e => e.Xfpago)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("xfpago");
            });

            modelBuilder.Entity<ImpresoraFiscalParametro>(entity =>
            {
                entity.HasKey(e => e.Iden);

                entity.ToTable("ImpresoraFiscal_Parametros");

                entity.HasIndex(e => e.Codigo, "IX_IMPRESORAFISCAL_PARAMETROS_CODIGO")
                    .IsUnique();

                entity.Property(e => e.Iden)
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Codigo)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Nombre)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Valor)
                    .HasMaxLength(500)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ImpuestosBu>(entity =>
            {
                entity.HasKey(e => new { e.Anomescta, e.Bu, e.Codicta, e.Idtercero })
                    .IsClustered(false);

                entity.ToTable("IMPUESTOS_BU");

                entity.HasIndex(e => new { e.Anomescta, e.Bu, e.Idtercero, e.Codicta }, "IX_IMPUESTOS_BU_ANOMESCTA_CODICTA_IDTERCERO")
                    .IsClustered();

                entity.HasIndex(e => new { e.Bu, e.Idtercero, e.Codicta, e.Anomescta }, "IX_IMPUESTOS_BU_BU_IDTERCERO_CODICTA_ANOMESCTA");

                entity.HasIndex(e => e.Codicta, "IX_IMPUESTOS_BU_MAECONT");

                entity.Property(e => e.Anomescta)
                    .HasMaxLength(7)
                    .IsUnicode(false)
                    .HasColumnName("ANOMESCTA")
                    .IsFixedLength();

                entity.Property(e => e.Bu)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("BU");

                entity.Property(e => e.Codicta)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("CODICTA")
                    .IsFixedLength();

                entity.Property(e => e.Idtercero)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("IDTERCERO");

                entity.Property(e => e.Basemvcr)
                    .HasColumnType("money")
                    .HasColumnName("BASEMVCR");

                entity.Property(e => e.Basemvcrmon1)
                    .HasColumnType("money")
                    .HasColumnName("BASEMVCRMON1");

                entity.Property(e => e.Basemvcrmon2)
                    .HasColumnType("money")
                    .HasColumnName("BASEMVCRMON2");

                entity.Property(e => e.Basemvdb)
                    .HasColumnType("money")
                    .HasColumnName("BASEMVDB");

                entity.Property(e => e.Basemvdbmon1)
                    .HasColumnType("money")
                    .HasColumnName("BASEMVDBMON1");

                entity.Property(e => e.Basemvdbmon2)
                    .HasColumnType("money")
                    .HasColumnName("BASEMVDBMON2");

                entity.Property(e => e.IdenImpuestosBu)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_impuestos_bu");

                entity.Property(e => e.Valormvcr)
                    .HasColumnType("money")
                    .HasColumnName("VALORMVCR");

                entity.Property(e => e.Valormvcrmon1)
                    .HasColumnType("money")
                    .HasColumnName("VALORMVCRMON1");

                entity.Property(e => e.Valormvcrmon2)
                    .HasColumnType("money")
                    .HasColumnName("VALORMVCRMON2");

                entity.Property(e => e.Valormvdb)
                    .HasColumnType("money")
                    .HasColumnName("VALORMVDB");

                entity.Property(e => e.Valormvdbmon1)
                    .HasColumnType("money")
                    .HasColumnName("VALORMVDBMON1");

                entity.Property(e => e.Valormvdbmon2)
                    .HasColumnType("money")
                    .HasColumnName("VALORMVDBMON2");

                entity.Property(e => e.VersionDeLaFila)
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.BuNavigation)
                    .WithMany(p => p.ImpuestosBus)
                    .HasForeignKey(d => d.Bu)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_IMPUESTOS_BU_BU");

                entity.HasOne(d => d.CodictaNavigation)
                    .WithMany(p => p.ImpuestosBus)
                    .HasForeignKey(d => d.Codicta)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_IMPUESTOS_BU_MAECONT");
            });

            modelBuilder.Entity<ImpuestosI>(entity =>
            {
                entity.HasKey(e => e.Anomescta)
                    .IsClustered(false);

                entity.ToTable("IMPUESTOS_I");

                entity.Property(e => e.Anomescta)
                    .HasMaxLength(7)
                    .IsUnicode(false)
                    .HasColumnName("ANOMESCTA");

                entity.Property(e => e.Basemvcr)
                    .HasColumnType("money")
                    .HasColumnName("BASEMVCR");

                entity.Property(e => e.Basemvcrmon1)
                    .HasColumnType("money")
                    .HasColumnName("BASEMVCRMON1");

                entity.Property(e => e.Basemvcrmon2)
                    .HasColumnType("money")
                    .HasColumnName("BASEMVCRMON2");

                entity.Property(e => e.Basemvdb)
                    .HasColumnType("money")
                    .HasColumnName("BASEMVDB");

                entity.Property(e => e.Basemvdbmon1)
                    .HasColumnType("money")
                    .HasColumnName("BASEMVDBMON1");

                entity.Property(e => e.Basemvdbmon2)
                    .HasColumnType("money")
                    .HasColumnName("BASEMVDBMON2");

                entity.Property(e => e.IdenImpuestosI)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_impuestos_i");

                entity.Property(e => e.Valormvcr)
                    .HasColumnType("money")
                    .HasColumnName("VALORMVCR");

                entity.Property(e => e.Valormvcrmon1)
                    .HasColumnType("money")
                    .HasColumnName("VALORMVCRMON1");

                entity.Property(e => e.Valormvcrmon2)
                    .HasColumnType("money")
                    .HasColumnName("VALORMVCRMON2");

                entity.Property(e => e.Valormvdb)
                    .HasColumnType("money")
                    .HasColumnName("VALORMVDB");

                entity.Property(e => e.Valormvdbmon1)
                    .HasColumnType("money")
                    .HasColumnName("VALORMVDBMON1");

                entity.Property(e => e.Valormvdbmon2)
                    .HasColumnType("money")
                    .HasColumnName("VALORMVDBMON2");
            });

            modelBuilder.Entity<ImpuestosXFactura>(entity =>
            {
                entity.HasKey(e => new { e.Anomesimpfac, e.Fuente, e.Documento, e.Consecutivo })
                    .IsClustered(false);

                entity.ToTable("IMPUESTOS_X_FACTURAS");

                entity.HasIndex(e => new { e.Fuente, e.Documento, e.Consecutivo }, "IX_IMPUESTOS_X_FACTURAS_CONSECUTIVO_DOCUMENTO_FUENTE");

                entity.HasIndex(e => new { e.Fuente, e.Documento, e.Consecutivo, e.Anomesimpfac }, "IX_IMPUESTOS_X_FACTURAS_FUENTE_DOCUMENTO_CONSECUTIVO_ANOMESIMPFAC");

                entity.Property(e => e.Anomesimpfac)
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .HasColumnName("ANOMESIMPFAC")
                    .IsFixedLength();

                entity.Property(e => e.Fuente)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("FUENTE")
                    .IsFixedLength();

                entity.Property(e => e.Documento)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("DOCUMENTO")
                    .IsFixedLength();

                entity.Property(e => e.Consecutivo).HasColumnName("CONSECUTIVO");

                entity.Property(e => e.Baseimp)
                    .HasColumnType("money")
                    .HasColumnName("BASEIMP")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Cliente)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("CLIENTE")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Codicta)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("CODICTA")
                    .IsFixedLength();

                entity.Property(e => e.IdenImpuestosXFacturas)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_impuestos_x_facturas");

                entity.Property(e => e.Numefac)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("NUMEFAC");

                entity.Property(e => e.Porcimp)
                    .HasColumnType("numeric(18, 4)")
                    .HasColumnName("PORCIMP")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Proveedor)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("PROVEEDOR")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Refefac)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("REFEFAC");

                entity.Property(e => e.Tercero)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("TERCERO")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Tipofac)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("TIPOFAC")
                    .IsFixedLength();

                entity.Property(e => e.Valortra)
                    .HasColumnType("money")
                    .HasColumnName("VALORTRA");

                entity.Property(e => e.Vencefac)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("VENCEFAC")
                    .IsFixedLength();

                entity.Property(e => e.VersionDeLaFila)
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<Infodesign>(entity =>
            {
                entity.HasKey(e => e.Idcodigo);

                entity.ToTable("INFODESIGN");

                entity.Property(e => e.Idcodigo)
                    .HasMaxLength(256)
                    .IsUnicode(false)
                    .HasColumnName("IDCODIGO");

                entity.Property(e => e.Chmodiperfil)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("CHMODIPERFIL")
                    .IsFixedLength();

                entity.Property(e => e.Chmodiusuario)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("CHMODIUSUARIO")
                    .IsFixedLength();

                entity.Property(e => e.Chperfil)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("CHPERFIL")
                    .IsFixedLength();

                entity.Property(e => e.Chusuario)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("CHUSUARIO")
                    .IsFixedLength();

                entity.Property(e => e.Descripcion)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPCION");

                entity.Property(e => e.Filedesign)
                    .HasColumnType("image")
                    .HasColumnName("FILEDESIGN");

                entity.Property(e => e.IdenInfodesign)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_infodesign");

                entity.Property(e => e.Perfiles)
                    .HasMaxLength(4096)
                    .IsUnicode(false)
                    .HasColumnName("PERFILES");

                entity.Property(e => e.Publico)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("PUBLICO")
                    .IsFixedLength();

                entity.Property(e => e.Usuario)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("USUARIO");

                entity.Property(e => e.Usuarios)
                    .HasMaxLength(4096)
                    .IsUnicode(false)
                    .HasColumnName("USUARIOS");
            });

            modelBuilder.Entity<IntCorrienteDocumentosVsIc>(entity =>
            {
                entity.HasKey(e => e.Iden);

                entity.ToTable("IntCorriente_DocumentosVsIC");

                entity.HasIndex(e => new { e.Iden, e.FuenteDocRelacionado, e.NumeroDocRelacionado, e.FechaDocRelacionado, e.FuenteIc, e.DocumentoIc, e.FechaIc }, "IX_IntCorriente_DocumentosVsIC_DocumentoIC_NumeroDocRelacionado_FechaIC_FechaDocRelacionado_FuenteIC_FuenteDocRelacionado_Iden")
                    .IsUnique();

                entity.Property(e => e.DocumentoIc)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("DocumentoIC");

                entity.Property(e => e.Estado)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.FechaDocRelacionado)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.FechaIc)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("FechaIC");

                entity.Property(e => e.FuenteDocRelacionado)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.FuenteIc)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("FuenteIC");

                entity.Property(e => e.NumeroDocRelacionado)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.TipoDocumentoOrigen)
                    .HasMaxLength(250)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<IntMoraNovedade>(entity =>
            {
                entity.HasKey(e => e.Iden);

                entity.ToTable("IntMora_Novedades");

                entity.HasIndex(e => new { e.Idcliprv, e.Tipofact, e.Numefac, e.Vencfac, e.Refefac, e.Bu }, "IX_INTMORA_NOVEDADES_BU_IDCLIPRV_NUMEFAC_REFEFAC_TIPOFACT_VENCFAC");

                entity.HasIndex(e => new { e.Estado, e.Idcliprv }, "IX_INTMORA_NOVEDADES_ESTADO_IDCLIPRV");

                entity.HasIndex(e => new { e.Fuente, e.Documento, e.FechaImora, e.Estado }, "IX_IntMora_Novedades_Causacion");

                entity.HasIndex(e => new { e.Codicta, e.Idcliprv, e.Tipofact, e.Numefac, e.Vencfac, e.Refefac, e.Bu, e.Estado }, "IX_IntMora_Novedades_II");

                entity.Property(e => e.Iden).HasColumnName("iden");

                entity.Property(e => e.Anomesfac)
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.Bu)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("BU");

                entity.Property(e => e.Codicta)
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.Documento)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Estado)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('AC')");

                entity.Property(e => e.FechaImora)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("FechaIMora");

                entity.Property(e => e.Fuente)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Idcliprv)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("idcliprv");

                entity.Property(e => e.IdcliprvAsumeIm)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("IDCLIPRV_ASUME_IM");

                entity.Property(e => e.MoraContabilizada).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.Numefac)
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.Porcentaje).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.Refefac)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Sactfac).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.Tipofact)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.ValorImora).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.Vencfac)
                    .HasMaxLength(10)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<IntMoraNovedadesDetalle>(entity =>
            {
                entity.HasKey(e => e.Iden);

                entity.ToTable("IntMora_NovedadesDetalle");

                entity.HasIndex(e => e.IdMoraNovedades, "IX_IntMora_NovedadesDetalle_IdMora_Novedades");

                entity.Property(e => e.Iden).HasColumnName("iden");

                entity.Property(e => e.Bu)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Dias).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.DocumentoCorte)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.FechaCorte)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.FechaGrabacion).HasColumnType("smalldatetime");

                entity.Property(e => e.FechaUltimaMora)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.FuenteCorte)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.IdMoraNovedades).HasColumnName("IdMora_Novedades");

                entity.Property(e => e.SactfacCorte).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.ValorImoraCorte).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.ValorImoraIvaCorte).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.VrMoraContabilizada).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.VrMoraIvaContabilizada).HasColumnType("numeric(18, 2)");

                entity.HasOne(d => d.IdMoraNovedadesNavigation)
                    .WithMany(p => p.IntMoraNovedadesDetalles)
                    .HasForeignKey(d => d.IdMoraNovedades)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_IntMora_Novedades_IntMora_NovedadesDetalle");
            });

            modelBuilder.Entity<IntMoraRcvsIm>(entity =>
            {
                entity.HasKey(e => e.Iden);

                entity.ToTable("IntMora_RCVsIM");

                entity.HasIndex(e => new { e.Iden, e.FuenteRc, e.DocumentoRc, e.FechaRc, e.FuenteIm, e.DocumentoIm, e.FechaIm }, "IX_INTMORA_RCVSIM_DOCUMENTOIM_DOCUMENTORC_FECHAIM_FECHARC_FUENTEIM_FUENTERC_IDEN")
                    .IsUnique();

                entity.Property(e => e.DocumentoIm)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("DocumentoIM");

                entity.Property(e => e.DocumentoRc)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("DocumentoRC");

                entity.Property(e => e.Estado)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.FechaIm)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("FechaIM");

                entity.Property(e => e.FechaRc)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("FechaRC");

                entity.Property(e => e.FuenteIm)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("FuenteIM");

                entity.Property(e => e.FuenteRc)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("FuenteRC");
            });

            modelBuilder.Entity<Interfaz>(entity =>
            {
                entity.HasKey(e => e.Iden);

                entity.ToTable("Interfaz");

                entity.HasIndex(e => e.Codigo, "IX_Interfaz")
                    .IsUnique();

                entity.Property(e => e.Iden)
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Codigo)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Nombre)
                    .HasMaxLength(200)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<InterfazAsignaVariable>(entity =>
            {
                entity.HasKey(e => e.Iden);

                entity.ToTable("Interfaz_AsignaVariable");

                entity.HasIndex(e => new { e.InterfazProcesoIden, e.InterfazVariablesIden }, "IX_Interfaz_AsignaVariable")
                    .IsUnique();

                entity.Property(e => e.Iden)
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.InterfazProcesoIden)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("Interfaz_Proceso_Iden");

                entity.Property(e => e.InterfazVariablesIden)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("Interfaz_Variables_Iden");

                entity.HasOne(d => d.InterfazProcesoIdenNavigation)
                    .WithMany(p => p.InterfazAsignaVariables)
                    .HasForeignKey(d => d.InterfazProcesoIden)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Interfaz_AsignaVariable_Interfaz_Proceso");

                entity.HasOne(d => d.InterfazVariablesIdenNavigation)
                    .WithMany(p => p.InterfazAsignaVariables)
                    .HasForeignKey(d => d.InterfazVariablesIden)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Interfaz_AsignaVariable_Interfaz_Variables");
            });

            modelBuilder.Entity<InterfazCombinacion>(entity =>
            {
                entity.HasKey(e => e.Iden)
                    .IsClustered(false);

                entity.ToTable("Interfaz_Combinacion");

                entity.HasIndex(e => new { e.InterfazProceso, e.Criterio0, e.Criterio1, e.Criterio2, e.Criterio3, e.Criterio4, e.Criterio5, e.Criterio6, e.Criterio7, e.Criterio8, e.Criterio9 }, "IX_Interfaz_Combinacion")
                    .IsClustered();

                entity.Property(e => e.Iden)
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Criterio0).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.Criterio1).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.Criterio2).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.Criterio3).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.Criterio4).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.Criterio5).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.Criterio6).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.Criterio7).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.Criterio8).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.Criterio9).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.InterfazProceso)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("Interfaz_Proceso");

                entity.HasOne(d => d.InterfazProcesoNavigation)
                    .WithMany(p => p.InterfazCombinacions)
                    .HasForeignKey(d => d.InterfazProceso)
                    .HasConstraintName("FK_Interfaz_Combinacion_Interfaz_Proceso");
            });

            modelBuilder.Entity<InterfazCombinacionDato>(entity =>
            {
                entity.HasKey(e => e.Iden);

                entity.ToTable("Interfaz_Combinacion_Datos");

                entity.HasIndex(e => new { e.InterfazCombinacionIden, e.InterfazVariablesIden }, "IX_Interfaz_Combinacion_Datos")
                    .IsUnique();

                entity.Property(e => e.Iden)
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.InterfazCombinacionIden)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("Interfaz_Combinacion_Iden");

                entity.Property(e => e.InterfazVariablesIden)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("Interfaz_Variables_Iden");

                entity.Property(e => e.Valor)
                    .HasMaxLength(8000)
                    .IsUnicode(false);

                entity.HasOne(d => d.InterfazCombinacionIdenNavigation)
                    .WithMany(p => p.InterfazCombinacionDatos)
                    .HasForeignKey(d => d.InterfazCombinacionIden)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_Interfaz_Combinacion_Datos_Interfaz_Combinacion");

                entity.HasOne(d => d.InterfazVariablesIdenNavigation)
                    .WithMany(p => p.InterfazCombinacionDatos)
                    .HasForeignKey(d => d.InterfazVariablesIden)
                    .HasConstraintName("FK_Interfaz_Combinacion_Datos_Interfaz_Variables");
            });

            modelBuilder.Entity<InterfazCriterioGenericoDato>(entity =>
            {
                entity.HasKey(e => e.Iden);

                entity.ToTable("Interfaz_CriterioGenericoDatos");

                entity.HasIndex(e => new { e.InterfazIden, e.TipoCriterio, e.Codigo }, "IX_Interfaz_CriterioGenericoDatos")
                    .IsUnique();

                entity.Property(e => e.Iden)
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Codigo)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.InterfazIden)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("Interfaz_Iden");

                entity.Property(e => e.Nombre)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.TipoCriterio).HasColumnType("numeric(18, 0)");

                entity.HasOne(d => d.InterfazIdenNavigation)
                    .WithMany(p => p.InterfazCriterioGenericoDatos)
                    .HasForeignKey(d => d.InterfazIden)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Interfaz_CriterioGenericoDatos_Interfaz");
            });

            modelBuilder.Entity<InterfazCriterioTitulo>(entity =>
            {
                entity.HasKey(e => e.Iden);

                entity.ToTable("Interfaz_Criterio_Titulos");

                entity.HasIndex(e => new { e.InterfazIden, e.TipoCriterio }, "IX_Interfaz_Criterio_Titulos")
                    .IsUnique();

                entity.Property(e => e.Iden)
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.InterfazIden)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("Interfaz_Iden");

                entity.Property(e => e.TipoCriterio).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.Titulo)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.HasOne(d => d.InterfazIdenNavigation)
                    .WithMany(p => p.InterfazCriterioTitulos)
                    .HasForeignKey(d => d.InterfazIden)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Interfaz_Criterio_Titulos_Interfaz");
            });

            modelBuilder.Entity<InterfazPeticione>(entity =>
            {
                entity.HasKey(e => e.Iden);

                entity.ToTable("Interfaz_Peticiones");

                entity.Property(e => e.Iden)
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Estado)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.FechaHoraGrabacion)
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.FechaHoraProcesado).HasColumnType("smalldatetime");

                entity.Property(e => e.InterfazIden)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("Interfaz_Iden");

                entity.Property(e => e.PeticionXml)
                    .IsUnicode(false)
                    .HasColumnName("peticion_xml");

                entity.Property(e => e.UltimoMensaje)
                    .HasMaxLength(1000)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<InterfazProceso>(entity =>
            {
                entity.HasKey(e => e.Iden);

                entity.ToTable("Interfaz_Proceso");

                entity.HasIndex(e => new { e.InterfazIden, e.Codigo }, "IX_Interfaz_Proceso")
                    .IsUnique();

                entity.Property(e => e.Iden)
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Codigo)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.InterfazIden)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("Interfaz_Iden");

                entity.Property(e => e.Nombre)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.HasOne(d => d.InterfazIdenNavigation)
                    .WithMany(p => p.InterfazProcesos)
                    .HasForeignKey(d => d.InterfazIden)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Interfaz_Proceso_Interfaz");
            });

            modelBuilder.Entity<InterfazVariable>(entity =>
            {
                entity.HasKey(e => e.Iden);

                entity.ToTable("Interfaz_Variables");

                entity.HasIndex(e => e.Codigo, "IX_Interfaz_Variables")
                    .IsUnique();

                entity.Property(e => e.Iden)
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Adicional)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.Codigo)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ListaPosibilidades)
                    .HasMaxLength(2000)
                    .IsUnicode(false);

                entity.Property(e => e.Nombre)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.SeccionAyuda)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.SeccionAyudaMaestroGenerico)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Titulo)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Item>(entity =>
            {
                entity.HasKey(e => e.Iditem)
                    .HasName("pk_items")
                    .IsClustered(false);

                entity.ToTable("ITEMS");

                entity.HasIndex(e => e.Descrip, "IX_ITEMS_DESCRIP");

                entity.Property(e => e.Iditem)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("IDITEM");

                entity.Property(e => e.Depitem)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("DEPITEM")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Descrip)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIP")
                    .IsFixedLength();

                entity.Property(e => e.Fecitem)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("FECITEM");

                entity.Property(e => e.IdenItems)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_items");

                entity.Property(e => e.Ncditem)
                    .HasColumnName("NCDITEM")
                    .HasDefaultValueSql("('0')");

                entity.Property(e => e.Nivitem)
                    .HasColumnName("NIVITEM")
                    .HasDefaultValueSql("('1')");

                entity.Property(e => e.Tipoitem)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("TIPOITEM")
                    .HasDefaultValueSql("('D')")
                    .IsFixedLength();

                entity.Property(e => e.VersionDeLaFila)
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<JobEnvioEmailCobro>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.Cliente)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Configuracion).HasColumnType("xml");

                entity.Property(e => e.Correo).IsUnicode(false);

                entity.Property(e => e.FechaEnvio).HasColumnType("smalldatetime");

                entity.Property(e => e.FechaPromesa)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Iden)
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.IdenConfig)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("Iden_Config");

                entity.Property(e => e.MensajeEnvio).IsUnicode(false);
            });

            modelBuilder.Entity<JobEnvioEmailValera>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.Cliente)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Configuracion)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Fecha)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.FechaAnalisis)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.FechaBaseEn)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.FechaEnvio).HasColumnType("smalldatetime");

                entity.Property(e => e.Iden)
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.MensajeEnvio).IsUnicode(false);

                entity.Property(e => e.Plantilla)
                    .HasMaxLength(25)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<LibrosLegale>(entity =>
            {
                entity.HasIndex(e => e.CodLibro, "UQ_LIBROSLEGALES_CODLIBRO")
                    .IsUnique();

                entity.Property(e => e.CodLibro)
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Descripcion)
                    .HasMaxLength(512)
                    .IsUnicode(false);

                entity.Property(e => e.EsNiif).HasColumnName("EsNIIF");

                entity.Property(e => e.ModeloDbCr).HasColumnName("ModeloDB_CR");

                entity.Property(e => e.NomLibro)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Reporte)
                    .HasMaxLength(512)
                    .IsUnicode(false);

                entity.Property(e => e.StoredProcedure)
                    .HasMaxLength(512)
                    .IsUnicode(false);

                entity.Property(e => e.SubReporte)
                    .HasMaxLength(512)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<LogEnvioEmail>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("LogEnvioEmail");

                entity.Property(e => e.Asunto)
                    .HasMaxLength(8000)
                    .IsUnicode(false);

                entity.Property(e => e.Bu)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("BU");

                entity.Property(e => e.CliPrv)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Email)
                    .HasMaxLength(800)
                    .IsUnicode(false);

                entity.Property(e => e.Fecha)
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Id).ValueGeneratedOnAdd();

                entity.Property(e => e.Texto).IsUnicode(false);

                entity.Property(e => e.Tipo)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Usuario)
                    .HasMaxLength(250)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<LogTodosMaestro>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.Codigo)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Fecha).HasColumnType("smalldatetime");

                entity.Property(e => e.IdenLogtodosmaestros)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_logtodosmaestros");

                entity.Property(e => e.Maestro)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Nombre)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Operacion)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Usuario)
                    .HasMaxLength(250)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<LogoEmpresa>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("LogoEmpresa");

                entity.Property(e => e.Iden).ValueGeneratedOnAdd();

                entity.Property(e => e.Logo).HasColumnType("image");
            });

            modelBuilder.Entity<LvFacturaElectronicaExtensionesDinamicasDocumentosItem>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("LvFacturaElectronica_ExtensionesDinamicas_DocumentosItems");

                entity.Property(e => e.Auxiliar)
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.Bu)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("BU");

                entity.Property(e => e.CentroCosto)
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.Cliente)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.CodigoConcepto).IsUnicode(false);

                entity.Property(e => e.ConsecutivoVariable).IsUnicode(false);

                entity.Property(e => e.CuentaAnticipo)
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.CuentaCaja)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CuentaPorCobrar)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Documento).IsUnicode(false);

                entity.Property(e => e.Fuente).IsUnicode(false);

                entity.Property(e => e.Item)
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.Moneda)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Propiedad1)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Propiedad2)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Propiedad3)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Propiedad4)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Propiedad5)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.TipoConcepto).IsUnicode(false);

                entity.Property(e => e.TipoFactura)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Usuario)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Vendedor)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength();
            });

            modelBuilder.Entity<MaeCategoria>(entity =>
            {
                entity.HasKey(e => e.Idcategoria)
                    .HasName("pk_MaeCategorias");

                entity.Property(e => e.Idcategoria)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("IDCategoria");

                entity.Property(e => e.CodigoAlterno)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Depcategoria)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("DEPCategoria");

                entity.Property(e => e.Descategoria)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("DESCategoria")
                    .IsFixedLength();

                entity.Property(e => e.Feccategoria)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("FECCategoria");

                entity.Property(e => e.IdenMaecategorias)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_maecategorias");

                entity.Property(e => e.Ncdcategoria).HasColumnName("NCDCategoria");

                entity.Property(e => e.Nivcategoria).HasColumnName("NIVCategoria");

                entity.Property(e => e.Tipocategoria)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("TIPOCategoria")
                    .IsFixedLength();

                entity.Property(e => e.VersionDeLaFila)
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<MaeCategoriaPresupuestoPrivado>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Mae_CategoriaPresupuestoPrivado");

                entity.HasIndex(e => e.Codigo, "UQ_Mae_CategoriaPresupuestoPrivado_Codigo")
                    .IsUnique();

                entity.Property(e => e.Adicion).HasDefaultValueSql("((0))");

                entity.Property(e => e.Codigo)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Descripcion)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Disminucion).HasDefaultValueSql("((0))");

                entity.Property(e => e.Id).ValueGeneratedOnAdd();

                entity.Property(e => e.MultiplePresupuesto).HasDefaultValueSql("((0))");

                entity.Property(e => e.Nombre)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Reserva).HasDefaultValueSql("((0))");

                entity.Property(e => e.Traslado).HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<MaeClasesProv>(entity =>
            {
                entity.HasKey(e => e.Iden);

                entity.ToTable("MaeClasesProv");

                entity.HasIndex(e => e.Codigo, "UQ_MAECLASESPROV_CODIGO")
                    .IsUnique();

                entity.Property(e => e.CodBienServicio)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Codigo)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Descripcion)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.VersionDeLaFila)
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<MaeCodigoOcupacion>(entity =>
            {
                entity.HasKey(e => e.Iden);

                entity.ToTable("Mae_CodigoOcupacion");

                entity.HasIndex(e => e.Codigo, "UQ_MAE_CODIGOOCUPACION_CODIGO")
                    .IsUnique();

                entity.Property(e => e.Codigo)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Depende)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Descripcion)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Ndependientes).HasColumnName("NDependientes");

                entity.Property(e => e.Tipo)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.VersionDeLaFila)
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<MaeImportacionArchivo>(entity =>
            {
                entity.ToTable("Mae_ImportacionArchivos");

                entity.HasIndex(e => e.Nombre, "UQ_Mae_ImportacionArchivos_Nombre")
                    .IsUnique();

                entity.Property(e => e.Nombre)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Procedimiento)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<MaeMotivo>(entity =>
            {
                entity.HasKey(e => e.Codigo)
                    .HasName("PK__MaeMotiv__06370DAD091341AB");

                entity.Property(e => e.Codigo)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Descripcion)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.Iden).ValueGeneratedOnAdd();

                entity.Property(e => e.NombreMotivo)
                    .HasMaxLength(250)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<MaeMotivosOpcione>(entity =>
            {
                entity.HasKey(e => new { e.IdenMotivo, e.Idmenu });

                entity.ToTable("MaeMotivos_Opciones");

                entity.Property(e => e.IdenMotivo).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.Idmenu).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.Iden)
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<MaeOcupacione>(entity =>
            {
                entity.HasKey(e => e.Codigo)
                    .HasName("PK_MAE_OCUPACIONES");

                entity.ToTable("Mae_Ocupaciones");

                entity.Property(e => e.Codigo)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Cargo)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Descripcion)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.IdenMaeOcupaciones)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_mae_ocupaciones");

                entity.Property(e => e.VersionDeLaFila)
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<MaePresuCuenta>(entity =>
            {
                entity.HasKey(e => new { e.CodPresu, e.CodPuc, e.CodCco });

                entity.ToTable("MaePresu_Cuentas");

                entity.Property(e => e.CodPresu)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CodPuc)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CodCco)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("CodCCO")
                    .IsFixedLength();

                entity.Property(e => e.IdenMaepresuCuentas)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_maepresu_cuentas");
            });

            modelBuilder.Entity<MaeTipodeEvento>(entity =>
            {
                entity.HasKey(e => e.Codigo)
                    .IsClustered(false);

                entity.Property(e => e.Codigo)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("codigo");

                entity.Property(e => e.Descripcion)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("descripcion");

                entity.Property(e => e.IdenMaetipodeeventos)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_maetipodeeventos");

                entity.Property(e => e.Nombre)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("nombre");
            });

            modelBuilder.Entity<MaeVendeCorreo>(entity =>
            {
                entity.Property(e => e.DsEmail)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("ds_email");

                entity.Property(e => e.Idvende)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("IDVENDE")
                    .IsFixedLength();

                entity.HasOne(d => d.IdvendeNavigation)
                    .WithMany(p => p.MaeVendeCorreos)
                    .HasForeignKey(d => d.Idvende)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_MaeVendeCorreos_MaeVende");
            });

            modelBuilder.Entity<Maecco>(entity =>
            {
                entity.HasKey(e => e.Idcenco)
                    .HasName("pk_maecco")
                    .IsClustered(false);

                entity.ToTable("MAECCO");

                entity.Property(e => e.Idcenco)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("IDCENCO")
                    .IsFixedLength();

                entity.Property(e => e.Depcenco)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("DEPCENCO");

                entity.Property(e => e.Descenco)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("DESCENCO")
                    .IsFixedLength();

                entity.Property(e => e.Feccenco)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("FECCENCO");

                entity.Property(e => e.IdenMaecco)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_maecco");

                entity.Property(e => e.Ncdcenco).HasColumnName("NCDCENCO");

                entity.Property(e => e.Nivcenco).HasColumnName("NIVCENCO");

                entity.Property(e => e.Tipocenco)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("TIPOCENCO")
                    .IsFixedLength();

                entity.Property(e => e.VersionDeLaFila)
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<MaeccoCuenta>(entity =>
            {
                entity.HasKey(e => new { e.CentroCosto, e.Cuenta })
                    .IsClustered(false);

                entity.ToTable("MAECCO_Cuentas");

                entity.Property(e => e.CentroCosto)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Cuenta)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.IdenMaeccoCuentas)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_maecco_cuentas");

                entity.Property(e => e.Tipo)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('A')")
                    .IsFixedLength();

                entity.HasOne(d => d.CentroCostoNavigation)
                    .WithMany(p => p.MaeccoCuenta)
                    .HasForeignKey(d => d.CentroCosto)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_MAECCO_Cuentas_MAECCO");

                entity.HasOne(d => d.CuentaNavigation)
                    .WithMany(p => p.MaeccoCuenta)
                    .HasForeignKey(d => d.Cuenta)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_MAECCO_Cuentas_MAECONT");
            });

            modelBuilder.Entity<Maecont>(entity =>
            {
                entity.HasKey(e => e.Codicta)
                    .IsClustered(false);

                entity.ToTable("MAECONT");

                entity.HasIndex(e => e.Coddcta, "IX_MAECONT_CODDCTA");

                entity.HasIndex(e => new { e.Coddcta, e.Codicta }, "IX_MAECONT_CODDCTA_CODICTA");

                entity.HasIndex(e => new { e.Codicta, e.Coddcta }, "IX_MAECONT_CODICTA_CODDCTA");

                entity.HasIndex(e => e.Desccta, "IX_MAECONT_DESCCTA");

                entity.Property(e => e.Codicta)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("CODICTA")
                    .IsFixedLength();

                entity.Property(e => e.Ajuinfcta)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("AJUINFCTA");

                entity.Property(e => e.Categoria)
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.Catfcta).HasColumnName("CATFCTA");

                entity.Property(e => e.Cierre3rocta)
                    .HasColumnName("CIERRE3ROCTA")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Cierrecta)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("CIERRECTA");

                entity.Property(e => e.Coddcta)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("CODDCTA");

                entity.Property(e => e.Codiaju1)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("CODIAJU1");

                entity.Property(e => e.Codiaju2)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("CODIAJU2");

                entity.Property(e => e.Codiaju3)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("CODIAJU3");

                entity.Property(e => e.Codiajuste)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("CODIAJUSTE")
                    .IsFixedLength();

                entity.Property(e => e.CodigoTipoImpuestos)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Coninfcta)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("CONINFCTA");

                entity.Property(e => e.Controlpresu)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("CONTROLPRESU")
                    .IsFixedLength();

                entity.Property(e => e.CtaAjusteMonGananciaPagado)
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.CtaAjusteMonPerdida)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CtaAjusteMonPerdidaPagado)
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.CtaDePagosAterceros).HasColumnName("CtaDePagosATerceros");

                entity.Property(e => e.Ctacorriente)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("CTACORRIENTE")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.CuentaDeterioro)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CuentaInteresesCorrientes)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CuentaPpptransitoria)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("CuentaPPPTransitoria")
                    .HasDefaultValueSql("('')")
                    .IsFixedLength();

                entity.Property(e => e.Datosimpuestos)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("DATOSIMPUESTOS")
                    .HasDefaultValueSql("('N')")
                    .IsFixedLength();

                entity.Property(e => e.Desccta)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("DESCCTA");

                entity.Property(e => e.Distribucion)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("DISTRIBUCION")
                    .IsFixedLength();

                entity.Property(e => e.Feapcta)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("FEAPCTA")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Formucal)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("FORMUCAL");

                entity.Property(e => e.Grupo)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("GRUPO");

                entity.Property(e => e.Habilitarcta)
                    .HasColumnName("HABILITARCTA")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Idbanco)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("IDBANCO")
                    .IsFixedLength();

                entity.Property(e => e.IdenMaecont)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_maecont");

                entity.Property(e => e.Identicta)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("IDENTICTA");

                entity.Property(e => e.Idmoneda)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("IDMONEDA")
                    .IsFixedLength();

                entity.Property(e => e.IndNcf)
                    .HasColumnName("IndNCF")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Indccocta).HasColumnName("INDCCOCTA");

                entity.Property(e => e.Indcpicta).HasColumnName("INDCPICTA");

                entity.Property(e => e.Indpg3cta).HasColumnName("INDPG3CTA");

                entity.Property(e => e.Indpropiedad1).HasColumnName("INDPROPIEDAD1");

                entity.Property(e => e.Indpropiedad2).HasColumnName("INDPROPIEDAD2");

                entity.Property(e => e.Indpropiedad3).HasColumnName("INDPROPIEDAD3");

                entity.Property(e => e.Indpropiedad4).HasColumnName("INDPROPIEDAD4");

                entity.Property(e => e.Indpropiedad5).HasColumnName("INDPROPIEDAD5");

                entity.Property(e => e.Induncal).HasColumnName("INDUNCAL");

                entity.Property(e => e.Naturalezacta)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("NATURALEZACTA")
                    .HasDefaultValueSql("(' ')")
                    .IsFixedLength();

                entity.Property(e => e.Ncdpgcta).HasColumnName("NCDPGCTA");

                entity.Property(e => e.Nivelcta).HasColumnName("NIVELCTA");

                entity.Property(e => e.Nivelparamayor).HasColumnName("NIVELPARAMAYOR");

                entity.Property(e => e.Porceimpuesto)
                    .HasColumnType("decimal(18, 6)")
                    .HasColumnName("PORCEIMPUESTO");

                entity.Property(e => e.RubroEf)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("RubroEF");

                entity.Property(e => e.Seccion)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.TasaAjuste)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('D')")
                    .IsFixedLength();

                entity.Property(e => e.TipoCtaBancaria)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Tipocta)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("TIPOCTA")
                    .IsFixedLength();

                entity.Property(e => e.Uniadic1)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("UNIADIC1")
                    .IsFixedLength();

                entity.Property(e => e.Uniadic2)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("UNIADIC2")
                    .IsFixedLength();

                entity.Property(e => e.Uniadic3)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("UNIADIC3")
                    .IsFixedLength();

                entity.Property(e => e.VersionDeLaFila)
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.CategoriaNavigation)
                    .WithMany(p => p.Maeconts)
                    .HasForeignKey(d => d.Categoria)
                    .HasConstraintName("FK_MAECONT_MaeCategorias");

                entity.HasOne(d => d.GrupoNavigation)
                    .WithMany(p => p.Maeconts)
                    .HasForeignKey(d => d.Grupo)
                    .HasConstraintName("FK_MAECONT_MAEGRUPO");

                entity.HasOne(d => d.IdbancoNavigation)
                    .WithMany(p => p.Maeconts)
                    .HasForeignKey(d => d.Idbanco)
                    .HasConstraintName("FK_MAECONT_BANCOS");

                entity.HasOne(d => d.IdmonedaNavigation)
                    .WithMany(p => p.Maeconts)
                    .HasForeignKey(d => d.Idmoneda)
                    .HasConstraintName("FK_MAECONT_MONEDAS");

                entity.HasOne(d => d.Uniadic1Navigation)
                    .WithMany(p => p.MaecontUniadic1Navigations)
                    .HasForeignKey(d => d.Uniadic1)
                    .HasConstraintName("FK_MAECONT_MAEUNID");

                entity.HasOne(d => d.Uniadic2Navigation)
                    .WithMany(p => p.MaecontUniadic2Navigations)
                    .HasForeignKey(d => d.Uniadic2)
                    .HasConstraintName("FK_MAECONT_MAEUNID1");

                entity.HasOne(d => d.Uniadic3Navigation)
                    .WithMany(p => p.MaecontUniadic3Navigations)
                    .HasForeignKey(d => d.Uniadic3)
                    .HasConstraintName("FK_MAECONT_MAEUNID2");
            });

            modelBuilder.Entity<MaecontLibro>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Maecont_Libros");

                entity.HasIndex(e => new { e.Codicta, e.IdenLibro }, "IX_Maecont_Libros_codicta_iden_libro")
                    .IsUnique();

                entity.Property(e => e.Codicta)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("codicta")
                    .IsFixedLength();

                entity.Property(e => e.CodictaGananciaLibro)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("codicta_ganancia_libro")
                    .IsFixedLength();

                entity.Property(e => e.CodictaLibro)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("codicta_libro")
                    .IsFixedLength();

                entity.Property(e => e.CodictaPerdidaLibro)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("codicta_perdida_libro")
                    .IsFixedLength();

                entity.Property(e => e.DescripcionLibro)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("descripcion_libro");

                entity.Property(e => e.DeshabilitadaLibro).HasColumnName("Deshabilitada_libro");

                entity.Property(e => e.Id)
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("id");

                entity.Property(e => e.IdenLibro)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("iden_libro");

                entity.Property(e => e.IdmonedaLibro)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("idmoneda_libro")
                    .IsFixedLength();

                entity.Property(e => e.TasaAjusteLibro)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("tasa_ajuste_libro")
                    .IsFixedLength();
            });

            modelBuilder.Entity<Maegrupo>(entity =>
            {
                entity.HasKey(e => e.Codigrupo)
                    .IsClustered(false);

                entity.ToTable("MAEGRUPO");

                entity.Property(e => e.Codigrupo)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("CODIGRUPO");

                entity.Property(e => e.Depegrupo)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("DEPEGRUPO");

                entity.Property(e => e.Descgrupo)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("DESCGRUPO")
                    .IsFixedLength();

                entity.Property(e => e.Fecgrupo)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("FECGRUPO");

                entity.Property(e => e.IdenMaegrupo)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_maegrupo");

                entity.Property(e => e.Ncdcgrupo).HasColumnName("NCDCGRUPO");

                entity.Property(e => e.Nivegrupo).HasColumnName("NIVEGRUPO");

                entity.Property(e => e.Tipogrupo)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("TIPOGRUPO")
                    .IsFixedLength();

                entity.Property(e => e.VersionDeLaFila)
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<Maelibro>(entity =>
            {
                entity.HasKey(e => e.IdenLibro);

                entity.ToTable("maelibros");

                entity.HasIndex(e => e.Codigo, "IX_maelibros_codigo")
                    .IsUnique();

                entity.HasIndex(e => e.Prefijo, "IX_maelibros_prefijo")
                    .IsUnique();

                entity.Property(e => e.IdenLibro)
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("iden_libro");

                entity.Property(e => e.Codigo)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("codigo");

                entity.Property(e => e.ColorFondoPantalla)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Descripcion)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("descripcion");

                entity.Property(e => e.Deshabilitado).HasColumnName("deshabilitado");

                entity.Property(e => e.Eslibrodeusuario).HasColumnName("eslibrodeusuario");

                entity.Property(e => e.Eslibroniif).HasColumnName("eslibroniif");

                entity.Property(e => e.Eslibroprincipal).HasColumnName("eslibroprincipal");

                entity.Property(e => e.Idmoneda)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("idmoneda")
                    .IsFixedLength();

                entity.Property(e => e.Prefijo)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("prefijo");

                entity.Property(e => e.VersionDeLaFila)
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<Maepresu>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("MAEPRESU");

                entity.Property(e => e.Coddcta)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("CODDCTA")
                    .IsFixedLength();

                entity.Property(e => e.Codicta)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("CODICTA")
                    .IsFixedLength();

                entity.Property(e => e.Codpresu)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("CODPRESU")
                    .IsFixedLength();

                entity.Property(e => e.ControlPresu)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('N')")
                    .IsFixedLength();

                entity.Property(e => e.Definicion)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')")
                    .IsFixedLength();

                entity.Property(e => e.Desccta)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("DESCCTA")
                    .IsFixedLength();

                entity.Property(e => e.Estado)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Feapcta)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("FEAPCTA");

                entity.Property(e => e.IdenMaepresu)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_maepresu");

                entity.Property(e => e.Ncdpgcta).HasColumnName("NCDPGCTA");

                entity.Property(e => e.Nivelcta).HasColumnName("NIVELCTA");

                entity.Property(e => e.TipoPresu)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Tipocta)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("TIPOCTA")
                    .IsFixedLength();

                entity.Property(e => e.UsuarioAutoriza)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.VersionDeLaFila)
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<Maestro>(entity =>
            {
                entity.HasKey(e => e.Nombre);

                entity.Property(e => e.Nombre)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Descripcion)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Id).ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<MaestrosDependencium>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.IdMaestros).HasColumnName("Id_Maestros");

                entity.Property(e => e.IdMaestrosDepende).HasColumnName("Id_Maestros_Depende");

                entity.Property(e => e.IdenMaestrosdependencia)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_maestrosdependencia");
            });

            modelBuilder.Entity<MaestrosEqEquivalencia>(entity =>
            {
                entity.HasKey(e => new { e.TipoMaestro, e.CodigoMaestro });

                entity.ToTable("MaestrosEQ_Equivalencias");

                entity.Property(e => e.TipoMaestro)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CodigoMaestro)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.IdenMaestroseqEquivalencias)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_maestroseq_equivalencias");

                entity.Property(e => e.Valor)
                    .HasMaxLength(500)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<MaestrosEqMaestroGenericoDato>(entity =>
            {
                entity.HasKey(e => new { e.MaestroGenerico, e.Codigo });

                entity.ToTable("MaestrosEQ_MaestroGenerico_Datos");

                entity.Property(e => e.MaestroGenerico)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Codigo)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.IdenMaestroseqMaestrogenericoDatos)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_maestroseq_maestrogenerico_datos");

                entity.Property(e => e.Nombre)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.HasOne(d => d.MaestroGenericoNavigation)
                    .WithMany(p => p.MaestrosEqMaestroGenericoDatos)
                    .HasForeignKey(d => d.MaestroGenerico)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_MaestrosEQ_MaestroGenerico_Datos_MaestroGenerico");
            });

            modelBuilder.Entity<MaestrosEqMaestrosGenerico>(entity =>
            {
                entity.HasKey(e => e.MaestroGenerico);

                entity.ToTable("MaestrosEQ_MaestrosGenericos");

                entity.Property(e => e.MaestroGenerico)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.IdenMaestroseqMaestrosgenericos)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_maestroseq_maestrosgenericos");

                entity.Property(e => e.Nombre)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.TipoMaestro)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.TipoMaestroNavigation)
                    .WithMany(p => p.MaestrosEqMaestrosGenericos)
                    .HasForeignKey(d => d.TipoMaestro)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_MaestrosEQ_MaestrosGenericos_TipoMaestro");
            });

            modelBuilder.Entity<MaestrosEqTipoMaestro>(entity =>
            {
                entity.HasKey(e => e.Codigo)
                    .HasName("PK_MaestrosEQ_TipoMaestro");

                entity.ToTable("MaestrosEQ_TipoMaestros");

                entity.Property(e => e.Codigo)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.IdAplicacionesZeus).HasColumnName("Id_AplicacionesZeus");

                entity.Property(e => e.IdenMaestroseqTipomaestros)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_maestroseq_tipomaestros");

                entity.Property(e => e.Ini)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.SeccionIni)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdAplicacionesZeusNavigation)
                    .WithMany(p => p.MaestrosEqTipoMaestros)
                    .HasForeignKey(d => d.IdAplicacionesZeus)
                    .HasConstraintName("FK_MaestrosEQ_TipoMaestros_AplicacionesZeus");
            });

            modelBuilder.Entity<Maeunid>(entity =>
            {
                entity.HasKey(e => e.Idunidad)
                    .HasName("pk_maeunid")
                    .IsClustered(false);

                entity.ToTable("MAEUNID");

                entity.Property(e => e.Idunidad)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("IDUNIDAD")
                    .IsFixedLength();

                entity.Property(e => e.Abrevunid)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("ABREVUNID");

                entity.Property(e => e.IdenMaeunid)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_maeunid");

                entity.Property(e => e.Nombunidad)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("NOMBUNIDAD")
                    .IsFixedLength();

                entity.Property(e => e.Tipounidad)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("TIPOUNIDAD")
                    .HasDefaultValueSql("('N')")
                    .IsFixedLength();

                entity.Property(e => e.VersionDeLaFila)
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<Maevende>(entity =>
            {
                entity.HasKey(e => e.Idvende)
                    .HasName("pk_maevende")
                    .IsClustered(false);

                entity.ToTable("MAEVENDE");

                entity.HasIndex(e => e.Identificacion, "IX_MAEVENDE_Identificacion")
                    .IsUnique();

                entity.HasIndex(e => e.Nombvende, "IX_MAEVENDE_NOMBVENDE");

                entity.Property(e => e.Idvende)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("IDVENDE")
                    .IsFixedLength();

                entity.Property(e => e.Ciudad)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("CIUDAD");

                entity.Property(e => e.Contacto)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("CONTACTO");

                entity.Property(e => e.Contactoa)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("CONTACTOA");

                entity.Property(e => e.Dirconta)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("DIRCONTA");

                entity.Property(e => e.Dircontaa)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("DIRCONTAA");

                entity.Property(e => e.Dircorres)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("DIRCORRES");

                entity.Property(e => e.Direccion)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("DIRECCION");

                entity.Property(e => e.Dirgerente)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("DIRGERENTE");

                entity.Property(e => e.Email)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("EMAIL");

                entity.Property(e => e.Emailconta)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("EMAILCONTA");

                entity.Property(e => e.Emailcontaa)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("EMAILCONTAA");

                entity.Property(e => e.Emailgeren)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("EMAILGEREN");

                entity.Property(e => e.Fax)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("FAX");

                entity.Property(e => e.Gerente)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("GERENTE");

                entity.Property(e => e.IdenMaevende)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_maevende");

                entity.Property(e => e.Identificacion)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Idzona)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("IDZONA")
                    .IsFixedLength();

                entity.Property(e => e.MetaVenta).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.Nombvende)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("NOMBVENDE");

                entity.Property(e => e.Pcomision)
                    .HasColumnType("numeric(18, 6)")
                    .HasColumnName("PComision");

                entity.Property(e => e.Pdescuento)
                    .HasColumnType("numeric(18, 6)")
                    .HasColumnName("PDescuento");

                entity.Property(e => e.Ppenalidad)
                    .HasColumnType("numeric(18, 6)")
                    .HasColumnName("PPenalidad");

                entity.Property(e => e.Telconta)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("TELCONTA");

                entity.Property(e => e.Telcontaa)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("TELCONTAA");

                entity.Property(e => e.Telefono)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("TELEFONO");

                entity.Property(e => e.Telgerente)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("TELGERENTE");

                entity.Property(e => e.VersionDeLaFila)
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.Website)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("WEBSITE");

                entity.HasOne(d => d.IdzonaNavigation)
                    .WithMany(p => p.Maevendes)
                    .HasForeignKey(d => d.Idzona)
                    .HasConstraintName("FK_MAEVENDE_MAEZONAS");
            });

            modelBuilder.Entity<MaeventosI>(entity =>
            {
                entity.HasKey(e => new { e.TipoEvento, e.Codigo });

                entity.ToTable("MaeventosI");

                entity.Property(e => e.TipoEvento)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Codigo)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Aplicacion)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('Contabilidad')");

                entity.Property(e => e.Descripcion)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.IdenMaeventosi)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_maeventosi");

                entity.Property(e => e.Nombre)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.HasOne(d => d.TipoEventoNavigation)
                    .WithMany(p => p.MaeventosIs)
                    .HasForeignKey(d => d.TipoEvento)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_MaeventosI_MaeTipodeEventos");
            });

            modelBuilder.Entity<Maezona>(entity =>
            {
                entity.HasKey(e => e.Idzona)
                    .HasName("pk_maezonas")
                    .IsClustered(false);

                entity.ToTable("MAEZONAS");

                entity.HasIndex(e => e.Nombzona, "IX_MAEZONAS_NOMBZONA");

                entity.Property(e => e.Idzona)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("IDZONA")
                    .IsFixedLength();

                entity.Property(e => e.AplicaIva).HasDefaultValueSql("((1))");

                entity.Property(e => e.ComplementoExcluido)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')")
                    .IsFixedLength();

                entity.Property(e => e.ComplementoExcluidoDevolucion)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.ComplementoExento)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')")
                    .IsFixedLength();

                entity.Property(e => e.ComplementoExentoDevolucion)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.ComplementoGravado)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')")
                    .IsFixedLength();

                entity.Property(e => e.ComplementoGravadoDevolucion)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Depzonas)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("DEPZONAS")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Feczonas)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("FECZONAS");

                entity.Property(e => e.IdenMaezonas)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_maezonas");

                entity.Property(e => e.Ncdzonas)
                    .HasColumnName("NCDZONAS")
                    .HasDefaultValueSql("('0')");

                entity.Property(e => e.Nivzonas)
                    .HasColumnName("NIVZONAS")
                    .HasDefaultValueSql("('1')");

                entity.Property(e => e.Nombzona)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("NOMBZONA")
                    .IsFixedLength();

                entity.Property(e => e.Tipozonas)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("TIPOZONAS")
                    .HasDefaultValueSql("('D')")
                    .IsFixedLength();

                entity.Property(e => e.Ubicacion)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.VersionDeLaFila)
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<MandatoItem>(entity =>
            {
                entity.HasKey(e => e.Iden);

                entity.ToTable("MandatoItem");

                entity.HasIndex(e => e.Codigo, "IX_MandatoItem")
                    .IsUnique();

                entity.Property(e => e.Iden)
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Codigo)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Contrato)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DigitoVerificacion)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Leyenda)
                    .HasMaxLength(8000)
                    .IsUnicode(false);

                entity.Property(e => e.MatriculaMercantil)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NombreComercial)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.NumeroIdentificacion)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.RazonSocial)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.TipoIdentificacion)
                    .HasMaxLength(10)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<MaquinasHost>(entity =>
            {
                entity.HasKey(e => e.Iden);

                entity.ToTable("MaquinasHost");

                entity.Property(e => e.Iden)
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Descripcion)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Nombre)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Serial)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Ubicacion)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<McaSesione>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("MCA_Sesiones");

                entity.Property(e => e.FechaHoraIngreso).HasColumnType("datetime");

                entity.Property(e => e.IdSesion)
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Maquina)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Usuario)
                    .HasMaxLength(250)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Mensaje>(entity =>
            {
                entity.HasKey(e => e.IdMensaje);

                entity.HasIndex(e => e.IdDestino, "IX_Mensajes_IdDestino");

                entity.Property(e => e.IdMensaje)
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Asunto)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.FechaEnvio).HasColumnType("datetime");

                entity.Property(e => e.IdDestino).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.IdOrigen).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.Mensaje1)
                    .IsUnicode(false)
                    .HasColumnName("Mensaje");

                entity.Property(e => e.MensajeRtf)
                    .IsUnicode(false)
                    .HasColumnName("MensajeRTF");
            });

            modelBuilder.Entity<MensajesTiempo>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Mensajes_Tiempo");

                entity.Property(e => e.IdenMensajesTiempo)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_mensajes_tiempo");

                entity.Property(e => e.Usuario).HasColumnType("numeric(18, 0)");
            });

            modelBuilder.Entity<MensajesUsuario>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Mensajes_Usuarios");

                entity.Property(e => e.Evento)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.IdenMensajesUsuarios)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_mensajes_usuarios");

                entity.Property(e => e.Remitente).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.Usuario).HasColumnType("numeric(18, 0)");
            });

            modelBuilder.Entity<Menu>(entity =>
            {
                entity.HasKey(e => e.IdMenu)
                    .IsClustered(false);

                entity.ToTable("Menu");

                entity.Property(e => e.IdMenu).ValueGeneratedNever();

                entity.Property(e => e.IdForma)
                    .HasColumnType("numeric(18, 0)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.IdenMenu)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_menu");

                entity.Property(e => e.Nombre)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Orden).HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<MenuDetalle>(entity =>
            {
                entity.HasKey(e => new { e.IdMenu, e.TipoMenu })
                    .IsClustered(false);

                entity.ToTable("MenuDetalle");

                entity.Property(e => e.TipoMenu)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.IdenMenudetalle)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_menudetalle");

                entity.Property(e => e.Nombre)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Shortcut)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.HasOne(d => d.IdMenuNavigation)
                    .WithMany(p => p.MenuDetalles)
                    .HasForeignKey(d => d.IdMenu)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_MenuDetalle_Menu");
            });

            modelBuilder.Entity<Mese>(entity =>
            {
                entity.HasKey(e => e.Anomes)
                    .HasName("pk_meses")
                    .IsClustered(false);

                entity.ToTable("MESES");

                entity.Property(e => e.Anomes)
                    .HasMaxLength(7)
                    .IsUnicode(false)
                    .HasColumnName("ANOMES");

                entity.Property(e => e.AjusMes)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("AJUS_MES")
                    .IsFixedLength();

                entity.Property(e => e.Apecierre)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("APECIERRE")
                    .IsFixedLength();

                entity.Property(e => e.DifeMes)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("DIFE_MES")
                    .IsFixedLength();

                entity.Property(e => e.DiskMes)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("DISK_MES")
                    .IsFixedLength();

                entity.Property(e => e.DisktMes)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("DISKT_MES")
                    .IsFixedLength();

                entity.Property(e => e.IdenMeses)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_meses");

                entity.Property(e => e.IndCtacxc)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("IND_CTACXC")
                    .IsFixedLength();

                entity.Property(e => e.IndDesctopp)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("IND_DESCTOPP")
                    .IsFixedLength();

                entity.Property(e => e.Indrotpresp)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("INDROTPRESP")
                    .HasDefaultValueSql("(' ')")
                    .IsFixedLength();

                entity.Property(e => e.OpenMes)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("OPEN_MES")
                    .IsFixedLength();

                entity.Property(e => e.PagAcu)
                    .HasColumnType("money")
                    .HasColumnName("PAG_ACU");

                entity.Property(e => e.PagMes)
                    .HasColumnType("money")
                    .HasColumnName("PAG_MES");

                entity.Property(e => e.Porcentope)
                    .HasColumnType("numeric(18, 2)")
                    .HasColumnName("PORCENTOPE");

                entity.Property(e => e.Valventas)
                    .HasColumnType("numeric(18, 2)")
                    .HasColumnName("VALVENTAS");

                entity.Property(e => e.VersionDeLaFila)
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<MesesCtum>(entity =>
            {
                entity.HasKey(e => new { e.Anomes, e.Codicta })
                    .IsClustered(false);

                entity.Property(e => e.Anomes)
                    .HasMaxLength(7)
                    .IsUnicode(false);

                entity.Property(e => e.Codicta)
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.IdenMesescta)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_mesescta");
            });

            modelBuilder.Entity<MesesLibro>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Meses_Libro");

                entity.Property(e => e.IdenLibro)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("Iden_Libro");

                entity.Property(e => e.IdenMesesLibro)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_meses_libro");

                entity.Property(e => e.Periodo)
                    .HasMaxLength(7)
                    .IsUnicode(false)
                    .IsFixedLength();
            });

            modelBuilder.Entity<MfActividad>(entity =>
            {
                entity.HasKey(e => e.CodActividad)
                    .IsClustered(false);

                entity.ToTable("MF_ACTIVIDAD");

                entity.Property(e => e.CodActividad)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("COD_ACTIVIDAD");

                entity.Property(e => e.Descripcion)
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPCION")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.IdActividad)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID_ACTIVIDAD");

                entity.Property(e => e.Nombre)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("NOMBRE")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Sector)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("SECTOR")
                    .HasDefaultValueSql("('')");
            });

            modelBuilder.Entity<MfActivo>(entity =>
            {
                entity.HasKey(e => new { e.IdPadre, e.TipoEstudio });

                entity.ToTable("MF_Activos");

                entity.Property(e => e.IdPadre).HasColumnName("Id_Padre");

                entity.Property(e => e.TipoEstudio)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')")
                    .IsFixedLength();

                entity.Property(e => e.Acciones).HasColumnType("money");

                entity.Property(e => e.ActivoFijo).HasColumnType("money");

                entity.Property(e => e.Bancos).HasColumnType("money");

                entity.Property(e => e.Caja).HasColumnType("money");

                entity.Property(e => e.Cosechas).HasColumnType("money");

                entity.Property(e => e.CxC).HasColumnType("money");

                entity.Property(e => e.Edificaciones).HasColumnType("money");

                entity.Property(e => e.IdActivo)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Id_Activo");

                entity.Property(e => e.Inventario).HasColumnType("money");

                entity.Property(e => e.Muebles).HasColumnType("money");

                entity.Property(e => e.OtrosActivos)
                    .HasColumnType("money")
                    .HasColumnName("Otros_Activos");

                entity.Property(e => e.OtrosActivosFijos)
                    .HasColumnType("money")
                    .HasColumnName("Otros_ActivosFijos");

                entity.Property(e => e.Semovientes).HasColumnType("money");

                entity.Property(e => e.Terrenos).HasColumnType("money");

                entity.Property(e => e.TotalActivoCte)
                    .HasColumnType("money")
                    .HasColumnName("Total_ActivoCte");

                entity.Property(e => e.TotalActivos)
                    .HasColumnType("money")
                    .HasColumnName("Total_Activos");

                entity.Property(e => e.TotalActivosFijos)
                    .HasColumnType("money")
                    .HasColumnName("Total_ActivosFijos");

                entity.Property(e => e.Vehiculos).HasColumnType("money");

                entity.HasOne(d => d.MfTablapadre)
                    .WithOne(p => p.MfActivo)
                    .HasForeignKey<MfActivo>(d => new { d.IdPadre, d.TipoEstudio })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_MF_Activos_MF_TABLAPADRE");
            });

            modelBuilder.Entity<MfAprobacionCredito>(entity =>
            {
                entity.HasKey(e => new { e.IdEstudio, e.TipoEstudio });

                entity.ToTable("MF_AprobacionCreditos");

                entity.Property(e => e.TipoEstudio)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CodGrupo)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.CodPoliza)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.CodUsuario)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Estado)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Fecha)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')")
                    .IsFixedLength();

                entity.Property(e => e.FechaFin)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')")
                    .IsFixedLength();

                entity.Property(e => e.FechaInicio)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')")
                    .IsFixedLength();

                entity.Property(e => e.IdenMfAprobacioncreditos)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_mf_aprobacioncreditos");

                entity.Property(e => e.Observaciones)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Operacion)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SolicitudCredito).HasColumnType("money");

                entity.Property(e => e.TipoCredito)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.TipoPrestamo)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Usuario)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.VrAprobado).HasColumnType("money");

                entity.Property(e => e.VrSeguro).HasColumnType("money");
            });

            modelBuilder.Entity<MfAprobacionIntegrante>(entity =>
            {
                entity.HasKey(e => new { e.IdComite, e.CodAsesor });

                entity.ToTable("MF_AprobacionIntegrantes");

                entity.Property(e => e.CodAsesor)
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.IdenMfAprobacionintegrantes)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_mf_aprobacionintegrantes");
            });

            modelBuilder.Entity<MfCaptrabajo>(entity =>
            {
                entity.HasKey(e => new { e.IdCaptrabajo, e.IdPadre, e.TipoEstudio })
                    .IsClustered(false);

                entity.ToTable("MF_CAPTRABAJO");

                entity.Property(e => e.IdCaptrabajo)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID_CAPTRABAJO");

                entity.Property(e => e.IdPadre).HasColumnName("ID_PADRE");

                entity.Property(e => e.TipoEstudio)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')")
                    .IsFixedLength();

                entity.Property(e => e.Otros)
                    .HasColumnType("money")
                    .HasColumnName("OTROS");

                entity.Property(e => e.Prestado)
                    .HasColumnType("money")
                    .HasColumnName("PRESTADO");

                entity.Property(e => e.Propio)
                    .HasColumnType("money")
                    .HasColumnName("PROPIO");

                entity.Property(e => e.Proveedores)
                    .HasColumnType("money")
                    .HasColumnName("PROVEEDORES");

                entity.Property(e => e.TotalCapital)
                    .HasColumnType("money")
                    .HasColumnName("TOTAL_CAPITAL");

                entity.HasOne(d => d.MfTablapadre)
                    .WithMany(p => p.MfCaptrabajos)
                    .HasForeignKey(d => new { d.IdPadre, d.TipoEstudio })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_MF_CAPTRABAJO_MF_TABLAPADRE");
            });

            modelBuilder.Entity<MfConfiguracionUsuario>(entity =>
            {
                entity.HasKey(e => e.IdUsuario);

                entity.ToTable("MF_ConfiguracionUsuarios");

                entity.Property(e => e.IdUsuario)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.IdenMfConfiguracionusuarios)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_mf_configuracionusuarios");

                entity.Property(e => e.PactPagare).HasColumnName("PActPagare");

                entity.Property(e => e.PanuPagare).HasColumnName("PAnuPagare");

                entity.Property(e => e.Password)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.PgenPagare).HasColumnName("PGenPagare");

                entity.Property(e => e.PgrSinCodeudor).HasColumnName("PGrSinCodeudor");

                entity.Property(e => e.PinvSinCodeudor).HasColumnName("PInvSinCodeudor");

                entity.HasOne(d => d.IdUsuarioNavigation)
                    .WithOne(p => p.MfConfiguracionUsuario)
                    .HasForeignKey<MfConfiguracionUsuario>(d => d.IdUsuario)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_MF_ConfiguracionUsuarios_USUARIOS");
            });

            modelBuilder.Entity<MfConsecutivo>(entity =>
            {
                entity.HasKey(e => e.Estudio);

                entity.ToTable("MF_CONSECUTIVO");

                entity.Property(e => e.Estudio)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("ESTUDIO")
                    .IsFixedLength();

                entity.Property(e => e.Consecutivo)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("CONSECUTIVO")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Descripcion)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPCION");

                entity.Property(e => e.IdenMfConsecutivo)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_mf_consecutivo");
            });

            modelBuilder.Entity<MfCxC>(entity =>
            {
                entity.HasKey(e => e.Cuenta)
                    .HasName("PK_Mf_CxC");

                entity.ToTable("MF_CxC");

                entity.Property(e => e.Cuenta)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.IdenMfCxc)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_mf_cxc");

                entity.HasOne(d => d.CuentaNavigation)
                    .WithOne(p => p.MfCxC)
                    .HasForeignKey<MfCxC>(d => d.Cuenta)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_MF_CxC_MAECONT");
            });

            modelBuilder.Entity<MfDatosnegocio>(entity =>
            {
                entity.HasKey(e => new { e.IdDatosneg, e.IdPadre, e.TipoEstudio })
                    .IsClustered(false);

                entity.ToTable("MF_DATOSNEGOCIO");

                entity.Property(e => e.IdDatosneg)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID_DATOSNEG");

                entity.Property(e => e.IdPadre).HasColumnName("ID_PADRE");

                entity.Property(e => e.TipoEstudio)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')")
                    .IsFixedLength();

                entity.Property(e => e.Ahorra)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("AHORRA")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Expoficio)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("EXPOFICIO")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Llevacta)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("LLEVACTA")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Microneg)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("MICRONEG")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Microprod)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("MICROPROD")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Nempleados)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("NEMPLEADOS");

                entity.Property(e => e.Nempleos)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("NEmpleos");

                entity.Property(e => e.Npersonas)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("NPersonas");

                entity.Property(e => e.Ppalpuntos)
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasColumnName("PPALPUNTOS")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Puesto)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("PUESTO")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Surte)
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasColumnName("SURTE")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Tiemponeg)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("TIEMPONEG")
                    .HasDefaultValueSql("((0))");

                entity.HasOne(d => d.MfTablapadre)
                    .WithMany(p => p.MfDatosnegocios)
                    .HasForeignKey(d => new { d.IdPadre, d.TipoEstudio })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_MF_DATOSNEGOCIO_MF_TABLAPADRE");
            });

            modelBuilder.Entity<MfDatosusuario>(entity =>
            {
                entity.HasKey(e => e.Codusuario);

                entity.ToTable("MF_DATOSUSUARIO");

                entity.Property(e => e.Codusuario)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("CODUSUARIO");

                entity.Property(e => e.Apellido1)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Apellido2)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Barrioneg)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("BARRIONEG")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Barriores)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("BARRIORES")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Cedula)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("CEDULA")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Ciudadneg)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("CIUDADNEG")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Ciudadres)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("CIUDADRES")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.CodAsesor)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')")
                    .IsFixedLength();

                entity.Property(e => e.Codgrupo)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("CODGRUPO")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Codzona)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("CODZONA")
                    .HasDefaultValueSql("('')")
                    .IsFixedLength();

                entity.Property(e => e.Cxc)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')")
                    .IsFixedLength();

                entity.Property(e => e.Dirneg)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("DIRNEG")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Dirres)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("DIRRES")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Expedida)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("EXPEDIDA")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Fechanac)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("FECHANAC")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.IdUsuario)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID_USUARIO");

                entity.Property(e => e.Lugar)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("LUGAR")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Nombre)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("NOMBRE")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Nombre1)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Nombre2)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Sexo)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("SEXO")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Telneg)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("TELNEG")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Telres)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("TELRES")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.TipoIdentificacion)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.TipoRazonSocial)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.TipoUsuario)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();
            });

            modelBuilder.Entity<MfDatosusuarioadi>(entity =>
            {
                entity.HasKey(e => new { e.IdPadre, e.Codusuario, e.TipoEstudio });

                entity.ToTable("MF_DATOSUSUARIOADI");

                entity.Property(e => e.IdPadre).HasColumnName("ID_PADRE");

                entity.Property(e => e.Codusuario)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("CODUSUARIO");

                entity.Property(e => e.TipoEstudio)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')")
                    .IsFixedLength();

                entity.Property(e => e.Barrioneg)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("BARRIONEG")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Barriores)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("BARRIORES")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Dirneg)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("DIRNEG")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Dirres)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("DIRRES")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Estadocivil)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("ESTADOCIVIL")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Estudios)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("ESTUDIOS")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.IdUsuarioadi)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID_USUARIOADI");

                entity.Property(e => e.Idactividad)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("IDACTIVIDAD")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Jefeflia)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("JEFEFLIA")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Perscargo)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("PERSCARGO");

                entity.Property(e => e.Telneg)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("TELNEG")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Telres)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("TELRES")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Tiemponeg)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("TIEMPONEG")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Tiempores)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("TIEMPORES")
                    .HasDefaultValueSql("('')");

                entity.HasOne(d => d.CodusuarioNavigation)
                    .WithMany(p => p.MfDatosusuarioadis)
                    .HasForeignKey(d => d.Codusuario)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_MF_DATOSUSUARIOADI_MF_DATOSUSUARIO");

                entity.HasOne(d => d.EstudiosNavigation)
                    .WithMany(p => p.MfDatosusuarioadis)
                    .HasForeignKey(d => d.Estudios)
                    .HasConstraintName("FK_MF_DATOSUSUARIOADI_MF_NIVELESCOLARIDAD");

                entity.HasOne(d => d.IdactividadNavigation)
                    .WithMany(p => p.MfDatosusuarioadis)
                    .HasForeignKey(d => d.Idactividad)
                    .HasConstraintName("FK_MF_DATOSUSUARIOADI_MF_ACTIVIDAD");

                entity.HasOne(d => d.MfTablapadre)
                    .WithMany(p => p.MfDatosusuarioadis)
                    .HasForeignKey(d => new { d.IdPadre, d.TipoEstudio })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_MF_DATOSUSUARIOADI_MF_TABLAPADRE");
            });

            modelBuilder.Entity<MfDeuda>(entity =>
            {
                entity.HasKey(e => new { e.Iddeudas, e.IdPadre, e.TipoEstudio });

                entity.ToTable("MF_DEUDAS");

                entity.Property(e => e.Iddeudas)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("IDDEUDAS");

                entity.Property(e => e.IdPadre).HasColumnName("ID_PADRE");

                entity.Property(e => e.TipoEstudio)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')")
                    .IsFixedLength();

                entity.Property(e => e.Cuantia)
                    .HasColumnType("money")
                    .HasColumnName("CUANTIA");

                entity.Property(e => e.Debea)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("DEBEA")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Deudas)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("DEUDAS")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Telefono)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("TELEFONO")
                    .HasDefaultValueSql("('')");

                entity.HasOne(d => d.MfTablapadre)
                    .WithMany(p => p.MfDeuda)
                    .HasForeignKey(d => new { d.IdPadre, d.TipoEstudio })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_MF_DEUDAS_MF_TABLAPADRE");
            });

            modelBuilder.Entity<MfDistribucionEstudio>(entity =>
            {
                entity.ToTable("MF_DistribucionEstudio");

                entity.Property(e => e.Id)
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Cuenta)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Descripcion)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Porcentaje).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.Tipo)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')")
                    .IsFixedLength();
            });

            modelBuilder.Entity<MfEmpleado>(entity =>
            {
                entity.HasKey(e => new { e.IdEmpleado, e.IdPadre, e.TipoEstudio });

                entity.ToTable("MF_EMPLEADOS");

                entity.Property(e => e.IdEmpleado)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID_EMPLEADO");

                entity.Property(e => e.IdPadre).HasColumnName("ID_PADRE");

                entity.Property(e => e.TipoEstudio)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')")
                    .IsFixedLength();

                entity.Property(e => e.Barrio)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("BARRIO");

                entity.Property(e => e.Ciudad)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("CIUDAD")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Condicion)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("CONDICION")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Direccion)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("DIRECCION")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Estadocivil)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("ESTADOCIVIL")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Fechanac)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("FECHANAC")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Nombre)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("NOMBRE")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Profesion)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("PROFESION")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Sexo)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("SEXO")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Telefono)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("TELEFONO")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Tipo)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')")
                    .IsFixedLength();

                entity.HasOne(d => d.ProfesionNavigation)
                    .WithMany(p => p.MfEmpleados)
                    .HasForeignKey(d => d.Profesion)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_MF_EMPLEADOS_MF_PROFESION");

                entity.HasOne(d => d.MfTablapadre)
                    .WithMany(p => p.MfEmpleados)
                    .HasForeignKey(d => new { d.IdPadre, d.TipoEstudio })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_MF_EMPLEADOS_MF_TABLAPADRE");
            });

            modelBuilder.Entity<MfEscActivo>(entity =>
            {
                entity.HasKey(e => e.IdescPadre);

                entity.ToTable("MF_ESC_ACTIVOS");

                entity.Property(e => e.IdescPadre)
                    .ValueGeneratedNever()
                    .HasColumnName("IDESC_PADRE");

                entity.Property(e => e.Acciones)
                    .HasColumnType("money")
                    .HasColumnName("ACCIONES");

                entity.Property(e => e.Activofijo)
                    .HasColumnType("money")
                    .HasColumnName("ACTIVOFIJO");

                entity.Property(e => e.Bancos)
                    .HasColumnType("money")
                    .HasColumnName("BANCOS");

                entity.Property(e => e.Caja)
                    .HasColumnType("money")
                    .HasColumnName("CAJA");

                entity.Property(e => e.Cosechas)
                    .HasColumnType("money")
                    .HasColumnName("COSECHAS");

                entity.Property(e => e.Cxc)
                    .HasColumnType("money")
                    .HasColumnName("CXC");

                entity.Property(e => e.Edificaciones)
                    .HasColumnType("money")
                    .HasColumnName("EDIFICACIONES");

                entity.Property(e => e.IdActivo)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID_ACTIVO");

                entity.Property(e => e.Inventario)
                    .HasColumnType("money")
                    .HasColumnName("INVENTARIO");

                entity.Property(e => e.Muebles)
                    .HasColumnType("money")
                    .HasColumnName("MUEBLES");

                entity.Property(e => e.OtrosActivos)
                    .HasColumnType("money")
                    .HasColumnName("OTROS_ACTIVOS");

                entity.Property(e => e.OtrosActivosfijos)
                    .HasColumnType("money")
                    .HasColumnName("OTROS_ACTIVOSFIJOS");

                entity.Property(e => e.Semovientes)
                    .HasColumnType("money")
                    .HasColumnName("SEMOVIENTES");

                entity.Property(e => e.Terrenos)
                    .HasColumnType("money")
                    .HasColumnName("TERRENOS");

                entity.Property(e => e.TotalActivocte)
                    .HasColumnType("money")
                    .HasColumnName("TOTAL_ACTIVOCTE");

                entity.Property(e => e.TotalActivos)
                    .HasColumnType("money")
                    .HasColumnName("TOTAL_ACTIVOS");

                entity.Property(e => e.TotalActivosfijos)
                    .HasColumnType("money")
                    .HasColumnName("TOTAL_ACTIVOSFIJOS");

                entity.Property(e => e.Vehiculos)
                    .HasColumnType("money")
                    .HasColumnName("VEHICULOS");

                entity.HasOne(d => d.IdescPadreNavigation)
                    .WithOne(p => p.MfEscActivo)
                    .HasForeignKey<MfEscActivo>(d => d.IdescPadre)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_MF_ESC_ACTIVOS_MF_ESC_TABLAPADRE");
            });

            modelBuilder.Entity<MfEscBienesraice>(entity =>
            {
                entity.HasKey(e => new { e.IdBienes, e.IdescPadre });

                entity.ToTable("MF_ESC_BIENESRAICES");

                entity.Property(e => e.IdBienes)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID_BIENES");

                entity.Property(e => e.IdescPadre).HasColumnName("IDESC_PADRE");

                entity.Property(e => e.Ciudad)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("CIUDAD")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Descripcion)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPCION")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Direccion)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("DIRECCION")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Fecha)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("FECHA")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Fechareg)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("FECHAREG")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Hipoteca)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("HIPOTECA")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Nescritura)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("NESCRITURA")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Nmatricula)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("NMATRICULA")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Notaria)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("NOTARIA")
                    .HasDefaultValueSql("('')");

                entity.HasOne(d => d.IdescPadreNavigation)
                    .WithMany(p => p.MfEscBienesraices)
                    .HasForeignKey(d => d.IdescPadre)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_MF_ESC_BIENESRAICES_MF_ESC_TABLAPADRE");
            });

            modelBuilder.Entity<MfEscDatosusuarioadi>(entity =>
            {
                entity.HasKey(e => new { e.IdescPadre, e.CodCodeudor });

                entity.ToTable("MF_ESC_DATOSUSUARIOADI");

                entity.Property(e => e.IdescPadre).HasColumnName("IDESC_PADRE");

                entity.Property(e => e.CodCodeudor)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Antiguedadconyuge)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("ANTIGUEDADCONYUGE")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Antiguedadusuario)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("ANTIGUEDADUSUARIO")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Barrio)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("BARRIO")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Barrioconyuge)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("BARRIOCONYUGE")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Barriousuario)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("BARRIOUSUARIO")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Ciudad)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("CIUDAD")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Ciudadconyuge)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("CIUDADCONYUGE")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Ciudadusuario)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("CIUDADUSUARIO")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Conyuge)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("CONYUGE")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Direccion)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("DIRECCION")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Direccionconyuge)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("DIRECCIONCONYUGE")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Direccionusuario)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("DIRECCIONUSUARIO")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Empresaconyuge)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("EMPRESACONYUGE")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Empresausuario)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("EMPRESAUSUARIO")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.IdescDatosusuarioadi)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("IDESC_DATOSUSUARIOADI");

                entity.Property(e => e.NombreCodeudor)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.Ocupacionconyuge)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("OCUPACIONCONYUGE")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Ocupacionusuario)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("OCUPACIONUSUARIO")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Sueldoconyuge)
                    .HasColumnType("money")
                    .HasColumnName("SUELDOCONYUGE");

                entity.Property(e => e.Sueldousuario)
                    .HasColumnType("money")
                    .HasColumnName("SUELDOUSUARIO");

                entity.Property(e => e.Telefono)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("TELEFONO")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Telefonoconyuge)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("TELEFONOCONYUGE")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Telefonousuario)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("TELEFONOUSUARIO")
                    .HasDefaultValueSql("('')");
            });

            modelBuilder.Entity<MfEscEgreso>(entity =>
            {
                entity.HasKey(e => e.IdescPadre);

                entity.ToTable("MF_ESC_EGRESOS");

                entity.Property(e => e.IdescPadre)
                    .ValueGeneratedNever()
                    .HasColumnName("IDESC_PADRE");

                entity.Property(e => e.Arriendo)
                    .HasColumnType("money")
                    .HasColumnName("ARRIENDO");

                entity.Property(e => e.Deudas)
                    .HasColumnType("money")
                    .HasColumnName("DEUDAS");

                entity.Property(e => e.Gastos)
                    .HasColumnType("money")
                    .HasColumnName("GASTOS");

                entity.Property(e => e.IdEgresos)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID_EGRESOS");

                entity.Property(e => e.Totalegresos)
                    .HasColumnType("money")
                    .HasColumnName("TOTALEGRESOS");

                entity.HasOne(d => d.IdescPadreNavigation)
                    .WithOne(p => p.MfEscEgreso)
                    .HasForeignKey<MfEscEgreso>(d => d.IdescPadre)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_MF_ESC_EGRESOS_MF_ESC_TABLAPADRE");
            });

            modelBuilder.Entity<MfEscIngreso>(entity =>
            {
                entity.HasKey(e => e.IdescPadre);

                entity.ToTable("MF_ESC_INGRESOS");

                entity.Property(e => e.IdescPadre)
                    .ValueGeneratedNever()
                    .HasColumnName("IDESC_PADRE");

                entity.Property(e => e.IdIngresos)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID_INGRESOS");

                entity.Property(e => e.Ingmensual)
                    .HasColumnType("money")
                    .HasColumnName("INGMENSUAL");

                entity.Property(e => e.Otros)
                    .HasColumnType("money")
                    .HasColumnName("OTROS");

                entity.Property(e => e.Sueldoconyuge)
                    .HasColumnType("money")
                    .HasColumnName("SUELDOCONYUGE");

                entity.Property(e => e.Totalingresos)
                    .HasColumnType("money")
                    .HasColumnName("TOTALINGRESOS");

                entity.HasOne(d => d.IdescPadreNavigation)
                    .WithOne(p => p.MfEscIngreso)
                    .HasForeignKey<MfEscIngreso>(d => d.IdescPadre)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_MF_ESC_INGRESOS_MF_ESC_TABLAPADRE");
            });

            modelBuilder.Entity<MfEscPasivo>(entity =>
            {
                entity.HasKey(e => e.IdescPadre);

                entity.ToTable("MF_ESC_PASIVOS");

                entity.Property(e => e.IdescPadre)
                    .ValueGeneratedNever()
                    .HasColumnName("IDESC_PADRE");

                entity.Property(e => e.Capital)
                    .HasColumnType("money")
                    .HasColumnName("CAPITAL");

                entity.Property(e => e.Cxp)
                    .HasColumnType("money")
                    .HasColumnName("CXP");

                entity.Property(e => e.IdPasivo)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID_PASIVO");

                entity.Property(e => e.Obligacionesban)
                    .HasColumnType("money")
                    .HasColumnName("OBLIGACIONESBAN");

                entity.Property(e => e.Obligacioneship)
                    .HasColumnType("money")
                    .HasColumnName("OBLIGACIONESHIP");

                entity.Property(e => e.Otros)
                    .HasColumnType("money")
                    .HasColumnName("OTROS");

                entity.Property(e => e.OtrosPasivoslp)
                    .HasColumnType("money")
                    .HasColumnName("OTROS_PASIVOSLP");

                entity.Property(e => e.Pagares)
                    .HasColumnType("money")
                    .HasColumnName("PAGARES");

                entity.Property(e => e.PasivoLargoplazo)
                    .HasColumnType("money")
                    .HasColumnName("PASIVO_LARGOPLAZO");

                entity.Property(e => e.PrestHipotecarios)
                    .HasColumnType("money")
                    .HasColumnName("PREST_HIPOTECARIOS");

                entity.Property(e => e.TotalPasivocte)
                    .HasColumnType("money")
                    .HasColumnName("TOTAL_PASIVOCTE");

                entity.Property(e => e.TotalPasivolp)
                    .HasColumnType("money")
                    .HasColumnName("TOTAL_PASIVOLP");

                entity.Property(e => e.TotalPasivopatr)
                    .HasColumnType("money")
                    .HasColumnName("TOTAL_PASIVOPATR");

                entity.Property(e => e.TotalPatrimonio)
                    .HasColumnType("money")
                    .HasColumnName("TOTAL_PATRIMONIO");

                entity.HasOne(d => d.IdescPadreNavigation)
                    .WithOne(p => p.MfEscPasivo)
                    .HasForeignKey<MfEscPasivo>(d => d.IdescPadre)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_MF_ESC_PASIVOS_MF_ESC_TABLAPADRE");
            });

            modelBuilder.Entity<MfEscRefbancarium>(entity =>
            {
                entity.HasKey(e => new { e.IdescPadre, e.Codbanco, e.Cuenta });

                entity.ToTable("MF_ESC_REFBANCARIA");

                entity.Property(e => e.IdescPadre).HasColumnName("IDESC_PADRE");

                entity.Property(e => e.Codbanco)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("CODBANCO")
                    .HasDefaultValueSql("('')")
                    .IsFixedLength();

                entity.Property(e => e.Cuenta)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("CUENTA")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Barrio)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("BARRIO")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Ciudad)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("CIUDAD")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Direccion)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("DIRECCION")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.IdRefbancaria)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID_REFBANCARIA");

                entity.Property(e => e.Telefono)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("TELEFONO")
                    .HasDefaultValueSql("('')");

                entity.HasOne(d => d.CodbancoNavigation)
                    .WithMany(p => p.MfEscRefbancaria)
                    .HasForeignKey(d => d.Codbanco)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_MF_ESC_REFBANCARIA_BANCOS");

                entity.HasOne(d => d.IdescPadreNavigation)
                    .WithMany(p => p.MfEscRefbancaria)
                    .HasForeignKey(d => d.IdescPadre)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_MF_ESC_REFBANCARIA_MF_ESC_TABLAPADRE");
            });

            modelBuilder.Entity<MfEscRefgeneral>(entity =>
            {
                entity.HasKey(e => new { e.IdRefgenerales, e.IdescPadre, e.Codreferencia });

                entity.ToTable("MF_ESC_REFGENERAL");

                entity.Property(e => e.IdRefgenerales)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID_REFGENERALES");

                entity.Property(e => e.IdescPadre).HasColumnName("IDESC_PADRE");

                entity.Property(e => e.Codreferencia)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("CODREFERENCIA")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Barrio)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("BARRIO")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Ciudad)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("CIUDAD")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Direccion)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("DIRECCION")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Nombre)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("NOMBRE")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Telefono)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("TELEFONO")
                    .HasDefaultValueSql("('')");

                entity.HasOne(d => d.IdescPadreNavigation)
                    .WithMany(p => p.MfEscRefgenerals)
                    .HasForeignKey(d => d.IdescPadre)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_MF_ESC_REFGENERAL_MF_ESC_TABLAPADRE");
            });

            modelBuilder.Entity<MfEscTablapadre>(entity =>
            {
                entity.HasKey(e => e.IdTablamaestro);

                entity.ToTable("MF_ESC_TABLAPADRE");

                entity.Property(e => e.IdTablamaestro)
                    .ValueGeneratedNever()
                    .HasColumnName("ID_TABLAMAESTRO");

                entity.Property(e => e.CodCodeudor)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.CodUsuario)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.Codzona)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("CODZONA")
                    .HasDefaultValueSql("('')")
                    .IsFixedLength();

                entity.Property(e => e.Estado)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("ESTADO")
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.Fecha)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("FECHA")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Fechabalance)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("FECHABALANCE")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.IdenMfEscTablapadre)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_mf_esc_tablapadre");

                entity.Property(e => e.Nestudios)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("NEstudios");

                entity.Property(e => e.Prestamo)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.TipoEstudio)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')")
                    .IsFixedLength();

                entity.Property(e => e.Valorsolicitado)
                    .HasColumnType("money")
                    .HasColumnName("VALORSOLICITADO");

                entity.HasOne(d => d.CodUsuarioNavigation)
                    .WithMany(p => p.MfEscTablapadres)
                    .HasForeignKey(d => d.CodUsuario)
                    .HasConstraintName("FK_MF_ESC_TABLAPADRE_MF_DATOSUSUARIO");

                entity.HasOne(d => d.CodzonaNavigation)
                    .WithMany(p => p.MfEscTablapadres)
                    .HasForeignKey(d => d.Codzona)
                    .HasConstraintName("FK_MF_ESC_TABLAPADRE_MAEZONAS");
            });

            modelBuilder.Entity<MfEscVehiculo>(entity =>
            {
                entity.HasKey(e => new { e.IdescPadre, e.Placa });

                entity.ToTable("MF_ESC_VEHICULO");

                entity.Property(e => e.IdescPadre).HasColumnName("IDESC_PADRE");

                entity.Property(e => e.Placa)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("PLACA")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.IdVehiculo)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID_VEHICULO");

                entity.Property(e => e.Marca)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("MARCA")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Modelo)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("MODELO")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Nmotor)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("NMOTOR")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Reservadominio)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("RESERVADOMINIO")
                    .HasDefaultValueSql("('')");

                entity.HasOne(d => d.IdescPadreNavigation)
                    .WithMany(p => p.MfEscVehiculos)
                    .HasForeignKey(d => d.IdescPadre)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_MF_ESC_VEHICULO_MF_ESC_TABLAPADRE");
            });

            modelBuilder.Entity<MfEstfinanciero>(entity =>
            {
                entity.HasKey(e => new { e.IdEstfinanciero, e.IdPadre, e.TipoEstudio })
                    .IsClustered(false);

                entity.ToTable("MF_ESTFINANCIERO");

                entity.Property(e => e.IdEstfinanciero)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID_ESTFINANCIERO");

                entity.Property(e => e.IdPadre).HasColumnName("ID_PADRE");

                entity.Property(e => e.TipoEstudio)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')")
                    .IsFixedLength();

                entity.Property(e => e.Alimentacion)
                    .HasColumnType("money")
                    .HasColumnName("ALIMENTACION");

                entity.Property(e => e.Educacion)
                    .HasColumnType("money")
                    .HasColumnName("EDUCACION");

                entity.Property(e => e.Estparedes)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("ESTPAREDES")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Estpisos)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("ESTPISOS")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Estservicios)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("ESTSERVICIOS")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Esttechos)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("ESTTECHOS")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Estvivienda)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("ESTVIVIENDA")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Otros)
                    .HasColumnType("money")
                    .HasColumnName("OTROS");

                entity.Property(e => e.Salud)
                    .HasColumnType("money")
                    .HasColumnName("SALUD");

                entity.Property(e => e.Servicios)
                    .HasColumnType("money")
                    .HasColumnName("SERVICIOS");

                entity.Property(e => e.TotalEgresos)
                    .HasColumnType("money")
                    .HasColumnName("TOTAL_EGRESOS");

                entity.Property(e => e.Transporte)
                    .HasColumnType("money")
                    .HasColumnName("TRANSPORTE");

                entity.Property(e => e.Vivienda)
                    .HasColumnType("money")
                    .HasColumnName("VIVIENDA");

                entity.HasOne(d => d.MfTablapadre)
                    .WithMany(p => p.MfEstfinancieros)
                    .HasForeignKey(d => new { d.IdPadre, d.TipoEstudio })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_MF_ESTFINANCIERO_MF_TABLAPADRE");
            });

            modelBuilder.Entity<MfFamilium>(entity =>
            {
                entity.HasKey(e => new { e.IdFamilia, e.IdPadre, e.TipoEstudio })
                    .IsClustered(false);

                entity.ToTable("MF_FAMILIA");

                entity.Property(e => e.IdFamilia)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID_FAMILIA");

                entity.Property(e => e.IdPadre).HasColumnName("ID_PADRE");

                entity.Property(e => e.TipoEstudio)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')")
                    .IsFixedLength();

                entity.Property(e => e.Aportefinal)
                    .HasColumnType("money")
                    .HasColumnName("APORTEFINAL");

                entity.Property(e => e.Estadocivil)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("ESTADOCIVIL")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Estudios)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("ESTUDIOS")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Fechanac)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("FECHANAC")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Idparentesco)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("IDPARENTESCO")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Nombre)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("NOMBRE")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Ocupacionact)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("OCUPACIONACT")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Sexo)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("SEXO")
                    .HasDefaultValueSql("('')");

                entity.HasOne(d => d.EstudiosNavigation)
                    .WithMany(p => p.MfFamilia)
                    .HasForeignKey(d => d.Estudios)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_MF_FAMILIA_MF_NIVELESCOLARIDAD");

                entity.HasOne(d => d.IdparentescoNavigation)
                    .WithMany(p => p.MfFamilia)
                    .HasForeignKey(d => d.Idparentesco)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_MF_FAMILIA_MF_PARENTESCO");

                entity.HasOne(d => d.OcupacionactNavigation)
                    .WithMany(p => p.MfFamilia)
                    .HasForeignKey(d => d.Ocupacionact)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_MF_FAMILIA_MF_PROFESION");

                entity.HasOne(d => d.MfTablapadre)
                    .WithMany(p => p.MfFamilia)
                    .HasForeignKey(d => new { d.IdPadre, d.TipoEstudio })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_MF_FAMILIA_MF_TABLAPADRE");
            });

            modelBuilder.Entity<MfGrupo>(entity =>
            {
                entity.HasKey(e => e.Codgrupo);

                entity.ToTable("MF_GRUPO");

                entity.Property(e => e.Codgrupo)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("CODGRUPO");

                entity.Property(e => e.Estado)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.FechaCreacion)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')")
                    .IsFixedLength();

                entity.Property(e => e.IdGrupo)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID_GRUPO");

                entity.Property(e => e.Nombre)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("NOMBRE")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Prestamo)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");
            });

            modelBuilder.Entity<MfIngreso>(entity =>
            {
                entity.HasKey(e => new { e.IdIngresos, e.IdPadre, e.TipoEstudio })
                    .IsClustered(false);

                entity.ToTable("MF_INGRESOS");

                entity.Property(e => e.IdIngresos)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID_INGRESOS");

                entity.Property(e => e.IdPadre).HasColumnName("ID_PADRE");

                entity.Property(e => e.TipoEstudio)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')")
                    .IsFixedLength();

                entity.Property(e => e.Cantidad)
                    .HasColumnType("money")
                    .HasColumnName("CANTIDAD");

                entity.Property(e => e.Empresa)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("EMPRESA")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Entrada)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("ENTRADA")
                    .HasDefaultValueSql("('')");

                entity.HasOne(d => d.MfTablapadre)
                    .WithMany(p => p.MfIngresos)
                    .HasForeignKey(d => new { d.IdPadre, d.TipoEstudio })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_MF_INGRESOS_MF_TABLAPADRE");
            });

            modelBuilder.Entity<MfInvactivo>(entity =>
            {
                entity.HasKey(e => new { e.IdInvactivos, e.IdPadre, e.TipoEstudio })
                    .IsClustered(false);

                entity.ToTable("MF_INVACTIVOS");

                entity.Property(e => e.IdInvactivos)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID_INVACTIVOS");

                entity.Property(e => e.IdPadre).HasColumnName("ID_PADRE");

                entity.Property(e => e.TipoEstudio)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')")
                    .IsFixedLength();

                entity.Property(e => e.Cantidad)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("CANTIDAD");

                entity.Property(e => e.Condicion)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("CONDICION")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Descripcion)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPCION")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Valor)
                    .HasColumnType("money")
                    .HasColumnName("VALOR");

                entity.Property(e => e.Valoradeudado)
                    .HasColumnType("money")
                    .HasColumnName("VALORADEUDADO");

                entity.HasOne(d => d.MfTablapadre)
                    .WithMany(p => p.MfInvactivos)
                    .HasForeignKey(d => new { d.IdPadre, d.TipoEstudio })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_MF_INVACTIVOS_MF_TABLAPADRE");
            });

            modelBuilder.Entity<MfLog>(entity =>
            {
                entity.ToTable("MF_LOG");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.CodEstudio).HasColumnName("COD_ESTUDIO");

                entity.Property(e => e.CodGrupo)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.Estado)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("ESTADO");

                entity.Property(e => e.Fecha)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("FECHA")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Observaciones)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("OBSERVACIONES");

                entity.Property(e => e.Operacion)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.TipoEstudio)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("TIPO_ESTUDIO")
                    .IsFixedLength();

                entity.Property(e => e.Usuario)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("USUARIO");

                entity.Property(e => e.UsuarioAprobacion)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");
            });

            modelBuilder.Entity<MfNivelescolaridad>(entity =>
            {
                entity.HasKey(e => e.Codnivelesc);

                entity.ToTable("MF_NIVELESCOLARIDAD");

                entity.Property(e => e.Codnivelesc)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("CODNIVELESC");

                entity.Property(e => e.IdNivelesc)
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID_NIVELESC");

                entity.Property(e => e.Nombre)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("NOMBRE")
                    .HasDefaultValueSql("('')");
            });

            modelBuilder.Entity<MfPagareBody>(entity =>
            {
                entity.HasKey(e => e.Iden);

                entity.ToTable("MF_PagareBody");

                entity.Property(e => e.IdenHead).HasColumnName("Iden_Head");

                entity.Property(e => e.Leyenda)
                    .HasMaxLength(8000)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<MfPagareHead>(entity =>
            {
                entity.HasKey(e => e.Iden);

                entity.ToTable("MF_PagareHead");

                entity.Property(e => e.Codigo)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Nombre)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<MfPagarePrestamoBody>(entity =>
            {
                entity.HasKey(e => e.Iden);

                entity.ToTable("MF_PagarePrestamoBody");

                entity.Property(e => e.IdenPagarePrestamohead).HasColumnName("Iden_PagarePrestamohead");

                entity.Property(e => e.Leyenda)
                    .HasMaxLength(8000)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<MfPagarePrestamoHead>(entity =>
            {
                entity.HasKey(e => e.Iden);

                entity.ToTable("MF_PagarePrestamoHead");

                entity.Property(e => e.CodCliente)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Documento)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Estado)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Fecha)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Fuente)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.IdPrestamo).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.PorcInteres).HasColumnType("money");

                entity.Property(e => e.ValorCuota).HasColumnType("money");

                entity.Property(e => e.ValorPrestamo).HasColumnType("money");

                entity.Property(e => e.Vencimiento)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.VencimientoCuota1)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.HasOne(d => d.CodClienteNavigation)
                    .WithMany(p => p.MfPagarePrestamoHeads)
                    .HasForeignKey(d => d.CodCliente)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_MF_PagarePrestamoHead_CLIENTES");

                entity.HasOne(d => d.FuenteNavigation)
                    .WithMany(p => p.MfPagarePrestamoHeads)
                    .HasForeignKey(d => d.Fuente)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_MF_PagarePrestamoHead_FUENTES");

                entity.HasOne(d => d.Document)
                    .WithMany(p => p.MfPagarePrestamoHeads)
                    .HasForeignKey(d => new { d.Fuente, d.Documento })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_MF_PagarePrestamoHead_DOCUMENT");
            });

            modelBuilder.Entity<MfPagarePrestamoIntegrante>(entity =>
            {
                entity.HasKey(e => e.Iden);

                entity.ToTable("MF_PagarePrestamoIntegrantes");

                entity.Property(e => e.CodCliente)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.IdenPagarePrestamoHead).HasColumnName("Iden_PagarePrestamoHead");

                entity.Property(e => e.Monto).HasColumnType("money");

                entity.Property(e => e.Porcentaje).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.VrCuota).HasColumnType("money");

                entity.HasOne(d => d.CodClienteNavigation)
                    .WithMany(p => p.MfPagarePrestamoIntegrantes)
                    .HasForeignKey(d => d.CodCliente)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_MF_PagarePrestamoIntegrantes_CLIENTES");
            });

            modelBuilder.Entity<MfParentesco>(entity =>
            {
                entity.HasKey(e => e.Codparentesco);

                entity.ToTable("MF_PARENTESCO");

                entity.Property(e => e.Codparentesco)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("CODPARENTESCO");

                entity.Property(e => e.IdParentesco)
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID_PARENTESCO");

                entity.Property(e => e.Nombre)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("NOMBRE")
                    .HasDefaultValueSql("('')");
            });

            modelBuilder.Entity<MfPasivo>(entity =>
            {
                entity.HasKey(e => new { e.IdPadre, e.TipoEstudio });

                entity.ToTable("MF_Pasivos");

                entity.Property(e => e.IdPadre).HasColumnName("Id_Padre");

                entity.Property(e => e.TipoEstudio)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')")
                    .IsFixedLength();

                entity.Property(e => e.Capital).HasColumnType("money");

                entity.Property(e => e.CxP).HasColumnType("money");

                entity.Property(e => e.IdPasivo)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Id_Pasivo");

                entity.Property(e => e.ObligacionesBan).HasColumnType("money");

                entity.Property(e => e.ObligacionesHip).HasColumnType("money");

                entity.Property(e => e.Otros).HasColumnType("money");

                entity.Property(e => e.OtrosPasivosLp)
                    .HasColumnType("money")
                    .HasColumnName("Otros_PasivosLP");

                entity.Property(e => e.Pagares).HasColumnType("money");

                entity.Property(e => e.PasivoLargoPlazo)
                    .HasColumnType("money")
                    .HasColumnName("Pasivo_LargoPlazo");

                entity.Property(e => e.PrestHipotecarios)
                    .HasColumnType("money")
                    .HasColumnName("Prest_Hipotecarios");

                entity.Property(e => e.TotalPasivoCte)
                    .HasColumnType("money")
                    .HasColumnName("Total_PasivoCte");

                entity.Property(e => e.TotalPasivoLp)
                    .HasColumnType("money")
                    .HasColumnName("Total_PasivoLP");

                entity.Property(e => e.TotalPasivoPatr)
                    .HasColumnType("money")
                    .HasColumnName("Total_PasivoPatr");

                entity.Property(e => e.TotalPatrimonio)
                    .HasColumnType("money")
                    .HasColumnName("Total_Patrimonio");

                entity.HasOne(d => d.MfTablapadre)
                    .WithOne(p => p.MfPasivo)
                    .HasForeignKey<MfPasivo>(d => new { d.IdPadre, d.TipoEstudio })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_MF_Pasivos_MF_TABLAPADRE");
            });

            modelBuilder.Entity<MfPoliza>(entity =>
            {
                entity.HasKey(e => new { e.CodPoliza, e.CodUsuario });

                entity.ToTable("MF_POLIZAS");

                entity.Property(e => e.CodPoliza)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.CodUsuario)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.CodSeguro)
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.DocumentoRenovacion)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Estado)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.FechaFinal)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.FechaInicio)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.FuenteRenovacion)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.IdPoliza)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Id_Poliza");

                entity.Property(e => e.Prestamo)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.TipoDescuento)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')")
                    .IsFixedLength();

                entity.Property(e => e.ValorAsegurado).HasColumnType("money");

                entity.Property(e => e.ValorInteres).HasColumnType("numeric(18, 2)");

                entity.HasOne(d => d.CodSeguroNavigation)
                    .WithMany(p => p.MfPolizas)
                    .HasForeignKey(d => d.CodSeguro)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_MF_POLIZAS_MF_SEGUROS");

                entity.HasOne(d => d.CodUsuarioNavigation)
                    .WithMany(p => p.MfPolizas)
                    .HasForeignKey(d => d.CodUsuario)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_MF_POLIZAS_MF_DATOSUSUARIO");
            });

            modelBuilder.Entity<MfPrestamosCodeudore>(entity =>
            {
                entity.HasKey(e => new { e.Codprestamo, e.CodCodeudor, e.EstudioCodeudor, e.CodUsuario });

                entity.ToTable("MF_PrestamosCodeudores");

                entity.Property(e => e.Codprestamo)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CodCodeudor)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.EstudioCodeudor)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CodUsuario)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.IdenMfPrestamoscodeudores)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_mf_prestamoscodeudores");
            });

            modelBuilder.Entity<MfPresupuesto>(entity =>
            {
                entity.HasKey(e => new { e.IdPresup, e.IdPadre, e.TipoEstudio })
                    .IsClustered(false);

                entity.ToTable("MF_PRESUPUESTO");

                entity.Property(e => e.IdPresup)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID_PRESUP");

                entity.Property(e => e.IdPadre).HasColumnName("ID_PADRE");

                entity.Property(e => e.TipoEstudio)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')")
                    .IsFixedLength();

                entity.Property(e => e.Cantidad)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("CANTIDAD");

                entity.Property(e => e.Costototal)
                    .HasColumnType("money")
                    .HasColumnName("COSTOTOTAL");

                entity.Property(e => e.Costounid)
                    .HasColumnType("money")
                    .HasColumnName("COSTOUNID");

                entity.Property(e => e.Periodo)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("PERIODO")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Porcmargen)
                    .HasColumnType("numeric(18, 4)")
                    .HasColumnName("PORCMARGEN");

                entity.Property(e => e.Preciototal)
                    .HasColumnType("money")
                    .HasColumnName("PRECIOTOTAL");

                entity.Property(e => e.Preciounid)
                    .HasColumnType("money")
                    .HasColumnName("PRECIOUNID");

                entity.Property(e => e.Producto)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("PRODUCTO")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Unidad)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("UNIDAD")
                    .HasDefaultValueSql("('')")
                    .IsFixedLength();

                entity.Property(e => e.Utilidad)
                    .HasColumnType("money")
                    .HasColumnName("UTILIDAD");

                entity.HasOne(d => d.UnidadNavigation)
                    .WithMany(p => p.MfPresupuestos)
                    .HasForeignKey(d => d.Unidad)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_MF_PRESUPUESTO_MAEUNID");

                entity.HasOne(d => d.MfTablapadre)
                    .WithMany(p => p.MfPresupuestos)
                    .HasForeignKey(d => new { d.IdPadre, d.TipoEstudio })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_MF_PRESUPUESTO_MF_TABLAPADRE");
            });

            modelBuilder.Entity<MfProdvender>(entity =>
            {
                entity.HasKey(e => e.Codprodvender)
                    .IsClustered(false);

                entity.ToTable("MF_PRODVENDER");

                entity.Property(e => e.Codprodvender)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("CODPRODVENDER");

                entity.Property(e => e.IdProdvender)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID_PRODVENDER");

                entity.Property(e => e.Nombre)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("NOMBRE")
                    .HasDefaultValueSql("('')");
            });

            modelBuilder.Entity<MfProdvendusuario>(entity =>
            {
                entity.HasKey(e => new { e.IdPadre, e.Codprodvender, e.TipoEstudio })
                    .IsClustered(false);

                entity.ToTable("MF_PRODVENDUSUARIO");

                entity.Property(e => e.IdPadre).HasColumnName("ID_PADRE");

                entity.Property(e => e.Codprodvender)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("CODPRODVENDER");

                entity.Property(e => e.TipoEstudio)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')")
                    .IsFixedLength();

                entity.Property(e => e.IdProdvendusu)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID_PRODVENDUSU");

                entity.HasOne(d => d.CodprodvenderNavigation)
                    .WithMany(p => p.MfProdvendusuarios)
                    .HasForeignKey(d => d.Codprodvender)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_MF_PRODVENDUSUARIO_MF_PRODVENDER");

                entity.HasOne(d => d.MfTablapadre)
                    .WithMany(p => p.MfProdvendusuarios)
                    .HasForeignKey(d => new { d.IdPadre, d.TipoEstudio })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_MF_PRODVENDUSUARIO_MF_TABLAPADRE");
            });

            modelBuilder.Entity<MfProfesion>(entity =>
            {
                entity.HasKey(e => e.Codprofesion);

                entity.ToTable("MF_PROFESION");

                entity.Property(e => e.Codprofesion)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("CODPROFESION");

                entity.Property(e => e.IdProfesion)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID_PROFESION");

                entity.Property(e => e.Nombre)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("NOMBRE")
                    .HasDefaultValueSql("('')");
            });

            modelBuilder.Entity<MfProyinversion>(entity =>
            {
                entity.HasKey(e => new { e.IdProyinv, e.IdPadre, e.TipoEstudio })
                    .IsClustered(false);

                entity.ToTable("MF_PROYINVERSION");

                entity.Property(e => e.IdProyinv)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID_PROYINV");

                entity.Property(e => e.IdPadre).HasColumnName("ID_PADRE");

                entity.Property(e => e.TipoEstudio)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')")
                    .IsFixedLength();

                entity.Property(e => e.Cantidad)
                    .HasColumnType("numeric(18, 4)")
                    .HasColumnName("CANTIDAD");

                entity.Property(e => e.Producto)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("PRODUCTO")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Valortotal)
                    .HasColumnType("money")
                    .HasColumnName("VALORTOTAL");

                entity.Property(e => e.Valorunitario)
                    .HasColumnType("money")
                    .HasColumnName("VALORUNITARIO");

                entity.HasOne(d => d.MfTablapadre)
                    .WithMany(p => p.MfProyinversions)
                    .HasForeignKey(d => new { d.IdPadre, d.TipoEstudio })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_MF_PROYINVERSION_MF_TABLAPADRE");
            });

            modelBuilder.Entity<MfPyg>(entity =>
            {
                entity.HasKey(e => new { e.IdPyg, e.IdPadre, e.TipoEstudio });

                entity.ToTable("MF_PYG");

                entity.Property(e => e.IdPyg)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID_PYG");

                entity.Property(e => e.IdPadre).HasColumnName("ID_PADRE");

                entity.Property(e => e.TipoEstudio)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')")
                    .IsFixedLength();

                entity.Property(e => e.Arriendo)
                    .HasColumnType("money")
                    .HasColumnName("ARRIENDO");

                entity.Property(e => e.Compras)
                    .HasColumnType("money")
                    .HasColumnName("COMPRAS");

                entity.Property(e => e.Manoobra)
                    .HasColumnType("money")
                    .HasColumnName("MANOOBRA");

                entity.Property(e => e.Servicios)
                    .HasColumnType("money")
                    .HasColumnName("SERVICIOS");

                entity.Property(e => e.TotalCompgast)
                    .HasColumnType("money")
                    .HasColumnName("TOTAL_COMPGAST");

                entity.Property(e => e.Utilidad)
                    .HasColumnType("money")
                    .HasColumnName("UTILIDAD");

                entity.Property(e => e.Ventas)
                    .HasColumnType("money")
                    .HasColumnName("VENTAS");

                entity.HasOne(d => d.MfTablapadre)
                    .WithMany(p => p.MfPygs)
                    .HasForeignKey(d => new { d.IdPadre, d.TipoEstudio })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_MF_PYG_MF_TABLAPADRE");
            });

            modelBuilder.Entity<MfReferencium>(entity =>
            {
                entity.HasKey(e => new { e.IdReferencia, e.IdPadre, e.TipoEstudio })
                    .IsClustered(false);

                entity.ToTable("MF_REFERENCIA");

                entity.Property(e => e.IdReferencia)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID_REFERENCIA");

                entity.Property(e => e.IdPadre).HasColumnName("ID_PADRE");

                entity.Property(e => e.TipoEstudio)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')")
                    .IsFixedLength();

                entity.Property(e => e.Codreferencia)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("CODREFERENCIA")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Direccion)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("DIRECCION")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Nombre)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("NOMBRE")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Telefono)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("TELEFONO")
                    .HasDefaultValueSql("('')");

                entity.HasOne(d => d.MfTablapadre)
                    .WithMany(p => p.MfReferencia)
                    .HasForeignKey(d => new { d.IdPadre, d.TipoEstudio })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_MF_REFERENCIA_MF_TABLAPADRE");
            });

            modelBuilder.Entity<MfRenovacionCredito>(entity =>
            {
                entity.HasKey(e => new { e.IdRenovacion, e.TipoEstudio });

                entity.ToTable("MF_RenovacionCredito");

                entity.Property(e => e.IdRenovacion).HasColumnName("Id_Renovacion");

                entity.Property(e => e.TipoEstudio)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.ActivosFijos).HasColumnType("money");

                entity.Property(e => e.Alimentacion).HasColumnType("money");

                entity.Property(e => e.Arriendo).HasColumnType("money");

                entity.Property(e => e.Caja).HasColumnType("money");

                entity.Property(e => e.Capital).HasColumnType("money");

                entity.Property(e => e.CodActividad)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.CodAsesor)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')")
                    .IsFixedLength();

                entity.Property(e => e.CodGrupo)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.CodUsuario)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.CodZona)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')")
                    .IsFixedLength();

                entity.Property(e => e.ComprasContado).HasColumnType("money");

                entity.Property(e => e.ComprasCr)
                    .HasColumnType("money")
                    .HasColumnName("ComprasCR");

                entity.Property(e => e.CxC).HasColumnType("money");

                entity.Property(e => e.Direccion)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.Educacion).HasColumnType("money");

                entity.Property(e => e.Estado)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.Excedente).HasColumnType("money");

                entity.Property(e => e.Fecha)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')")
                    .IsFixedLength();

                entity.Property(e => e.Gastos).HasColumnType("money");

                entity.Property(e => e.IdenMfRenovacioncredito)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_mf_renovacioncredito");

                entity.Property(e => e.Ingresos).HasColumnType("money");

                entity.Property(e => e.Inversion).HasColumnType("money");

                entity.Property(e => e.Lider)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')")
                    .IsFixedLength();

                entity.Property(e => e.MateriaPrima).HasColumnType("money");

                entity.Property(e => e.MicroNegociante)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')")
                    .IsFixedLength();

                entity.Property(e => e.Nempleos)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("NEmpleos");

                entity.Property(e => e.Npersonas)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("NPersonas");

                entity.Property(e => e.Nrenovaciones)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("NRenovaciones");

                entity.Property(e => e.OtrosActivos).HasColumnType("money");

                entity.Property(e => e.OtrosGastos).HasColumnType("money");

                entity.Property(e => e.OtrosIngresos).HasColumnType("money");

                entity.Property(e => e.OtrosPasivos).HasColumnType("money");

                entity.Property(e => e.PcpcxC)
                    .HasColumnType("money")
                    .HasColumnName("PCPCxC");

                entity.Property(e => e.PlpcxC)
                    .HasColumnType("money")
                    .HasColumnName("PLPCxC");

                entity.Property(e => e.ProdElaborado).HasColumnType("money");

                entity.Property(e => e.ProdProceso).HasColumnType("money");

                entity.Property(e => e.Servicios).HasColumnType("money");

                entity.Property(e => e.Solicitud).HasColumnType("money");

                entity.Property(e => e.Telefono)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.TipoCredito)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.Transporte).HasColumnType("money");

                entity.Property(e => e.VentasContado).HasColumnType("money");

                entity.Property(e => e.VentasCr)
                    .HasColumnType("money")
                    .HasColumnName("VentasCR");

                entity.HasOne(d => d.CodActividadNavigation)
                    .WithMany(p => p.MfRenovacionCreditos)
                    .HasForeignKey(d => d.CodActividad)
                    .HasConstraintName("FK_MF_RenovacionCredito_MF_ACTIVIDAD");

                entity.HasOne(d => d.CodAsesorNavigation)
                    .WithMany(p => p.MfRenovacionCreditos)
                    .HasForeignKey(d => d.CodAsesor)
                    .HasConstraintName("FK_MF_RenovacionCredito_MAEVENDE");

                entity.HasOne(d => d.CodUsuarioNavigation)
                    .WithMany(p => p.MfRenovacionCreditos)
                    .HasForeignKey(d => d.CodUsuario)
                    .HasConstraintName("FK_MF_RenovacionCredito_MF_DATOSUSUARIO");

                entity.HasOne(d => d.CodZonaNavigation)
                    .WithMany(p => p.MfRenovacionCreditos)
                    .HasForeignKey(d => d.CodZona)
                    .HasConstraintName("FK_MF_RenovacionCredito_MAEZONAS");
            });

            modelBuilder.Entity<MfSeguro>(entity =>
            {
                entity.HasKey(e => e.CodSeguro);

                entity.ToTable("MF_SEGUROS");

                entity.Property(e => e.CodSeguro)
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.IdSeguro)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID_Seguro");

                entity.Property(e => e.Nombre)
                    .HasMaxLength(40)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<MfTabfondogaran>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("MF_TABFONDOGARAN");

                entity.Property(e => e.IdenMfTabfondogaran)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_mf_tabfondogaran");

                entity.Property(e => e.Valor).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.Valor2).HasColumnType("numeric(18, 6)");
            });

            modelBuilder.Entity<MfTablapadre>(entity =>
            {
                entity.HasKey(e => new { e.IdTablamaestro, e.TipoEstudio })
                    .IsClustered(false);

                entity.ToTable("MF_TABLAPADRE");

                entity.HasIndex(e => new { e.IdTablamaestro, e.Codusuario }, "IX_MF_TABLAPADRE_CODUSUARIO_ID_TABLAMAESTRO");

                entity.Property(e => e.IdTablamaestro).HasColumnName("ID_TABLAMAESTRO");

                entity.Property(e => e.TipoEstudio)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')")
                    .IsFixedLength();

                entity.Property(e => e.Codasesor)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("CODASESOR")
                    .HasDefaultValueSql("('')")
                    .IsFixedLength();

                entity.Property(e => e.Codgrupo)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("CODGRUPO")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Codtiponegocio)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("CODTIPONEGOCIO")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Codusuario)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("CODUSUARIO")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Codzona)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("CODZONA")
                    .HasDefaultValueSql("('')")
                    .IsFixedLength();

                entity.Property(e => e.Contribucion)
                    .HasColumnType("money")
                    .HasColumnName("CONTRIBUCION");

                entity.Property(e => e.Estado)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("ESTADO")
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.Fecha)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("FECHA")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.FechaBalance)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.IdenMfTablapadre)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_mf_tablapadre");

                entity.Property(e => e.Nestudios)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("NEstudios");

                entity.Property(e => e.Solicitudcredito)
                    .HasColumnType("money")
                    .HasColumnName("SOLICITUDCREDITO");

                entity.Property(e => e.TipoCredito)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.TotalProyinv)
                    .HasColumnType("money")
                    .HasColumnName("TOTAL_PROYINV");

                entity.HasOne(d => d.CodasesorNavigation)
                    .WithMany(p => p.MfTablapadres)
                    .HasForeignKey(d => d.Codasesor)
                    .HasConstraintName("FK_MF_TABLAPADRE_MAEVENDE");

                entity.HasOne(d => d.CodtiponegocioNavigation)
                    .WithMany(p => p.MfTablapadres)
                    .HasForeignKey(d => d.Codtiponegocio)
                    .HasConstraintName("FK_MF_TABLAPADRE_MF_TIPONEGOCIO");

                entity.HasOne(d => d.CodzonaNavigation)
                    .WithMany(p => p.MfTablapadres)
                    .HasForeignKey(d => d.Codzona)
                    .HasConstraintName("FK_MF_TABLAPADRE_MAEZONAS");
            });

            modelBuilder.Entity<MfTiponegocio>(entity =>
            {
                entity.HasKey(e => e.Codtiponeg)
                    .IsClustered(false);

                entity.ToTable("MF_TIPONEGOCIO");

                entity.Property(e => e.Codtiponeg)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("CODTIPONEG");

                entity.Property(e => e.IdTiponeg)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID_TIPONEG");

                entity.Property(e => e.Nombre)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("NOMBRE")
                    .HasDefaultValueSql("('')");
            });

            modelBuilder.Entity<MfViviendum>(entity =>
            {
                entity.HasKey(e => new { e.IdPadre, e.TipoEstudio });

                entity.ToTable("MF_Vivienda");

                entity.Property(e => e.IdPadre).HasColumnName("Id_Padre");

                entity.Property(e => e.TipoEstudio)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Cbaños)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("CBaños")
                    .HasDefaultValueSql("('')")
                    .IsFixedLength();

                entity.Property(e => e.Chabitaciones)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("CHabitaciones")
                    .HasDefaultValueSql("('')")
                    .IsFixedLength();

                entity.Property(e => e.Cpatio)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("CPatio")
                    .HasDefaultValueSql("('')")
                    .IsFixedLength();

                entity.Property(e => e.Cps)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("CPS")
                    .HasDefaultValueSql("('')")
                    .IsFixedLength();

                entity.Property(e => e.Csala)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("CSala")
                    .HasDefaultValueSql("('')")
                    .IsFixedLength();

                entity.Property(e => e.IdVivienda)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Id_Vivienda");

                entity.Property(e => e.Nalberca)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("NAlberca")
                    .HasDefaultValueSql("('')")
                    .IsFixedLength();

                entity.Property(e => e.Ncocina)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("NCocina")
                    .HasDefaultValueSql("('')")
                    .IsFixedLength();

                entity.Property(e => e.Nlavadero)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("NLavadero")
                    .HasDefaultValueSql("('')")
                    .IsFixedLength();

                entity.Property(e => e.Nletrina)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("NLetrina")
                    .HasDefaultValueSql("('')")
                    .IsFixedLength();

                entity.Property(e => e.Nparedes)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("NParedes")
                    .HasDefaultValueSql("('')")
                    .IsFixedLength();

                entity.Property(e => e.Npersonas)
                    .HasColumnName("NPersonas")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Npiso)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("NPiso")
                    .HasDefaultValueSql("('')")
                    .IsFixedLength();

                entity.Property(e => e.Nps)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("NPS")
                    .HasDefaultValueSql("('')")
                    .IsFixedLength();

                entity.Property(e => e.Npuertas)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("NPuertas")
                    .HasDefaultValueSql("('')")
                    .IsFixedLength();

                entity.Property(e => e.NservicioSanitario)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("NServicioSanitario")
                    .HasDefaultValueSql("('')")
                    .IsFixedLength();

                entity.Property(e => e.Ntecho)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("NTecho")
                    .HasDefaultValueSql("('')")
                    .IsFixedLength();

                entity.Property(e => e.Nventanas)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("NVentanas")
                    .HasDefaultValueSql("('')")
                    .IsFixedLength();

                entity.Property(e => e.Observaciones)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.OtraVivienda)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.OtroTipoVivienda)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.OtroTitulo)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.TipoVivienda)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Titulo)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Vivienda)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");
            });

            modelBuilder.Entity<ModulosExterno>(entity =>
            {
                entity.HasKey(e => e.Codigo)
                    .HasName("PK_MODULOSEXTERNOS");

                entity.Property(e => e.Codigo).ValueGeneratedNever();

                entity.Property(e => e.Detalles)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.IdenModulosexternos)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_modulosexternos");

                entity.Property(e => e.Nombre)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Parametr)
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SeccionBaseIni)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("SeccionBaseINI");

                entity.Property(e => e.SeccionServidorIni)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("SeccionServidorINI");
            });

            modelBuilder.Entity<Moneda>(entity =>
            {
                entity.HasKey(e => e.Idmoneda)
                    .IsClustered(false);

                entity.ToTable("MONEDAS");

                entity.Property(e => e.Idmoneda)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("IDMONEDA")
                    .IsFixedLength();

                entity.Property(e => e.Ctacomi)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("CTACOMI")
                    .IsFixedLength();

                entity.Property(e => e.Ctacomi0)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("CTACOMI0")
                    .IsFixedLength();

                entity.Property(e => e.Ctacomi1)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("CTACOMI1")
                    .IsFixedLength();

                entity.Property(e => e.Ctacomi2)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("CTACOMI2")
                    .IsFixedLength();

                entity.Property(e => e.Ctacomi3)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("CTACOMI3")
                    .IsFixedLength();

                entity.Property(e => e.Ctacomi4)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("CTACOMI4")
                    .IsFixedLength();

                entity.Property(e => e.Decimales).HasDefaultValueSql("((2))");

                entity.Property(e => e.DecimalesImpuestos).HasDefaultValueSql("((2))");

                entity.Property(e => e.Depende0)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("DEPENDE0")
                    .IsFixedLength();

                entity.Property(e => e.Depende1)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("DEPENDE1")
                    .IsFixedLength();

                entity.Property(e => e.Depende2)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("DEPENDE2")
                    .IsFixedLength();

                entity.Property(e => e.Depende3)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("DEPENDE3")
                    .IsFixedLength();

                entity.Property(e => e.Depende4)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("DEPENDE4")
                    .IsFixedLength();

                entity.Property(e => e.Descrip)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIP");

                entity.Property(e => e.IdenMonedas)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_monedas");

                entity.Property(e => e.Porcomi)
                    .HasColumnType("numeric(18, 4)")
                    .HasColumnName("PORCOMI");

                entity.Property(e => e.Porcomi0)
                    .HasColumnType("numeric(18, 4)")
                    .HasColumnName("PORCOMI0");

                entity.Property(e => e.Porcomi1)
                    .HasColumnType("numeric(18, 4)")
                    .HasColumnName("PORCOMI1");

                entity.Property(e => e.Porcomi2)
                    .HasColumnType("numeric(18, 4)")
                    .HasColumnName("PORCOMI2");

                entity.Property(e => e.Porcomi3)
                    .HasColumnType("numeric(18, 4)")
                    .HasColumnName("PORCOMI3");

                entity.Property(e => e.Porcomi4)
                    .HasColumnType("numeric(18, 4)")
                    .HasColumnName("PORCOMI4");

                entity.Property(e => e.Simoneda).HasColumnName("SIMONEDA");

                entity.Property(e => e.Tipo).HasColumnName("TIPO");

                entity.Property(e => e.TipoCarta)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Topico0)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("TOPICO0")
                    .IsFixedLength();

                entity.Property(e => e.Topico1)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("TOPICO1")
                    .IsFixedLength();

                entity.Property(e => e.Topico2)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("TOPICO2")
                    .IsFixedLength();

                entity.Property(e => e.Topico3)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("TOPICO3")
                    .IsFixedLength();

                entity.Property(e => e.Topico4)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("TOPICO4")
                    .IsFixedLength();

                entity.Property(e => e.VersionDeLaFila)
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.CtacomiNavigation)
                    .WithMany(p => p.MonedaCtacomiNavigations)
                    .HasForeignKey(d => d.Ctacomi);

                entity.HasOne(d => d.Ctacomi0Navigation)
                    .WithMany(p => p.MonedaCtacomi0Navigations)
                    .HasForeignKey(d => d.Ctacomi0);

                entity.HasOne(d => d.Ctacomi1Navigation)
                    .WithMany(p => p.MonedaCtacomi1Navigations)
                    .HasForeignKey(d => d.Ctacomi1);

                entity.HasOne(d => d.Ctacomi2Navigation)
                    .WithMany(p => p.MonedaCtacomi2Navigations)
                    .HasForeignKey(d => d.Ctacomi2);

                entity.HasOne(d => d.Ctacomi3Navigation)
                    .WithMany(p => p.MonedaCtacomi3Navigations)
                    .HasForeignKey(d => d.Ctacomi3);

                entity.HasOne(d => d.Ctacomi4Navigation)
                    .WithMany(p => p.MonedaCtacomi4Navigations)
                    .HasForeignKey(d => d.Ctacomi4);
            });

            modelBuilder.Entity<MpgAcuerdoGasto>(entity =>
            {
                entity.HasKey(e => new { e.Bu, e.AnoMes, e.Rubro, e.Recurso });

                entity.ToTable("MPG_AcuerdoGasto");

                entity.Property(e => e.Bu)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("BU");

                entity.Property(e => e.AnoMes)
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.Rubro)
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.Recurso)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Adiciones).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.Cdp)
                    .HasColumnType("numeric(18, 2)")
                    .HasColumnName("CDP");

                entity.Property(e => e.Congelacion).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.Crp)
                    .HasColumnType("numeric(18, 2)")
                    .HasColumnName("CRP");

                entity.Property(e => e.Disminuciones).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.Entrada).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.IdenMpgAcuerdogasto)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_mpg_acuerdogasto");

                entity.Property(e => e.Ocp)
                    .HasColumnType("numeric(18, 2)")
                    .HasColumnName("OCP");

                entity.Property(e => e.Reserva).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.ReservaEntrada)
                    .HasColumnType("numeric(18, 2)")
                    .HasColumnName("Reserva_Entrada");

                entity.Property(e => e.TrasladosCr)
                    .HasColumnType("numeric(18, 2)")
                    .HasColumnName("TrasladosCR");

                entity.Property(e => e.TrasladosDb)
                    .HasColumnType("numeric(18, 2)")
                    .HasColumnName("TrasladosDB");

                entity.Property(e => e.Valor).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.ValorInicial).HasColumnType("numeric(18, 2)");
            });

            modelBuilder.Entity<MpgAcuerdoPago>(entity =>
            {
                entity.HasKey(e => new { e.Bu, e.AnoMes, e.Rubro, e.Recurso });

                entity.ToTable("MPG_AcuerdoPago");

                entity.Property(e => e.Bu)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("BU");

                entity.Property(e => e.AnoMes)
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.Rubro)
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.Recurso)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Adiciones).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.CxP).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.CxPEgreso)
                    .HasColumnType("numeric(18, 2)")
                    .HasColumnName("CxP_Egreso");

                entity.Property(e => e.Disminuciones).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.Egreso).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.IdenMpgAcuerdopago)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_mpg_acuerdopago");

                entity.Property(e => e.Opago)
                    .HasColumnType("numeric(18, 2)")
                    .HasColumnName("OPago");

                entity.Property(e => e.ReservaEgreso)
                    .HasColumnType("numeric(18, 2)")
                    .HasColumnName("Reserva_Egreso");

                entity.Property(e => e.ReservaOpago)
                    .HasColumnType("numeric(18, 2)")
                    .HasColumnName("Reserva_OPago");

                entity.Property(e => e.TrasladosCr)
                    .HasColumnType("numeric(18, 2)")
                    .HasColumnName("TrasladosCR");

                entity.Property(e => e.TrasladosDb)
                    .HasColumnType("numeric(18, 2)")
                    .HasColumnName("TrasladosDB");

                entity.Property(e => e.Valor).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.ValorInicial).HasColumnType("numeric(18, 2)");
            });

            modelBuilder.Entity<MpgApropiacion>(entity =>
            {
                entity.HasKey(e => new { e.Bu, e.Ano, e.Rubro, e.Recurso });

                entity.ToTable("MPG_Apropiacion");

                entity.Property(e => e.Bu)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("BU");

                entity.Property(e => e.Ano)
                    .HasMaxLength(4)
                    .IsUnicode(false);

                entity.Property(e => e.Rubro)
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.Recurso)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Adiciones).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.Cdp)
                    .HasColumnType("numeric(18, 2)")
                    .HasColumnName("CDP");

                entity.Property(e => e.Congelacion).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.Crp)
                    .HasColumnType("numeric(18, 2)")
                    .HasColumnName("CRP");

                entity.Property(e => e.CxP).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.CxPEgreso)
                    .HasColumnType("numeric(18, 2)")
                    .HasColumnName("CxP_Egreso");

                entity.Property(e => e.Disminuciones).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.Egreso).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.Entrada).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.Iden)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("IDEN");

                entity.Property(e => e.Ocp)
                    .HasColumnType("numeric(18, 2)")
                    .HasColumnName("OCP");

                entity.Property(e => e.Opago)
                    .HasColumnType("numeric(18, 2)")
                    .HasColumnName("OPago");

                entity.Property(e => e.Reserva).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.ReservaEgreso)
                    .HasColumnType("numeric(18, 2)")
                    .HasColumnName("Reserva_Egreso");

                entity.Property(e => e.ReservaEntrada)
                    .HasColumnType("numeric(18, 2)")
                    .HasColumnName("Reserva_Entrada");

                entity.Property(e => e.ReservaOpago)
                    .HasColumnType("numeric(18, 2)")
                    .HasColumnName("Reserva_OPago");

                entity.Property(e => e.TrasladosCr)
                    .HasColumnType("numeric(18, 2)")
                    .HasColumnName("TrasladosCR");

                entity.Property(e => e.TrasladosDb)
                    .HasColumnType("numeric(18, 2)")
                    .HasColumnName("TrasladosDB");

                entity.Property(e => e.Valor).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.ValorInicial).HasColumnType("numeric(18, 2)");

                entity.HasOne(d => d.RubroNavigation)
                    .WithMany(p => p.MpgApropiacions)
                    .HasForeignKey(d => d.Rubro)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_MPG_Apropiacion_MPG_Rubro");
            });

            modelBuilder.Entity<MpgCrpOc>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("MPG_CRP_OC");

                entity.Property(e => e.Iden)
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.IdenCrp)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("IdenCRP");

                entity.Property(e => e.IdenOc)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("IdenOC");

                entity.Property(e => e.TipoDocumento)
                    .HasMaxLength(3)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<MpgCrpOcCuota>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("MPG_CRP_OC_Cuotas");

                entity.Property(e => e.Anomes)
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.Iden)
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.IdenRelacionado)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("Iden_Relacionado");

                entity.Property(e => e.Valor).HasColumnType("money");
            });

            modelBuilder.Entity<MpgCrpOcItem>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("MPG_CRP_OC_Items");

                entity.Property(e => e.Abril).HasColumnType("numeric(20, 2)");

                entity.Property(e => e.AbrilP).HasColumnType("numeric(20, 2)");

                entity.Property(e => e.Adiciones).HasColumnType("numeric(20, 2)");

                entity.Property(e => e.Agosto).HasColumnType("numeric(20, 2)");

                entity.Property(e => e.AgostoP).HasColumnType("numeric(20, 2)");

                entity.Property(e => e.CentroCosto)
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.DevolucionCompra).HasColumnType("numeric(20, 2)");

                entity.Property(e => e.Diciembre).HasColumnType("numeric(20, 2)");

                entity.Property(e => e.DiciembreP).HasColumnType("numeric(20, 2)");

                entity.Property(e => e.Disminuciones).HasColumnType("numeric(20, 2)");

                entity.Property(e => e.Enero).HasColumnType("numeric(20, 2)");

                entity.Property(e => e.EneroP).HasColumnType("numeric(20, 2)");

                entity.Property(e => e.Febrero).HasColumnType("numeric(20, 2)");

                entity.Property(e => e.FebreroP).HasColumnType("numeric(20, 2)");

                entity.Property(e => e.Iden)
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.IdenRelacionado)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("Iden_Relacionado");

                entity.Property(e => e.Julio).HasColumnType("numeric(20, 2)");

                entity.Property(e => e.JulioP).HasColumnType("numeric(20, 2)");

                entity.Property(e => e.Junio).HasColumnType("numeric(20, 2)");

                entity.Property(e => e.JunioP).HasColumnType("numeric(20, 2)");

                entity.Property(e => e.Marzo).HasColumnType("numeric(20, 2)");

                entity.Property(e => e.MarzoP).HasColumnType("numeric(20, 2)");

                entity.Property(e => e.Mayo).HasColumnType("numeric(20, 2)");

                entity.Property(e => e.MayoP).HasColumnType("numeric(20, 2)");

                entity.Property(e => e.Noviembre).HasColumnType("numeric(20, 2)");

                entity.Property(e => e.NoviembreP).HasColumnType("numeric(20, 2)");

                entity.Property(e => e.Octubre).HasColumnType("numeric(20, 2)");

                entity.Property(e => e.OctubreP).HasColumnType("numeric(20, 2)");

                entity.Property(e => e.Recurso)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Rubro)
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.Saldo).HasColumnType("numeric(20, 2)");

                entity.Property(e => e.Satisfecho).HasColumnType("numeric(20, 2)");

                entity.Property(e => e.Septiembre).HasColumnType("numeric(20, 2)");

                entity.Property(e => e.SeptiembreP).HasColumnType("numeric(20, 2)");

                entity.Property(e => e.TipoRegistro)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Valor).HasColumnType("numeric(20, 2)");
            });

            modelBuilder.Entity<MpgCuota>(entity =>
            {
                entity.HasKey(e => e.Iden);

                entity.ToTable("MPG_Cuotas");

                entity.Property(e => e.Adiciones).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.Disminuciones).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.IdenRelacionado).HasColumnName("Iden_Relacionado");

                entity.Property(e => e.Saldo).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.Satisfecho).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.TipoRegistro)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Vencimiento)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.VrCuota).HasColumnType("numeric(18, 2)");

                entity.HasOne(d => d.IdenRelacionadoNavigation)
                    .WithMany(p => p.MpgCuota)
                    .HasForeignKey(d => d.IdenRelacionado)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_MPG_Cuotas_MPG_Documento");
            });

            modelBuilder.Entity<MpgDocumento>(entity =>
            {
                entity.HasKey(e => e.Iden)
                    .HasName("PK_MPG_DOCUMENTO");

                entity.ToTable("MPG_Documento");

                entity.HasIndex(e => new { e.FuenteEntrada, e.DocumentoEntrada }, "IX_MPG_DOCUMENTO_DOCUMENTOENTRADA_FUENTEENTRADA");

                entity.HasIndex(e => new { e.FuentePago, e.DocumentoPago }, "IX_MPG_DOCUMENTO_DOCUMENTOPAGO_FUENTEPAGO");

                entity.HasIndex(e => new { e.Fuente, e.Documento }, "IX_MPG_DOCUMENTO_DOCUMENTO_FUENTE");

                entity.HasIndex(e => e.Fecha, "IX_MPG_DOCUMENTO_FECHA");

                entity.HasIndex(e => e.IdenRelacionado, "IX_MPG_DOCUMENTO_IDEN_RELACIONADO");

                entity.HasIndex(e => new { e.TipoDocumento, e.Estado }, "IX_MPG_Documento_TipoDocumento_Estado");

                entity.Property(e => e.AnoMes)
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.Bu)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("BU");

                entity.Property(e => e.CdpsaldoInicial)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CDPSaldoInicial")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.CrpsaldoInicial)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CRPSaldoInicial")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.CxPentrada)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("CxPEntrada");

                entity.Property(e => e.Descripcion)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DocAutorizacion)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Documento)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.DocumentoEntrada)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DocumentoOrden)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.DocumentoPago)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Estado)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.FacturaEntrada)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Fecha)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.FechaAutorizacion)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.FechaGrabacion)
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Fuente)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.FuenteEntrada)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.FuenteOrden)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.FuentePago)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.IdenRelacionado).HasColumnName("Iden_Relacionado");

                entity.Property(e => e.LugarExpedicion)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Observaciones)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.OppsaldoInicial)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("OPPSaldoInicial")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Prorroga)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Proveedor)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.ProveedorEntrada)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.ReferenciaEntrada)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Solicitado)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Tercero)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.TipoCierre)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.TipoDocAutorizacion)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.TipoDocumento)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.TipoFacturaEntrada)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.TipoGasto)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.TipoOpp)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("TipoOPP")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Usuario)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ValorTotal)
                    .HasColumnType("numeric(19, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Vencimiento)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Vigencia)
                    .HasMaxLength(4)
                    .IsUnicode(false);

                entity.Property(e => e.VrRetenciones).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.VrRetencionesDis).HasColumnType("numeric(18, 2)");

                entity.HasOne(d => d.FuenteNavigation)
                    .WithMany(p => p.MpgDocumentos)
                    .HasForeignKey(d => d.Fuente)
                    .HasConstraintName("FK_MPG_Documentos_FUENTES");

                entity.HasOne(d => d.IdenRelacionadoNavigation)
                    .WithMany(p => p.InverseIdenRelacionadoNavigation)
                    .HasForeignKey(d => d.IdenRelacionado)
                    .HasConstraintName("FK_MPG_Documento_MPG_Documento");

                entity.HasOne(d => d.ProveedorNavigation)
                    .WithMany(p => p.MpgDocumentos)
                    .HasForeignKey(d => d.Proveedor)
                    .HasConstraintName("FK_MPG_Documento_PROVEEDORES");

                entity.HasOne(d => d.TerceroNavigation)
                    .WithMany(p => p.MpgDocumentos)
                    .HasForeignKey(d => d.Tercero)
                    .HasConstraintName("FK_MPG_Documento_TERCEROS");

                entity.HasOne(d => d.TipoDocAutorizacionNavigation)
                    .WithMany(p => p.MpgDocumentos)
                    .HasForeignKey(d => d.TipoDocAutorizacion)
                    .HasConstraintName("FK_MPG_Documento_MPG_TipoDocAutorizacion");

                entity.HasOne(d => d.TipoDocumentoNavigation)
                    .WithMany(p => p.MpgDocumentos)
                    .HasForeignKey(d => d.TipoDocumento)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_MPG_Documentos_TIPODCTOS");
            });

            modelBuilder.Entity<MpgDocumentoCesion>(entity =>
            {
                entity.HasKey(e => e.Iden);

                entity.ToTable("MPG_DocumentoCesion");

                entity.HasIndex(e => new { e.Fuente, e.Documento }, "IX_MPG_DOCUMENTOCESION_DOCUMENTO_FUENTE");

                entity.HasIndex(e => e.IdenRelacionado, "IX_MPG_DOCUMENTOCESION_IDEN_RELACIONADO");

                entity.Property(e => e.AnoMes)
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.Descipcion)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.Documento)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Fecha)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.FechaGrabacion).HasColumnType("smalldatetime");

                entity.Property(e => e.Fuente)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.IdenRelacionado).HasColumnName("Iden_Relacionado");

                entity.Property(e => e.Proveedor)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.ProveedorOriginal)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Saldo).HasColumnType("numeric(19, 2)");

                entity.Property(e => e.TipoDocumento)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.UltimaFecha)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.UltimaFuente)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.UltimoDocumento)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.UltimoTipoDocumento)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.UltimoValor).HasColumnType("numeric(19, 2)");

                entity.Property(e => e.Usuario)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdenRelacionadoNavigation)
                    .WithMany(p => p.MpgDocumentoCesions)
                    .HasForeignKey(d => d.IdenRelacionado)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_MPG_DocumentoCesion_MPG_Documento");
            });

            modelBuilder.Entity<MpgItem>(entity =>
            {
                entity.HasKey(e => e.Iden)
                    .HasName("PK_MPG_ITEM");

                entity.ToTable("MPG_Item");

                entity.HasIndex(e => e.IdenRelacionado, "IX_MPG_ITEM_IDEN_RELACIONADO");

                entity.HasIndex(e => new { e.Rubro, e.Recurso }, "IX_MPG_ITEM_RUBRO_RECURSO");

                entity.Property(e => e.Abril).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.AbrilP).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.Adiciones).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.Agosto).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.AgostoP).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.CentroCosto)
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.DevolucionCompra).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.Diciembre).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.DiciembreP).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.Disminuciones).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.Enero).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.EneroP).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.Febrero).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.FebreroP).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.IdenRelacionado).HasColumnName("Iden_Relacionado");

                entity.Property(e => e.Julio).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.JulioP).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.Junio).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.JunioP).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.Marzo).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.MarzoP).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.Mayo).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.MayoP).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.Noviembre).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.NoviembreP).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.Octubre).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.OctubreP).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.Recurso)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Rubro)
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.Saldo).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.Satisfecho).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.Septiembre).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.SeptiembreP).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.TipoRegistro)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Valor).HasColumnType("numeric(19, 2)");

                entity.HasOne(d => d.IdenRelacionadoNavigation)
                    .WithMany(p => p.MpgItems)
                    .HasForeignKey(d => d.IdenRelacionado)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_MPG_Item_MPG_Documento");

                entity.HasOne(d => d.RecursoNavigation)
                    .WithMany(p => p.MpgItems)
                    .HasForeignKey(d => d.Recurso)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_MPG_Item_MPG_Recurso");

                entity.HasOne(d => d.RubroNavigation)
                    .WithMany(p => p.MpgItems)
                    .HasForeignKey(d => d.Rubro)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_MPG_Items_MPG_Rubro");
            });

            modelBuilder.Entity<MpgLiberarSaldo>(entity =>
            {
                entity.HasKey(e => e.Iden);

                entity.ToTable("MPG_LiberarSaldos");

                entity.Property(e => e.Iden)
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Bu)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("BU");

                entity.Property(e => e.Descripcion).IsUnicode(false);

                entity.Property(e => e.DocAutorizacion)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DocumentoF)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DocumentoI)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Estado)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Fecha)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.FechaAutorizacion)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Fuente)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Serie)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.TipoDocAutorizacion)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Vigencia)
                    .HasMaxLength(4)
                    .IsUnicode(false);

                entity.HasOne(d => d.FuenteNavigation)
                    .WithMany(p => p.MpgLiberarSaldos)
                    .HasForeignKey(d => d.Fuente)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_MPG_LiberarSaldos_FUENTES");

                entity.HasOne(d => d.TipoDocAutorizacionNavigation)
                    .WithMany(p => p.MpgLiberarSaldos)
                    .HasForeignKey(d => d.TipoDocAutorizacion)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_MPG_LiberarSaldos_MPG_TipoDocAutorizacion");
            });

            modelBuilder.Entity<MpgLiberarSaldosDet>(entity =>
            {
                entity.HasKey(e => e.Iden);

                entity.ToTable("MPG_LiberarSaldosDet");

                entity.Property(e => e.Iden)
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.IdenMpgdocumento).HasColumnName("Iden_MPGDocumento");

                entity.Property(e => e.IdenRelacionado)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("Iden_Relacionado");

                entity.HasOne(d => d.IdenMpgdocumentoNavigation)
                    .WithMany(p => p.MpgLiberarSaldosDets)
                    .HasForeignKey(d => d.IdenMpgdocumento)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_MPG_LiberarSaldosDet_MPG_Documento");

                entity.HasOne(d => d.IdenRelacionadoNavigation)
                    .WithMany(p => p.MpgLiberarSaldosDets)
                    .HasForeignKey(d => d.IdenRelacionado)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_MPG_LiberarSaldosDet_MPG_LiberarSaldos");
            });

            modelBuilder.Entity<MpgMese>(entity =>
            {
                entity.HasKey(e => e.AnoMes);

                entity.ToTable("MPG_Meses");

                entity.Property(e => e.AnoMes)
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.Cierre)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('N')")
                    .IsFixedLength();

                entity.Property(e => e.IdenMpgMeses)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_mpg_meses");

                entity.Property(e => e.Td057)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("TD_057")
                    .HasDefaultValueSql("('N')")
                    .IsFixedLength();

                entity.Property(e => e.Td058)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("TD_058")
                    .HasDefaultValueSql("('N')")
                    .IsFixedLength();

                entity.Property(e => e.Td059)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("TD_059")
                    .HasDefaultValueSql("('N')")
                    .IsFixedLength();

                entity.Property(e => e.Td060)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("TD_060")
                    .HasDefaultValueSql("('N')")
                    .IsFixedLength();

                entity.Property(e => e.Td061)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("TD_061")
                    .HasDefaultValueSql("('N')")
                    .IsFixedLength();

                entity.Property(e => e.Td062)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("TD_062")
                    .HasDefaultValueSql("('N')")
                    .IsFixedLength();

                entity.Property(e => e.Td063)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("TD_063")
                    .HasDefaultValueSql("('N')")
                    .IsFixedLength();

                entity.Property(e => e.Td064)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("TD_064")
                    .HasDefaultValueSql("('N')")
                    .IsFixedLength();

                entity.Property(e => e.Td065)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("TD_065")
                    .HasDefaultValueSql("('N')")
                    .IsFixedLength();

                entity.Property(e => e.Td066)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("TD_066")
                    .HasDefaultValueSql("('N')")
                    .IsFixedLength();

                entity.Property(e => e.Td071)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("TD_071")
                    .HasDefaultValueSql("('N')")
                    .IsFixedLength();

                entity.Property(e => e.Td072)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("TD_072")
                    .HasDefaultValueSql("('N')")
                    .IsFixedLength();

                entity.Property(e => e.Td073)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("TD_073")
                    .HasDefaultValueSql("('N')")
                    .IsFixedLength();

                entity.Property(e => e.Td074)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("TD_074")
                    .HasDefaultValueSql("('N')")
                    .IsFixedLength();

                entity.Property(e => e.Td075)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("TD_075")
                    .HasDefaultValueSql("('N')")
                    .IsFixedLength();
            });

            modelBuilder.Entity<MpgOppcuota>(entity =>
            {
                entity.HasKey(e => e.Iden);

                entity.ToTable("MPG_OPPCuotas");

                entity.Property(e => e.Disminuciones).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.IdenCuota).HasColumnName("Iden_Cuota");

                entity.Property(e => e.IdenDocAsociado).HasColumnName("Iden_DocAsociado");

                entity.Property(e => e.Saldo).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.Satisfecho).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.Valor).HasColumnType("numeric(18, 2)");

                entity.HasOne(d => d.IdenCuotaNavigation)
                    .WithMany(p => p.MpgOppcuota)
                    .HasForeignKey(d => d.IdenCuota)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_MPG_OPPCuotas_MPG_Cuotas");

                entity.HasOne(d => d.IdenDocAsociadoNavigation)
                    .WithMany(p => p.MpgOppcuota)
                    .HasForeignKey(d => d.IdenDocAsociado)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_MPG_OPPCuotas_MPG_OPPDocAsociados");
            });

            modelBuilder.Entity<MpgOppdocAsociado>(entity =>
            {
                entity.HasKey(e => e.Iden)
                    .HasName("PK_MPG_OPPDOCASOCIADOS");

                entity.ToTable("MPG_OPPDocAsociados");

                entity.Property(e => e.IdenCrpcxp).HasColumnName("Iden_CRPCXP");

                entity.Property(e => e.IdenOpp).HasColumnName("Iden_OPP");

                entity.HasOne(d => d.IdenCrpcxpNavigation)
                    .WithMany(p => p.MpgOppdocAsociadoIdenCrpcxpNavigations)
                    .HasForeignKey(d => d.IdenCrpcxp)
                    .HasConstraintName("FK_MPG_OPPDocAsociados_MPG_Documento1");

                entity.HasOne(d => d.IdenOppNavigation)
                    .WithMany(p => p.MpgOppdocAsociadoIdenOppNavigations)
                    .HasForeignKey(d => d.IdenOpp)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_MPG_OPPDocAsociados_MPG_Documento");
            });

            modelBuilder.Entity<MpgOppentrada>(entity =>
            {
                entity.HasKey(e => e.Iden);

                entity.ToTable("MPG_OPPEntradas");

                entity.HasIndex(e => e.IdenDocAsociado, "IX_MPG_OPPEntradas_Iden_DocAsociado");

                entity.Property(e => e.Disminuciones).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.IdenDocAsociado).HasColumnName("Iden_DocAsociado");

                entity.Property(e => e.IdenEntrada).HasColumnName("Iden_Entrada");

                entity.Property(e => e.Saldo).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.Satisfecho).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.Valor).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.VrRetenciones).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.VrRetencionesDis).HasColumnType("numeric(18, 2)");

                entity.HasOne(d => d.IdenDocAsociadoNavigation)
                    .WithMany(p => p.MpgOppentrada)
                    .HasForeignKey(d => d.IdenDocAsociado)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_MPG_OPPEntradas_MPG_OPPDocAsociados");

                entity.HasOne(d => d.IdenEntradaNavigation)
                    .WithMany(p => p.MpgOppentrada)
                    .HasForeignKey(d => d.IdenEntrada)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_MPG_OPPEntradas_MPG_Documento");
            });

            modelBuilder.Entity<MpgOpprubro>(entity =>
            {
                entity.HasKey(e => e.Iden);

                entity.ToTable("MPG_OPPRubros");

                entity.HasIndex(e => e.IdenEntrada, "IX_MPG_OPPRubros_Iden_Entrada");

                entity.Property(e => e.Disminuciones).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.IdenEntrada).HasColumnName("Iden_Entrada");

                entity.Property(e => e.IdenItem).HasColumnName("Iden_Item");

                entity.Property(e => e.Saldo).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.Satisfecho).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.Valor).HasColumnType("numeric(18, 2)");

                entity.HasOne(d => d.IdenEntradaNavigation)
                    .WithMany(p => p.MpgOpprubros)
                    .HasForeignKey(d => d.IdenEntrada)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_MPG_OPPRubros_MPG_OPPEntradas");
            });

            modelBuilder.Entity<MpgOpptemp>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("MPG_OPPTemp");

                entity.Property(e => e.IdenDoc).HasColumnName("Iden_Doc");

                entity.Property(e => e.IdenMpgOpptemp)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_mpg_opptemp");

                entity.Property(e => e.IdenRelacionado).HasColumnName("Iden_Relacionado");

                entity.Property(e => e.Tipo)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Valor).HasColumnType("numeric(18, 2)");
            });

            modelBuilder.Entity<MpgReciboFactura>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("MPG_ReciboFacturas");

                entity.Property(e => e.Cuenta)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Documento)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Fuente)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.IdenMpgRecibofacturas)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_mpg_recibofacturas");

                entity.Property(e => e.NumeroFactura)
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.Proveedor)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Referencia)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.TipoFactura)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Vencimiento)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .IsFixedLength();
            });

            modelBuilder.Entity<MpgRecurso>(entity =>
            {
                entity.HasKey(e => e.Codigo);

                entity.ToTable("MPG_Recurso");

                entity.Property(e => e.Codigo)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Descripcion)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.IdenMpgRecurso)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_mpg_recurso");
            });

            modelBuilder.Entity<MpgRubro>(entity =>
            {
                entity.HasKey(e => e.Rubro);

                entity.ToTable("MPG_Rubro");

                entity.Property(e => e.Rubro)
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.Clasificacion)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('F')")
                    .IsFixedLength();

                entity.Property(e => e.CuentaCapropiacion)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("CuentaCApropiacion")
                    .IsFixedLength();

                entity.Property(e => e.CuentaCcierre)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("CuentaCCierre")
                    .IsFixedLength();

                entity.Property(e => e.CuentaCcxP)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("CuentaCCxP")
                    .IsFixedLength();

                entity.Property(e => e.CuentaCdp)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("CuentaCDP")
                    .IsFixedLength();

                entity.Property(e => e.CuentaCierreCxP)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CuentaCierreP)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CuentaCierreReserva)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CuentaCreserva)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("CuentaCReserva")
                    .IsFixedLength();

                entity.Property(e => e.CuentaObligacion)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CuentaOreserva)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("CuentaOReserva")
                    .IsFixedLength();

                entity.Property(e => e.CuentaPapropiacion)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("CuentaPApropiacion")
                    .IsFixedLength();

                entity.Property(e => e.CuentaPcierre)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("CuentaPCierre")
                    .IsFixedLength();

                entity.Property(e => e.CuentaPcxP)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("CuentaPCxP")
                    .IsFixedLength();

                entity.Property(e => e.CuentaPreserva)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("CuentaPReserva")
                    .IsFixedLength();

                entity.Property(e => e.CuentaRegistro)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Dependencia)
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.Descripcion)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.IdenMpgRubro)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_mpg_rubro");

                entity.Property(e => e.Ncd).HasColumnName("NCD");

                entity.Property(e => e.Recurso)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Tipo)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.HasOne(d => d.CuentaCapropiacionNavigation)
                    .WithMany(p => p.MpgRubroCuentaCapropiacionNavigations)
                    .HasForeignKey(d => d.CuentaCapropiacion)
                    .HasConstraintName("FK_MPG_Rubro_MAECONT1");

                entity.HasOne(d => d.CuentaCcierreNavigation)
                    .WithMany(p => p.MpgRubroCuentaCcierreNavigations)
                    .HasForeignKey(d => d.CuentaCcierre)
                    .HasConstraintName("FK_MPG_Rubro_MAECONT6");

                entity.HasOne(d => d.CuentaCcxPNavigation)
                    .WithMany(p => p.MpgRubroCuentaCcxPNavigations)
                    .HasForeignKey(d => d.CuentaCcxP)
                    .HasConstraintName("FK_MPG_Rubro_MAECONT13");

                entity.HasOne(d => d.CuentaCdpNavigation)
                    .WithMany(p => p.MpgRubroCuentaCdpNavigations)
                    .HasForeignKey(d => d.CuentaCdp)
                    .HasConstraintName("FK_MPG_Rubro_MAECONT2");

                entity.HasOne(d => d.CuentaCierreCxPNavigation)
                    .WithMany(p => p.MpgRubroCuentaCierreCxPNavigations)
                    .HasForeignKey(d => d.CuentaCierreCxP)
                    .HasConstraintName("FK_MPG_Rubro_MAECONT14");

                entity.HasOne(d => d.CuentaCierrePNavigation)
                    .WithMany(p => p.MpgRubroCuentaCierrePNavigations)
                    .HasForeignKey(d => d.CuentaCierreP)
                    .HasConstraintName("FK_MPG_Rubro_MAECONT9");

                entity.HasOne(d => d.CuentaCierreReservaNavigation)
                    .WithMany(p => p.MpgRubroCuentaCierreReservaNavigations)
                    .HasForeignKey(d => d.CuentaCierreReserva)
                    .HasConstraintName("FK_MPG_Rubro_MAECONT12");

                entity.HasOne(d => d.CuentaCreservaNavigation)
                    .WithMany(p => p.MpgRubroCuentaCreservaNavigations)
                    .HasForeignKey(d => d.CuentaCreserva)
                    .HasConstraintName("FK_MPG_Rubro_MAECONT8");

                entity.HasOne(d => d.CuentaObligacionNavigation)
                    .WithMany(p => p.MpgRubroCuentaObligacionNavigations)
                    .HasForeignKey(d => d.CuentaObligacion)
                    .HasConstraintName("FK_MPG_Rubro_MAECONT4");

                entity.HasOne(d => d.CuentaOreservaNavigation)
                    .WithMany(p => p.MpgRubroCuentaOreservaNavigations)
                    .HasForeignKey(d => d.CuentaOreserva)
                    .HasConstraintName("FK_MPG_Rubro_MAECONT10");

                entity.HasOne(d => d.CuentaPapropiacionNavigation)
                    .WithMany(p => p.MpgRubroCuentaPapropiacionNavigations)
                    .HasForeignKey(d => d.CuentaPapropiacion)
                    .HasConstraintName("FK_MPG_Rubro_MAECONT");

                entity.HasOne(d => d.CuentaPcierreNavigation)
                    .WithMany(p => p.MpgRubroCuentaPcierreNavigations)
                    .HasForeignKey(d => d.CuentaPcierre)
                    .HasConstraintName("FK_MPG_Rubro_MAECONT5");

                entity.HasOne(d => d.CuentaPcxPNavigation)
                    .WithMany(p => p.MpgRubroCuentaPcxPNavigations)
                    .HasForeignKey(d => d.CuentaPcxP)
                    .HasConstraintName("FK_MPG_Rubro_MAECONT11");

                entity.HasOne(d => d.CuentaPreservaNavigation)
                    .WithMany(p => p.MpgRubroCuentaPreservaNavigations)
                    .HasForeignKey(d => d.CuentaPreserva)
                    .HasConstraintName("FK_MPG_Rubro_MAECONT7");

                entity.HasOne(d => d.CuentaRegistroNavigation)
                    .WithMany(p => p.MpgRubroCuentaRegistroNavigations)
                    .HasForeignKey(d => d.CuentaRegistro)
                    .HasConstraintName("FK_MPG_Rubro_MAECONT3");

                entity.HasOne(d => d.RecursoNavigation)
                    .WithMany(p => p.MpgRubros)
                    .HasForeignKey(d => d.Recurso)
                    .HasConstraintName("FK_MPG_Rubro_MPG_Recurso");
            });

            modelBuilder.Entity<MpgTempItem>(entity =>
            {
                entity.HasKey(e => e.Iden);

                entity.ToTable("MPG_TempItems");

                entity.HasIndex(e => new { e.SpId, e.Iden }, "IX_MPG_TEMPITEMS_IDEN_SPID");

                entity.HasIndex(e => e.SpId, "IX_MPG_TEMPITEMS_SPID");

                entity.Property(e => e.CentroCosto)
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.CuentaCredito)
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.CuentaCreditoOrden)
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.CuentaDebito)
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.CuentaDebitoOrden)
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.DescripcionCredito)
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.DescripcionDebito)
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.Recurso)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Rubro)
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.Valor).HasColumnType("numeric(18, 2)");
            });

            modelBuilder.Entity<MpgTipoDocAutorizacion>(entity =>
            {
                entity.HasKey(e => e.Codigo);

                entity.ToTable("MPG_TipoDocAutorizacion");

                entity.Property(e => e.Codigo)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Descripcion)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.IdenMpgTipodocautorizacion)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_mpg_tipodocautorizacion");
            });

            modelBuilder.Entity<MpgWsDocumento>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("MPG_WS_Documento");

                entity.Property(e => e.FechaProceso)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Iden)
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.IdenMpgDocumento)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("Iden_MPG_Documento");

                entity.Property(e => e.IdenMpgNomina)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("Iden_MPG_Nomina");

                entity.Property(e => e.IdenProgramacion)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("Iden_Programacion");

                entity.Property(e => e.IdenRelacionado)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("Iden_Relacionado");

                entity.Property(e => e.Respuesta).IsUnicode(false);

                entity.Property(e => e.Xmlvalue)
                    .IsUnicode(false)
                    .HasColumnName("XMLValue");
            });

            modelBuilder.Entity<NcftercerosTemp>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("NCFTerceros_Temp");

                entity.Property(e => e.CampoTercero)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Campo_Tercero");

                entity.Property(e => e.IdenNcftercerosTemp)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_ncfterceros_temp");

                entity.Property(e => e.NoColumna)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Numcon>(entity =>
            {
                entity.HasKey(e => new { e.Idfuente, e.Inicio })
                    .IsClustered(false);

                entity.ToTable("NUMCONS");

                entity.HasIndex(e => new { e.Idfuente, e.Inicio }, "IX_NUMCONS_idfuente_inicio")
                    .IsClustered();

                entity.Property(e => e.Idfuente)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("IDFUENTE")
                    .IsFixedLength();

                entity.Property(e => e.Inicio)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("INICIO")
                    .IsFixedLength();

                entity.Property(e => e.Ano)
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .HasColumnName("ANO")
                    .IsFixedLength();

                entity.Property(e => e.IdenNumcons)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_numcons");

                entity.Property(e => e.Numconse).HasColumnName("NUMCONSE");

                entity.HasOne(d => d.IdfuenteNavigation)
                    .WithMany(p => p.Numcons)
                    .HasForeignKey(d => d.Idfuente)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_NUMCONS_FUENTES");
            });

            modelBuilder.Entity<Numconsadc>(entity =>
            {
                entity.ToTable("NUMCONSADC");

                entity.Property(e => e.Id).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.Consecutivo).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.IdenNumconsadc)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_numconsadc");

                entity.Property(e => e.Nombre)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<NumeFacConfiguracion>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("NumeFacConfiguracion");

                entity.Property(e => e.IdenNumefacconfiguracion)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_numefacconfiguracion");

                entity.Property(e => e.NumeFacBasedoEn)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.SeperadorCampos)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.SeperadorCamposOtro)
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Oficina>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("OFICINA");

                entity.Property(e => e.Descripcion)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPCION")
                    .IsFixedLength();

                entity.Property(e => e.Idbanco)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("IDBANCO")
                    .IsFixedLength();

                entity.Property(e => e.IdenOficina)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_oficina");

                entity.Property(e => e.Oficina1)
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .HasColumnName("OFICINA")
                    .IsFixedLength();

                entity.Property(e => e.Regional)
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .HasColumnName("REGIONAL")
                    .IsFixedLength();
            });

            modelBuilder.Entity<OpcionesAutorizacion>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("OpcionesAutorizacion");

                entity.HasIndex(e => e.IdMenu, "UQ_OpcionesAutorizacion_IdMenu")
                    .IsUnique();

                entity.Property(e => e.IdenOpcionesautorizacion)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_opcionesautorizacion");

                entity.Property(e => e.Opcion)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdMenuNavigation)
                    .WithOne()
                    .HasForeignKey<OpcionesAutorizacion>(d => d.IdMenu)
                    .HasConstraintName("FK_OpcionesAutorizacion_Menu");
            });

            modelBuilder.Entity<OpcionesProceso>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("OpcionesProceso");

                entity.Property(e => e.Iden).ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<Pago3rosBu>(entity =>
            {
                entity.HasKey(e => new { e.Anomes, e.Bu, e.Codicta, e.Idtercero });

                entity.ToTable("PAGO3ROS_BU");

                entity.HasIndex(e => new { e.Bu, e.Codicta, e.Idtercero, e.Anomes }, "IX_PAGO3ROS_BU_BU_CODICTA_IDTERCERO_ANOMES");

                entity.HasIndex(e => e.Codicta, "IX_PAGO3ROS_BU_MAECONT");

                entity.Property(e => e.Anomes)
                    .HasMaxLength(7)
                    .IsUnicode(false)
                    .HasColumnName("ANOMES")
                    .IsFixedLength();

                entity.Property(e => e.Bu)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("BU");

                entity.Property(e => e.Codicta)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("CODICTA")
                    .IsFixedLength();

                entity.Property(e => e.Idtercero)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("IDTERCERO");

                entity.Property(e => e.IdenPago3rosBu)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_pago3ros_bu");

                entity.Property(e => e.Mvcr)
                    .HasColumnType("money")
                    .HasColumnName("MVCR");

                entity.Property(e => e.Mvcrmcta)
                    .HasColumnType("money")
                    .HasColumnName("MVCRMCTA");

                entity.Property(e => e.Mvcrmon1)
                    .HasColumnType("money")
                    .HasColumnName("MVCRMON1");

                entity.Property(e => e.Mvcrmon2)
                    .HasColumnType("money")
                    .HasColumnName("MVCRMON2");

                entity.Property(e => e.Mvdb)
                    .HasColumnType("money")
                    .HasColumnName("MVDB");

                entity.Property(e => e.Mvdbmcta)
                    .HasColumnType("money")
                    .HasColumnName("MVDBMCTA");

                entity.Property(e => e.Mvdbmon1)
                    .HasColumnType("money")
                    .HasColumnName("MVDBMON1");

                entity.Property(e => e.Mvdbmon2)
                    .HasColumnType("money")
                    .HasColumnName("MVDBMON2");

                entity.Property(e => e.Sdaccta)
                    .HasColumnType("money")
                    .HasColumnName("SDACCTA");

                entity.Property(e => e.SdacctaT)
                    .HasColumnType("money")
                    .HasColumnName("SDACCTA_T");

                entity.Property(e => e.Sdacmcta)
                    .HasColumnType("money")
                    .HasColumnName("SDACMCTA");

                entity.Property(e => e.SdacmctaT)
                    .HasColumnType("money")
                    .HasColumnName("SDACMCTA_T");

                entity.Property(e => e.Sdacmon1)
                    .HasColumnType("money")
                    .HasColumnName("SDACMON1");

                entity.Property(e => e.Sdacmon2)
                    .HasColumnType("money")
                    .HasColumnName("SDACMON2");

                entity.Property(e => e.Sdancta)
                    .HasColumnType("money")
                    .HasColumnName("SDANCTA");

                entity.Property(e => e.SdanctaT)
                    .HasColumnType("money")
                    .HasColumnName("SDANCTA_T");

                entity.Property(e => e.Sdanmcta)
                    .HasColumnType("money")
                    .HasColumnName("SDANMCTA");

                entity.Property(e => e.SdanmctaT)
                    .HasColumnType("money")
                    .HasColumnName("SDANMCTA_T");

                entity.Property(e => e.Sdanmon1)
                    .HasColumnType("money")
                    .HasColumnName("SDANMON1");

                entity.Property(e => e.Sdanmon2)
                    .HasColumnType("money")
                    .HasColumnName("SDANMON2");

                entity.Property(e => e.VersionDeLaFila)
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.BuNavigation)
                    .WithMany(p => p.Pago3rosBus)
                    .HasForeignKey(d => d.Bu)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PAGO3ROS_BU_BU");

                entity.HasOne(d => d.CodictaNavigation)
                    .WithMany(p => p.Pago3rosBus)
                    .HasForeignKey(d => d.Codicta)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PAGO3ROS_BU_MAECONT");

                entity.HasOne(d => d.IdterceroNavigation)
                    .WithMany(p => p.Pago3rosBus)
                    .HasForeignKey(d => d.Idtercero)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PAGO3ROS_BU_TERCEROS");
            });

            modelBuilder.Entity<Pago3rosI>(entity =>
            {
                entity.HasKey(e => e.Anomes)
                    .IsClustered(false);

                entity.ToTable("PAGO3ROS_I");

                entity.Property(e => e.Anomes)
                    .HasMaxLength(7)
                    .IsUnicode(false)
                    .HasColumnName("ANOMES");

                entity.Property(e => e.IdenPago3rosI)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_pago3ros_i");

                entity.Property(e => e.Mvcr)
                    .HasColumnType("money")
                    .HasColumnName("MVCR");

                entity.Property(e => e.Mvcrmcta)
                    .HasColumnType("money")
                    .HasColumnName("MVCRMCTA");

                entity.Property(e => e.Mvcrmon1)
                    .HasColumnType("money")
                    .HasColumnName("MVCRMON1");

                entity.Property(e => e.Mvcrmon2)
                    .HasColumnType("money")
                    .HasColumnName("MVCRMON2");

                entity.Property(e => e.Mvdb)
                    .HasColumnType("money")
                    .HasColumnName("MVDB");

                entity.Property(e => e.Mvdbmcta)
                    .HasColumnType("money")
                    .HasColumnName("MVDBMCTA");

                entity.Property(e => e.Mvdbmon1)
                    .HasColumnType("money")
                    .HasColumnName("MVDBMON1");

                entity.Property(e => e.Mvdbmon2)
                    .HasColumnType("money")
                    .HasColumnName("MVDBMON2");

                entity.Property(e => e.Sdaccta)
                    .HasColumnType("money")
                    .HasColumnName("SDACCTA");

                entity.Property(e => e.Sdacmcta)
                    .HasColumnType("money")
                    .HasColumnName("SDACMCTA");

                entity.Property(e => e.Sdacmon1)
                    .HasColumnType("money")
                    .HasColumnName("SDACMON1");

                entity.Property(e => e.Sdacmon2)
                    .HasColumnType("money")
                    .HasColumnName("SDACMON2");

                entity.Property(e => e.Sdancta)
                    .HasColumnType("money")
                    .HasColumnName("SDANCTA");

                entity.Property(e => e.Sdanmcta)
                    .HasColumnType("money")
                    .HasColumnName("SDANMCTA");

                entity.Property(e => e.Sdanmon1)
                    .HasColumnType("money")
                    .HasColumnName("SDANMON1");

                entity.Property(e => e.Sdanmon2)
                    .HasColumnType("money")
                    .HasColumnName("SDANMON2");
            });

            modelBuilder.Entity<Pago3rosLibroPrincipal>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PAGO3ROS_LibroPrincipal");

                entity.Property(e => e.Anomes)
                    .HasMaxLength(7)
                    .IsUnicode(false)
                    .HasColumnName("ANOMES")
                    .IsFixedLength();

                entity.Property(e => e.Codicta)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("CODICTA")
                    .IsFixedLength();

                entity.Property(e => e.Idtercero)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("IDTERCERO");

                entity.Property(e => e.Mvcr)
                    .HasColumnType("money")
                    .HasColumnName("MVCR");

                entity.Property(e => e.Mvcrmcta)
                    .HasColumnType("money")
                    .HasColumnName("MVCRMCTA");

                entity.Property(e => e.Mvdb)
                    .HasColumnType("money")
                    .HasColumnName("MVDB");

                entity.Property(e => e.Mvdbmcta)
                    .HasColumnType("money")
                    .HasColumnName("MVDBMCTA");

                entity.Property(e => e.Sdaccta)
                    .HasColumnType("money")
                    .HasColumnName("SDACCTA");

                entity.Property(e => e.Sdacmcta)
                    .HasColumnType("money")
                    .HasColumnName("SDACMCTA");

                entity.Property(e => e.Sdancta)
                    .HasColumnType("money")
                    .HasColumnName("SDANCTA");

                entity.Property(e => e.Sdanmcta)
                    .HasColumnType("money")
                    .HasColumnName("SDANMCTA");
            });

            modelBuilder.Entity<PagosAcartera>(entity =>
            {
                entity.HasKey(e => e.Iden);

                entity.ToTable("PagosACartera");

                entity.HasIndex(e => new { e.Cliente, e.Cuenta, e.TipoFactura, e.NumeroFactura, e.Referencia, e.Estado }, "IX_PagosACartera_Cliente_Cuenta_TipoFactura_NumeroFactura_Referencia_Estado");

                entity.HasIndex(e => new { e.Proveedor, e.Cuenta, e.TipoFactura, e.NumeroFactura, e.Referencia, e.Estado }, "IX_PagosACartera_Proveedor_Cuenta_TipoFactura_NumeroFactura_Referencia_Estado");

                entity.Property(e => e.Cliente)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Cuenta)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Documento)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Estado)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Fuente)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.NumeroFactura)
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.Proveedor)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Referencia)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.TipoFactura)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.HasOne(d => d.ClienteNavigation)
                    .WithMany(p => p.PagosAcarteras)
                    .HasForeignKey(d => d.Cliente)
                    .HasConstraintName("FK_PagosACartera_CLIENTES");

                entity.HasOne(d => d.CuentaNavigation)
                    .WithMany(p => p.PagosAcarteras)
                    .HasForeignKey(d => d.Cuenta)
                    .HasConstraintName("FK_PagosACartera_MAECONT");

                entity.HasOne(d => d.FuenteNavigation)
                    .WithMany(p => p.PagosAcarteras)
                    .HasForeignKey(d => d.Fuente)
                    .HasConstraintName("FK_PagosACartera_FUENTES");

                entity.HasOne(d => d.ProveedorNavigation)
                    .WithMany(p => p.PagosAcarteras)
                    .HasForeignKey(d => d.Proveedor)
                    .HasConstraintName("FK_PagosACartera_PROVEEDORES");

                entity.HasOne(d => d.TipoFacturaNavigation)
                    .WithMany(p => p.PagosAcarteras)
                    .HasForeignKey(d => d.TipoFactura)
                    .HasConstraintName("FK_PagosACartera_TIPOFACT");

                entity.HasOne(d => d.Document)
                    .WithMany(p => p.PagosAcarteras)
                    .HasForeignKey(d => new { d.Fuente, d.Documento })
                    .HasConstraintName("FK_PagosACartera_DOCUMENT");
            });

            modelBuilder.Entity<Paise>(entity =>
            {
                entity.HasKey(e => e.Codigo)
                    .IsClustered(false);

                entity.HasIndex(e => e.IdenPais, "IX_Paises_Iden_Pais")
                    .IsUnique();

                entity.Property(e => e.Codigo)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Descripcion)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.IdenPais)
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_Pais");

                entity.Property(e => e.VersionDeLaFila)
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<ParamCentroCosto>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ParamCentroCosto");

                entity.Property(e => e.IdParam).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.IdParamCentroCosto)
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Idcenco)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("IDCENCO");

                entity.Property(e => e.Tipo)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("TIPO")
                    .IsFixedLength();
            });

            modelBuilder.Entity<ParamGrupoBu>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ParamGrupoBu");

                entity.Property(e => e.Bu)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Idparam)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("idparam");

                entity.Property(e => e.Idparamgr)
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("idparamgr");

                entity.Property(e => e.Tipo)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();
            });

            modelBuilder.Entity<ParamGrupoBuGen>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ParamGrupoBuGen");

                entity.Property(e => e.Idparam)
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("idparam");

                entity.Property(e => e.Idreporte)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("idreporte");

                entity.Property(e => e.Tipo)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.Usuario)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("usuario");
            });

            modelBuilder.Entity<ParamPresuPrivado>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ParamPresuPrivado");

                entity.Property(e => e.CodPresu)
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.IdParam).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.IdParamPresuPrivado)
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Tipo)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("TIPO")
                    .IsFixedLength();
            });

            modelBuilder.Entity<Paramdetc>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("PARAMDETC");

                entity.Property(e => e.Cuenta)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("CUENTA");

                entity.Property(e => e.Idparam)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("IDPARAM");

                entity.Property(e => e.Idparamdetc)
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("IDPARAMDETC");

                entity.Property(e => e.Tipo)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("TIPO")
                    .IsFixedLength();
            });

            modelBuilder.Entity<Paramdetg>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("PARAMDETG");

                entity.Property(e => e.Grupo)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("GRUPO");

                entity.Property(e => e.Idparam)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("IDPARAM");

                entity.Property(e => e.Idparamdetg)
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("IDPARAMDETG");

                entity.Property(e => e.Tipo)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("TIPO")
                    .IsFixedLength();
            });

            modelBuilder.Entity<Parametr>(entity =>
            {
                entity.HasKey(e => e.Parametro)
                    .HasName("pk_parametr");

                entity.ToTable("PARAMETR");

                entity.HasIndex(e => e.Parametro, "UQ_PARAMETR_Parametro")
                    .IsUnique();

                entity.HasIndex(e => e.Parametro, "UQ_Parameter_Parametro")
                    .IsUnique();

                entity.Property(e => e.Parametro)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("PARAMETRO");

                entity.Property(e => e.CodeHelp)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("Code_Help");

                entity.Property(e => e.ConditionActive)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("Condition_Active");

                entity.Property(e => e.ConditionSave)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("Condition_Save");

                entity.Property(e => e.Decimales)
                    .HasColumnName("DECIMALES")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Descpar)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("DESCPAR");

                entity.Property(e => e.Descripcion)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.IdDataType).HasColumnName("Id_Data_Type");

                entity.Property(e => e.IdenParametr)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_parametr");

                entity.Property(e => e.IsActive).HasColumnName("Is_Active");

                entity.Property(e => e.IsParent).HasColumnName("Is_Parent");

                entity.Property(e => e.IsPassword).HasColumnName("Is_Password");

                entity.Property(e => e.IsRequired).HasColumnName("Is_Required");

                entity.Property(e => e.ListaPosibilidades)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')")
                    .IsFixedLength();

                entity.Property(e => e.Longitud).HasColumnName("LONGITUD");

                entity.Property(e => e.Onlyread)
                    .HasColumnName("ONLYREAD")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.OpcionalAyuda)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')")
                    .IsFixedLength();

                entity.Property(e => e.Orden).HasColumnName("ORDEN");

                entity.Property(e => e.Pariente)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("PARIENTE");

                entity.Property(e => e.PathParentCode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Path_Parent_Code");

                entity.Property(e => e.Pictpar)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("PICTPAR");

                entity.Property(e => e.Placeholder)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.SeccionAyuda)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')")
                    .IsFixedLength();

                entity.Property(e => e.Tipo)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("TIPO")
                    .IsFixedLength();

                entity.Property(e => e.Ultupd)
                    .HasColumnType("datetime")
                    .HasColumnName("ULTUPD")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.UserFrom)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Valipar)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("VALIPAR");

                entity.Property(e => e.Valopar)
                    .HasMaxLength(8000)
                    .IsUnicode(false)
                    .HasColumnName("VALOPAR");

                entity.Property(e => e.ValueDefault)
                    .IsUnicode(false)
                    .HasColumnName("Value_Default");

                entity.Property(e => e.ValueSelect)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("Value_Select");

                entity.Property(e => e.VersionDeLaFila)
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.Whoupd)
                    .HasMaxLength(900)
                    .IsUnicode(false)
                    .HasColumnName("WHOUPD");
            });

            modelBuilder.Entity<Paramgen>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("PARAMGEN");

                entity.Property(e => e.Idparam)
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("IDPARAM");

                entity.Property(e => e.Idreporte)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("IDREPORTE");

                entity.Property(e => e.Tipo)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("TIPO")
                    .IsFixedLength();

                entity.Property(e => e.Usuario)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("USUARIO");
            });

            modelBuilder.Entity<Perfil>(entity =>
            {
                entity.HasKey(e => e.IdAspNetRoles);

                entity.ToTable("Perfil");

                entity.HasIndex(e => e.NormalizedName, "UQ_Perfil_NormalizedName")
                    .IsUnique();

                entity.Property(e => e.IdAspNetRoles)
                    .HasMaxLength(900)
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.DescName).HasMaxLength(250);

                entity.Property(e => e.Description).HasMaxLength(500);

                entity.Property(e => e.IdBit).HasColumnName("Id_Bit");

                entity.Property(e => e.IdPerfil).ValueGeneratedOnAdd();

                entity.Property(e => e.Nombre).HasMaxLength(512);

                entity.Property(e => e.NormalizedName).HasMaxLength(512);
            });

            modelBuilder.Entity<PerfilBackup>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Perfil_backup");

                entity.Property(e => e.Descripcion)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("descripcion");

                entity.Property(e => e.NameOpcion)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Opcion).HasColumnName("OPCION");

                entity.Property(e => e.Perfil)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("PERFIL");
            });

            modelBuilder.Entity<PerfilProceso>(entity =>
            {
                entity.HasKey(e => new { e.IdPerfil, e.IdProceso });

                entity.ToTable("PerfilProceso");

                entity.Property(e => e.IdenPerfilproceso)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_perfilproceso");
            });

            modelBuilder.Entity<PerfilTemp>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("perfil_temp");

                entity.Property(e => e.Descripcion)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("descripcion");

                entity.Property(e => e.NameOpcion)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Opcion).HasColumnName("OPCION");

                entity.Property(e => e.Perfil)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("PERFIL");
            });

            modelBuilder.Entity<Perfile>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Perfiles");

                entity.Property(e => e.Menu)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Perfil).HasMaxLength(512);
            });

            modelBuilder.Entity<PersonalAutorizacion>(entity =>
            {
                entity.HasKey(e => e.Usuario);

                entity.ToTable("PersonalAutorizacion");

                entity.Property(e => e.Usuario)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Firma)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.IdenPersonalautorizacion)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_personalautorizacion");

                entity.HasOne(d => d.UsuarioNavigation)
                    .WithOne(p => p.PersonalAutorizacion)
                    .HasForeignKey<PersonalAutorizacion>(d => d.Usuario)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PersonalAutorizacion_USUARIOS");
            });

            modelBuilder.Entity<PersonalAutorizacionOpcione>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("PersonalAutorizacion_Opciones");

                entity.HasIndex(e => new { e.Usuario, e.IdMenu }, "UQ_PersonalAutorizacion_Opciones_Usuario_IdMenu")
                    .IsUnique();

                entity.Property(e => e.IdenPersonalautorizacionOpciones)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_personalautorizacion_opciones");

                entity.Property(e => e.Usuario)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdMenuNavigation)
                    .WithMany()
                    .HasForeignKey(d => d.IdMenu)
                    .HasConstraintName("FK_PersonalAutorizacion_Opciones_Menu");

                entity.HasOne(d => d.UsuarioNavigation)
                    .WithMany()
                    .HasForeignKey(d => d.Usuario)
                    .HasConstraintName("FK_PersonalAutorizacion_Opciones_PersonalAutorizacion");
            });

            modelBuilder.Entity<PersonalAutorizacionUsuario>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("PersonalAutorizacion_Usuarios");

                entity.Property(e => e.Iden).ValueGeneratedOnAdd();

                entity.Property(e => e.Personal)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Usuario)
                    .HasMaxLength(250)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Plantilla>(entity =>
            {
                entity.HasKey(e => e.Nombre);

                entity.ToTable("PLANTILLAS");

                entity.Property(e => e.Nombre)
                    .HasMaxLength(512)
                    .IsUnicode(false)
                    .HasColumnName("NOMBRE");

                entity.Property(e => e.Dauxiliar)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("DAUXILIAR")
                    .IsFixedLength();

                entity.Property(e => e.Dbu)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("DBU")
                    .HasDefaultValueSql("(' ')")
                    .IsFixedLength();

                entity.Property(e => e.Dcentrocosto)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("DCENTROCOSTO")
                    .IsFixedLength();

                entity.Property(e => e.Dcuenta)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("DCUENTA")
                    .IsFixedLength();

                entity.Property(e => e.Ddescripcion)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("DDESCRIPCION")
                    .IsFixedLength();

                entity.Property(e => e.Descripcion)
                    .HasMaxLength(512)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPCION");

                entity.Property(e => e.Dfecha)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("DFECHA")
                    .IsFixedLength();

                entity.Property(e => e.Dfuente)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("DFUENTE")
                    .IsFixedLength();

                entity.Property(e => e.Ditem)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("DITEM")
                    .IsFixedLength();

                entity.Property(e => e.DocumentoBase)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("DOCUMENTO_BASE")
                    .IsFixedLength();

                entity.Property(e => e.Dserie)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("DSerie")
                    .IsFixedLength();

                entity.Property(e => e.DtasaCambio)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("DTasaCambio")
                    .HasDefaultValueSql("(' ')")
                    .IsFixedLength();

                entity.Property(e => e.Dtercero)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("DTERCERO")
                    .IsFixedLength();

                entity.Property(e => e.FuenteBase)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("FUENTE_BASE")
                    .IsFixedLength();

                entity.Property(e => e.IdenPlantillas)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_plantillas");

                entity.Property(e => e.Tautorizacion)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("TAUTORIZACION")
                    .IsFixedLength();

                entity.Property(e => e.Tauxiliar)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("TAUXILIAR")
                    .IsFixedLength();

                entity.Property(e => e.Tbanco)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("TBANCO")
                    .IsFixedLength();

                entity.Property(e => e.Tbaseimpuesto)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("TBASEIMPUESTO")
                    .HasDefaultValueSql("('')")
                    .IsFixedLength();

                entity.Property(e => e.Tbeneficiario)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("TBENEFICIARIO")
                    .HasDefaultValueSql("('')")
                    .IsFixedLength();

                entity.Property(e => e.Tbu)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("TBU")
                    .HasDefaultValueSql("(' ')")
                    .IsFixedLength();

                entity.Property(e => e.Tcentrocosto)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("TCENTROCOSTO")
                    .IsFixedLength();

                entity.Property(e => e.Tcliprv)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("TCLIPRV")
                    .IsFixedLength();

                entity.Property(e => e.Tcuenta)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("TCUENTA")
                    .IsFixedLength();

                entity.Property(e => e.Tdatosimpuesto)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("TDATOSIMPUESTO")
                    .HasDefaultValueSql("('')")
                    .IsFixedLength();

                entity.Property(e => e.Tdescripcion)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("TDESCRIPCION")
                    .IsFixedLength();

                entity.Property(e => e.TfechaCaducidad)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("TFechaCaducidad")
                    .IsFixedLength();

                entity.Property(e => e.Tfechafact)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("TFECHAFACT")
                    .IsFixedLength();

                entity.Property(e => e.Titem)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("TITEM")
                    .IsFixedLength();

                entity.Property(e => e.Tncf)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("TNCF")
                    .IsFixedLength();

                entity.Property(e => e.Tnit)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("TNIT")
                    .IsFixedLength();

                entity.Property(e => e.Tnofactura)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("TNOFACTURA")
                    .IsFixedLength();

                entity.Property(e => e.Tplaza)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("TPLAZA")
                    .IsFixedLength();

                entity.Property(e => e.Tpropiedad1)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("TPropiedad1")
                    .IsFixedLength();

                entity.Property(e => e.Tpropiedad2)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("TPropiedad2")
                    .IsFixedLength();

                entity.Property(e => e.Tpropiedad3)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("TPropiedad3")
                    .IsFixedLength();

                entity.Property(e => e.Tpropiedad4)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("TPropiedad4")
                    .IsFixedLength();

                entity.Property(e => e.Tpropiedad5)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("TPropiedad5")
                    .IsFixedLength();

                entity.Property(e => e.Treferencia)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("TREFERENCIA")
                    .IsFixedLength();

                entity.Property(e => e.Treserva)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("TRESERVA")
                    .HasDefaultValueSql("('')")
                    .IsFixedLength();

                entity.Property(e => e.Trubro)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("TRUBRO")
                    .HasDefaultValueSql("('')")
                    .IsFixedLength();

                entity.Property(e => e.Tserie)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("TSERIE")
                    .IsFixedLength();

                entity.Property(e => e.Ttasa)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("TTASA")
                    .HasDefaultValueSql("('')")
                    .IsFixedLength();

                entity.Property(e => e.TtasaCambio)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("TTasaCambio")
                    .HasDefaultValueSql("(' ')")
                    .IsFixedLength();

                entity.Property(e => e.Ttipofactura)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("TTIPOFACTURA")
                    .IsFixedLength();

                entity.Property(e => e.Tvalor)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("TVALOR")
                    .IsFixedLength();

                entity.Property(e => e.Tvalormoneda)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("TVALORMONEDA")
                    .HasDefaultValueSql("('')")
                    .IsFixedLength();

                entity.Property(e => e.Tvencimiento)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("TVENCIMIENTO")
                    .IsFixedLength();

                entity.Property(e => e.Tvendedor)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("TVENDEDOR")
                    .IsFixedLength();

                entity.Property(e => e.Tvoucher)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("TVoucher")
                    .HasDefaultValueSql("(' ')")
                    .IsFixedLength();

                entity.Property(e => e.Tvrunid1)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("TVRUNID1")
                    .HasDefaultValueSql("('')")
                    .IsFixedLength();

                entity.Property(e => e.Tvrunid2)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("TVRUNID2")
                    .HasDefaultValueSql("('')")
                    .IsFixedLength();

                entity.Property(e => e.Tvrunid3)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("TVRUNID3")
                    .HasDefaultValueSql("('')")
                    .IsFixedLength();

                entity.Property(e => e.Tzona)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("TZONA")
                    .IsFixedLength();
            });

            modelBuilder.Entity<PlantillaDocactual>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("PLANTILLA_DOCACTUAL");

                entity.Property(e => e.Anodcto)
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .HasColumnName("ANODCTO")
                    .IsFixedLength();

                entity.Property(e => e.Auxiliar)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("AUXILIAR");

                entity.Property(e => e.Benefdcto)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("BENEFDCTO");

                entity.Property(e => e.Bu)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("BU")
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.Cbadcto)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("CBADCTO");

                entity.Property(e => e.Chedcto)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("CHEDCTO");

                entity.Property(e => e.Descdcto)
                    .HasMaxLength(120)
                    .IsUnicode(false)
                    .HasColumnName("DESCDCTO");

                entity.Property(e => e.Enfdcto)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("ENFDCTO");

                entity.Property(e => e.Entregado)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("ENTREGADO");

                entity.Property(e => e.Fechdcto)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("FECHDCTO")
                    .IsFixedLength();

                entity.Property(e => e.Fntedcto)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("FNTEDCTO")
                    .IsFixedLength();

                entity.Property(e => e.Iactdcto)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("IACTDCTO");

                entity.Property(e => e.Idbanco)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("IDBANCO")
                    .IsFixedLength();

                entity.Property(e => e.Idcenco)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("IDCENCO");

                entity.Property(e => e.Idcliprv)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("IDCLIPRV");

                entity.Property(e => e.IdenPlantillaDocactual)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_plantilla_docactual");

                entity.Property(e => e.Idplantilla)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("IDPLANTILLA");

                entity.Property(e => e.Idtercero)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("IDTERCERO");

                entity.Property(e => e.Impricheque)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("IMPRICHEQUE")
                    .IsFixedLength();

                entity.Property(e => e.Item)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("ITEM");

                entity.Property(e => e.Moneda)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')")
                    .IsFixedLength();

                entity.Property(e => e.MontoMoneda)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.Montoletras)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("MONTOLETRAS");

                entity.Property(e => e.Ncf)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("NCF")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.NcfModificado)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("NCF_Modificado")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Ndrecdcto)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("NDRECDCTO");

                entity.Property(e => e.Numedcto)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("NUMEDCTO")
                    .IsFixedLength();

                entity.Property(e => e.Numtdcto).HasColumnName("NUMTDCTO");

                entity.Property(e => e.Plantilla)
                    .HasMaxLength(900)
                    .IsUnicode(false)
                    .HasColumnName("PLANTILLA");

                entity.Property(e => e.Statusdcto)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("STATUSDCTO")
                    .IsFixedLength();

                entity.Property(e => e.Sucrdcto)
                    .HasColumnType("money")
                    .HasColumnName("SUCRDCTO");

                entity.Property(e => e.Sudbdcto)
                    .HasColumnType("money")
                    .HasColumnName("SUDBDCTO");

                entity.Property(e => e.TasaCambio).HasColumnType("money");

                entity.Property(e => e.Tprecdcto)
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .HasColumnName("TPRECDCTO");

                entity.Property(e => e.Vchdcto)
                    .HasColumnType("money")
                    .HasColumnName("VCHDCTO");

                entity.Property(e => e.VencCheque)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.VrMoneda).HasColumnType("money");

                entity.HasOne(d => d.BuNavigation)
                    .WithMany()
                    .HasForeignKey(d => d.Bu)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PLANTILLA_DOCACTUAL_BU");
            });

            modelBuilder.Entity<PlantillaDocumento>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("PLANTILLA_DOCUMENTOS");

                entity.Property(e => e.Anodcto)
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .HasColumnName("ANODCTO")
                    .IsFixedLength();

                entity.Property(e => e.Auxiliar)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("AUXILIAR");

                entity.Property(e => e.Benefdcto)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("BENEFDCTO");

                entity.Property(e => e.Bu)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("BU")
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.Cbadcto)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("CBADCTO");

                entity.Property(e => e.Chedcto)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("CHEDCTO");

                entity.Property(e => e.Descdcto)
                    .HasMaxLength(120)
                    .IsUnicode(false)
                    .HasColumnName("DESCDCTO");

                entity.Property(e => e.Enfdcto)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("ENFDCTO");

                entity.Property(e => e.Entregado)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("ENTREGADO");

                entity.Property(e => e.Fechdcto)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("FECHDCTO")
                    .IsFixedLength();

                entity.Property(e => e.Fntedcto)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("FNTEDCTO")
                    .IsFixedLength();

                entity.Property(e => e.Iactdcto)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("IACTDCTO");

                entity.Property(e => e.Idbanco)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("IDBANCO")
                    .IsFixedLength();

                entity.Property(e => e.Idcenco)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("IDCENCO");

                entity.Property(e => e.Idcliprv)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("IDCLIPRV");

                entity.Property(e => e.IdenPlantillaDocumentos)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_plantilla_documentos");

                entity.Property(e => e.Idtercero)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("IDTERCERO");

                entity.Property(e => e.Impricheque)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("IMPRICHEQUE")
                    .IsFixedLength();

                entity.Property(e => e.Item)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("ITEM");

                entity.Property(e => e.Moneda)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')")
                    .IsFixedLength();

                entity.Property(e => e.MontoMoneda)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.Montoletras)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("MONTOLETRAS");

                entity.Property(e => e.Ncf)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("NCF")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.NcfModificado)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("NCF_Modificado")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Ndrecdcto)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("NDRECDCTO");

                entity.Property(e => e.Numedcto)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("NUMEDCTO")
                    .IsFixedLength();

                entity.Property(e => e.Numtdcto).HasColumnName("NUMTDCTO");

                entity.Property(e => e.Plantilla)
                    .HasMaxLength(900)
                    .IsUnicode(false)
                    .HasColumnName("PLANTILLA");

                entity.Property(e => e.Statusdcto)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("STATUSDCTO")
                    .IsFixedLength();

                entity.Property(e => e.Sucrdcto)
                    .HasColumnType("money")
                    .HasColumnName("SUCRDCTO");

                entity.Property(e => e.Sudbdcto)
                    .HasColumnType("money")
                    .HasColumnName("SUDBDCTO");

                entity.Property(e => e.TasaCambio).HasColumnType("money");

                entity.Property(e => e.Tprecdcto)
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .HasColumnName("TPRECDCTO");

                entity.Property(e => e.Vchdcto)
                    .HasColumnType("money")
                    .HasColumnName("VCHDCTO");

                entity.Property(e => e.VencCheque)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.VrMoneda).HasColumnType("money");

                entity.HasOne(d => d.BuNavigation)
                    .WithMany()
                    .HasForeignKey(d => d.Bu)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PLANTILLA_DOCUMENTOS_BU");
            });

            modelBuilder.Entity<PlantillaEmail>(entity =>
            {
                entity.HasKey(e => e.Codigo);

                entity.ToTable("PlantillaEmail");

                entity.Property(e => e.Codigo)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Asunto)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Cargo)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Ciudad)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Contacto)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CuerpoEmail)
                    .HasMaxLength(8000)
                    .IsUnicode(false);

                entity.Property(e => e.Direccion)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.IdenPlantillaemail)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_plantillaemail");

                entity.Property(e => e.Nombre)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.RutaFirmaDigital)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.RutaImagenEncab)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Telefono)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Tipo)
                    .HasMaxLength(1)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<PlantillaItem>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("PLANTILLA_ITEMS");

                entity.Property(e => e.ChangueAuxiliar)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("CHANGUE_AUXILIAR")
                    .IsFixedLength();

                entity.Property(e => e.ChangueAuxiliarBasico)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("CHANGUE_AUXILIAR_BASICO")
                    .IsFixedLength();

                entity.Property(e => e.ChangueBaseValorImpuesto)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("CHANGUE_BASE_VALOR_IMPUESTO")
                    .IsFixedLength();

                entity.Property(e => e.ChangueCentro)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("CHANGUE_CENTRO")
                    .IsFixedLength();

                entity.Property(e => e.ChangueCentroBasico)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("CHANGUE_CENTRO_BASICO")
                    .IsFixedLength();

                entity.Property(e => e.ChangueCuenta)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("CHANGUE_CUENTA")
                    .IsFixedLength();

                entity.Property(e => e.ChangueCuentaBasica)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("CHANGUE_CUENTA_BASICA")
                    .IsFixedLength();

                entity.Property(e => e.ChangueDbcr)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("CHANGUE_DBCR")
                    .IsFixedLength();

                entity.Property(e => e.ChangueDescripcion)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("CHANGUE_DESCRIPCION")
                    .IsFixedLength();

                entity.Property(e => e.ChangueDetalle)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("CHANGUE_DETALLE")
                    .IsFixedLength();

                entity.Property(e => e.ChangueEntidad)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("CHANGUE_ENTIDAD")
                    .IsFixedLength();

                entity.Property(e => e.ChangueFecha)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("CHANGUE_FECHA")
                    .IsFixedLength();

                entity.Property(e => e.ChangueFuente)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("CHANGUE_FUENTE")
                    .IsFixedLength();

                entity.Property(e => e.ChangueItem)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("CHANGUE_ITEM")
                    .IsFixedLength();

                entity.Property(e => e.ChangueItemBasico)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("CHANGUE_ITEM_BASICO")
                    .IsFixedLength();

                entity.Property(e => e.ChangueNumedoc)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("CHANGUE_NUMEDOC")
                    .IsFixedLength();

                entity.Property(e => e.ChanguePlaza)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("CHANGUE_PLAZA")
                    .IsFixedLength();

                entity.Property(e => e.ChanguePorceimpuesto)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("CHANGUE_PORCEIMPUESTO")
                    .IsFixedLength();

                entity.Property(e => e.ChangueReferencia)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("CHANGUE_REFERENCIA")
                    .IsFixedLength();

                entity.Property(e => e.ChangueReservaPresupuesto)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("CHANGUE_RESERVA_PRESUPUESTO")
                    .IsFixedLength();

                entity.Property(e => e.ChangueRubroPresupuesto)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("CHANGUE_RUBRO_PRESUPUESTO")
                    .IsFixedLength();

                entity.Property(e => e.ChangueTasaCambio)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("CHANGUE_TASA_CAMBIO")
                    .IsFixedLength();

                entity.Property(e => e.ChangueTercero)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("CHANGUE_TERCERO")
                    .IsFixedLength();

                entity.Property(e => e.ChangueTerceroD)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("CHANGUE_TERCERO_D")
                    .IsFixedLength();

                entity.Property(e => e.ChangueTipodoc)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("CHANGUE_TIPODOC")
                    .IsFixedLength();

                entity.Property(e => e.ChangueUnidad1)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("CHANGUE_UNIDAD1")
                    .IsFixedLength();

                entity.Property(e => e.ChangueUnidad2)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("CHANGUE_UNIDAD2")
                    .IsFixedLength();

                entity.Property(e => e.ChangueUnidad3)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("CHANGUE_UNIDAD3")
                    .IsFixedLength();

                entity.Property(e => e.ChangueValor)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("CHANGUE_VALOR")
                    .IsFixedLength();

                entity.Property(e => e.ChangueValorMoneda)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("CHANGUE_VALOR_MONEDA")
                    .IsFixedLength();

                entity.Property(e => e.ChangueValorUnidad1)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("CHANGUE_VALOR_UNIDAD1")
                    .IsFixedLength();

                entity.Property(e => e.ChangueValorUnidad2)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("CHANGUE_VALOR_UNIDAD2")
                    .IsFixedLength();

                entity.Property(e => e.ChangueValorUnidad3)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("CHANGUE_VALOR_UNIDAD3")
                    .IsFixedLength();

                entity.Property(e => e.ChangueVencimiento)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("CHANGUE_VENCIMIENTO")
                    .IsFixedLength();

                entity.Property(e => e.ChangueVendedor)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("CHANGUE_VENDEDOR")
                    .IsFixedLength();

                entity.Property(e => e.ChangueZona)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("CHANGUE_ZONA")
                    .IsFixedLength();

                entity.Property(e => e.Consecutivo).HasColumnName("CONSECUTIVO");

                entity.Property(e => e.IdenPlantillaItems)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_plantilla_items");

                entity.Property(e => e.IndTranDcto)
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .HasColumnName("IND_TRAN_DCTO")
                    .IsFixedLength();

                entity.Property(e => e.Plantilla)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("PLANTILLA")
                    .IsFixedLength();
            });

            modelBuilder.Entity<PlantillaPlanPago>(entity =>
            {
                entity.HasKey(e => e.Iden);

                entity.ToTable("PlantillaPlanPago");

                entity.HasIndex(e => e.Codigo, "IX_PlantillaPlanPago_codigo")
                    .IsUnique();

                entity.Property(e => e.Iden).HasColumnName("iden");

                entity.Property(e => e.CeldaFinalLetra)
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.CeldaInicialLetra)
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.CeldaSpread)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Codigo)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("codigo");

                entity.Property(e => e.CostosAsociados)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.CuotasGracia)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Descripcion)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Macro)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.Monto)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.NombreHoja)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.NumeroCuotas)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.OrdenCapital).HasColumnName("Orden_capital");

                entity.Property(e => e.OrdenCuota).HasColumnName("Orden_cuota");

                entity.Property(e => e.OrdenFechaCuota).HasColumnName("Orden_fecha_cuota");

                entity.Property(e => e.OrdenInteres).HasColumnName("Orden_interes");

                entity.Property(e => e.OrdenSaldocapital).HasColumnName("Orden_saldocapital");

                entity.Property(e => e.OrdenTotalcxc).HasColumnName("Orden_totalcxc");

                entity.Property(e => e.OrdenValorcuota).HasColumnName("Orden_valorcuota");

                entity.Property(e => e.RutaArchivo)
                    .HasMaxLength(8000)
                    .IsUnicode(false);

                entity.Property(e => e.TasaInteres)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.TasaMercado)
                    .HasMaxLength(10)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<PlantillaTransacione>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("PLANTILLA_TRANSACIONES");

                entity.Property(e => e.Anotra)
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .HasColumnName("ANOTRA")
                    .IsFixedLength();

                entity.Property(e => e.Autorizacion)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("AUTORIZACION")
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.Auxiaux)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("AUXIAUX");

                entity.Property(e => e.BaseComision).HasColumnType("money");

                entity.Property(e => e.Baseretetra)
                    .HasColumnType("money")
                    .HasColumnName("BASERETETRA");

                entity.Property(e => e.Bu)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("BU")
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.Cliprv)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("CLIPRV");

                entity.Property(e => e.Codicta)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("CODICTA");

                entity.Property(e => e.CodigoPropiedad1)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.CodigoPropiedad2)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.CodigoPropiedad3)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.CodigoPropiedad4)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.CodigoPropiedad5)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Codpresu)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("CODPRESU")
                    .IsFixedLength();

                entity.Property(e => e.Conciltra)
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .HasColumnName("CONCILTRA")
                    .IsFixedLength();

                entity.Property(e => e.Consecurev).HasColumnName("CONSECUREV");

                entity.Property(e => e.Consecutra).HasColumnName("CONSECUTRA");

                entity.Property(e => e.CostosAsociados).HasColumnType("money");

                entity.Property(e => e.Cuota).HasColumnName("cuota");

                entity.Property(e => e.Descritra)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("DESCRITRA");

                entity.Property(e => e.FactIdencondicionesdecredito)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("fact_idencondicionesdecredito");

                entity.Property(e => e.FactMovimientoOriginal)
                    .HasColumnName("fact_movimiento_original")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.FactPorcentajeInteresComparativo).HasColumnName("fact_porcentaje_interes_comparativo");

                entity.Property(e => e.FactPorcentajeInteresPactado).HasColumnName("fact_porcentaje_interes_pactado");

                entity.Property(e => e.FechaCaducidad)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Fechafact)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("FECHAFACT")
                    .IsFixedLength();

                entity.Property(e => e.Fechatra)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("FECHATRA")
                    .IsFixedLength();

                entity.Property(e => e.Fgratra)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("FGRATRA");

                entity.Property(e => e.Idbanco)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("IDBANCO")
                    .IsFixedLength();

                entity.Property(e => e.Idcenco)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("IDCENCO");

                entity.Property(e => e.IdenPlantillaTransaciones)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_plantilla_transaciones");

                entity.Property(e => e.Idfuente)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("IDFUENTE")
                    .IsFixedLength();

                entity.Property(e => e.Iditem)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("IDITEM");

                entity.Property(e => e.Idplaza)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("IDPLAZA")
                    .IsFixedLength();

                entity.Property(e => e.Idunidad1)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("IDUNIDAD1")
                    .HasDefaultValueSql("('')")
                    .IsFixedLength();

                entity.Property(e => e.Idunidad2)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("IDUNIDAD2")
                    .HasDefaultValueSql("('')")
                    .IsFixedLength();

                entity.Property(e => e.Idunidad3)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("IDUNIDAD3")
                    .HasDefaultValueSql("('')")
                    .IsFixedLength();

                entity.Property(e => e.Idusuario)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("IDUSUARIO");

                entity.Property(e => e.Idvende)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("IDVENDE")
                    .IsFixedLength();

                entity.Property(e => e.Idzona)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("IDZONA")
                    .IsFixedLength();

                entity.Property(e => e.Indcpitra)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("INDCPITRA")
                    .IsFixedLength();

                entity.Property(e => e.Ncf)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("NCF")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.NcfModificado)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("NCF_Modificado")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Nittra)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("NITTRA");

                entity.Property(e => e.Nreserva)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("NRESERVA")
                    .IsFixedLength();

                entity.Property(e => e.Numdoctra)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("NUMDOCTRA")
                    .IsFixedLength();

                entity.Property(e => e.Numefac)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("NUMEFAC");

                entity.Property(e => e.Plantilla)
                    .HasMaxLength(900)
                    .IsUnicode(false)
                    .HasColumnName("PLANTILLA");

                entity.Property(e => e.Plazo).HasColumnName("plazo");

                entity.Property(e => e.Porretetra)
                    .HasColumnType("numeric(18, 4)")
                    .HasColumnName("PORRETETRA")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Refefac)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("REFEFAC");

                entity.Property(e => e.Serie)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("SERIE")
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.Statustra)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("STATUSTRA")
                    .IsFixedLength();

                entity.Property(e => e.TasaCambio).HasColumnType("money");

                entity.Property(e => e.Tasacambio1)
                    .HasColumnType("money")
                    .HasColumnName("TASACAMBIO1");

                entity.Property(e => e.Tasacambio2)
                    .HasColumnType("money")
                    .HasColumnName("TASACAMBIO2");

                entity.Property(e => e.Tipofac)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("TIPOFAC");

                entity.Property(e => e.ValorCuota).HasColumnType("money");

                entity.Property(e => e.ValorPrestamo).HasColumnType("money");

                entity.Property(e => e.Valormoneda)
                    .HasColumnType("money")
                    .HasColumnName("VALORMONEDA");

                entity.Property(e => e.Valormoneda1)
                    .HasColumnType("money")
                    .HasColumnName("VALORMONEDA1");

                entity.Property(e => e.Valormoneda2)
                    .HasColumnType("money")
                    .HasColumnName("VALORMONEDA2");

                entity.Property(e => e.Valortra)
                    .HasColumnType("money")
                    .HasColumnName("VALORTRA");

                entity.Property(e => e.Valorund1)
                    .HasColumnType("money")
                    .HasColumnName("VALORUND1")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Valorund2)
                    .HasColumnType("money")
                    .HasColumnName("VALORUND2")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Valorund3)
                    .HasColumnType("money")
                    .HasColumnName("VALORUND3")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Vencefac)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("VENCEFAC")
                    .IsFixedLength();

                entity.Property(e => e.Voucher)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.HasOne(d => d.BuNavigation)
                    .WithMany()
                    .HasForeignKey(d => d.Bu)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PLANTILLA_TRANSACIONES_BU");
            });

            modelBuilder.Entity<PlantillaTransactual>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("PLANTILLA_TRANSACTUAL");

                entity.Property(e => e.Anotra)
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .HasColumnName("ANOTRA")
                    .IsFixedLength();

                entity.Property(e => e.Autorizacion)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("AUTORIZACION")
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.Auxiaux)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("AUXIAUX");

                entity.Property(e => e.BaseComision).HasColumnType("money");

                entity.Property(e => e.Baseretetra)
                    .HasColumnType("money")
                    .HasColumnName("BASERETETRA");

                entity.Property(e => e.Bu)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("BU")
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.Cliprv)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("CLIPRV");

                entity.Property(e => e.Codicta)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("CODICTA");

                entity.Property(e => e.CodigoPropiedad1)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.CodigoPropiedad2)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.CodigoPropiedad3)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.CodigoPropiedad4)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.CodigoPropiedad5)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Codpresu)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("CODPRESU")
                    .IsFixedLength();

                entity.Property(e => e.Conciltra)
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .HasColumnName("CONCILTRA")
                    .IsFixedLength();

                entity.Property(e => e.Consecurev).HasColumnName("CONSECUREV");

                entity.Property(e => e.Consecutra).HasColumnName("CONSECUTRA");

                entity.Property(e => e.CostosAsociados).HasColumnType("money");

                entity.Property(e => e.Cuota).HasColumnName("cuota");

                entity.Property(e => e.Descritra)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("DESCRITRA");

                entity.Property(e => e.FactIdencondicionesdecredito)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("fact_idencondicionesdecredito");

                entity.Property(e => e.FactMovimientoOriginal)
                    .HasColumnName("fact_movimiento_original")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.FactPorcentajeInteresComparativo).HasColumnName("fact_porcentaje_interes_comparativo");

                entity.Property(e => e.FactPorcentajeInteresPactado).HasColumnName("fact_porcentaje_interes_pactado");

                entity.Property(e => e.FechaCaducidad)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Fechafact)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("FECHAFACT")
                    .IsFixedLength();

                entity.Property(e => e.Fechatra)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("FECHATRA")
                    .IsFixedLength();

                entity.Property(e => e.Fgratra)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("FGRATRA");

                entity.Property(e => e.Idbanco)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("IDBANCO")
                    .IsFixedLength();

                entity.Property(e => e.Idcenco)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("IDCENCO");

                entity.Property(e => e.IdenPlantillaTransactual)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_plantilla_transactual");

                entity.Property(e => e.Idfuente)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("IDFUENTE")
                    .IsFixedLength();

                entity.Property(e => e.Iditem)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("IDITEM");

                entity.Property(e => e.Idplantilla)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("IDPLANTILLA");

                entity.Property(e => e.Idplaza)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("IDPLAZA")
                    .IsFixedLength();

                entity.Property(e => e.Idunidad1)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("IDUNIDAD1")
                    .IsFixedLength();

                entity.Property(e => e.Idunidad2)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("IDUNIDAD2")
                    .IsFixedLength();

                entity.Property(e => e.Idunidad3)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("IDUNIDAD3")
                    .IsFixedLength();

                entity.Property(e => e.Idusuario)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("IDUSUARIO");

                entity.Property(e => e.Idvende)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("IDVENDE")
                    .IsFixedLength();

                entity.Property(e => e.Idzona)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("IDZONA")
                    .IsFixedLength();

                entity.Property(e => e.Indcpitra)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("INDCPITRA")
                    .IsFixedLength();

                entity.Property(e => e.Indfacrep)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("INDFACREP")
                    .IsFixedLength();

                entity.Property(e => e.Ncf)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("NCF")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.NcfModificado)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("NCF_Modificado")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Nittra)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("NITTRA");

                entity.Property(e => e.Nreserva)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("NRESERVA")
                    .IsFixedLength();

                entity.Property(e => e.Numdoctra)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("NUMDOCTRA")
                    .IsFixedLength();

                entity.Property(e => e.Numefac)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("NUMEFAC");

                entity.Property(e => e.Plantilla)
                    .HasMaxLength(900)
                    .IsUnicode(false)
                    .HasColumnName("PLANTILLA");

                entity.Property(e => e.Plazo).HasColumnName("plazo");

                entity.Property(e => e.Porretetra)
                    .HasColumnType("numeric(18, 4)")
                    .HasColumnName("PORRETETRA");

                entity.Property(e => e.Refefac)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("REFEFAC");

                entity.Property(e => e.Serie)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("SERIE")
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.Statustra)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("STATUSTRA")
                    .IsFixedLength();

                entity.Property(e => e.TasaCambio).HasColumnType("money");

                entity.Property(e => e.Tasacambio1)
                    .HasColumnType("money")
                    .HasColumnName("TASACAMBIO1");

                entity.Property(e => e.Tasacambio2)
                    .HasColumnType("money")
                    .HasColumnName("TASACAMBIO2");

                entity.Property(e => e.Tipofac)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("TIPOFAC");

                entity.Property(e => e.ValorCuota).HasColumnType("money");

                entity.Property(e => e.ValorPrestamo).HasColumnType("money");

                entity.Property(e => e.Valormoneda)
                    .HasColumnType("money")
                    .HasColumnName("VALORMONEDA");

                entity.Property(e => e.Valormoneda1)
                    .HasColumnType("money")
                    .HasColumnName("VALORMONEDA1");

                entity.Property(e => e.Valormoneda2)
                    .HasColumnType("money")
                    .HasColumnName("VALORMONEDA2");

                entity.Property(e => e.Valortra)
                    .HasColumnType("money")
                    .HasColumnName("VALORTRA");

                entity.Property(e => e.Valorund1)
                    .HasColumnType("money")
                    .HasColumnName("VALORUND1");

                entity.Property(e => e.Valorund2)
                    .HasColumnType("money")
                    .HasColumnName("VALORUND2");

                entity.Property(e => e.Valorund3)
                    .HasColumnType("money")
                    .HasColumnName("VALORUND3");

                entity.Property(e => e.Vencefac)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("VENCEFAC")
                    .IsFixedLength();

                entity.Property(e => e.Voucher)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.HasOne(d => d.BuNavigation)
                    .WithMany()
                    .HasForeignKey(d => d.Bu)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PLANTILLA_TRANSACTUAL_BU");
            });

            modelBuilder.Entity<Plaza>(entity =>
            {
                entity.HasKey(e => e.Idplaza)
                    .HasName("pk_plazas")
                    .IsClustered(false);

                entity.ToTable("PLAZAS");

                entity.Property(e => e.Idplaza)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("IDPLAZA")
                    .IsFixedLength();

                entity.Property(e => e.Depplazas)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("DEPPLAZAS")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Descrip)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIP")
                    .IsFixedLength();

                entity.Property(e => e.Fecplazas)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("FECPLAZAS");

                entity.Property(e => e.IdenPlazas)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_plazas");

                entity.Property(e => e.Ncdplazas)
                    .HasColumnName("NCDPLAZAS")
                    .HasDefaultValueSql("('0')");

                entity.Property(e => e.Nivplazas)
                    .HasColumnName("NIVPLAZAS")
                    .HasDefaultValueSql("('1')");

                entity.Property(e => e.Tipoplazas)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("TIPOPLAZAS")
                    .HasDefaultValueSql("('D')")
                    .IsFixedLength();

                entity.Property(e => e.VersionDeLaFila)
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<PostFechadosConfiguracion>(entity =>
            {
                entity.HasKey(e => new { e.Tipo, e.Codigo })
                    .HasName("PK_POSTFECHADOS_CONFIGURACION")
                    .IsClustered(false);

                entity.ToTable("PostFechados_Configuracion");

                entity.HasIndex(e => e.Iden, "UQ_POSTFECHADOS_CONFIGURACION_IDEN")
                    .IsUnique()
                    .IsClustered();

                entity.Property(e => e.Tipo)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Codigo)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Iden).ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<PrestamosD>(entity =>
            {
                entity.HasKey(e => e.IdPrestamoD);

                entity.ToTable("PrestamosD");

                entity.HasIndex(e => new { e.FuenteCausacion, e.DocumentoCausacion }, "IX_PRESTAMOSD_DOCUMENTOCAUSACION_FUENTECAUSACION");

                entity.Property(e => e.IdPrestamoD)
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.CausacionCapacitacion).HasColumnType("money");

                entity.Property(e => e.CausacionComision).HasColumnType("money");

                entity.Property(e => e.CausacionEstudio).HasColumnType("money");

                entity.Property(e => e.CausacionSeguros).HasColumnType("money");

                entity.Property(e => e.DocumentoCausacion)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.FechaCausacion)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.FuenteCausacion)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.IdPrestamoG).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.Vencimiento)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.VrCapital).HasColumnType("money");

                entity.Property(e => e.VrInteres).HasColumnType("money");

                entity.HasOne(d => d.IdPrestamoGNavigation)
                    .WithMany(p => p.PrestamosDs)
                    .HasForeignKey(d => d.IdPrestamoG)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PrestamosD_PrestamosG");
            });

            modelBuilder.Entity<PrestamosDistribucionEstudio>(entity =>
            {
                entity.ToTable("PrestamosDistribucionEstudio");

                entity.Property(e => e.CodPrestamo)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Cuenta)
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.Descripcion)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Porcentaje).HasColumnType("numeric(18, 2)");
            });

            modelBuilder.Entity<PrestamosG>(entity =>
            {
                entity.HasKey(e => e.IdPrestamoG);

                entity.ToTable("PrestamosG");

                entity.HasIndex(e => e.CodPrestamo, "IX_PRESTAMOSG_CODPRESTAMO");

                entity.HasIndex(e => e.CxC, "IX_PRESTAMOSG_CXC");

                entity.Property(e => e.IdPrestamoG)
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.AutSinCodeudor)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.CausacionCapacitacion).HasColumnType("money");

                entity.Property(e => e.CausacionComision).HasColumnType("money");

                entity.Property(e => e.CausacionEstudio).HasColumnType("money");

                entity.Property(e => e.CausacionSeguros).HasColumnType("money");

                entity.Property(e => e.CodAsesor)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CodCliente)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.CodPrestamo)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CodigoGrupo)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.CodigoPoliza)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.CtaCapacitacion)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')")
                    .IsFixedLength();

                entity.Property(e => e.CtaComision)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')")
                    .IsFixedLength();

                entity.Property(e => e.CtaEstudio)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')")
                    .IsFixedLength();

                entity.Property(e => e.CtaIngreso)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')")
                    .IsFixedLength();

                entity.Property(e => e.CtaIngresoMora)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')")
                    .IsFixedLength();

                entity.Property(e => e.CtaSeguro)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')")
                    .IsFixedLength();

                entity.Property(e => e.CxC)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')")
                    .IsFixedLength();

                entity.Property(e => e.DescSeguro)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')")
                    .IsFixedLength();

                entity.Property(e => e.DocumContab)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Fecha)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.FechaFinVenc)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.FechaIniVenc)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.FuenteContab)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.IndCliBen)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('B')")
                    .IsFixedLength();

                entity.Property(e => e.IndModCapacitacion)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('N')")
                    .IsFixedLength();

                entity.Property(e => e.IndModComision)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('N')")
                    .IsFixedLength();

                entity.Property(e => e.IndModEstudio)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('N')")
                    .IsFixedLength();

                entity.Property(e => e.IndModSeguros)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('N')")
                    .IsFixedLength();

                entity.Property(e => e.PorcInteres).HasColumnType("money");

                entity.Property(e => e.Status)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.TdCapacitacion)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.TdComision)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.TdEstudio)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.TdSeguros)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.TipoEstudio)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasDefaultValueSql("((0))")
                    .IsFixedLength();

                entity.Property(e => e.TipoFactura)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')")
                    .IsFixedLength();

                entity.Property(e => e.TipoPrestamo).HasDefaultValueSql("((0))");

                entity.Property(e => e.TotalCapital).HasColumnType("money");

                entity.Property(e => e.TotalInteres).HasColumnType("money");

                entity.Property(e => e.ValorCuota).HasColumnType("money");

                entity.Property(e => e.ValorPrestamo).HasColumnType("money");

                entity.Property(e => e.VrCapacitacion).HasColumnType("money");

                entity.Property(e => e.VrComision).HasColumnType("money");

                entity.Property(e => e.VrEstudio).HasColumnType("money");

                entity.Property(e => e.VrSeguros).HasColumnType("money");

                entity.HasOne(d => d.CodAsesorNavigation)
                    .WithMany(p => p.PrestamosGs)
                    .HasForeignKey(d => d.CodAsesor)
                    .HasConstraintName("FK_PrestamosG_MAEVENDE");
            });

            modelBuilder.Entity<PrestamosGrupo>(entity =>
            {
                entity.HasKey(e => e.IdPrestamoGrupo);

                entity.ToTable("PrestamosGrupo");

                entity.Property(e => e.IdPrestamoGrupo)
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.CodCliente)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.IdPrestamoG).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.Monto).HasColumnType("money");

                entity.Property(e => e.Poliza)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.Porcentaje).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.TotalCuota).HasColumnType("money");

                entity.Property(e => e.VrCapacitacion).HasColumnType("money");

                entity.Property(e => e.VrComision).HasColumnType("money");

                entity.Property(e => e.VrCuota).HasColumnType("money");

                entity.Property(e => e.VrEstudio).HasColumnType("money");

                entity.Property(e => e.VrSeguros).HasColumnType("money");

                entity.HasOne(d => d.IdPrestamoGNavigation)
                    .WithMany(p => p.PrestamosGrupos)
                    .HasForeignKey(d => d.IdPrestamoG)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PrestamosGrupo_PrestamosG");
            });

            modelBuilder.Entity<PrestamosInterese>(entity =>
            {
                entity.HasKey(e => new { e.TipoInteres, e.Fecha, e.Fuente, e.Documento });

                entity.Property(e => e.TipoInteres)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')")
                    .IsFixedLength();

                entity.Property(e => e.Fecha)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')")
                    .IsFixedLength();

                entity.Property(e => e.Fuente)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')")
                    .IsFixedLength();

                entity.Property(e => e.Documento)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')")
                    .IsFixedLength();

                entity.Property(e => e.Estado)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('AC')")
                    .IsFixedLength();

                entity.Property(e => e.Id)
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Interes).HasColumnType("numeric(18, 0)");
            });

            modelBuilder.Entity<PrestamosMora>(entity =>
            {
                entity.HasKey(e => new { e.IdPrestamoMora, e.IdPrestamoD });

                entity.ToTable("PrestamosMora");

                entity.HasIndex(e => new { e.IdPrestamoD, e.Fuente, e.Documento }, "IX_PRESTAMOSMORA_DOCUMENTO_FUENTE_IDPRESTAMOD");

                entity.Property(e => e.IdPrestamoMora)
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.IdPrestamoD).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.AnoMes)
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Documento)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Estado)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('AC')")
                    .IsFixedLength();

                entity.Property(e => e.Fecha)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Fuente)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Numefac)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Refefac)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Tasa).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.TipoFac)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Valor).HasColumnType("money");

                entity.Property(e => e.Vencefac)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .IsFixedLength();
            });

            modelBuilder.Entity<Proceso>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.Iden).ValueGeneratedOnAdd();

                entity.Property(e => e.NombreProceso)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ProgramacionTemporal>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ProgramacionTemporal");

                entity.Property(e => e.Consecutivo).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.DiaSeleccionDia).IsUnicode(false);

                entity.Property(e => e.IdenProgramaciontemporal)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_programaciontemporal");

                entity.Property(e => e.MesSeleccionMes).IsUnicode(false);

                entity.Property(e => e.TipoConfiguracion)
                    .HasMaxLength(25)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Propiedad1>(entity =>
            {
                entity.HasKey(e => e.Codigo)
                    .IsClustered(false);

                entity.ToTable("Propiedad1");

                entity.Property(e => e.Codigo)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Dependencia)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Descripcion)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Iden).ValueGeneratedOnAdd();

                entity.Property(e => e.Tipo)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.VersionDeLaFila)
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<Propiedad2>(entity =>
            {
                entity.HasKey(e => e.Codigo)
                    .IsClustered(false);

                entity.ToTable("Propiedad2");

                entity.Property(e => e.Codigo)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.AuxiAux)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Cuenta)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Dependencia)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Descripcion)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Iden).ValueGeneratedOnAdd();

                entity.Property(e => e.Tipo)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.VersionDeLaFila)
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<Propiedad3>(entity =>
            {
                entity.HasKey(e => e.Codigo)
                    .IsClustered(false);

                entity.ToTable("Propiedad3");

                entity.Property(e => e.Codigo)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Dependencia)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Descripcion)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Iden).ValueGeneratedOnAdd();

                entity.Property(e => e.Tipo)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.VersionDeLaFila)
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<Propiedad4>(entity =>
            {
                entity.HasKey(e => e.Codigo)
                    .IsClustered(false);

                entity.ToTable("Propiedad4");

                entity.Property(e => e.Codigo)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Dependencia)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Descripcion)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Iden).ValueGeneratedOnAdd();

                entity.Property(e => e.Tipo)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.VersionDeLaFila)
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<Propiedad5>(entity =>
            {
                entity.HasKey(e => e.Codigo)
                    .IsClustered(false);

                entity.ToTable("Propiedad5");

                entity.Property(e => e.Codigo)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Dependencia)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Descripcion)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Iden).ValueGeneratedOnAdd();

                entity.Property(e => e.Tipo)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.VersionDeLaFila)
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<ProrrataIgv>(entity =>
            {
                entity.HasKey(e => e.Consecutivo);

                entity.ToTable("ProrrataIGV");

                entity.Property(e => e.Consecutivo)
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Bu)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Cuenta)
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.Documento)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.FechaFin)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.FechaIni)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.FechaProceso)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Fuente)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.Item)
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.PorceRateo).HasColumnType("money");
            });

            modelBuilder.Entity<ProrrataIgvDetalle>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ProrrataIGV_Detalle");

                entity.Property(e => e.Auxiabto)
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.Cenco)
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.Consecutivo).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.CtaGastoProrrata)
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.Cuenta)
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.Documento)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Fuente)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.IdenProrrataigvDetalle)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_prorrataigv_detalle");

                entity.Property(e => e.Item)
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.Propiedad1)
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.Propiedad2)
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.Propiedad3)
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.Propiedad4)
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.Propiedad5)
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.Tercero)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Valor).HasColumnType("money");

                entity.Property(e => e.ValorIgv)
                    .HasColumnType("money")
                    .HasColumnName("ValorIGV");

                entity.HasOne(d => d.ConsecutivoNavigation)
                    .WithMany()
                    .HasForeignKey(d => d.Consecutivo)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ProrrataIGV_Detalle_ProrrataIGV");
            });

            modelBuilder.Entity<ProveedorTecnologico>(entity =>
            {
                entity.HasKey(e => e.Codigo);

                entity.ToTable("ProveedorTecnologico");

                entity.Property(e => e.Codigo)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Descripcion)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Iden)
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<Proveedore>(entity =>
            {
                entity.HasKey(e => e.Idprove)
                    .HasName("pk_proveedores")
                    .IsClustered(false);

                entity.ToTable("PROVEEDORES");

                entity.HasIndex(e => e.Idtercero, "IX_PROVEEDORES_IDTERCERO");

                entity.HasIndex(e => e.Razoncial, "IX_PROVEEDORES_RAZONCIAL");

                entity.Property(e => e.Idprove)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("IDPROVE");

                entity.Property(e => e.Autorizacion)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("AUTORIZACION")
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.BloqAutorizacion).HasColumnName("Bloq_Autorizacion");

                entity.Property(e => e.CentroCosto)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Ciudad)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("CIUDAD");

                entity.Property(e => e.Codalterno)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("CODALTERNO")
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.Codicta)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("CODICTA")
                    .IsFixedLength();

                entity.Property(e => e.Codigodane)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("CODIGODANE")
                    .HasDefaultValueSql("('OTROS')")
                    .IsFixedLength();

                entity.Property(e => e.Codigoubicacion)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("CODIGOUBICACION")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Contacto)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("CONTACTO");

                entity.Property(e => e.Contactoa)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("CONTACTOA");

                entity.Property(e => e.Cupocre)
                    .HasColumnType("money")
                    .HasColumnName("CUPOCRE");

                entity.Property(e => e.Diplazo).HasColumnName("DIPLAZO");

                entity.Property(e => e.Dirconta)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("DIRCONTA");

                entity.Property(e => e.Dircontaa)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("DIRCONTAA");

                entity.Property(e => e.Dircorres)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("DIRCORRES");

                entity.Property(e => e.Direccion)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("DIRECCION");

                entity.Property(e => e.Dirgerente)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("DIRGERENTE");

                entity.Property(e => e.Divpolitica)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("DIVPOLITICA")
                    .HasDefaultValueSql("('OTROS')")
                    .IsFixedLength();

                entity.Property(e => e.Email)
                    .HasMaxLength(800)
                    .IsUnicode(false)
                    .HasColumnName("EMAIL");

                entity.Property(e => e.Emailconta)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("EMAILCONTA");

                entity.Property(e => e.Emailcontaa)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("EMAILCONTAA");

                entity.Property(e => e.Emailgeren)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("EMAILGEREN");

                entity.Property(e => e.Fax)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("FAX");

                entity.Property(e => e.Gerente)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("GERENTE");

                entity.Property(e => e.GrEmpresarial)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.IdenProveedores)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_proveedores");

                entity.Property(e => e.Idtercero)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("IDTERCERO");

                entity.Property(e => e.Idzona)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("IDZONA")
                    .IsFixedLength();

                entity.Property(e => e.Indemail).HasColumnName("INDEMAIL");

                entity.Property(e => e.Item)
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.Pais)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.PrefijoNcf)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Prefijo_NCF");

                entity.Property(e => e.Razoncial)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("RAZONCIAL");

                entity.Property(e => e.Segmento)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("SEGMENTO")
                    .HasDefaultValueSql("('OTROS')")
                    .IsFixedLength();

                entity.Property(e => e.Serie)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("SERIE")
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.Tag)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Telconta)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("TELCONTA");

                entity.Property(e => e.Telcontaa)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("TELCONTAA");

                entity.Property(e => e.Telefono)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("TELEFONO");

                entity.Property(e => e.Telgerente)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("TELGERENTE");

                entity.Property(e => e.Tipo)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('N')")
                    .IsFixedLength();

                entity.Property(e => e.VersionDeLaFila)
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.Website)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("WEBSITE");

                entity.HasOne(d => d.CentroCostoNavigation)
                    .WithMany(p => p.Proveedores)
                    .HasForeignKey(d => d.CentroCosto)
                    .HasConstraintName("FK_PROVEEDORES_MAECCO");

                entity.HasOne(d => d.CodictaNavigation)
                    .WithMany(p => p.Proveedores)
                    .HasForeignKey(d => d.Codicta)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PROVEEDORES_MAECONT");

                entity.HasOne(d => d.CodigoubicacionNavigation)
                    .WithMany(p => p.Proveedores)
                    .HasForeignKey(d => d.Codigoubicacion)
                    .HasConstraintName("FK_PROVEEDORES_UBICACIONGEOGRAFICA");

                entity.HasOne(d => d.DivpoliticaNavigation)
                    .WithMany(p => p.Proveedores)
                    .HasForeignKey(d => d.Divpolitica)
                    .HasConstraintName("FK_PROVEEDORES_DIVPOLITICA");

                entity.HasOne(d => d.GrEmpresarialNavigation)
                    .WithMany(p => p.Proveedores)
                    .HasForeignKey(d => d.GrEmpresarial)
                    .HasConstraintName("FK_PROVEEDORES_GrEmpresarial");

                entity.HasOne(d => d.IdClaseProvNavigation)
                    .WithMany(p => p.Proveedores)
                    .HasForeignKey(d => d.IdClaseProv)
                    .HasConstraintName("FK_PROVEEDORES_MaeClasesProv");

                entity.HasOne(d => d.IdterceroNavigation)
                    .WithMany(p => p.Proveedores)
                    .HasForeignKey(d => d.Idtercero)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PROVEEDORES_TERCEROS");

                entity.HasOne(d => d.IdzonaNavigation)
                    .WithMany(p => p.Proveedores)
                    .HasForeignKey(d => d.Idzona)
                    .HasConstraintName("FK_PROVEEDORES_MAEZONAS");

                entity.HasOne(d => d.ItemNavigation)
                    .WithMany(p => p.Proveedores)
                    .HasForeignKey(d => d.Item)
                    .HasConstraintName("FK_PROVEEDORES_Items");

                entity.HasOne(d => d.PaisNavigation)
                    .WithMany(p => p.Proveedores)
                    .HasForeignKey(d => d.Pais)
                    .HasConstraintName("FK_PROVEEDORES_Paises");

                entity.HasOne(d => d.SegmentoNavigation)
                    .WithMany(p => p.Proveedores)
                    .HasForeignKey(d => d.Segmento)
                    .HasConstraintName("FK_PROVEEDORES_SEGMENTO");
            });

            modelBuilder.Entity<ProveedoresActMod>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ProveedoresActMod");

                entity.Property(e => e.Bu)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("BU");

                entity.Property(e => e.IdDocum)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.IdenProveedoresactmod)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_proveedoresactmod");

                entity.Property(e => e.Idmodelo)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Nombre)
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.Proveedor)
                    .HasMaxLength(25)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ProveedoresAnticipo>(entity =>
            {
                entity.HasKey(e => new { e.IdProveedor, e.Cuenta, e.Auxiliar })
                    .IsClustered(false);

                entity.ToTable("Proveedores_Anticipos");

                entity.Property(e => e.IdProveedor)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Cuenta)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Auxiliar)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Cupo).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.IdenProveedoresAnticipos)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_proveedores_anticipos");

                entity.HasOne(d => d.CuentaNavigation)
                    .WithMany(p => p.ProveedoresAnticipos)
                    .HasForeignKey(d => d.Cuenta)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Proveedores_Anticipos_MAECONT");

                entity.HasOne(d => d.IdProveedorNavigation)
                    .WithMany(p => p.ProveedoresAnticipos)
                    .HasForeignKey(d => d.IdProveedor)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Proveedores_Anticipos_Proveedores");
            });

            modelBuilder.Entity<ProveedoresCuenta>(entity =>
            {
                entity.HasKey(e => new { e.IdProve, e.IdMoneda })
                    .HasName("PK_PROVEEDORES_CUENTAS")
                    .IsClustered(false);

                entity.ToTable("Proveedores_Cuentas");

                entity.Property(e => e.IdProve)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.IdMoneda)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Codicta)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CodictaProvision)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.IdenProveedoresCuentas)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_proveedores_cuentas");
            });

            modelBuilder.Entity<ProyeccionFactAuto>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ProyeccionFactAuto");

                entity.Property(e => e.Auxabto)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("AUXABTO")
                    .IsFixedLength();

                entity.Property(e => e.Baserete)
                    .HasColumnType("money")
                    .HasColumnName("BASERETE");

                entity.Property(e => e.BlNovedad).HasColumnName("bl_novedad");

                entity.Property(e => e.Bu)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("BU");

                entity.Property(e => e.Cantidad)
                    .HasColumnType("numeric(18, 9)")
                    .HasColumnName("CANTIDAD");

                entity.Property(e => e.Codcenco)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("CODCENCO")
                    .IsFixedLength();

                entity.Property(e => e.Codcliente1)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("CODCLIENTE1");

                entity.Property(e => e.CodiFco)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("CODI_FCO")
                    .IsFixedLength();

                entity.Property(e => e.CodigoPropiedad1)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.CodigoPropiedad2)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.CodigoPropiedad3)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.CodigoPropiedad4)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.CodigoPropiedad5)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.CodigodescFco)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("CODIGODESC_FCO")
                    .IsFixedLength();

                entity.Property(e => e.CodigoivaFco)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("CODIGOIVA_FCO")
                    .IsFixedLength();

                entity.Property(e => e.CodigoreteFco)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("CODIGORETE_FCO")
                    .IsFixedLength();

                entity.Property(e => e.Codvendedor)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("CODVENDEDOR")
                    .IsFixedLength();

                entity.Property(e => e.Concepto)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("CONCEPTO")
                    .IsFixedLength();

                entity.Property(e => e.DbcrFco)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("DBCR_FCO")
                    .IsFixedLength();

                entity.Property(e => e.Desclarga)
                    .HasMaxLength(240)
                    .IsUnicode(false)
                    .HasColumnName("DESCLARGA");

                entity.Property(e => e.DetalleFco)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("DETALLE_FCO");

                entity.Property(e => e.Idcliente)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("IDCLIENTE");

                entity.Property(e => e.Iddocumento)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("IDDOCUMENTO")
                    .IsFixedLength();

                entity.Property(e => e.Iden).ValueGeneratedOnAdd();

                entity.Property(e => e.IdenHead).HasColumnName("Iden_Head");

                entity.Property(e => e.Idtercero)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("IDTERCERO");

                entity.Property(e => e.Idzona)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("IDZONA")
                    .IsFixedLength();

                entity.Property(e => e.Item)
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.MoneFco)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("MONE_FCO")
                    .IsFixedLength();

                entity.Property(e => e.Nomcliente)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("NOMCLIENTE");

                entity.Property(e => e.Nomconcepto)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("NOMCONCEPTO");

                entity.Property(e => e.Novedad)
                    .HasColumnType("numeric(18, 9)")
                    .HasColumnName("NOVEDAD");

                entity.Property(e => e.Numdoc)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("NUMDOC")
                    .IsFixedLength();

                entity.Property(e => e.Porcdes)
                    .HasColumnType("money")
                    .HasColumnName("PORCDES");

                entity.Property(e => e.Porciva)
                    .HasColumnType("numeric(18, 9)")
                    .HasColumnName("PORCIVA");

                entity.Property(e => e.Porcrete)
                    .HasColumnType("money")
                    .HasColumnName("PORCRETE");

                entity.Property(e => e.Refe)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("REFE");

                entity.Property(e => e.Spid).HasColumnName("SPID");

                entity.Property(e => e.Td)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("TD")
                    .IsFixedLength();

                entity.Property(e => e.Totalconcepto)
                    .HasColumnType("money")
                    .HasColumnName("TOTALCONCEPTO");

                entity.Property(e => e.Vcto)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("VCTO")
                    .IsFixedLength();

                entity.Property(e => e.Vrdescuento)
                    .HasColumnType("money")
                    .HasColumnName("VRDESCUENTO");

                entity.Property(e => e.Vriva)
                    .HasColumnType("money")
                    .HasColumnName("VRIVA");

                entity.Property(e => e.Vrrete)
                    .HasColumnType("money")
                    .HasColumnName("VRRETE");

                entity.Property(e => e.Vrunitario)
                    .HasColumnType("money")
                    .HasColumnName("VRUNITARIO");
            });

            modelBuilder.Entity<ProyeccionHead>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ProyeccionHead");

                entity.Property(e => e.Descripcion)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.FechaProceso)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Iden).ValueGeneratedOnAdd();

                entity.Property(e => e.Moneda)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.TasaCambio).HasColumnType("numeric(18, 6)");
            });

            modelBuilder.Entity<ProyeccionesPresupuesto>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ProyeccionesPresupuesto");

                entity.Property(e => e.AnoOrigen)
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Anomescta)
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .HasColumnName("ANOMESCTA")
                    .IsFixedLength();

                entity.Property(e => e.Bu)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("BU")
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.Codcco)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("CODCCO")
                    .IsFixedLength();

                entity.Property(e => e.Coddcta)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("CODDCTA")
                    .IsFixedLength();

                entity.Property(e => e.Codipresu)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("CODIPRESU")
                    .IsFixedLength();

                entity.Property(e => e.IdenProyeccionespresupuesto)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_proyeccionespresupuesto");

                entity.Property(e => e.PorContabilidad).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.PorPresupuesto).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.Porcentaje).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.PresupuestoProyectado).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.Tipocta)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("TIPOCTA")
                    .IsFixedLength();

                entity.Property(e => e.ValorContabilidad).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.Valorpresu)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("VALORPRESU");

                entity.HasOne(d => d.BuNavigation)
                    .WithMany()
                    .HasForeignKey(d => d.Bu)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ProyeccionesPresupuesto_BU");
            });

            modelBuilder.Entity<QueryEntornoDato>(entity =>
            {
                entity.HasKey(e => e.Iden);

                entity.Property(e => e.Iden)
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("IDEN");

                entity.Property(e => e.CampoConsecutivo)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Campo_Consecutivo");

                entity.Property(e => e.CampoIdTransaccion)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Campo_IdTransaccion");

                entity.Property(e => e.CampoTipoDocumento)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Campo_TipoDocumento");

                entity.Property(e => e.CampoTipoTransaccion)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Campo_TipoTransaccion");

                entity.Property(e => e.Descripcion)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Nombre)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Sqlrelaciones)
                    .HasMaxLength(8000)
                    .IsUnicode(false)
                    .HasColumnName("SQLRelaciones");
            });

            modelBuilder.Entity<QueryEntornoDatosColumna>(entity =>
            {
                entity.HasKey(e => e.IdenColumna);

                entity.ToTable("QueryEntornoDatos_Columnas");

                entity.Property(e => e.IdenColumna)
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("IDEN_Columna");

                entity.Property(e => e.Columna)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Descripcion)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.ExpresionTipoDato)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.FuncionVariable)
                    .HasMaxLength(8000)
                    .IsUnicode(false);

                entity.Property(e => e.IdenEntornoDatos)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("IDEN_EntornoDatos");

                entity.Property(e => e.TipoDato)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.HasOne(d => d.IdenEntornoDatosNavigation)
                    .WithMany(p => p.QueryEntornoDatosColumnas)
                    .HasForeignKey(d => d.IdenEntornoDatos)
                    .HasConstraintName("FK_QueryEntornoDatos_Columnas_QueryEntornoDatos");
            });

            modelBuilder.Entity<QueryEntornoDatosVariable>(entity =>
            {
                entity.HasKey(e => new { e.IdenQueryEntornoDatos, e.IdenVariables });

                entity.ToTable("QueryEntornoDatos_Variables");

                entity.Property(e => e.IdenQueryEntornoDatos)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("IDEN_QueryEntornoDatos");

                entity.Property(e => e.IdenVariables)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("IDEN_Variables");

                entity.Property(e => e.IdenQueryentornodatosVariables)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_queryentornodatos_variables");
            });

            modelBuilder.Entity<QueryEntornoDatosVariablesMaestro>(entity =>
            {
                entity.HasKey(e => new { e.IdenQueryEntornoDatos, e.Maestro });

                entity.ToTable("QueryEntornoDatos_Variables_Maestros");

                entity.Property(e => e.IdenQueryEntornoDatos)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("IDEN_QueryEntornoDatos");

                entity.Property(e => e.Maestro)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.CampoCodigo)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Campo_Codigo");

                entity.Property(e => e.CampoCodigo2)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Campo_Codigo2");

                entity.Property(e => e.IdenQueryentornodatosVariablesMaestros)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_queryentornodatos_variables_maestros");
            });

            modelBuilder.Entity<QueryModelo>(entity =>
            {
                entity.HasKey(e => e.Codigo)
                    .HasName("PK_QueryModelos_Codigo");

                entity.Property(e => e.Codigo)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.EmailBody)
                    .HasMaxLength(8000)
                    .IsUnicode(false);

                entity.Property(e => e.EmailNombreAdjunto)
                    .HasMaxLength(256)
                    .IsUnicode(false);

                entity.Property(e => e.EmailSubject)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.EmailTo)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.IdenQuerymodelos)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_querymodelos");

                entity.Property(e => e.Nombre)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.QueryEspecial)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.QuerySecuencia)
                    .HasMaxLength(250)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<QueryModelosColumna>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.Iden).ValueGeneratedOnAdd();

                entity.Property(e => e.NombreColumna)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.QuerySecuencia)
                    .HasMaxLength(250)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<QueryModelosProceso>(entity =>
            {
                entity.HasKey(e => e.Iden)
                    .HasName("Pk_QueryModelos_Proceso");

                entity.ToTable("QueryModelos_Proceso");

                entity.Property(e => e.Iden)
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.CodigoModelo)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.FechaProceso).HasColumnType("smalldatetime");

                entity.Property(e => e.RutaArchivos)
                    .HasMaxLength(256)
                    .IsUnicode(false);

                entity.HasOne(d => d.CodigoModeloNavigation)
                    .WithMany(p => p.QueryModelosProcesos)
                    .HasForeignKey(d => d.CodigoModelo)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_QueryModelos_Proceso_QueryModelos");
            });

            modelBuilder.Entity<QueryModelosProcesoArchivo>(entity =>
            {
                entity.HasKey(e => new { e.IdenModeloProceso, e.Iden })
                    .HasName("Pk_QueryModelos_ProcesoArchivos");

                entity.ToTable("QueryModelos_ProcesoArchivos");

                entity.Property(e => e.IdenModeloProceso)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("Iden_ModeloProceso");

                entity.Property(e => e.Iden)
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.EmailObject)
                    .HasMaxLength(8000)
                    .IsUnicode(false);

                entity.Property(e => e.EmailSubject)
                    .HasMaxLength(8000)
                    .IsUnicode(false);

                entity.Property(e => e.EmailTo)
                    .HasMaxLength(8000)
                    .IsUnicode(false);

                entity.Property(e => e.FechaEnvio).HasColumnType("datetime");

                entity.Property(e => e.MensajeError)
                    .HasMaxLength(8000)
                    .IsUnicode(false);

                entity.Property(e => e.Nombre)
                    .HasMaxLength(8000)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdenModeloProcesoNavigation)
                    .WithMany(p => p.QueryModelosProcesoArchivos)
                    .HasForeignKey(d => d.IdenModeloProceso)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_QueryModelos_ProcesoArchivos_QueryModelos_Proceso");
            });

            modelBuilder.Entity<QueryModelosRelacion>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("QueryModelosRelacion");

                entity.Property(e => e.Columna)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.IdenQuerymodelosrelacion)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_querymodelosrelacion");

                entity.Property(e => e.Parametro)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.QueryEspecial)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.QuerySecuencia)
                    .HasMaxLength(250)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<QueryModelosRelacionTemp>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("QueryModelosRelacion_Temp");

                entity.Property(e => e.Columna)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.IdenQuerymodelosrelacionTemp)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_querymodelosrelacion_temp");

                entity.Property(e => e.Parametro)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.QueryEspecial)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.QuerySecuencia)
                    .HasMaxLength(250)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<QueryPropiedadesParametro>(entity =>
            {
                entity.HasKey(e => new { e.StoredProcedure, e.Parametro });

                entity.HasIndex(e => e.Parametro, "IX_QUERYPROPIEDADESPARAMETROS_PARAMETRO");

                entity.HasIndex(e => e.StoredProcedure, "IX_QUERYPROPIEDADESPARAMETROS_STOREDPROCEDURE");

                entity.Property(e => e.StoredProcedure)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Parametro)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Columna)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DescripcionParametro)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.ExpresionFiltro)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.ExpresionTipoDato)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ListaPosibilidades)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.OpcionalAyuda)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Operacion)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.OrdenGrabacion)
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.ParentisisApertura)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ParentisisCierre)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.SeccionAyuda)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.HasOne(d => d.StoredProcedureNavigation)
                    .WithMany(p => p.QueryPropiedadesParametros)
                    .HasForeignKey(d => d.StoredProcedure)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_QueryPropiedadesParametros_QueryPropiedadesStoredProcedure");
            });

            modelBuilder.Entity<QueryPropiedadesStoredProcedure>(entity =>
            {
                entity.HasKey(e => e.StoredProcedure);

                entity.ToTable("QueryPropiedadesStoredProcedure");

                entity.Property(e => e.StoredProcedure)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Categoria)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DescripcionProcedure)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.IdenEntornoDatos)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("IDEN_EntornoDatos");

                entity.Property(e => e.IdenQuerypropiedadesstoredprocedure)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_querypropiedadesstoredprocedure");

                entity.Property(e => e.NombreReporte)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Usuario).HasColumnType("numeric(18, 0)");

                entity.HasOne(d => d.IdenEntornoDatosNavigation)
                    .WithMany(p => p.QueryPropiedadesStoredProcedures)
                    .HasForeignKey(d => d.IdenEntornoDatos)
                    .HasConstraintName("FK_QueryPropiedadesStoredProcedure_QueryEntornoDatos");
            });

            modelBuilder.Entity<QueryStoredProcedureColumna>(entity =>
            {
                entity.HasKey(e => e.IdenColumna);

                entity.ToTable("QueryStoredProcedure_Columnas");

                entity.Property(e => e.IdenColumna)
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("IDEN_Columna");

                entity.Property(e => e.Columna)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.FuncionGrupo)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.StoredProcedure)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.TipoOrden)
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.HasOne(d => d.StoredProcedureNavigation)
                    .WithMany(p => p.QueryStoredProcedureColumnas)
                    .HasForeignKey(d => d.StoredProcedure)
                    .HasConstraintName("FK_QueryStoredProcedure_Columnas_QueryPropiedadesStoredProcedure");
            });

            modelBuilder.Entity<RecaculoMese>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.AnoMes)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.IdenRecaculomeses)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_recaculomeses");

                entity.Property(e => e.Segundo).HasDefaultValueSql("((0))");

                entity.Property(e => e.TiempoF).HasColumnType("datetime");

                entity.Property(e => e.TiempoI).HasColumnType("datetime");
            });

            modelBuilder.Entity<ReciboDeCajaChequesPosfechado>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ReciboDeCaja_ChequesPosfechados");

                entity.HasIndex(e => new { e.Idfuente, e.Numdoctra, e.Numefac, e.Vencefac, e.Refefac }, "IX_RECIBODECAJA_CHEQUESPOSFECHADOS_IDFUENTE_NUMDOCTRA_NUMEFAC_REFEFAC_VENCEFAC")
                    .IsClustered();

                entity.Property(e => e.Bu)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("BU")
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.Cliprv)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("CLIPRV");

                entity.Property(e => e.Codicta)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("CODICTA")
                    .IsFixedLength();

                entity.Property(e => e.Codictacja)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("CODICTACJA")
                    .IsFixedLength();

                entity.Property(e => e.Fechatra)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("FECHATRA")
                    .IsFixedLength();

                entity.Property(e => e.Idbanco)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("IDBANCO")
                    .IsFixedLength();

                entity.Property(e => e.Idfuente)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("IDFUENTE")
                    .IsFixedLength();

                entity.Property(e => e.Idregistro)
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("IDREGISTRO");

                entity.Property(e => e.Moneda)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("MONEDA")
                    .IsFixedLength();

                entity.Property(e => e.Nittra)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("NITTRA");

                entity.Property(e => e.Numdoctra)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("NUMDOCTRA")
                    .IsFixedLength();

                entity.Property(e => e.Numefac)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("NUMEFAC");

                entity.Property(e => e.Refefac)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("REFEFAC");

                entity.Property(e => e.Tipofac)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("TIPOFAC")
                    .IsFixedLength();

                entity.Property(e => e.Valortra)
                    .HasColumnType("money")
                    .HasColumnName("VALORTRA");

                entity.Property(e => e.Vencefac)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("VENCEFAC")
                    .IsFixedLength();
            });

            modelBuilder.Entity<ReciboPagoTemp>(entity =>
            {
                entity.HasKey(e => e.Iden);

                entity.ToTable("ReciboPagoTemp");

                entity.Property(e => e.Iden)
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("IDEN");

                entity.Property(e => e.Cliente)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.CtaContrapartida)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Documento)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Fecha)
                    .HasMaxLength(10)
                    .IsFixedLength();

                entity.Property(e => e.FechaCreacion)
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Fuente)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Observacion)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.TasaCambio).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.Usuario)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ValorApagar)
                    .HasColumnType("numeric(18, 2)")
                    .HasColumnName("ValorAPagar");
            });

            modelBuilder.Entity<ReciboPagoTempGrid>(entity =>
            {
                entity.HasKey(e => e.Iden);

                entity.ToTable("ReciboPagoTempGrid");

                entity.Property(e => e.Iden)
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("IDEN");

                entity.Property(e => e.Bu)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.ClienteFact)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Cuenta)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.FechaCreacion)
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.IdenRecibo)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("IDEN_Recibo");

                entity.Property(e => e.NumeFact)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Ref)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.TextoFila)
                    .HasMaxLength(4000)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.TipoFact)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Vencimiento)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.HasOne(d => d.IdenReciboNavigation)
                    .WithMany(p => p.ReciboPagoTempGrids)
                    .HasForeignKey(d => d.IdenRecibo)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ReciboPagoTempGrid_ReciboPagoTemp");
            });

            modelBuilder.Entity<Reclasificacion3ro>(entity =>
            {
                entity.HasKey(e => new { e.Id, e.Folio, e.TipoFolio })
                    .IsClustered(false);

                entity.Property(e => e.Id)
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Folio)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.TipoFolio)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CuentaFinal)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')")
                    .IsFixedLength();

                entity.Property(e => e.CuentaInicial)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')")
                    .IsFixedLength();

                entity.Property(e => e.DctoFinal)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')")
                    .IsFixedLength();

                entity.Property(e => e.DctoInicial)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')")
                    .IsFixedLength();

                entity.Property(e => e.FechaFinal)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')")
                    .IsFixedLength();

                entity.Property(e => e.FechaInicial)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')")
                    .IsFixedLength();

                entity.Property(e => e.FuenteFinal)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')")
                    .IsFixedLength();

                entity.Property(e => e.FuenteInicial)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')")
                    .IsFixedLength();

                entity.Property(e => e.TerceroActual)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.TerceroNuevo)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.HasOne(d => d.TerceroNuevoNavigation)
                    .WithMany(p => p.Reclasificacion3ros)
                    .HasForeignKey(d => d.TerceroNuevo)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Reclasificacion3ros_TERCEROS1");
            });

            modelBuilder.Entity<ReembolsoCajaChica>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ReembolsoCajaChica");

                entity.Property(e => e.Consecutivo).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.ConsecutivoExterno).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.Detalle)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.FechaCaja)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Iden)
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.MetodoDePago)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.PersonalAutorizacion)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Usuario)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");
            });

            modelBuilder.Entity<ReembolsoCajaChicaFactura>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ReembolsoCajaChica_Facturas");

                entity.Property(e => e.AuxiliarAnticipo)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AuxiliarConcepto)
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.BlDetraccion).HasColumnName("bl_Detraccion");

                entity.Property(e => e.Bu)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("BU")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.CentroCosto)
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.CodigoDetraccion)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ConceptoContable)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Cuenta)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.CuentaAnticipo)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.CuentaCxC)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.CuentaCxP)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DepositoDetraccion)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Descripcion)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DocumentoAsociado)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DocumentoCompra)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DocumentoEgreso)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DocumentoNota)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Empleado)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.FechaCaja)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.FechaContable)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.FechaDetraccion)
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.FechaFactura)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.FechaFacturaCxC)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.FechaFacturaCxP)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.FechaVencimiento)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.FuenteCompra)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.FuenteEgreso)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.FuenteNota)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Iden)
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.IdenReembolsoCajaChica)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("Iden_ReembolsoCajaChica");

                entity.Property(e => e.Idprogramacion)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("IDProgramacion");

                entity.Property(e => e.ImporteDetraccion).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.Item)
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.Moneda)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.NumFactura)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.NumFacturaCxC)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.NumFacturaCxP)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.PorcentajeDetraccion).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.Proveedor)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Redondeo).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.ReferenciaCxC)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ReferenciaCxP)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ReferenciaFactura)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Rendicion)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SerieFactura)
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SerieFacturaCxC)
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SerieFacturaCxP)
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.TasaCambio).HasColumnType("numeric(18, 7)");

                entity.Property(e => e.TipoFactura)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.TipoFacturaCxC)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.TipoFacturaCxP)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.TipoOperaDetracion)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ValorConcepto).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.ValorImpuesto).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.ValorInicialEmpleado).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.VencimientoCxC)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.VencimientoCxP)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.VencimientoFactura)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");
            });

            modelBuilder.Entity<ReferenciaPorTransaccionCuentum>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ReferenciaPorTransaccion_Cuenta");

                entity.Property(e => e.CodiCta)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.ExcluTercero)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Formula).IsUnicode(false);

                entity.Property(e => e.Iden).ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<Regional>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("REGIONAL");

                entity.Property(e => e.Descripcion)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPCION")
                    .IsFixedLength();

                entity.Property(e => e.Idbanco)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("IDBANCO")
                    .IsFixedLength();

                entity.Property(e => e.IdenRegional)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_regional");

                entity.Property(e => e.Regional1)
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .HasColumnName("REGIONAL")
                    .IsFixedLength();
            });

            modelBuilder.Entity<RelacionConciliacionNotum>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.Consecutra)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("CONSECUTRA");

                entity.Property(e => e.IdFuente)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.Iden)
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Numdoctra)
                    .HasMaxLength(10)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<RelacionCtasImpuesto>(entity =>
            {
                entity.Property(e => e.CuentaBase)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CuentaPrincipal)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.HasOne(d => d.CuentaBaseNavigation)
                    .WithMany(p => p.RelacionCtasImpuestoCuentaBaseNavigations)
                    .HasForeignKey(d => d.CuentaBase)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_RelacionCtasImpuestos_MAECONT1");

                entity.HasOne(d => d.CuentaPrincipalNavigation)
                    .WithMany(p => p.RelacionCtasImpuestoCuentaPrincipalNavigations)
                    .HasForeignKey(d => d.CuentaPrincipal)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_RelacionCtasImpuestos_MAECONT");
            });

            modelBuilder.Entity<Relacione>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("RELACIONES");

                entity.Property(e => e.Columnadest)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("COLUMNADEST");

                entity.Property(e => e.Columnaori)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("COLUMNAORI");

                entity.Property(e => e.Idcolumnadest)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("IDCOLUMNADEST");

                entity.Property(e => e.Idcolumnaori)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("IDCOLUMNAORI");

                entity.Property(e => e.IdenRelaciones)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_relaciones");

                entity.Property(e => e.Idtdestino)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("IDTDESTINO");

                entity.Property(e => e.Idtorigen)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("IDTORIGEN");

                entity.Property(e => e.Tdestino)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("TDESTINO");

                entity.Property(e => e.Torigen)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("TORIGEN");
            });

            modelBuilder.Entity<ReportesImpresion>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ReportesImpresion");

                entity.Property(e => e.Fechagrabacion)
                    .HasColumnType("datetime")
                    .HasColumnName("fechagrabacion");

                entity.Property(e => e.IdReportDataBase)
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.IdenSesion)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("iden_sesion");

                entity.Property(e => e.NombreReporte)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Usuario)
                    .HasMaxLength(250)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ReportesImpresionParametro>(entity =>
            {
                entity.HasNoKey();

                entity.HasIndex(e => e.IdReportDataBase, "IX_ReportesImpresionParametros_IdReportDataBase")
                    .IsClustered();

                entity.Property(e => e.IdReportDataBase).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.IdenReportesimpresionparametros)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_reportesimpresionparametros");

                entity.Property(e => e.Parametro)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ValorParametro).IsUnicode(false);
            });

            modelBuilder.Entity<ReportesRpt>(entity =>
            {
                entity.ToTable("ReportesRpt");

                entity.Property(e => e.Id)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("ID");

                entity.Property(e => e.AdicionadoPorusuario).HasDefaultValueSql("((0))");

                entity.Property(e => e.Categoria)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Descripcion)
                    .HasMaxLength(512)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.IdenReportesrpt)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_reportesrpt");

                entity.Property(e => e.NombreControlador).IsUnicode(false);

                entity.Property(e => e.NombreForma)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.NombreOpcion)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Reporte)
                    .HasMaxLength(512)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.StoreProcedure)
                    .HasMaxLength(512)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Subreportes)
                    .HasMaxLength(512)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.TipoReporte)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('CR')")
                    .IsFixedLength();

                entity.Property(e => e.TipoVentana).HasColumnName("tipoVentana");
            });

            modelBuilder.Entity<ReportesRptBody>(entity =>
            {
                entity.HasKey(e => new { e.IdenReporte, e.Reporte });

                entity.ToTable("ReportesRpt_Body");

                entity.Property(e => e.IdenReporte)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("Iden_reporte");

                entity.Property(e => e.Reporte)
                    .HasMaxLength(512)
                    .IsUnicode(false);

                entity.Property(e => e.IdenReportesrptBody)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_reportesrpt_body");

                entity.Property(e => e.ReporteCr)
                    .HasColumnType("image")
                    .HasColumnName("Reporte_CR");

                entity.Property(e => e.ReporteDefecto)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.ReporteFr)
                    .HasColumnType("image")
                    .HasColumnName("Reporte_FR");

                entity.HasOne(d => d.IdenReporteNavigation)
                    .WithMany(p => p.ReportesRptBodies)
                    .HasForeignKey(d => d.IdenReporte)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ReportesRpt_Body_ReportesRpt");
            });

            modelBuilder.Entity<ReportesSeguridadBody>(entity =>
            {
                entity.HasKey(e => new { e.IdenHead, e.IdenReporte });

                entity.ToTable("ReportesSeguridad_Body");

                entity.Property(e => e.IdenHead).HasColumnName("Iden_Head");

                entity.Property(e => e.IdenReporte).HasColumnName("Iden_Reporte");

                entity.Property(e => e.IdenReportesseguridadBody)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_reportesseguridad_body");
            });

            modelBuilder.Entity<ReportesSeguridadHead>(entity =>
            {
                entity.HasKey(e => e.IdUsuario)
                    .HasName("PK_REPORTESSEGURIDAD_HEAD");

                entity.ToTable("ReportesSeguridad_Head");

                entity.Property(e => e.IdUsuario).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.Iden).ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<ReservaPresuBu>(entity =>
            {
                entity.HasKey(e => new { e.Bu, e.Codcta, e.Codcco, e.Nreserva, e.Anomes })
                    .HasName("PK_RESERVAPRESU_BU")
                    .IsClustered(false);

                entity.ToTable("ReservaPresu_BU");

                entity.Property(e => e.Bu)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("BU");

                entity.Property(e => e.Codcta)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("CODCTA");

                entity.Property(e => e.Codcco)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("CODCCO");

                entity.Property(e => e.Nreserva)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("NRESERVA")
                    .IsFixedLength();

                entity.Property(e => e.Anomes)
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .HasColumnName("ANOMES")
                    .IsFixedLength();

                entity.Property(e => e.Automatica)
                    .HasColumnName("AUTOMATICA")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Beneficiario)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("BENEFICIARIO");

                entity.Property(e => e.Certificado)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("CERTIFICADO");

                entity.Property(e => e.Estado)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("ESTADO")
                    .HasDefaultValueSql("(' ')")
                    .IsFixedLength();

                entity.Property(e => e.Fecha)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("FECHA")
                    .IsFixedLength();

                entity.Property(e => e.IdenReservapresuBu)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_reservapresu_bu");

                entity.Property(e => e.Identificacion)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("IDENTIFICACION");

                entity.Property(e => e.Mcredito)
                    .HasColumnType("numeric(18, 2)")
                    .HasColumnName("MCREDITO")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Mdebito)
                    .HasColumnType("numeric(18, 2)")
                    .HasColumnName("MDEBITO")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Observacion)
                    .HasMaxLength(8000)
                    .IsUnicode(false)
                    .HasColumnName("OBSERVACION");

                entity.Property(e => e.Saldo)
                    .HasColumnType("numeric(18, 2)")
                    .HasColumnName("SALDO")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Trasladocr)
                    .HasColumnType("numeric(18, 2)")
                    .HasColumnName("TRASLADOCR")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Trasladodb)
                    .HasColumnType("numeric(18, 2)")
                    .HasColumnName("TRASLADODB")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Valorordenado)
                    .HasColumnType("numeric(18, 2)")
                    .HasColumnName("VALORORDENADO")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Valorreserva)
                    .HasColumnType("numeric(18, 2)")
                    .HasColumnName("VALORRESERVA")
                    .HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<ReservapresuLibroPrincipal>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RESERVAPRESU_LibroPrincipal");

                entity.Property(e => e.Anomes)
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .HasColumnName("ANOMES")
                    .IsFixedLength();

                entity.Property(e => e.Automatica).HasColumnName("AUTOMATICA");

                entity.Property(e => e.Beneficiario)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("BENEFICIARIO");

                entity.Property(e => e.Certificado)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("CERTIFICADO");

                entity.Property(e => e.Codcco)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("CODCCO");

                entity.Property(e => e.Codcta)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("CODCTA");

                entity.Property(e => e.Estado)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("ESTADO")
                    .IsFixedLength();

                entity.Property(e => e.Fecha)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("FECHA")
                    .IsFixedLength();

                entity.Property(e => e.Identificacion)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("IDENTIFICACION");

                entity.Property(e => e.Mcredito)
                    .HasColumnType("numeric(38, 2)")
                    .HasColumnName("MCREDITO");

                entity.Property(e => e.Mdebito)
                    .HasColumnType("numeric(38, 2)")
                    .HasColumnName("MDEBITO");

                entity.Property(e => e.Nreserva)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("NRESERVA")
                    .IsFixedLength();

                entity.Property(e => e.Observacion)
                    .HasMaxLength(8000)
                    .IsUnicode(false)
                    .HasColumnName("OBSERVACION");

                entity.Property(e => e.Saldo)
                    .HasColumnType("numeric(38, 2)")
                    .HasColumnName("SALDO");

                entity.Property(e => e.Trasladocr)
                    .HasColumnType("numeric(38, 2)")
                    .HasColumnName("TRASLADOCR");

                entity.Property(e => e.Trasladodb)
                    .HasColumnType("numeric(38, 2)")
                    .HasColumnName("TRASLADODB");

                entity.Property(e => e.Valorordenado)
                    .HasColumnType("numeric(38, 2)")
                    .HasColumnName("VALORORDENADO");

                entity.Property(e => e.Valorreserva)
                    .HasColumnType("numeric(38, 2)")
                    .HasColumnName("VALORRESERVA");
            });

            modelBuilder.Entity<ResolucionVsMaquina>(entity =>
            {
                entity.HasKey(e => e.Iden);

                entity.Property(e => e.Iden)
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.IdenMaquina)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("Iden_Maquina");

                entity.Property(e => e.IdenResolucion)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("Iden_Resolucion");

                entity.HasOne(d => d.IdenMaquinaNavigation)
                    .WithMany(p => p.ResolucionVsMaquinas)
                    .HasForeignKey(d => d.IdenMaquina)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_MaquinasHost_ResolucionVsMaquinas");

                entity.HasOne(d => d.IdenResolucionNavigation)
                    .WithMany(p => p.ResolucionVsMaquinas)
                    .HasForeignKey(d => d.IdenResolucion)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Resolucion_ResolucionVsMaquinas");
            });

            modelBuilder.Entity<ResolucionesDeFactura>(entity =>
            {
                entity.HasKey(e => e.Iden);

                entity.HasIndex(e => new { e.Fuente, e.RangoInicialInterno, e.RangoFinalInterno }, "IX_RESOLUCIONESDEFACTURAS_FUENTE_RANGOFINALINTERNO_RANGOINICIALINTERNO");

                entity.HasIndex(e => new { e.NoResolucion, e.Fuente }, "UQ_RESOLUCIONESDEFACTURAS_NORESOLUCION")
                    .IsUnique();

                entity.HasIndex(e => e.Codigo, "UQ_ResolucionesDeFacturas_Codigo")
                    .IsUnique();

                entity.Property(e => e.Iden)
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("IDEN");

                entity.Property(e => e.ClaveDosificacion)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Codigo)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.FechaFinal).HasColumnType("smalldatetime");

                entity.Property(e => e.FechaInicio).HasColumnType("smalldatetime");

                entity.Property(e => e.FechaResolucion).HasColumnType("smalldatetime");

                entity.Property(e => e.Fuente)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.NoResolucion)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Prefijo)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.RangoFinalInterno)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.RangoFinalLegal)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RangoInicialInterno)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.RangoInicialLegal)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Resolucion)
                    .HasMaxLength(1000)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Revelacione>(entity =>
            {
                entity.HasKey(e => e.Iden)
                    .HasName("PK_REVELACIONES");

                entity.Property(e => e.ConsecutraRelacioando).HasColumnName("consecutra_relacioando");

                entity.Property(e => e.Descripcion).IsUnicode(false);

                entity.Property(e => e.FechaGrabacion)
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.IdenSecciones).HasColumnName("Iden_Secciones");

                entity.Property(e => e.Usuario)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdenSeccionesNavigation)
                    .WithMany(p => p.Revelaciones)
                    .HasForeignKey(d => d.IdenSecciones)
                    .HasConstraintName("FK_Revelaciones_Secciones");
            });

            modelBuilder.Entity<RevelacionesAuditorium>(entity =>
            {
                entity.HasKey(e => e.Iden);

                entity.HasIndex(e => new { e.Periodo, e.IdenSecciones }, "IX_RevelacionesAuditoria")
                    .IsUnique();

                entity.Property(e => e.FechaGrabacion)
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.IdenSecciones).HasColumnName("Iden_Secciones");

                entity.Property(e => e.Periodo)
                    .HasMaxLength(7)
                    .IsUnicode(false);

                entity.Property(e => e.Usuario)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdenSeccionesNavigation)
                    .WithMany(p => p.RevelacionesAuditoria)
                    .HasForeignKey(d => d.IdenSecciones)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_RevelacionesAuditoria_Secciones");
            });

            modelBuilder.Entity<RevelacionesMese>(entity =>
            {
                entity.HasKey(e => e.Anomes)
                    .IsClustered(false);

                entity.Property(e => e.Anomes)
                    .HasMaxLength(7)
                    .IsUnicode(false)
                    .HasColumnName("ANOMES");

                entity.Property(e => e.IdenRevelacionesmeses)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_revelacionesmeses");

                entity.Property(e => e.OpenMes)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("OPEN_MES")
                    .IsFixedLength();

                entity.HasOne(d => d.AnomesNavigation)
                    .WithOne(p => p.RevelacionesMese)
                    .HasForeignKey<RevelacionesMese>(d => d.Anomes)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_RevelacionesMeses_Meses");
            });

            modelBuilder.Entity<RevelacionesPeriodo>(entity =>
            {
                entity.HasKey(e => e.Iden);

                entity.HasIndex(e => new { e.Periodo, e.IdenSecciones, e.CodigoNota }, "IX_RevelacionesPeriodos")
                    .IsUnique();

                entity.Property(e => e.CodigoNota)
                    .HasMaxLength(125)
                    .IsUnicode(false);

                entity.Property(e => e.FechaGrabacion)
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.IdenSecciones).HasColumnName("Iden_Secciones");

                entity.Property(e => e.NombreNota)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Periodo)
                    .HasMaxLength(7)
                    .IsUnicode(false);

                entity.Property(e => e.Revelacion).IsUnicode(false);

                entity.Property(e => e.Usuario)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdenSeccionesNavigation)
                    .WithMany(p => p.RevelacionesPeriodos)
                    .HasForeignKey(d => d.IdenSecciones)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_RevelacionesPeriodos_Secciones");
            });

            modelBuilder.Entity<RevelacionesPeriodosAnexo>(entity =>
            {
                entity.HasKey(e => e.Iden);

                entity.ToTable("RevelacionesPeriodosAnexo");

                entity.Property(e => e.IdAplicacionesFunciones).HasColumnName("Id_AplicacionesFunciones");

                entity.Property(e => e.IdAplicacionesOrigen).HasColumnName("Id_AplicacionesOrigen");

                entity.Property(e => e.IdenRevelacionesPeriodos).HasColumnName("Iden_RevelacionesPeriodos");

                entity.Property(e => e.Nombre)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Plantilla).IsUnicode(false);

                entity.HasOne(d => d.IdenRevelacionesPeriodosNavigation)
                    .WithMany(p => p.RevelacionesPeriodosAnexos)
                    .HasForeignKey(d => d.IdenRevelacionesPeriodos)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_RevelacionesPeriodosAnexo_RevelacionesPeriodos");
            });

            modelBuilder.Entity<ReversionContable>(entity =>
            {
                entity.HasKey(e => new { e.Fuente, e.Documento });

                entity.ToTable("ReversionContable");

                entity.Property(e => e.Fuente)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')")
                    .IsFixedLength();

                entity.Property(e => e.Documento)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')")
                    .IsFixedLength();

                entity.Property(e => e.DocumentoNuevo)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')")
                    .IsFixedLength();

                entity.Property(e => e.DocumentoRevertido)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')")
                    .IsFixedLength();

                entity.Property(e => e.FuenteNuevo)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')")
                    .IsFixedLength();

                entity.Property(e => e.FuenteRevertido)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')")
                    .IsFixedLength();

                entity.Property(e => e.IdRev).ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<Role>(entity =>
            {
                entity.HasKey(e => e.Codigo)
                    .HasName("PK_ROLES");

                entity.Property(e => e.Codigo)
                    .HasMaxLength(4)
                    .IsUnicode(false);

                entity.Property(e => e.AplicarEnTodosLosBu).HasColumnName("AplicarEnTodosLosBU");

                entity.Property(e => e.Descripcion)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.IdenRoles)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_roles");

                entity.Property(e => e.Nombre)
                    .HasMaxLength(250)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<RolesBody>(entity =>
            {
                entity.HasKey(e => new { e.IdenTabla, e.Codigo, e.CodigoAdicional });

                entity.ToTable("Roles_Body");

                entity.Property(e => e.IdenTabla).HasColumnName("Iden_Tabla");

                entity.Property(e => e.Codigo)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.CodigoAdicional)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.IdenRolesBody)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_roles_body");

                entity.HasOne(d => d.IdenTablaNavigation)
                    .WithMany(p => p.RolesBodies)
                    .HasPrincipalKey(p => p.Iden)
                    .HasForeignKey(d => d.IdenTabla)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Roles_Body_Roles_Tabla");
            });

            modelBuilder.Entity<RolesBodyLogT>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Roles_Body_LogT");

                entity.Property(e => e.Codigo)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CodigoAdicional)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.IdenRolesBody).HasColumnName("Iden_Roles_Body");

                entity.Property(e => e.IdenTabla).HasColumnName("Iden_Tabla");
            });

            modelBuilder.Entity<RolesBu>(entity =>
            {
                entity.HasKey(e => new { e.Rol, e.Bu })
                    .HasName("PK_ROLES_BU");

                entity.ToTable("Roles_Bu");

                entity.Property(e => e.Rol)
                    .HasMaxLength(4)
                    .IsUnicode(false);

                entity.Property(e => e.Bu)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.IdenRolesBu)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_roles_bu");

                entity.HasOne(d => d.RolNavigation)
                    .WithMany(p => p.RolesBus)
                    .HasForeignKey(d => d.Rol)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Roles_Bu_Roles");
            });

            modelBuilder.Entity<RolesConfiguracionInterface>(entity =>
            {
                entity.HasKey(e => new { e.Formulario, e.Control, e.Tabla })
                    .HasName("PK_ROLESCONFIGURACIONINTERFACES");

                entity.Property(e => e.Formulario)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Control)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Tabla)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.IdenRolesconfiguracioninterfaces)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_rolesconfiguracioninterfaces");

                entity.Property(e => e.ParametroEntrada)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<RolesCuentaAuxiliar>(entity =>
            {
                entity.HasKey(e => new { e.IdenRol, e.Cuenta });

                entity.ToTable("Roles_CuentaAuxiliar");

                entity.Property(e => e.IdenRol).HasColumnName("Iden_Rol");

                entity.Property(e => e.Cuenta)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Iden).ValueGeneratedOnAdd();

                entity.HasOne(d => d.CuentaNavigation)
                    .WithMany(p => p.RolesCuentaAuxiliars)
                    .HasForeignKey(d => d.Cuenta)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Roles_CuentaAuxiliar_MAECONT");

                entity.HasOne(d => d.IdenRolNavigation)
                    .WithMany(p => p.RolesCuentaAuxiliars)
                    .HasPrincipalKey(p => p.Iden)
                    .HasForeignKey(d => d.IdenRol)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Roles_CuentaAuxiliar_Roles_Head");
            });

            modelBuilder.Entity<RolesCuentaAuxiliarLogT>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Roles_CuentaAuxiliar_LogT");

                entity.Property(e => e.Cuenta)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.IdenRol).HasColumnName("Iden_Rol");
            });

            modelBuilder.Entity<RolesEntidade>(entity =>
            {
                entity.HasKey(e => e.Codigo)
                    .HasName("PK_ROLESENTIDADES");

                entity.HasIndex(e => new { e.Codigo, e.ParametroParaIdentificador1 }, "IX_ROLESENTIDADES_CODIGO_PARAMETROPARAIDENTIFICADOR1");

                entity.HasIndex(e => new { e.Codigo, e.ParametroParaIdentificador2 }, "IX_ROLESENTIDADES_CODIGO_PARAMETROPARAIDENTIFICADOR2");

                entity.Property(e => e.Codigo)
                    .HasMaxLength(4)
                    .IsUnicode(false);

                entity.Property(e => e.BuscadorWeb)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.CampoDescripcion)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ColumnaIdentificador1)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ColumnaIdentificador2)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.IdenRolesentidades)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_rolesentidades");

                entity.Property(e => e.Nombre)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.ParametroParaIdentificador1)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ParametroParaIdentificador2)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.SeccionF4)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Tabla)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.TipoDatoIdentificador1)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.TipoDatoIdentificador2)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<RolesEntidadesNivel1>(entity =>
            {
                entity.HasKey(e => e.Iden)
                    .HasName("PK_ROLESENTIDADESNIVEL1");

                entity.ToTable("RolesEntidadesNivel1");

                entity.Property(e => e.Iden)
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.RolEntidadNivel0).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.ValorCadenaFinalIdentificador1)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ValorCadenaFinalIdentificador2)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ValorCadenaInicialIdentificador1)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ValorCadenaInicialIdentificador2)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ValorNumericFinalIdentificador1).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.ValorNumericFinalIdentificador2).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.ValorNumericInicialIdentificador1).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.ValorNumericInicialIdentificador2).HasColumnType("numeric(18, 0)");

                entity.HasOne(d => d.RolEntidadNivel0Navigation)
                    .WithMany(p => p.RolesEntidadesNivel1s)
                    .HasForeignKey(d => d.RolEntidadNivel0)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_RolesEntidadesNivel1_RolesReglas1");
            });

            modelBuilder.Entity<RolesEntidadesNivel2>(entity =>
            {
                entity.HasKey(e => e.Iden)
                    .HasName("PK_ROLESENTIDADESNIVEL2");

                entity.ToTable("RolesEntidadesNivel2");

                entity.Property(e => e.Iden)
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.RolEntidadNivel1).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.ValorCadenaFinalIdentificador1)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ValorCadenaFinalIdentificador2)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ValorCadenaInicialIdentificador1)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ValorCadenaInicialIdentificador2)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ValorNumericFinalIdentificador1).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.ValorNumericFinalIdentificador2).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.ValorNumericInicialIdentificador1).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.ValorNumericInicialIdentificador2).HasColumnType("numeric(18, 0)");

                entity.HasOne(d => d.RolEntidadNivel1Navigation)
                    .WithMany(p => p.RolesEntidadesNivel2s)
                    .HasForeignKey(d => d.RolEntidadNivel1)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_RolesEntidadesNivel2_RolesEntidadesNivel1");
            });

            modelBuilder.Entity<RolesEntidadesNivel3>(entity =>
            {
                entity.HasKey(e => e.Iden)
                    .HasName("PK_ROLESENTIDADESNIVEL3");

                entity.ToTable("RolesEntidadesNivel3");

                entity.Property(e => e.Iden)
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.RolEntidadNivel2).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.ValorCadenaFinalIdentificador1)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ValorCadenaFinalIdentificador2)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ValorCadenaInicialIdentificador1)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ValorCadenaInicialIdentificador2)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ValorNumericFinalIdentificador1).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.ValorNumericFinalIdentificador2).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.ValorNumericInicialIdentificador1).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.ValorNumericInicialIdentificador2).HasColumnType("numeric(18, 0)");

                entity.HasOne(d => d.RolEntidadNivel2Navigation)
                    .WithMany(p => p.RolesEntidadesNivel3s)
                    .HasForeignKey(d => d.RolEntidadNivel2)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_RolesEntidadesNivel3_RolesEntidadesNivel2");
            });

            modelBuilder.Entity<RolesEntidadesNivel4>(entity =>
            {
                entity.HasKey(e => e.Iden)
                    .HasName("PK_ROLESENTIDADESNIVEL4");

                entity.ToTable("RolesEntidadesNivel4");

                entity.Property(e => e.Iden)
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.RolEntidadNivel3).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.ValorCadenaFinalIdentificador1)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ValorCadenaFinalIdentificador2)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ValorCadenaInicialIdentificador1)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ValorCadenaInicialIdentificador2)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ValorNumericFinalIdentificador1).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.ValorNumericFinalIdentificador2).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.ValorNumericInicialIdentificador1).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.ValorNumericInicialIdentificador2).HasColumnType("numeric(18, 0)");

                entity.HasOne(d => d.RolEntidadNivel3Navigation)
                    .WithMany(p => p.RolesEntidadesNivel4s)
                    .HasForeignKey(d => d.RolEntidadNivel3)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_RolesEntidadesNivel4_RolesEntidadesNivel3");
            });

            modelBuilder.Entity<RolesEntidadesNivel5>(entity =>
            {
                entity.HasKey(e => e.Iden)
                    .HasName("PK_ROLESENTIDADESNIVEL5");

                entity.ToTable("RolesEntidadesNivel5");

                entity.Property(e => e.Iden)
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.RolEntidadNivel4).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.ValorCadenaFinalIdentificador1)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ValorCadenaFinalIdentificador2)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ValorCadenaInicialIdentificador1)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ValorCadenaInicialIdentificador2)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ValorNumericFinalIdentificador1).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.ValorNumericFinalIdentificador2).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.ValorNumericInicialIdentificador1).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.ValorNumericInicialIdentificador2).HasColumnType("numeric(18, 0)");

                entity.HasOne(d => d.RolEntidadNivel4Navigation)
                    .WithMany(p => p.RolesEntidadesNivel5s)
                    .HasForeignKey(d => d.RolEntidadNivel4)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_RolesEntidadesNivel5_RolesEntidadesNivel4");
            });

            modelBuilder.Entity<RolesHead>(entity =>
            {
                entity.HasKey(e => e.Codigo);

                entity.ToTable("Roles_Head");

                entity.HasIndex(e => e.Iden, "UQ_ROLES_HEAD_IDEN")
                    .IsUnique();

                entity.Property(e => e.Codigo)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.BlRolConsultas).HasColumnName("bl_RolConsultas");

                entity.Property(e => e.BlRolReportes).HasColumnName("bl_RolReportes");

                entity.Property(e => e.Descripcion)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Iden).ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<RolesHeadLogT>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Roles_Head_LogT");

                entity.Property(e => e.Codigo)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Descripcion)
                    .HasMaxLength(8000)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<RolesMenu>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Roles_Menu");

                entity.Property(e => e.IdForma).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.IdenRolesMenu)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_roles_menu");

                entity.Property(e => e.Nombre)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<RolesObjetosValidacion>(entity =>
            {
                entity.HasKey(e => e.Codigo)
                    .HasName("PK_ROLESOBJETOSVALIDACION");

                entity.ToTable("RolesObjetosValidacion");

                entity.Property(e => e.Codigo)
                    .HasMaxLength(4)
                    .IsUnicode(false);

                entity.Property(e => e.IdenRolesobjetosvalidacion)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_rolesobjetosvalidacion");

                entity.Property(e => e.Nombre)
                    .HasMaxLength(250)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<RolesObjetosValidacionParametrosEntrada>(entity =>
            {
                entity.HasKey(e => new { e.RolObjetoValidacion, e.RolParametroEntrada })
                    .HasName("PK_ROLESOBJETOSVALIDACIONPARAMETROSENTRADAS");

                entity.Property(e => e.RolObjetoValidacion)
                    .HasMaxLength(4)
                    .IsUnicode(false);

                entity.Property(e => e.RolParametroEntrada)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.IdenRolesobjetosvalidacionparametrosentradas)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_rolesobjetosvalidacionparametrosentradas");

                entity.HasOne(d => d.RolObjetoValidacionNavigation)
                    .WithMany(p => p.RolesObjetosValidacionParametrosEntrada)
                    .HasForeignKey(d => d.RolObjetoValidacion)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_RolesObjetosValidacionParametrosEntradas_RolesObjetosValidacion");

                entity.HasOne(d => d.RolParametroEntradaNavigation)
                    .WithMany(p => p.RolesObjetosValidacionParametrosEntrada)
                    .HasForeignKey(d => d.RolParametroEntrada)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_RolesObjetosValidacionParametrosEntradas_RolesParametrosEntradaDeFormulas");
            });

            modelBuilder.Entity<RolesParametrosEntradum>(entity =>
            {
                entity.HasKey(e => e.Codigo)
                    .HasName("PK_ROLESPARAMETROSENTRADA");

                entity.HasIndex(e => new { e.Codigo, e.TipoDeDatos }, "IX_ROLESPARAMETROSENTRADA_CODIGO_TIPODEDATOS");

                entity.HasIndex(e => e.NombreIdentificador, "UQ_ROLESPARAMETROSENTRADA_NOMBREIDENTIFICADOR")
                    .IsUnique();

                entity.Property(e => e.Codigo)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Categoria)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Descripcion)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.IdenRolesparametrosentrada)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_rolesparametrosentrada");

                entity.Property(e => e.Nombre)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.NombreIdentificador)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.PresentacionZeusFormulacion)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Tamaño)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.TipoDeDatos)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<RolesRegla>(entity =>
            {
                entity.HasKey(e => e.Iden)
                    .HasName("PK_ROLESREGLAS");

                entity.Property(e => e.Iden)
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Codigo)
                    .HasMaxLength(4)
                    .IsUnicode(false);

                entity.Property(e => e.Descripcion)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.EntidadNivel1)
                    .HasMaxLength(4)
                    .IsUnicode(false);

                entity.Property(e => e.EntidadNivel2)
                    .HasMaxLength(4)
                    .IsUnicode(false);

                entity.Property(e => e.EntidadNivel3)
                    .HasMaxLength(4)
                    .IsUnicode(false);

                entity.Property(e => e.EntidadNivel4)
                    .HasMaxLength(4)
                    .IsUnicode(false);

                entity.Property(e => e.EntidadNivel5)
                    .HasMaxLength(4)
                    .IsUnicode(false);

                entity.Property(e => e.Formula)
                    .HasMaxLength(8000)
                    .IsUnicode(false);

                entity.Property(e => e.Nombre)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.ObjetoValidacion)
                    .HasMaxLength(4)
                    .IsUnicode(false);

                entity.Property(e => e.TipoRegla)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.HasOne(d => d.ObjetoValidacionNavigation)
                    .WithMany(p => p.RolesReglas)
                    .HasForeignKey(d => d.ObjetoValidacion)
                    .HasConstraintName("FK_RolesReglas_RolesObjetosValidacion");

                entity.HasOne(d => d.TipoReglaNavigation)
                    .WithMany(p => p.RolesReglas)
                    .HasForeignKey(d => d.TipoRegla)
                    .HasConstraintName("FK_RolesReglas_RolesTipoRegla");
            });

            modelBuilder.Entity<RolesReglasdelRol>(entity =>
            {
                entity.HasKey(e => new { e.Rol, e.Regla })
                    .HasName("PK_ROLESREGLASDELROL");

                entity.ToTable("RolesReglasdelRol");

                entity.Property(e => e.Rol)
                    .HasMaxLength(4)
                    .IsUnicode(false);

                entity.Property(e => e.Regla).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.IdenRolesreglasdelrol)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_rolesreglasdelrol");

                entity.HasOne(d => d.ReglaNavigation)
                    .WithMany(p => p.RolesReglasdelRols)
                    .HasForeignKey(d => d.Regla)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_RolesReglasdelRol_RolesReglas");

                entity.HasOne(d => d.RolNavigation)
                    .WithMany(p => p.RolesReglasdelRols)
                    .HasForeignKey(d => d.Rol)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_RolesReglasdelRol_Roles");
            });

            modelBuilder.Entity<RolesTabla>(entity =>
            {
                entity.HasKey(e => new { e.Iden, e.IdenRol, e.Tabla, e.TipoRol });

                entity.ToTable("Roles_Tabla");

                entity.HasIndex(e => e.Iden, "UQ_ROLES_TABLA_IDEN")
                    .IsUnique();

                entity.Property(e => e.Iden).ValueGeneratedOnAdd();

                entity.Property(e => e.IdenRol).HasColumnName("Iden_Rol");

                entity.Property(e => e.Tabla)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.TipoRol)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.HasOne(d => d.IdenRolNavigation)
                    .WithMany(p => p.RolesTablas)
                    .HasPrincipalKey(p => p.Iden)
                    .HasForeignKey(d => d.IdenRol)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Roles_Tabla_Roles_Head");
            });

            modelBuilder.Entity<RolesTablaLogT>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Roles_Tabla_LogT");

                entity.Property(e => e.IdenRol).HasColumnName("Iden_Rol");

                entity.Property(e => e.Tabla)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.TipoRol)
                    .HasMaxLength(1)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<RolesTempControle>(entity =>
            {
                entity.HasKey(e => new { e.SpId, e.Formulario, e.Control, e.Tabla })
                    .HasName("PK_ROLESTEMPCONTROLES");

                entity.Property(e => e.Formulario)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Control)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Tabla)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.IdenRolestempcontroles)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_rolestempcontroles");

                entity.Property(e => e.Value)
                    .HasMaxLength(8000)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<RolesTempParametrosEntradum>(entity =>
            {
                entity.HasKey(e => new { e.Spid, e.Codigo })
                    .HasName("PK_ROLESTEMPPARAMETROSENTRADA");

                entity.Property(e => e.Spid).HasColumnName("spid");

                entity.Property(e => e.Codigo)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.IdenRolestempparametrosentrada)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_rolestempparametrosentrada");

                entity.Property(e => e.Valor)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<RolesTipoRegla>(entity =>
            {
                entity.HasKey(e => e.Codigo)
                    .HasName("PK_ROLESTIPOREGLA");

                entity.ToTable("RolesTipoRegla");

                entity.Property(e => e.Codigo)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.IdenRolestiporegla)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_rolestiporegla");

                entity.Property(e => e.Nombre)
                    .HasMaxLength(250)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<RolesUsuarioRol>(entity =>
            {
                entity.HasKey(e => new { e.Usuario, e.Rol })
                    .HasName("PK_ROLESUSUARIOROL");

                entity.ToTable("RolesUsuarioRol");

                entity.Property(e => e.Usuario)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("usuario");

                entity.Property(e => e.Rol)
                    .HasMaxLength(4)
                    .IsUnicode(false);

                entity.Property(e => e.IdenRolesusuariorol)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_rolesusuariorol");

                entity.HasOne(d => d.RolNavigation)
                    .WithMany(p => p.RolesUsuarioRols)
                    .HasForeignKey(d => d.Rol)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_RolesUsuarioRol_Roles");
            });

            modelBuilder.Entity<RolesValidacion>(entity =>
            {
                entity.HasKey(e => new { e.Rol, e.IdProceso });

                entity.ToTable("RolesValidacion");

                entity.HasIndex(e => new { e.Rol, e.IdProceso }, "UQ_ROLESVALIDACION_IDPROCESO_ROL")
                    .IsUnique();

                entity.Property(e => e.Rol)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.IdenRolesvalidacion)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_rolesvalidacion");
            });

            modelBuilder.Entity<RptCertificado>(entity =>
            {
                entity.HasKey(e => e.Iden);

                entity.ToTable("RptCertificado");

                entity.HasIndex(e => e.Codigo, "UQ_RptCertificado_Codigo")
                    .IsUnique();

                entity.Property(e => e.Codigo)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.FormatoReporte)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("formatoReporte");

                entity.Property(e => e.Nombre)
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.SeDeclaraEn)
                    .HasMaxLength(200)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<RptCertificadoConcepto>(entity =>
            {
                entity.HasKey(e => e.Iden);

                entity.ToTable("RptCertificadoConcepto");

                entity.Property(e => e.Concepto)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.IdenEscenariosTipoTasa)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IdenEscenarios_TipoTasa");

                entity.Property(e => e.Nombre)
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdenRptCertificadoNavigation)
                    .WithMany(p => p.RptCertificadoConceptos)
                    .HasForeignKey(d => d.IdenRptCertificado)
                    .HasConstraintName("FK_RptCertificadoConcepto_IdenRptCertificado");
            });

            modelBuilder.Entity<RptCertificadoConceptoCiudad>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("RptCertificadoConceptoCiudad");

                entity.Property(e => e.Iden).ValueGeneratedOnAdd();

                entity.Property(e => e.IdenEscenariosCiudad).HasColumnName("IdenEscenarios_Ciudad");

                entity.HasOne(d => d.IdenRptCertificadoConceptoNavigation)
                    .WithMany()
                    .HasForeignKey(d => d.IdenRptCertificadoConcepto)
                    .HasConstraintName("FK_RptCertificadoConceptoCiudad_IdenRptCertificadoConcepto");
            });

            modelBuilder.Entity<RptCertificadoConceptoConceptoRetencion>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("RptCertificadoConceptoConceptoRetencion");

                entity.Property(e => e.Iden).ValueGeneratedOnAdd();

                entity.Property(e => e.IdenEscenariosConceptoRetencion)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IdenEscenarios_ConceptoRetencion");

                entity.HasOne(d => d.IdenRptCertificadoConceptoNavigation)
                    .WithMany()
                    .HasForeignKey(d => d.IdenRptCertificadoConcepto)
                    .HasConstraintName("FK_RptCertificadoConceptoConceptoRetencion_IdenRptCertificadoConcepto");
            });

            modelBuilder.Entity<RptCertificadoConceptoCuentum>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.CodiCta)
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.Iden).ValueGeneratedOnAdd();

                entity.HasOne(d => d.IdenRptCertificadoConceptoNavigation)
                    .WithMany()
                    .HasForeignKey(d => d.IdenRptCertificadoConcepto)
                    .HasConstraintName("FK_RptCertificadoConceptoCuenta_IdenRptCertificadoConcepto");
            });

            modelBuilder.Entity<RptCertificadoConceptoPorcentaje>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("RptCertificadoConceptoPorcentaje");

                entity.Property(e => e.Iden).ValueGeneratedOnAdd();

                entity.HasOne(d => d.IdenRptCertificadoConceptoNavigation)
                    .WithMany()
                    .HasForeignKey(d => d.IdenRptCertificadoConcepto)
                    .HasConstraintName("FK_RptCertificadoConceptoPorcentaje_IdenRptCertificadoConcepto");
            });

            modelBuilder.Entity<RptCertificadoConceptoRetencione>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.Iden).ValueGeneratedOnAdd();

                entity.Property(e => e.IdenEscenariosRetenciones).HasColumnName("IdenEscenarios_Retenciones");

                entity.HasOne(d => d.IdenRptCertificadoConceptoNavigation)
                    .WithMany()
                    .HasForeignKey(d => d.IdenRptCertificadoConcepto)
                    .HasConstraintName("FK_RptCertificadoConceptoRetenciones_IdenRptCertificadoConcepto");
            });

            modelBuilder.Entity<RptConfigDetalleAtributo>(entity =>
            {
                entity.HasKey(e => new { e.Usuario, e.CodigoCombinacion });

                entity.ToTable("RptConfig_DetalleAtributos");

                entity.Property(e => e.Usuario)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.CodigoCombinacion)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Descripcion1)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Descripcion2)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Detallar)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.IdenRptconfigDetalleatributos)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_rptconfig_detalleatributos");

                entity.HasOne(d => d.UsuarioNavigation)
                    .WithMany(p => p.RptConfigDetalleAtributos)
                    .HasForeignKey(d => d.Usuario)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_RptConfig_DetalleAtributos_Usuarios");
            });

            modelBuilder.Entity<RubrosEf>(entity =>
            {
                entity.HasKey(e => new { e.IdenCatalogo, e.Libro, e.Codigo });

                entity.ToTable("RubrosEF");

                entity.Property(e => e.IdenCatalogo).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.Libro)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Codigo)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Descripcion)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.IdenRubrosef)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_rubrosef");
            });

            modelBuilder.Entity<SaldoAuxBuLibroPrincipal>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SaldoAuxBU_LibroPrincipal");

                entity.Property(e => e.Anoaux)
                    .HasMaxLength(7)
                    .IsUnicode(false)
                    .HasColumnName("ANOAUX")
                    .IsFixedLength();

                entity.Property(e => e.Auxiaux)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("AUXIAUX")
                    .IsFixedLength();

                entity.Property(e => e.Bu)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("BU");

                entity.Property(e => e.Codicta)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("CODICTA")
                    .IsFixedLength();

                entity.Property(e => e.Idunidad)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("IDUNIDAD")
                    .IsFixedLength();

                entity.Property(e => e.Mvcraux)
                    .HasColumnType("money")
                    .HasColumnName("MVCRAUX");

                entity.Property(e => e.Mvcrmaux)
                    .HasColumnType("money")
                    .HasColumnName("MVCRMAUX");

                entity.Property(e => e.Mvdbaux)
                    .HasColumnType("money")
                    .HasColumnName("MVDBAUX");

                entity.Property(e => e.Mvdbmaux)
                    .HasColumnType("money")
                    .HasColumnName("MVDBMAUX");

                entity.Property(e => e.Sdacaux)
                    .HasColumnType("money")
                    .HasColumnName("SDACAUX");

                entity.Property(e => e.Sdacmaux)
                    .HasColumnType("money")
                    .HasColumnName("SDACMAUX");

                entity.Property(e => e.Sdanaux)
                    .HasColumnType("money")
                    .HasColumnName("SDANAUX");

                entity.Property(e => e.Sdanmaux)
                    .HasColumnType("money")
                    .HasColumnName("SDANMAUX");
            });

            modelBuilder.Entity<SaldoAuxLibroPrincipal>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SaldoAux_LibroPrincipal");

                entity.Property(e => e.Anoaux)
                    .HasMaxLength(7)
                    .IsUnicode(false)
                    .HasColumnName("ANOAUX")
                    .IsFixedLength();

                entity.Property(e => e.Auxiaux)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("AUXIAUX")
                    .IsFixedLength();

                entity.Property(e => e.Codicta)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("CODICTA")
                    .IsFixedLength();

                entity.Property(e => e.Idunidad)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("IDUNIDAD")
                    .IsFixedLength();

                entity.Property(e => e.Mvcraux)
                    .HasColumnType("money")
                    .HasColumnName("MVCRAUX");

                entity.Property(e => e.Mvcrmaux)
                    .HasColumnType("money")
                    .HasColumnName("MVCRMAUX");

                entity.Property(e => e.Mvdbaux)
                    .HasColumnType("money")
                    .HasColumnName("MVDBAUX");

                entity.Property(e => e.Mvdbmaux)
                    .HasColumnType("money")
                    .HasColumnName("MVDBMAUX");

                entity.Property(e => e.Sdacaux)
                    .HasColumnType("money")
                    .HasColumnName("SDACAUX");

                entity.Property(e => e.Sdacmaux)
                    .HasColumnType("money")
                    .HasColumnName("SDACMAUX");

                entity.Property(e => e.Sdanaux)
                    .HasColumnType("money")
                    .HasColumnName("SDANAUX");

                entity.Property(e => e.Sdanmaux)
                    .HasColumnType("money")
                    .HasColumnName("SDANMAUX");
            });

            modelBuilder.Entity<SaldoClieLibroPrincipal>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SaldoClie_LibroPrincipal");

                entity.Property(e => e.Anomescta)
                    .HasMaxLength(7)
                    .IsUnicode(false)
                    .HasColumnName("ANOMESCTA")
                    .IsFixedLength();

                entity.Property(e => e.Codicta)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("CODICTA")
                    .IsFixedLength();

                entity.Property(e => e.Idcliente)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("IDCLIENTE");

                entity.Property(e => e.Idunidad)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("IDUNIDAD")
                    .IsFixedLength();

                entity.Property(e => e.Mvcrcta)
                    .HasColumnType("money")
                    .HasColumnName("MVCRCTA");

                entity.Property(e => e.Mvcrmcta)
                    .HasColumnType("money")
                    .HasColumnName("MVCRMCTA");

                entity.Property(e => e.Mvdbcta)
                    .HasColumnType("money")
                    .HasColumnName("MVDBCTA");

                entity.Property(e => e.Mvdbmcta)
                    .HasColumnType("money")
                    .HasColumnName("MVDBMCTA");

                entity.Property(e => e.Sdaccta)
                    .HasColumnType("money")
                    .HasColumnName("SDACCTA");

                entity.Property(e => e.Sdacmcta)
                    .HasColumnType("money")
                    .HasColumnName("SDACMCTA");

                entity.Property(e => e.Sdancta)
                    .HasColumnType("money")
                    .HasColumnName("SDANCTA");

                entity.Property(e => e.Sdanmcta)
                    .HasColumnType("money")
                    .HasColumnName("SDANMCTA");
            });

            modelBuilder.Entity<SaldoContLibroPrincipal>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SaldoCont_LibroPrincipal");

                entity.Property(e => e.Anomescta)
                    .HasMaxLength(7)
                    .IsUnicode(false)
                    .HasColumnName("ANOMESCTA")
                    .IsFixedLength();

                entity.Property(e => e.Codicta)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("CODICTA")
                    .IsFixedLength();

                entity.Property(e => e.Idunidad)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("IDUNIDAD")
                    .IsFixedLength();

                entity.Property(e => e.Mvcrcta)
                    .HasColumnType("money")
                    .HasColumnName("MVCRCTA");

                entity.Property(e => e.Mvcrmcta)
                    .HasColumnType("money")
                    .HasColumnName("MVCRMCTA");

                entity.Property(e => e.Mvdbcta)
                    .HasColumnType("money")
                    .HasColumnName("MVDBCTA");

                entity.Property(e => e.Mvdbmcta)
                    .HasColumnType("money")
                    .HasColumnName("MVDBMCTA");

                entity.Property(e => e.Sdaccta)
                    .HasColumnType("money")
                    .HasColumnName("SDACCTA");

                entity.Property(e => e.Sdacmcta)
                    .HasColumnType("money")
                    .HasColumnName("SDACMCTA");

                entity.Property(e => e.Sdancta)
                    .HasColumnType("money")
                    .HasColumnName("SDANCTA");

                entity.Property(e => e.Sdanmcta)
                    .HasColumnType("money")
                    .HasColumnName("SDANMCTA");
            });

            modelBuilder.Entity<SaldoPropiedad1>(entity =>
            {
                entity.HasKey(e => new { e.Anomescta, e.Bu, e.Codicta, e.Idunidad, e.Propiedad1 });

                entity.ToTable("SaldoPropiedad1");

                entity.HasIndex(e => new { e.Bu, e.Codicta, e.Idunidad, e.Propiedad1, e.Anomescta }, "IX_SALDOPROPIEDAD1_BU_CODICTA_IDUNIDAD_PROPIEDAD1_ANOMESCTA");

                entity.Property(e => e.Anomescta)
                    .HasMaxLength(7)
                    .IsUnicode(false)
                    .HasColumnName("ANOMESCTA");

                entity.Property(e => e.Bu)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("BU");

                entity.Property(e => e.Codicta)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("CODICTA")
                    .IsFixedLength();

                entity.Property(e => e.Idunidad)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("IDUNIDAD")
                    .IsFixedLength();

                entity.Property(e => e.Propiedad1)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("PROPIEDAD1");

                entity.Property(e => e.IdenSaldopropiedad1)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_saldopropiedad1");

                entity.Property(e => e.Mvcrcta)
                    .HasColumnType("money")
                    .HasColumnName("MVCRCTA");

                entity.Property(e => e.Mvcrmcta)
                    .HasColumnType("money")
                    .HasColumnName("MVCRMCTA");

                entity.Property(e => e.Mvcrmon1)
                    .HasColumnType("money")
                    .HasColumnName("MVCRMON1");

                entity.Property(e => e.Mvcrmon2)
                    .HasColumnType("money")
                    .HasColumnName("MVCRMON2");

                entity.Property(e => e.Mvdbcta)
                    .HasColumnType("money")
                    .HasColumnName("MVDBCTA");

                entity.Property(e => e.Mvdbmcta)
                    .HasColumnType("money")
                    .HasColumnName("MVDBMCTA");

                entity.Property(e => e.Mvdbmon1)
                    .HasColumnType("money")
                    .HasColumnName("MVDBMON1");

                entity.Property(e => e.Mvdbmon2)
                    .HasColumnType("money")
                    .HasColumnName("MVDBMON2");

                entity.Property(e => e.Sdaccta)
                    .HasColumnType("money")
                    .HasColumnName("SDACCTA");

                entity.Property(e => e.SdacctaT)
                    .HasColumnType("money")
                    .HasColumnName("SDACCTA_T")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Sdacmcta)
                    .HasColumnType("money")
                    .HasColumnName("SDACMCTA");

                entity.Property(e => e.SdacmctaT)
                    .HasColumnType("money")
                    .HasColumnName("SDACMCTA_T")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Sdacmon1)
                    .HasColumnType("money")
                    .HasColumnName("SDACMON1");

                entity.Property(e => e.Sdacmon2)
                    .HasColumnType("money")
                    .HasColumnName("SDACMON2");

                entity.Property(e => e.Sdancta)
                    .HasColumnType("money")
                    .HasColumnName("SDANCTA");

                entity.Property(e => e.SdanctaT)
                    .HasColumnType("money")
                    .HasColumnName("SDANCTA_T")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Sdanmcta)
                    .HasColumnType("money")
                    .HasColumnName("SDANMCTA");

                entity.Property(e => e.SdanmctaT)
                    .HasColumnType("money")
                    .HasColumnName("SDANMCTA_T")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Sdanmon1)
                    .HasColumnType("money")
                    .HasColumnName("SDANMON1");

                entity.Property(e => e.Sdanmon2)
                    .HasColumnType("money")
                    .HasColumnName("SDANMON2");

                entity.Property(e => e.VersionDeLaFila)
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.BuNavigation)
                    .WithMany(p => p.SaldoPropiedad1s)
                    .HasForeignKey(d => d.Bu)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SaldoPropiedad1_BU");

                entity.HasOne(d => d.CodictaNavigation)
                    .WithMany(p => p.SaldoPropiedad1s)
                    .HasForeignKey(d => d.Codicta)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SaldoPropiedad1_MAECONT");

                entity.HasOne(d => d.Propiedad1Navigation)
                    .WithMany(p => p.SaldoPropiedad1s)
                    .HasForeignKey(d => d.Propiedad1)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SaldoPropiedad1_Propiedad1");
            });

            modelBuilder.Entity<SaldoPropiedad2>(entity =>
            {
                entity.HasKey(e => new { e.Anomescta, e.Bu, e.Codicta, e.Idunidad, e.Propiedad2 });

                entity.ToTable("SaldoPropiedad2");

                entity.HasIndex(e => new { e.Bu, e.Codicta, e.Idunidad, e.Propiedad2, e.Anomescta }, "IX_SALDOPROPIEDAD2_BU_CODICTA_IDUNIDAD_PROPIEDAD2_ANOMESCTA");

                entity.Property(e => e.Anomescta)
                    .HasMaxLength(7)
                    .IsUnicode(false)
                    .HasColumnName("ANOMESCTA");

                entity.Property(e => e.Bu)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("BU");

                entity.Property(e => e.Codicta)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("CODICTA")
                    .IsFixedLength();

                entity.Property(e => e.Idunidad)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("IDUNIDAD")
                    .IsFixedLength();

                entity.Property(e => e.Propiedad2)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("PROPIEDAD2");

                entity.Property(e => e.IdenSaldopropiedad2)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_saldopropiedad2");

                entity.Property(e => e.Mvcrcta)
                    .HasColumnType("money")
                    .HasColumnName("MVCRCTA");

                entity.Property(e => e.Mvcrmcta)
                    .HasColumnType("money")
                    .HasColumnName("MVCRMCTA");

                entity.Property(e => e.Mvcrmon1)
                    .HasColumnType("money")
                    .HasColumnName("MVCRMON1");

                entity.Property(e => e.Mvcrmon2)
                    .HasColumnType("money")
                    .HasColumnName("MVCRMON2");

                entity.Property(e => e.Mvdbcta)
                    .HasColumnType("money")
                    .HasColumnName("MVDBCTA");

                entity.Property(e => e.Mvdbmcta)
                    .HasColumnType("money")
                    .HasColumnName("MVDBMCTA");

                entity.Property(e => e.Mvdbmon1)
                    .HasColumnType("money")
                    .HasColumnName("MVDBMON1");

                entity.Property(e => e.Mvdbmon2)
                    .HasColumnType("money")
                    .HasColumnName("MVDBMON2");

                entity.Property(e => e.Sdaccta)
                    .HasColumnType("money")
                    .HasColumnName("SDACCTA");

                entity.Property(e => e.SdacctaT)
                    .HasColumnType("money")
                    .HasColumnName("SDACCTA_T")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Sdacmcta)
                    .HasColumnType("money")
                    .HasColumnName("SDACMCTA");

                entity.Property(e => e.SdacmctaT)
                    .HasColumnType("money")
                    .HasColumnName("SDACMCTA_T")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Sdacmon1)
                    .HasColumnType("money")
                    .HasColumnName("SDACMON1");

                entity.Property(e => e.Sdacmon2)
                    .HasColumnType("money")
                    .HasColumnName("SDACMON2");

                entity.Property(e => e.Sdancta)
                    .HasColumnType("money")
                    .HasColumnName("SDANCTA");

                entity.Property(e => e.SdanctaT)
                    .HasColumnType("money")
                    .HasColumnName("SDANCTA_T")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Sdanmcta)
                    .HasColumnType("money")
                    .HasColumnName("SDANMCTA");

                entity.Property(e => e.SdanmctaT)
                    .HasColumnType("money")
                    .HasColumnName("SDANMCTA_T")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Sdanmon1)
                    .HasColumnType("money")
                    .HasColumnName("SDANMON1");

                entity.Property(e => e.Sdanmon2)
                    .HasColumnType("money")
                    .HasColumnName("SDANMON2");

                entity.Property(e => e.VersionDeLaFila)
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.BuNavigation)
                    .WithMany(p => p.SaldoPropiedad2s)
                    .HasForeignKey(d => d.Bu)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SaldoPropiedad2_BU");

                entity.HasOne(d => d.CodictaNavigation)
                    .WithMany(p => p.SaldoPropiedad2s)
                    .HasForeignKey(d => d.Codicta)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SaldoPropiedad2_MAECONT");

                entity.HasOne(d => d.Propiedad2Navigation)
                    .WithMany(p => p.SaldoPropiedad2s)
                    .HasForeignKey(d => d.Propiedad2)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SaldoPropiedad2_Propiedad2");
            });

            modelBuilder.Entity<SaldoPropiedad3>(entity =>
            {
                entity.HasKey(e => new { e.Anomescta, e.Bu, e.Codicta, e.Idunidad, e.Propiedad3 });

                entity.ToTable("SaldoPropiedad3");

                entity.HasIndex(e => new { e.Bu, e.Codicta, e.Idunidad, e.Propiedad3, e.Anomescta }, "IX_SALDOPROPIEDAD3_BU_CODICTA_IDUNIDAD_PROPIEDAD3_ANOMESCTA");

                entity.Property(e => e.Anomescta)
                    .HasMaxLength(7)
                    .IsUnicode(false)
                    .HasColumnName("ANOMESCTA");

                entity.Property(e => e.Bu)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("BU");

                entity.Property(e => e.Codicta)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("CODICTA")
                    .IsFixedLength();

                entity.Property(e => e.Idunidad)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("IDUNIDAD")
                    .IsFixedLength();

                entity.Property(e => e.Propiedad3)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("PROPIEDAD3");

                entity.Property(e => e.IdenSaldopropiedad3)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_saldopropiedad3");

                entity.Property(e => e.Mvcrcta)
                    .HasColumnType("money")
                    .HasColumnName("MVCRCTA");

                entity.Property(e => e.Mvcrmcta)
                    .HasColumnType("money")
                    .HasColumnName("MVCRMCTA");

                entity.Property(e => e.Mvcrmon1)
                    .HasColumnType("money")
                    .HasColumnName("MVCRMON1");

                entity.Property(e => e.Mvcrmon2)
                    .HasColumnType("money")
                    .HasColumnName("MVCRMON2");

                entity.Property(e => e.Mvdbcta)
                    .HasColumnType("money")
                    .HasColumnName("MVDBCTA");

                entity.Property(e => e.Mvdbmcta)
                    .HasColumnType("money")
                    .HasColumnName("MVDBMCTA");

                entity.Property(e => e.Mvdbmon1)
                    .HasColumnType("money")
                    .HasColumnName("MVDBMON1");

                entity.Property(e => e.Mvdbmon2)
                    .HasColumnType("money")
                    .HasColumnName("MVDBMON2");

                entity.Property(e => e.Sdaccta)
                    .HasColumnType("money")
                    .HasColumnName("SDACCTA");

                entity.Property(e => e.SdacctaT)
                    .HasColumnType("money")
                    .HasColumnName("SDACCTA_T")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Sdacmcta)
                    .HasColumnType("money")
                    .HasColumnName("SDACMCTA");

                entity.Property(e => e.SdacmctaT)
                    .HasColumnType("money")
                    .HasColumnName("SDACMCTA_T")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Sdacmon1)
                    .HasColumnType("money")
                    .HasColumnName("SDACMON1");

                entity.Property(e => e.Sdacmon2)
                    .HasColumnType("money")
                    .HasColumnName("SDACMON2");

                entity.Property(e => e.Sdancta)
                    .HasColumnType("money")
                    .HasColumnName("SDANCTA");

                entity.Property(e => e.SdanctaT)
                    .HasColumnType("money")
                    .HasColumnName("SDANCTA_T")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Sdanmcta)
                    .HasColumnType("money")
                    .HasColumnName("SDANMCTA");

                entity.Property(e => e.SdanmctaT)
                    .HasColumnType("money")
                    .HasColumnName("SDANMCTA_T")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Sdanmon1)
                    .HasColumnType("money")
                    .HasColumnName("SDANMON1");

                entity.Property(e => e.Sdanmon2)
                    .HasColumnType("money")
                    .HasColumnName("SDANMON2");

                entity.Property(e => e.VersionDeLaFila)
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.BuNavigation)
                    .WithMany(p => p.SaldoPropiedad3s)
                    .HasForeignKey(d => d.Bu)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SaldoPropiedad3_BU");

                entity.HasOne(d => d.CodictaNavigation)
                    .WithMany(p => p.SaldoPropiedad3s)
                    .HasForeignKey(d => d.Codicta)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SaldoPropiedad3_MAECONT");

                entity.HasOne(d => d.Propiedad3Navigation)
                    .WithMany(p => p.SaldoPropiedad3s)
                    .HasForeignKey(d => d.Propiedad3)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SaldoPropiedad3_Propiedad3");
            });

            modelBuilder.Entity<SaldoPropiedad4>(entity =>
            {
                entity.HasKey(e => new { e.Anomescta, e.Bu, e.Codicta, e.Idunidad, e.Propiedad4 });

                entity.ToTable("SaldoPropiedad4");

                entity.HasIndex(e => new { e.Bu, e.Codicta, e.Idunidad, e.Propiedad4, e.Anomescta }, "IX_SALDOPROPIEDAD4_BU_CODICTA_IDUNIDAD_PROPIEDAD4_ANOMESCTA");

                entity.Property(e => e.Anomescta)
                    .HasMaxLength(7)
                    .IsUnicode(false)
                    .HasColumnName("ANOMESCTA");

                entity.Property(e => e.Bu)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("BU");

                entity.Property(e => e.Codicta)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("CODICTA")
                    .IsFixedLength();

                entity.Property(e => e.Idunidad)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("IDUNIDAD")
                    .IsFixedLength();

                entity.Property(e => e.Propiedad4)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("PROPIEDAD4");

                entity.Property(e => e.IdenSaldopropiedad4)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_saldopropiedad4");

                entity.Property(e => e.Mvcrcta)
                    .HasColumnType("money")
                    .HasColumnName("MVCRCTA");

                entity.Property(e => e.Mvcrmcta)
                    .HasColumnType("money")
                    .HasColumnName("MVCRMCTA");

                entity.Property(e => e.Mvcrmon1)
                    .HasColumnType("money")
                    .HasColumnName("MVCRMON1");

                entity.Property(e => e.Mvcrmon2)
                    .HasColumnType("money")
                    .HasColumnName("MVCRMON2");

                entity.Property(e => e.Mvdbcta)
                    .HasColumnType("money")
                    .HasColumnName("MVDBCTA");

                entity.Property(e => e.Mvdbmcta)
                    .HasColumnType("money")
                    .HasColumnName("MVDBMCTA");

                entity.Property(e => e.Mvdbmon1)
                    .HasColumnType("money")
                    .HasColumnName("MVDBMON1");

                entity.Property(e => e.Mvdbmon2)
                    .HasColumnType("money")
                    .HasColumnName("MVDBMON2");

                entity.Property(e => e.Sdaccta)
                    .HasColumnType("money")
                    .HasColumnName("SDACCTA");

                entity.Property(e => e.SdacctaT)
                    .HasColumnType("money")
                    .HasColumnName("SDACCTA_T")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Sdacmcta)
                    .HasColumnType("money")
                    .HasColumnName("SDACMCTA");

                entity.Property(e => e.SdacmctaT)
                    .HasColumnType("money")
                    .HasColumnName("SDACMCTA_T")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Sdacmon1)
                    .HasColumnType("money")
                    .HasColumnName("SDACMON1");

                entity.Property(e => e.Sdacmon2)
                    .HasColumnType("money")
                    .HasColumnName("SDACMON2");

                entity.Property(e => e.Sdancta)
                    .HasColumnType("money")
                    .HasColumnName("SDANCTA");

                entity.Property(e => e.SdanctaT)
                    .HasColumnType("money")
                    .HasColumnName("SDANCTA_T")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Sdanmcta)
                    .HasColumnType("money")
                    .HasColumnName("SDANMCTA");

                entity.Property(e => e.SdanmctaT)
                    .HasColumnType("money")
                    .HasColumnName("SDANMCTA_T")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Sdanmon1)
                    .HasColumnType("money")
                    .HasColumnName("SDANMON1");

                entity.Property(e => e.Sdanmon2)
                    .HasColumnType("money")
                    .HasColumnName("SDANMON2");

                entity.Property(e => e.VersionDeLaFila)
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.BuNavigation)
                    .WithMany(p => p.SaldoPropiedad4s)
                    .HasForeignKey(d => d.Bu)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SaldoPropiedad4_BU");

                entity.HasOne(d => d.CodictaNavigation)
                    .WithMany(p => p.SaldoPropiedad4s)
                    .HasForeignKey(d => d.Codicta)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SaldoPropiedad4_MAECONT");

                entity.HasOne(d => d.Propiedad4Navigation)
                    .WithMany(p => p.SaldoPropiedad4s)
                    .HasForeignKey(d => d.Propiedad4)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SaldoPropiedad4_Propiedad4");
            });

            modelBuilder.Entity<SaldoPropiedad5>(entity =>
            {
                entity.HasKey(e => new { e.Anomescta, e.Bu, e.Codicta, e.Idunidad, e.Propiedad5 });

                entity.ToTable("SaldoPropiedad5");

                entity.HasIndex(e => new { e.Bu, e.Codicta, e.Idunidad, e.Propiedad5, e.Anomescta }, "IX_SALDOPROPIEDAD5_BU_CODICTA_IDUNIDAD_PROPIEDAD5_ANOMESCTA");

                entity.Property(e => e.Anomescta)
                    .HasMaxLength(7)
                    .IsUnicode(false)
                    .HasColumnName("ANOMESCTA");

                entity.Property(e => e.Bu)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("BU");

                entity.Property(e => e.Codicta)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("CODICTA")
                    .IsFixedLength();

                entity.Property(e => e.Idunidad)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("IDUNIDAD")
                    .IsFixedLength();

                entity.Property(e => e.Propiedad5)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("PROPIEDAD5");

                entity.Property(e => e.IdenSaldopropiedad5)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_saldopropiedad5");

                entity.Property(e => e.Mvcrcta)
                    .HasColumnType("money")
                    .HasColumnName("MVCRCTA");

                entity.Property(e => e.Mvcrmcta)
                    .HasColumnType("money")
                    .HasColumnName("MVCRMCTA");

                entity.Property(e => e.Mvcrmon1)
                    .HasColumnType("money")
                    .HasColumnName("MVCRMON1");

                entity.Property(e => e.Mvcrmon2)
                    .HasColumnType("money")
                    .HasColumnName("MVCRMON2");

                entity.Property(e => e.Mvdbcta)
                    .HasColumnType("money")
                    .HasColumnName("MVDBCTA");

                entity.Property(e => e.Mvdbmcta)
                    .HasColumnType("money")
                    .HasColumnName("MVDBMCTA");

                entity.Property(e => e.Mvdbmon1)
                    .HasColumnType("money")
                    .HasColumnName("MVDBMON1");

                entity.Property(e => e.Mvdbmon2)
                    .HasColumnType("money")
                    .HasColumnName("MVDBMON2");

                entity.Property(e => e.Sdaccta)
                    .HasColumnType("money")
                    .HasColumnName("SDACCTA");

                entity.Property(e => e.SdacctaT)
                    .HasColumnType("money")
                    .HasColumnName("SDACCTA_T")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Sdacmcta)
                    .HasColumnType("money")
                    .HasColumnName("SDACMCTA");

                entity.Property(e => e.SdacmctaT)
                    .HasColumnType("money")
                    .HasColumnName("SDACMCTA_T")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Sdacmon1)
                    .HasColumnType("money")
                    .HasColumnName("SDACMON1");

                entity.Property(e => e.Sdacmon2)
                    .HasColumnType("money")
                    .HasColumnName("SDACMON2");

                entity.Property(e => e.Sdancta)
                    .HasColumnType("money")
                    .HasColumnName("SDANCTA");

                entity.Property(e => e.SdanctaT)
                    .HasColumnType("money")
                    .HasColumnName("SDANCTA_T")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Sdanmcta)
                    .HasColumnType("money")
                    .HasColumnName("SDANMCTA");

                entity.Property(e => e.SdanmctaT)
                    .HasColumnType("money")
                    .HasColumnName("SDANMCTA_T")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Sdanmon1)
                    .HasColumnType("money")
                    .HasColumnName("SDANMON1");

                entity.Property(e => e.Sdanmon2)
                    .HasColumnType("money")
                    .HasColumnName("SDANMON2");

                entity.Property(e => e.VersionDeLaFila)
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.BuNavigation)
                    .WithMany(p => p.SaldoPropiedad5s)
                    .HasForeignKey(d => d.Bu)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SaldoPropiedad5_BU");

                entity.HasOne(d => d.CodictaNavigation)
                    .WithMany(p => p.SaldoPropiedad5s)
                    .HasForeignKey(d => d.Codicta)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SaldoPropiedad5_MAECONT");

                entity.HasOne(d => d.Propiedad5Navigation)
                    .WithMany(p => p.SaldoPropiedad5s)
                    .HasForeignKey(d => d.Propiedad5)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SaldoPropiedad5_Propiedad5");
            });

            modelBuilder.Entity<SaldoProvLibroPrincipal>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SaldoProv_LibroPrincipal");

                entity.Property(e => e.Anomescta)
                    .HasMaxLength(7)
                    .IsUnicode(false)
                    .HasColumnName("ANOMESCTA")
                    .IsFixedLength();

                entity.Property(e => e.Codicta)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("CODICTA")
                    .IsFixedLength();

                entity.Property(e => e.Idprove)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("IDPROVE");

                entity.Property(e => e.Idunidad)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("IDUNIDAD")
                    .IsFixedLength();

                entity.Property(e => e.Mvcrcta)
                    .HasColumnType("money")
                    .HasColumnName("MVCRCTA");

                entity.Property(e => e.Mvcrmcta)
                    .HasColumnType("money")
                    .HasColumnName("MVCRMCTA");

                entity.Property(e => e.Mvdbcta)
                    .HasColumnType("money")
                    .HasColumnName("MVDBCTA");

                entity.Property(e => e.Mvdbmcta)
                    .HasColumnType("money")
                    .HasColumnName("MVDBMCTA");

                entity.Property(e => e.Sdaccta)
                    .HasColumnType("money")
                    .HasColumnName("SDACCTA");

                entity.Property(e => e.Sdacmcta)
                    .HasColumnType("money")
                    .HasColumnName("SDACMCTA");

                entity.Property(e => e.Sdancta)
                    .HasColumnType("money")
                    .HasColumnName("SDANCTA");

                entity.Property(e => e.Sdanmcta)
                    .HasColumnType("money")
                    .HasColumnName("SDANMCTA");
            });

            modelBuilder.Entity<SaldoauxBu>(entity =>
            {
                entity.HasKey(e => new { e.Anoaux, e.Bu, e.Codicta, e.Idunidad, e.Auxiaux });

                entity.ToTable("SALDOAUX_BU");

                entity.HasIndex(e => new { e.Bu, e.Codicta, e.Idunidad, e.Auxiaux, e.Anoaux }, "IX_SALDOAUX_BU_BU_CODICTA_IDUNIDAD_AUXIAUX_ANOAUX");

                entity.HasIndex(e => e.Codicta, "IX_SALDOAUX_BU_MAECONT");

                entity.Property(e => e.Anoaux)
                    .HasMaxLength(7)
                    .IsUnicode(false)
                    .HasColumnName("ANOAUX")
                    .IsFixedLength();

                entity.Property(e => e.Bu)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("BU");

                entity.Property(e => e.Codicta)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("CODICTA")
                    .IsFixedLength();

                entity.Property(e => e.Idunidad)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("IDUNIDAD")
                    .IsFixedLength();

                entity.Property(e => e.Auxiaux)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("AUXIAUX")
                    .IsFixedLength();

                entity.Property(e => e.IdenSaldoauxBu)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_saldoaux_bu");

                entity.Property(e => e.Mvcraux)
                    .HasColumnType("money")
                    .HasColumnName("MVCRAUX");

                entity.Property(e => e.Mvcrmaux)
                    .HasColumnType("money")
                    .HasColumnName("MVCRMAUX");

                entity.Property(e => e.Mvcrmon1)
                    .HasColumnType("money")
                    .HasColumnName("MVCRMON1");

                entity.Property(e => e.Mvcrmon2)
                    .HasColumnType("money")
                    .HasColumnName("MVCRMON2");

                entity.Property(e => e.Mvdbaux)
                    .HasColumnType("money")
                    .HasColumnName("MVDBAUX");

                entity.Property(e => e.Mvdbmaux)
                    .HasColumnType("money")
                    .HasColumnName("MVDBMAUX");

                entity.Property(e => e.Mvdbmon1)
                    .HasColumnType("money")
                    .HasColumnName("MVDBMON1");

                entity.Property(e => e.Mvdbmon2)
                    .HasColumnType("money")
                    .HasColumnName("MVDBMON2");

                entity.Property(e => e.Sdacaux)
                    .HasColumnType("money")
                    .HasColumnName("SDACAUX");

                entity.Property(e => e.SdacauxT)
                    .HasColumnType("money")
                    .HasColumnName("SDACAUX_T");

                entity.Property(e => e.Sdacmaux)
                    .HasColumnType("money")
                    .HasColumnName("SDACMAUX");

                entity.Property(e => e.SdacmauxT)
                    .HasColumnType("money")
                    .HasColumnName("SDACMAUX_T");

                entity.Property(e => e.Sdacmon1)
                    .HasColumnType("money")
                    .HasColumnName("SDACMON1");

                entity.Property(e => e.Sdacmon2)
                    .HasColumnType("money")
                    .HasColumnName("SDACMON2");

                entity.Property(e => e.Sdanaux)
                    .HasColumnType("money")
                    .HasColumnName("SDANAUX");

                entity.Property(e => e.SdanauxT)
                    .HasColumnType("money")
                    .HasColumnName("SDANAUX_T");

                entity.Property(e => e.Sdanmaux)
                    .HasColumnType("money")
                    .HasColumnName("SDANMAUX");

                entity.Property(e => e.SdanmauxT)
                    .HasColumnType("money")
                    .HasColumnName("SDANMAUX_T");

                entity.Property(e => e.Sdanmon1)
                    .HasColumnType("money")
                    .HasColumnName("SDANMON1");

                entity.Property(e => e.Sdanmon2)
                    .HasColumnType("money")
                    .HasColumnName("SDANMON2");

                entity.Property(e => e.VersionDeLaFila)
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.BuNavigation)
                    .WithMany(p => p.SaldoauxBus)
                    .HasForeignKey(d => d.Bu)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SALDOAUX_BU_BU");

                entity.HasOne(d => d.CodictaNavigation)
                    .WithMany(p => p.SaldoauxBus)
                    .HasForeignKey(d => d.Codicta)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SALDOAUX_BU_MAECONT");

                entity.HasOne(d => d.Auxiliar)
                    .WithMany(p => p.SaldoauxBus)
                    .HasForeignKey(d => new { d.Codicta, d.Auxiaux })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SALDOAUX_BU_AUXILIAR");
            });

            modelBuilder.Entity<SaldoauxI>(entity =>
            {
                entity.HasKey(e => e.Anoaux)
                    .IsClustered(false);

                entity.ToTable("SALDOAUX_I");

                entity.Property(e => e.Anoaux)
                    .HasMaxLength(7)
                    .IsUnicode(false)
                    .HasColumnName("ANOAUX");

                entity.Property(e => e.IdenSaldoauxI)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_saldoaux_i");

                entity.Property(e => e.Mvcraux)
                    .HasColumnType("money")
                    .HasColumnName("MVCRAUX");

                entity.Property(e => e.Mvcrmaux)
                    .HasColumnType("money")
                    .HasColumnName("MVCRMAUX");

                entity.Property(e => e.Mvcrmon1)
                    .HasColumnType("money")
                    .HasColumnName("MVCRMON1");

                entity.Property(e => e.Mvcrmon2)
                    .HasColumnType("money")
                    .HasColumnName("MVCRMON2");

                entity.Property(e => e.Mvdbaux)
                    .HasColumnType("money")
                    .HasColumnName("MVDBAUX");

                entity.Property(e => e.Mvdbmaux)
                    .HasColumnType("money")
                    .HasColumnName("MVDBMAUX");

                entity.Property(e => e.Mvdbmon1)
                    .HasColumnType("money")
                    .HasColumnName("MVDBMON1");

                entity.Property(e => e.Mvdbmon2)
                    .HasColumnType("money")
                    .HasColumnName("MVDBMON2");

                entity.Property(e => e.Sdacaux)
                    .HasColumnType("money")
                    .HasColumnName("SDACAUX");

                entity.Property(e => e.Sdacmaux)
                    .HasColumnType("money")
                    .HasColumnName("SDACMAUX");

                entity.Property(e => e.Sdacmon1)
                    .HasColumnType("money")
                    .HasColumnName("SDACMON1");

                entity.Property(e => e.Sdacmon2)
                    .HasColumnType("money")
                    .HasColumnName("SDACMON2");

                entity.Property(e => e.Sdanaux)
                    .HasColumnType("money")
                    .HasColumnName("SDANAUX");

                entity.Property(e => e.Sdanmaux)
                    .HasColumnType("money")
                    .HasColumnName("SDANMAUX");

                entity.Property(e => e.Sdanmon1)
                    .HasColumnType("money")
                    .HasColumnName("SDANMON1");

                entity.Property(e => e.Sdanmon2)
                    .HasColumnType("money")
                    .HasColumnName("SDANMON2");
            });

            modelBuilder.Entity<SaldoccoBu>(entity =>
            {
                entity.HasKey(e => new { e.Anomescco, e.Bu, e.Codicta, e.Idunidad, e.Idcenco });

                entity.ToTable("SALDOCCO_BU");

                entity.HasIndex(e => new { e.Bu, e.Codicta, e.Idunidad, e.Idcenco, e.Anomescco }, "IX_SALDOCCO_BU_BU_CODICTA_IDUNIDAD_IDCENCO_ANOMESCCO");

                entity.HasIndex(e => e.Codicta, "IX_SALDOCCO_BU_MAECONT");

                entity.Property(e => e.Anomescco)
                    .HasMaxLength(7)
                    .IsUnicode(false)
                    .HasColumnName("ANOMESCCO")
                    .IsFixedLength();

                entity.Property(e => e.Bu)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("BU");

                entity.Property(e => e.Codicta)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("CODICTA")
                    .IsFixedLength();

                entity.Property(e => e.Idunidad)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("IDUNIDAD")
                    .IsFixedLength();

                entity.Property(e => e.Idcenco)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("IDCENCO")
                    .IsFixedLength();

                entity.Property(e => e.IdenSaldoccoBu)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_saldocco_bu");

                entity.Property(e => e.Mvcrcco)
                    .HasColumnType("money")
                    .HasColumnName("MVCRCCO");

                entity.Property(e => e.Mvcrmcco)
                    .HasColumnType("money")
                    .HasColumnName("MVCRMCCO");

                entity.Property(e => e.Mvcrmon1)
                    .HasColumnType("money")
                    .HasColumnName("MVCRMON1");

                entity.Property(e => e.Mvcrmon2)
                    .HasColumnType("money")
                    .HasColumnName("MVCRMON2");

                entity.Property(e => e.Mvdbcco)
                    .HasColumnType("money")
                    .HasColumnName("MVDBCCO");

                entity.Property(e => e.Mvdbmcco)
                    .HasColumnType("money")
                    .HasColumnName("MVDBMCCO");

                entity.Property(e => e.Mvdbmon1)
                    .HasColumnType("money")
                    .HasColumnName("MVDBMON1");

                entity.Property(e => e.Mvdbmon2)
                    .HasColumnType("money")
                    .HasColumnName("MVDBMON2");

                entity.Property(e => e.Sdaccco)
                    .HasColumnType("money")
                    .HasColumnName("SDACCCO");

                entity.Property(e => e.SdacccoT)
                    .HasColumnType("money")
                    .HasColumnName("SDACCCO_T");

                entity.Property(e => e.Sdacmcco)
                    .HasColumnType("money")
                    .HasColumnName("SDACMCCO");

                entity.Property(e => e.SdacmccoT)
                    .HasColumnType("money")
                    .HasColumnName("SDACMCCO_T");

                entity.Property(e => e.Sdacmon1)
                    .HasColumnType("money")
                    .HasColumnName("SDACMON1");

                entity.Property(e => e.Sdacmon2)
                    .HasColumnType("money")
                    .HasColumnName("SDACMON2");

                entity.Property(e => e.Sdancco)
                    .HasColumnType("money")
                    .HasColumnName("SDANCCO");

                entity.Property(e => e.SdanccoT)
                    .HasColumnType("money")
                    .HasColumnName("SDANCCO_T");

                entity.Property(e => e.Sdanmcco)
                    .HasColumnType("money")
                    .HasColumnName("SDANMCCO");

                entity.Property(e => e.SdanmccoT)
                    .HasColumnType("money")
                    .HasColumnName("SDANMCCO_T");

                entity.Property(e => e.Sdanmon1)
                    .HasColumnType("money")
                    .HasColumnName("SDANMON1");

                entity.Property(e => e.Sdanmon2)
                    .HasColumnType("money")
                    .HasColumnName("SDANMON2");

                entity.Property(e => e.VersionDeLaFila)
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.BuNavigation)
                    .WithMany(p => p.SaldoccoBus)
                    .HasForeignKey(d => d.Bu)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SALDOCCO_BU_BU");

                entity.HasOne(d => d.CodictaNavigation)
                    .WithMany(p => p.SaldoccoBus)
                    .HasForeignKey(d => d.Codicta)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SALDOCCO_BU_MAECONT");

                entity.HasOne(d => d.IdcencoNavigation)
                    .WithMany(p => p.SaldoccoBus)
                    .HasForeignKey(d => d.Idcenco)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SALDOCCO_BU_MAECCO");
            });

            modelBuilder.Entity<SaldoccoI>(entity =>
            {
                entity.HasKey(e => e.Anomescco)
                    .IsClustered(false);

                entity.ToTable("SALDOCCO_I");

                entity.Property(e => e.Anomescco)
                    .HasMaxLength(7)
                    .IsUnicode(false)
                    .HasColumnName("ANOMESCCO");

                entity.Property(e => e.IdenSaldoccoI)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_saldocco_i");

                entity.Property(e => e.Mvcrcco)
                    .HasColumnType("money")
                    .HasColumnName("MVCRCCO");

                entity.Property(e => e.Mvcrmcco)
                    .HasColumnType("money")
                    .HasColumnName("MVCRMCCO");

                entity.Property(e => e.Mvcrmon1)
                    .HasColumnType("money")
                    .HasColumnName("MVCRMON1");

                entity.Property(e => e.Mvcrmon2)
                    .HasColumnType("money")
                    .HasColumnName("MVCRMON2");

                entity.Property(e => e.Mvdbcco)
                    .HasColumnType("money")
                    .HasColumnName("MVDBCCO");

                entity.Property(e => e.Mvdbmcco)
                    .HasColumnType("money")
                    .HasColumnName("MVDBMCCO");

                entity.Property(e => e.Mvdbmon1)
                    .HasColumnType("money")
                    .HasColumnName("MVDBMON1");

                entity.Property(e => e.Mvdbmon2)
                    .HasColumnType("money")
                    .HasColumnName("MVDBMON2");

                entity.Property(e => e.Sdaccco)
                    .HasColumnType("money")
                    .HasColumnName("SDACCCO");

                entity.Property(e => e.Sdacmcco)
                    .HasColumnType("money")
                    .HasColumnName("SDACMCCO");

                entity.Property(e => e.Sdacmon1)
                    .HasColumnType("money")
                    .HasColumnName("SDACMON1");

                entity.Property(e => e.Sdacmon2)
                    .HasColumnType("money")
                    .HasColumnName("SDACMON2");

                entity.Property(e => e.Sdancco)
                    .HasColumnType("money")
                    .HasColumnName("SDANCCO");

                entity.Property(e => e.Sdanmcco)
                    .HasColumnType("money")
                    .HasColumnName("SDANMCCO");

                entity.Property(e => e.Sdanmon1)
                    .HasColumnType("money")
                    .HasColumnName("SDANMON1");

                entity.Property(e => e.Sdanmon2)
                    .HasColumnType("money")
                    .HasColumnName("SDANMON2");
            });

            modelBuilder.Entity<SaldoclieBu>(entity =>
            {
                entity.HasKey(e => new { e.Anomescta, e.Bu, e.Codicta, e.Idunidad, e.Idcliente });

                entity.ToTable("SALDOCLIE_BU");

                entity.HasIndex(e => new { e.Bu, e.Codicta, e.Idunidad, e.Idcliente, e.Anomescta }, "IX_SALDOCLIE_BU_BU_CODICTA_IDUNIDAD_IDCLIENTE_ANOMESCTA");

                entity.HasIndex(e => e.Codicta, "IX_SALDOCLIE_BU_MAECONT");

                entity.Property(e => e.Anomescta)
                    .HasMaxLength(7)
                    .IsUnicode(false)
                    .HasColumnName("ANOMESCTA")
                    .IsFixedLength();

                entity.Property(e => e.Bu)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("BU");

                entity.Property(e => e.Codicta)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("CODICTA")
                    .IsFixedLength();

                entity.Property(e => e.Idunidad)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("IDUNIDAD")
                    .IsFixedLength();

                entity.Property(e => e.Idcliente)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("IDCLIENTE");

                entity.Property(e => e.IdenSaldoclieBu)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_saldoclie_bu");

                entity.Property(e => e.Mvcrcta)
                    .HasColumnType("money")
                    .HasColumnName("MVCRCTA");

                entity.Property(e => e.Mvcrmcta)
                    .HasColumnType("money")
                    .HasColumnName("MVCRMCTA");

                entity.Property(e => e.Mvcrmon1)
                    .HasColumnType("money")
                    .HasColumnName("MVCRMON1");

                entity.Property(e => e.Mvcrmon2)
                    .HasColumnType("money")
                    .HasColumnName("MVCRMON2");

                entity.Property(e => e.Mvdbcta)
                    .HasColumnType("money")
                    .HasColumnName("MVDBCTA");

                entity.Property(e => e.Mvdbmcta)
                    .HasColumnType("money")
                    .HasColumnName("MVDBMCTA");

                entity.Property(e => e.Mvdbmon1)
                    .HasColumnType("money")
                    .HasColumnName("MVDBMON1");

                entity.Property(e => e.Mvdbmon2)
                    .HasColumnType("money")
                    .HasColumnName("MVDBMON2");

                entity.Property(e => e.Sdaccta)
                    .HasColumnType("money")
                    .HasColumnName("SDACCTA");

                entity.Property(e => e.Sdacmcta)
                    .HasColumnType("money")
                    .HasColumnName("SDACMCTA");

                entity.Property(e => e.Sdacmon1)
                    .HasColumnType("money")
                    .HasColumnName("SDACMON1");

                entity.Property(e => e.Sdacmon2)
                    .HasColumnType("money")
                    .HasColumnName("SDACMON2");

                entity.Property(e => e.Sdancta)
                    .HasColumnType("money")
                    .HasColumnName("SDANCTA");

                entity.Property(e => e.Sdanmcta)
                    .HasColumnType("money")
                    .HasColumnName("SDANMCTA");

                entity.Property(e => e.Sdanmon1)
                    .HasColumnType("money")
                    .HasColumnName("SDANMON1");

                entity.Property(e => e.Sdanmon2)
                    .HasColumnType("money")
                    .HasColumnName("SDANMON2");

                entity.Property(e => e.VersionDeLaFila)
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.BuNavigation)
                    .WithMany(p => p.SaldoclieBus)
                    .HasForeignKey(d => d.Bu)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SALDOCLIE_BU_BU");

                entity.HasOne(d => d.CodictaNavigation)
                    .WithMany(p => p.SaldoclieBus)
                    .HasForeignKey(d => d.Codicta)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SALDOCLIE_BU_MAECONT");

                entity.HasOne(d => d.IdclienteNavigation)
                    .WithMany(p => p.SaldoclieBus)
                    .HasForeignKey(d => d.Idcliente)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SALDOCLIE_BU_CLIENTES");
            });

            modelBuilder.Entity<SaldoclieI>(entity =>
            {
                entity.HasKey(e => e.Anomescta)
                    .IsClustered(false);

                entity.ToTable("SALDOCLIE_I");

                entity.Property(e => e.Anomescta)
                    .HasMaxLength(7)
                    .IsUnicode(false)
                    .HasColumnName("ANOMESCTA");

                entity.Property(e => e.IdenSaldoclieI)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_saldoclie_i");

                entity.Property(e => e.Mvcrcta)
                    .HasColumnType("money")
                    .HasColumnName("MVCRCTA");

                entity.Property(e => e.Mvcrmcta)
                    .HasColumnType("money")
                    .HasColumnName("MVCRMCTA");

                entity.Property(e => e.Mvcrmon1)
                    .HasColumnType("money")
                    .HasColumnName("MVCRMON1");

                entity.Property(e => e.Mvcrmon2)
                    .HasColumnType("money")
                    .HasColumnName("MVCRMON2");

                entity.Property(e => e.Mvdbcta)
                    .HasColumnType("money")
                    .HasColumnName("MVDBCTA");

                entity.Property(e => e.Mvdbmcta)
                    .HasColumnType("money")
                    .HasColumnName("MVDBMCTA");

                entity.Property(e => e.Mvdbmon1)
                    .HasColumnType("money")
                    .HasColumnName("MVDBMON1");

                entity.Property(e => e.Mvdbmon2)
                    .HasColumnType("money")
                    .HasColumnName("MVDBMON2");

                entity.Property(e => e.Sdaccta)
                    .HasColumnType("money")
                    .HasColumnName("SDACCTA");

                entity.Property(e => e.Sdacmcta)
                    .HasColumnType("money")
                    .HasColumnName("SDACMCTA");

                entity.Property(e => e.Sdacmon1)
                    .HasColumnType("money")
                    .HasColumnName("SDACMON1");

                entity.Property(e => e.Sdacmon2)
                    .HasColumnType("money")
                    .HasColumnName("SDACMON2");

                entity.Property(e => e.Sdancta)
                    .HasColumnType("money")
                    .HasColumnName("SDANCTA");

                entity.Property(e => e.Sdanmcta)
                    .HasColumnType("money")
                    .HasColumnName("SDANMCTA");

                entity.Property(e => e.Sdanmon1)
                    .HasColumnType("money")
                    .HasColumnName("SDANMON1");

                entity.Property(e => e.Sdanmon2)
                    .HasColumnType("money")
                    .HasColumnName("SDANMON2");
            });

            modelBuilder.Entity<SaldocontBu>(entity =>
            {
                entity.HasKey(e => new { e.Anomescta, e.Bu, e.Codicta, e.Idunidad });

                entity.ToTable("SALDOCONT_BU");

                entity.HasIndex(e => new { e.Bu, e.Codicta, e.Idunidad, e.Anomescta }, "IX_SALDOCONT_BU_BU_CODICTA_IDUNIDAD_ANOMESCTA");

                entity.HasIndex(e => e.Codicta, "IX_SALDOCONT_BU_CODICTA");

                entity.Property(e => e.Anomescta)
                    .HasMaxLength(7)
                    .IsUnicode(false)
                    .HasColumnName("ANOMESCTA")
                    .IsFixedLength();

                entity.Property(e => e.Bu)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("BU");

                entity.Property(e => e.Codicta)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("CODICTA")
                    .IsFixedLength();

                entity.Property(e => e.Idunidad)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("IDUNIDAD")
                    .IsFixedLength();

                entity.Property(e => e.IdenSaldocontBu)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_saldocont_bu");

                entity.Property(e => e.Mvcrcta)
                    .HasColumnType("money")
                    .HasColumnName("MVCRCTA");

                entity.Property(e => e.Mvcrmcta)
                    .HasColumnType("money")
                    .HasColumnName("MVCRMCTA");

                entity.Property(e => e.Mvcrmon1)
                    .HasColumnType("money")
                    .HasColumnName("MVCRMON1");

                entity.Property(e => e.Mvcrmon2)
                    .HasColumnType("money")
                    .HasColumnName("MVCRMON2");

                entity.Property(e => e.Mvdbcta)
                    .HasColumnType("money")
                    .HasColumnName("MVDBCTA");

                entity.Property(e => e.Mvdbmcta)
                    .HasColumnType("money")
                    .HasColumnName("MVDBMCTA");

                entity.Property(e => e.Mvdbmon1)
                    .HasColumnType("money")
                    .HasColumnName("MVDBMON1");

                entity.Property(e => e.Mvdbmon2)
                    .HasColumnType("money")
                    .HasColumnName("MVDBMON2");

                entity.Property(e => e.Sdaccta)
                    .HasColumnType("money")
                    .HasColumnName("SDACCTA");

                entity.Property(e => e.SdacctaT)
                    .HasColumnType("money")
                    .HasColumnName("SDACCTA_T");

                entity.Property(e => e.Sdacmcta)
                    .HasColumnType("money")
                    .HasColumnName("SDACMCTA");

                entity.Property(e => e.SdacmctaT)
                    .HasColumnType("money")
                    .HasColumnName("SDACMCTA_T");

                entity.Property(e => e.Sdacmon1)
                    .HasColumnType("money")
                    .HasColumnName("SDACMON1");

                entity.Property(e => e.Sdacmon2)
                    .HasColumnType("money")
                    .HasColumnName("SDACMON2");

                entity.Property(e => e.Sdancta)
                    .HasColumnType("money")
                    .HasColumnName("SDANCTA");

                entity.Property(e => e.SdanctaT)
                    .HasColumnType("money")
                    .HasColumnName("SDANCTA_T");

                entity.Property(e => e.Sdanmcta)
                    .HasColumnType("money")
                    .HasColumnName("SDANMCTA");

                entity.Property(e => e.SdanmctaT)
                    .HasColumnType("money")
                    .HasColumnName("SDANMCTA_T");

                entity.Property(e => e.Sdanmon1)
                    .HasColumnType("money")
                    .HasColumnName("SDANMON1");

                entity.Property(e => e.Sdanmon2)
                    .HasColumnType("money")
                    .HasColumnName("SDANMON2");

                entity.Property(e => e.VersionDeLaFila)
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.BuNavigation)
                    .WithMany(p => p.SaldocontBus)
                    .HasForeignKey(d => d.Bu)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SALDOCONT_BU_BU");

                entity.HasOne(d => d.CodictaNavigation)
                    .WithMany(p => p.SaldocontBus)
                    .HasForeignKey(d => d.Codicta)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SALDOCONT_BU_MAECONT");
            });

            modelBuilder.Entity<SaldocontI>(entity =>
            {
                entity.HasKey(e => e.Anomescta)
                    .IsClustered(false);

                entity.ToTable("SALDOCONT_I");

                entity.Property(e => e.Anomescta)
                    .HasMaxLength(7)
                    .IsUnicode(false)
                    .HasColumnName("ANOMESCTA");

                entity.Property(e => e.IdenSaldocontI)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_saldocont_i");

                entity.Property(e => e.Mvcrcta)
                    .HasColumnType("money")
                    .HasColumnName("MVCRCTA");

                entity.Property(e => e.Mvcrmcta)
                    .HasColumnType("money")
                    .HasColumnName("MVCRMCTA");

                entity.Property(e => e.Mvcrmon1)
                    .HasColumnType("money")
                    .HasColumnName("MVCRMON1");

                entity.Property(e => e.Mvcrmon2)
                    .HasColumnType("money")
                    .HasColumnName("MVCRMON2");

                entity.Property(e => e.Mvdbcta)
                    .HasColumnType("money")
                    .HasColumnName("MVDBCTA");

                entity.Property(e => e.Mvdbmcta)
                    .HasColumnType("money")
                    .HasColumnName("MVDBMCTA");

                entity.Property(e => e.Mvdbmon1)
                    .HasColumnType("money")
                    .HasColumnName("MVDBMON1");

                entity.Property(e => e.Mvdbmon2)
                    .HasColumnType("money")
                    .HasColumnName("MVDBMON2");

                entity.Property(e => e.Sdaccta)
                    .HasColumnType("money")
                    .HasColumnName("SDACCTA");

                entity.Property(e => e.Sdacmcta)
                    .HasColumnType("money")
                    .HasColumnName("SDACMCTA");

                entity.Property(e => e.Sdacmon1)
                    .HasColumnType("money")
                    .HasColumnName("SDACMON1");

                entity.Property(e => e.Sdacmon2)
                    .HasColumnType("money")
                    .HasColumnName("SDACMON2");

                entity.Property(e => e.Sdancta)
                    .HasColumnType("money")
                    .HasColumnName("SDANCTA");

                entity.Property(e => e.Sdanmcta)
                    .HasColumnType("money")
                    .HasColumnName("SDANMCTA");

                entity.Property(e => e.Sdanmon1)
                    .HasColumnType("money")
                    .HasColumnName("SDANMON1");

                entity.Property(e => e.Sdanmon2)
                    .HasColumnType("money")
                    .HasColumnName("SDANMON2");
            });

            modelBuilder.Entity<Saldogeneral>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("SALDOGENERAL");

                entity.HasIndex(e => new { e.IdenLibro, e.Anomescta, e.Bu, e.Codicta, e.Idunidad }, "IX_SALDOGENERAL")
                    .IsClustered();

                entity.Property(e => e.Anomescta)
                    .HasMaxLength(7)
                    .IsUnicode(false)
                    .HasColumnName("ANOMESCTA");

                entity.Property(e => e.Auxiaux)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("AUXIAUX")
                    .IsFixedLength();

                entity.Property(e => e.Bu)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("BU");

                entity.Property(e => e.Codicta)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("CODICTA")
                    .IsFixedLength();

                entity.Property(e => e.Idbanco)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("IDBANCO")
                    .IsFixedLength();

                entity.Property(e => e.Idcenco)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("IDCENCO")
                    .IsFixedLength();

                entity.Property(e => e.Idcliprv)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("IDCLIPRV");

                entity.Property(e => e.IdenLibro)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("IDEN_LIBRO");

                entity.Property(e => e.IdenSaldogeneral)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_saldogeneral");

                entity.Property(e => e.Iditem)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("IDITEM");

                entity.Property(e => e.Idtercero)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("IDTERCERO");

                entity.Property(e => e.Idunidad)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("IDUNIDAD")
                    .IsFixedLength();

                entity.Property(e => e.Mvcrcta)
                    .HasColumnType("money")
                    .HasColumnName("MVCRCTA");

                entity.Property(e => e.Mvcrmcta)
                    .HasColumnType("money")
                    .HasColumnName("MVCRMCTA");

                entity.Property(e => e.Mvdbcta)
                    .HasColumnType("money")
                    .HasColumnName("MVDBCTA");

                entity.Property(e => e.Mvdbmcta)
                    .HasColumnType("money")
                    .HasColumnName("MVDBMCTA");

                entity.Property(e => e.Numefac)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("NUMEFAC");

                entity.Property(e => e.Propiedad1)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("PROPIEDAD1");

                entity.Property(e => e.Propiedad2)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("PROPIEDAD2");

                entity.Property(e => e.Propiedad3)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("PROPIEDAD3");

                entity.Property(e => e.Propiedad4)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("PROPIEDAD4");

                entity.Property(e => e.Propiedad5)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("PROPIEDAD5");

                entity.Property(e => e.Refefac)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("REFEFAC");

                entity.Property(e => e.Sdaccta)
                    .HasColumnType("money")
                    .HasColumnName("SDACCTA");

                entity.Property(e => e.SdacctaT)
                    .HasColumnType("money")
                    .HasColumnName("SDACCTA_T");

                entity.Property(e => e.Sdacmcta)
                    .HasColumnType("money")
                    .HasColumnName("SDACMCTA");

                entity.Property(e => e.SdacmctaT)
                    .HasColumnType("money")
                    .HasColumnName("SDACMCTA_T");

                entity.Property(e => e.Sdancta)
                    .HasColumnType("money")
                    .HasColumnName("SDANCTA");

                entity.Property(e => e.SdanctaT)
                    .HasColumnType("money")
                    .HasColumnName("SDANCTA_T");

                entity.Property(e => e.Sdanmcta)
                    .HasColumnType("money")
                    .HasColumnName("SDANMCTA");

                entity.Property(e => e.SdanmctaT)
                    .HasColumnType("money")
                    .HasColumnName("SDANMCTA_T");

                entity.Property(e => e.Tipofact)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("TIPOFACT")
                    .IsFixedLength();

                entity.Property(e => e.Vencfac)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("VENCFAC");
            });

            modelBuilder.Entity<SaldoitemsBu>(entity =>
            {
                entity.HasKey(e => new { e.Anomescta, e.Bu, e.Codicta, e.Idunidad, e.Iditem });

                entity.ToTable("SALDOITEMS_BU");

                entity.HasIndex(e => new { e.Bu, e.Codicta, e.Idunidad, e.Iditem, e.Anomescta }, "IX_SALDOITEMS_BU_BU_CODICTA_IDUNIDAD_IDITEM_ANOMESCTA");

                entity.Property(e => e.Anomescta)
                    .HasMaxLength(7)
                    .IsUnicode(false)
                    .HasColumnName("ANOMESCTA")
                    .IsFixedLength();

                entity.Property(e => e.Bu)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("BU");

                entity.Property(e => e.Codicta)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("CODICTA")
                    .IsFixedLength();

                entity.Property(e => e.Idunidad)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("IDUNIDAD")
                    .IsFixedLength();

                entity.Property(e => e.Iditem)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("IDITEM");

                entity.Property(e => e.IdenSaldoitemsBu)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_saldoitems_bu");

                entity.Property(e => e.Mvcrcta)
                    .HasColumnType("money")
                    .HasColumnName("MVCRCTA");

                entity.Property(e => e.Mvcrmcta)
                    .HasColumnType("money")
                    .HasColumnName("MVCRMCTA");

                entity.Property(e => e.Mvcrmon1)
                    .HasColumnType("money")
                    .HasColumnName("MVCRMON1");

                entity.Property(e => e.Mvcrmon2)
                    .HasColumnType("money")
                    .HasColumnName("MVCRMON2");

                entity.Property(e => e.Mvdbcta)
                    .HasColumnType("money")
                    .HasColumnName("MVDBCTA");

                entity.Property(e => e.Mvdbmcta)
                    .HasColumnType("money")
                    .HasColumnName("MVDBMCTA");

                entity.Property(e => e.Mvdbmon1)
                    .HasColumnType("money")
                    .HasColumnName("MVDBMON1");

                entity.Property(e => e.Mvdbmon2)
                    .HasColumnType("money")
                    .HasColumnName("MVDBMON2");

                entity.Property(e => e.Sdaccta)
                    .HasColumnType("money")
                    .HasColumnName("SDACCTA");

                entity.Property(e => e.SdacctaT)
                    .HasColumnType("money")
                    .HasColumnName("SDACCTA_T");

                entity.Property(e => e.Sdacmcta)
                    .HasColumnType("money")
                    .HasColumnName("SDACMCTA");

                entity.Property(e => e.SdacmctaT)
                    .HasColumnType("money")
                    .HasColumnName("SDACMCTA_T");

                entity.Property(e => e.Sdacmon1)
                    .HasColumnType("money")
                    .HasColumnName("SDACMON1");

                entity.Property(e => e.Sdacmon2)
                    .HasColumnType("money")
                    .HasColumnName("SDACMON2");

                entity.Property(e => e.Sdancta)
                    .HasColumnType("money")
                    .HasColumnName("SDANCTA");

                entity.Property(e => e.SdanctaT)
                    .HasColumnType("money")
                    .HasColumnName("SDANCTA_T");

                entity.Property(e => e.Sdanmcta)
                    .HasColumnType("money")
                    .HasColumnName("SDANMCTA");

                entity.Property(e => e.SdanmctaT)
                    .HasColumnType("money")
                    .HasColumnName("SDANMCTA_T");

                entity.Property(e => e.Sdanmon1)
                    .HasColumnType("money")
                    .HasColumnName("SDANMON1");

                entity.Property(e => e.Sdanmon2)
                    .HasColumnType("money")
                    .HasColumnName("SDANMON2");

                entity.Property(e => e.VersionDeLaFila)
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.BuNavigation)
                    .WithMany(p => p.SaldoitemsBus)
                    .HasForeignKey(d => d.Bu)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SALDOITEMS_BU_BU");

                entity.HasOne(d => d.CodictaNavigation)
                    .WithMany(p => p.SaldoitemsBus)
                    .HasForeignKey(d => d.Codicta)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SALDOITEMS_BU_MAECONT");

                entity.HasOne(d => d.IditemNavigation)
                    .WithMany(p => p.SaldoitemsBus)
                    .HasForeignKey(d => d.Iditem)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SALDOITEMS_BU_ITEMS");
            });

            modelBuilder.Entity<SaldoitemsI>(entity =>
            {
                entity.HasKey(e => e.Anomescta)
                    .IsClustered(false);

                entity.ToTable("SALDOITEMS_I");

                entity.Property(e => e.Anomescta)
                    .HasMaxLength(7)
                    .IsUnicode(false)
                    .HasColumnName("ANOMESCTA")
                    .IsFixedLength();

                entity.Property(e => e.IdenSaldoitemsI)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_saldoitems_i");

                entity.Property(e => e.Mvcrcta)
                    .HasColumnType("money")
                    .HasColumnName("MVCRCTA");

                entity.Property(e => e.Mvcrmcta)
                    .HasColumnType("money")
                    .HasColumnName("MVCRMCTA");

                entity.Property(e => e.Mvcrmon1)
                    .HasColumnType("money")
                    .HasColumnName("MVCRMON1");

                entity.Property(e => e.Mvcrmon2)
                    .HasColumnType("money")
                    .HasColumnName("MVCRMON2");

                entity.Property(e => e.Mvdbcta)
                    .HasColumnType("money")
                    .HasColumnName("MVDBCTA");

                entity.Property(e => e.Mvdbmcta)
                    .HasColumnType("money")
                    .HasColumnName("MVDBMCTA");

                entity.Property(e => e.Mvdbmon1)
                    .HasColumnType("money")
                    .HasColumnName("MVDBMON1");

                entity.Property(e => e.Mvdbmon2)
                    .HasColumnType("money")
                    .HasColumnName("MVDBMON2");

                entity.Property(e => e.Sdaccta)
                    .HasColumnType("money")
                    .HasColumnName("SDACCTA");

                entity.Property(e => e.Sdacmcta)
                    .HasColumnType("money")
                    .HasColumnName("SDACMCTA");

                entity.Property(e => e.Sdacmon1)
                    .HasColumnType("money")
                    .HasColumnName("SDACMON1");

                entity.Property(e => e.Sdacmon2)
                    .HasColumnType("money")
                    .HasColumnName("SDACMON2");

                entity.Property(e => e.Sdancta)
                    .HasColumnType("money")
                    .HasColumnName("SDANCTA");

                entity.Property(e => e.Sdanmcta)
                    .HasColumnType("money")
                    .HasColumnName("SDANMCTA");

                entity.Property(e => e.Sdanmon1)
                    .HasColumnType("money")
                    .HasColumnName("SDANMON1");

                entity.Property(e => e.Sdanmon2)
                    .HasColumnType("money")
                    .HasColumnName("SDANMON2");
            });

            modelBuilder.Entity<SaldopresuBu>(entity =>
            {
                entity.HasKey(e => new { e.Anomescta, e.Bu, e.Codipresu, e.Codcco });

                entity.ToTable("SALDOPRESU_BU");

                entity.HasIndex(e => new { e.Bu, e.Codipresu, e.Codcco, e.Anomescta }, "IX_SALDOPRESU_BU_BU_CODIPRESU_CODCCO_ANOMESCTA");

                entity.Property(e => e.Anomescta)
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .HasColumnName("ANOMESCTA")
                    .IsFixedLength();

                entity.Property(e => e.Bu)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("BU");

                entity.Property(e => e.Codipresu)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("CODIPRESU")
                    .IsFixedLength();

                entity.Property(e => e.Codcco)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("CODCCO")
                    .IsFixedLength();

                entity.Property(e => e.Adiciones)
                    .HasColumnType("numeric(18, 2)")
                    .HasColumnName("ADICIONES");

                entity.Property(e => e.Disminuciones)
                    .HasColumnType("numeric(18, 2)")
                    .HasColumnName("DISMINUCIONES");

                entity.Property(e => e.IdenSaldopresuBu)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_saldopresu_bu");

                entity.Property(e => e.Mcredito)
                    .HasColumnType("numeric(18, 2)")
                    .HasColumnName("MCREDITO");

                entity.Property(e => e.Mdebito)
                    .HasColumnType("numeric(18, 2)")
                    .HasColumnName("MDEBITO");

                entity.Property(e => e.Saldo)
                    .HasColumnType("numeric(18, 2)")
                    .HasColumnName("SALDO");

                entity.Property(e => e.Trasladocr)
                    .HasColumnType("numeric(18, 2)")
                    .HasColumnName("TRASLADOCR");

                entity.Property(e => e.Trasladodb)
                    .HasColumnType("numeric(18, 2)")
                    .HasColumnName("TRASLADODB");

                entity.Property(e => e.Valorpresu)
                    .HasColumnType("numeric(18, 2)")
                    .HasColumnName("VALORPRESU");
            });

            modelBuilder.Entity<SaldopresuLibroPrincipal>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SALDOPRESU_LibroPrincipal");

                entity.Property(e => e.Adiciones)
                    .HasColumnType("numeric(38, 2)")
                    .HasColumnName("ADICIONES");

                entity.Property(e => e.Anomescta)
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .HasColumnName("ANOMESCTA")
                    .IsFixedLength();

                entity.Property(e => e.Codcco)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("CODCCO")
                    .IsFixedLength();

                entity.Property(e => e.Codipresu)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("CODIPRESU")
                    .IsFixedLength();

                entity.Property(e => e.Disminuciones)
                    .HasColumnType("numeric(38, 2)")
                    .HasColumnName("DISMINUCIONES");

                entity.Property(e => e.Mcredito)
                    .HasColumnType("numeric(38, 2)")
                    .HasColumnName("MCREDITO");

                entity.Property(e => e.Mdebito)
                    .HasColumnType("numeric(38, 2)")
                    .HasColumnName("MDEBITO");

                entity.Property(e => e.Saldo)
                    .HasColumnType("numeric(38, 2)")
                    .HasColumnName("SALDO");

                entity.Property(e => e.Trasladocr)
                    .HasColumnType("numeric(38, 2)")
                    .HasColumnName("TRASLADOCR");

                entity.Property(e => e.Trasladodb)
                    .HasColumnType("numeric(38, 2)")
                    .HasColumnName("TRASLADODB");

                entity.Property(e => e.Valorpresu)
                    .HasColumnType("numeric(38, 2)")
                    .HasColumnName("VALORPRESU");
            });

            modelBuilder.Entity<SaldoprovBu>(entity =>
            {
                entity.HasKey(e => new { e.Anomescta, e.Bu, e.Codicta, e.Idunidad, e.Idprove });

                entity.ToTable("SALDOPROV_BU");

                entity.HasIndex(e => new { e.Bu, e.Codicta, e.Idunidad, e.Idprove, e.Anomescta }, "IX_SALDOPROV_BU_BU_CODICTA_IDUNIDAD_IDPROVE_ANOMESCTA");

                entity.HasIndex(e => e.Codicta, "IX_SALDOPROV_BU_MAECONT");

                entity.Property(e => e.Anomescta)
                    .HasMaxLength(7)
                    .IsUnicode(false)
                    .HasColumnName("ANOMESCTA")
                    .IsFixedLength();

                entity.Property(e => e.Bu)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("BU");

                entity.Property(e => e.Codicta)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("CODICTA")
                    .IsFixedLength();

                entity.Property(e => e.Idunidad)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("IDUNIDAD")
                    .IsFixedLength();

                entity.Property(e => e.Idprove)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("IDPROVE");

                entity.Property(e => e.IdenSaldoprovBu)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_saldoprov_bu");

                entity.Property(e => e.Mvcrcta)
                    .HasColumnType("money")
                    .HasColumnName("MVCRCTA");

                entity.Property(e => e.Mvcrmcta)
                    .HasColumnType("money")
                    .HasColumnName("MVCRMCTA");

                entity.Property(e => e.Mvcrmon1)
                    .HasColumnType("money")
                    .HasColumnName("MVCRMON1");

                entity.Property(e => e.Mvcrmon2)
                    .HasColumnType("money")
                    .HasColumnName("MVCRMON2");

                entity.Property(e => e.Mvdbcta)
                    .HasColumnType("money")
                    .HasColumnName("MVDBCTA");

                entity.Property(e => e.Mvdbmcta)
                    .HasColumnType("money")
                    .HasColumnName("MVDBMCTA");

                entity.Property(e => e.Mvdbmon1)
                    .HasColumnType("money")
                    .HasColumnName("MVDBMON1");

                entity.Property(e => e.Mvdbmon2)
                    .HasColumnType("money")
                    .HasColumnName("MVDBMON2");

                entity.Property(e => e.Sdaccta)
                    .HasColumnType("money")
                    .HasColumnName("SDACCTA");

                entity.Property(e => e.Sdacmcta)
                    .HasColumnType("money")
                    .HasColumnName("SDACMCTA");

                entity.Property(e => e.Sdacmon1)
                    .HasColumnType("money")
                    .HasColumnName("SDACMON1");

                entity.Property(e => e.Sdacmon2)
                    .HasColumnType("money")
                    .HasColumnName("SDACMON2");

                entity.Property(e => e.Sdancta)
                    .HasColumnType("money")
                    .HasColumnName("SDANCTA");

                entity.Property(e => e.Sdanmcta)
                    .HasColumnType("money")
                    .HasColumnName("SDANMCTA");

                entity.Property(e => e.Sdanmon1)
                    .HasColumnType("money")
                    .HasColumnName("SDANMON1");

                entity.Property(e => e.Sdanmon2)
                    .HasColumnType("money")
                    .HasColumnName("SDANMON2");

                entity.Property(e => e.VersionDeLaFila)
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.BuNavigation)
                    .WithMany(p => p.SaldoprovBus)
                    .HasForeignKey(d => d.Bu)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SALDOPROV_BU_BU");

                entity.HasOne(d => d.CodictaNavigation)
                    .WithMany(p => p.SaldoprovBus)
                    .HasForeignKey(d => d.Codicta)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SALDOPROV_BU_MAECONT");

                entity.HasOne(d => d.IdproveNavigation)
                    .WithMany(p => p.SaldoprovBus)
                    .HasForeignKey(d => d.Idprove)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SALDOPROV_BU_PROVEEDORES");
            });

            modelBuilder.Entity<SaldoprovI>(entity =>
            {
                entity.HasKey(e => e.Anomescta)
                    .IsClustered(false);

                entity.ToTable("SALDOPROV_I");

                entity.Property(e => e.Anomescta)
                    .HasMaxLength(7)
                    .IsUnicode(false)
                    .HasColumnName("ANOMESCTA");

                entity.Property(e => e.IdenSaldoprovI)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_saldoprov_i");

                entity.Property(e => e.Mvcrcta)
                    .HasColumnType("money")
                    .HasColumnName("MVCRCTA");

                entity.Property(e => e.Mvcrmcta)
                    .HasColumnType("money")
                    .HasColumnName("MVCRMCTA");

                entity.Property(e => e.Mvcrmon1)
                    .HasColumnType("money")
                    .HasColumnName("MVCRMON1");

                entity.Property(e => e.Mvcrmon2)
                    .HasColumnType("money")
                    .HasColumnName("MVCRMON2");

                entity.Property(e => e.Mvdbcta)
                    .HasColumnType("money")
                    .HasColumnName("MVDBCTA");

                entity.Property(e => e.Mvdbmcta)
                    .HasColumnType("money")
                    .HasColumnName("MVDBMCTA");

                entity.Property(e => e.Mvdbmon1)
                    .HasColumnType("money")
                    .HasColumnName("MVDBMON1");

                entity.Property(e => e.Mvdbmon2)
                    .HasColumnType("money")
                    .HasColumnName("MVDBMON2");

                entity.Property(e => e.Sdaccta)
                    .HasColumnType("money")
                    .HasColumnName("SDACCTA");

                entity.Property(e => e.Sdacmcta)
                    .HasColumnType("money")
                    .HasColumnName("SDACMCTA");

                entity.Property(e => e.Sdacmon1)
                    .HasColumnType("money")
                    .HasColumnName("SDACMON1");

                entity.Property(e => e.Sdacmon2)
                    .HasColumnType("money")
                    .HasColumnName("SDACMON2");

                entity.Property(e => e.Sdancta)
                    .HasColumnType("money")
                    .HasColumnName("SDANCTA");

                entity.Property(e => e.Sdanmcta)
                    .HasColumnType("money")
                    .HasColumnName("SDANMCTA");

                entity.Property(e => e.Sdanmon1)
                    .HasColumnType("money")
                    .HasColumnName("SDANMON1");

                entity.Property(e => e.Sdanmon2)
                    .HasColumnType("money")
                    .HasColumnName("SDANMON2");
            });

            modelBuilder.Entity<Saldorefe>(entity =>
            {
                entity.HasKey(e => new { e.Anomes, e.Bu, e.Codicta, e.Idtercero, e.Idrefe });

                entity.ToTable("SALDOREFE");

                entity.HasIndex(e => new { e.Anomes, e.Idrefe }, "IX_SALDOREFE_ANOMES_IDREFE");

                entity.Property(e => e.Anomes)
                    .HasMaxLength(7)
                    .IsUnicode(false)
                    .HasColumnName("ANOMES")
                    .IsFixedLength();

                entity.Property(e => e.Bu)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("BU");

                entity.Property(e => e.Codicta)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("CODICTA")
                    .IsFixedLength();

                entity.Property(e => e.Idtercero)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("IDTERCERO");

                entity.Property(e => e.Idrefe)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("IDREFE");

                entity.Property(e => e.IdenSaldoRefeBu)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_saldoRefe_bu");

                entity.Property(e => e.Mvcrmon1)
                    .HasColumnType("money")
                    .HasColumnName("MVCRMON1");

                entity.Property(e => e.Mvcrmon2)
                    .HasColumnType("money")
                    .HasColumnName("MVCRMON2");

                entity.Property(e => e.Mvcrmrefe)
                    .HasColumnType("money")
                    .HasColumnName("MVCRMREFE");

                entity.Property(e => e.Mvcrrefe)
                    .HasColumnType("money")
                    .HasColumnName("MVCRREFE");

                entity.Property(e => e.Mvdbmon1)
                    .HasColumnType("money")
                    .HasColumnName("MVDBMON1");

                entity.Property(e => e.Mvdbmon2)
                    .HasColumnType("money")
                    .HasColumnName("MVDBMON2");

                entity.Property(e => e.Mvdbmrefe)
                    .HasColumnType("money")
                    .HasColumnName("MVDBMREFE");

                entity.Property(e => e.Mvdbrefe)
                    .HasColumnType("money")
                    .HasColumnName("MVDBREFE");

                entity.Property(e => e.Sdacmon1)
                    .HasColumnType("money")
                    .HasColumnName("SDACMON1");

                entity.Property(e => e.Sdacmon2)
                    .HasColumnType("money")
                    .HasColumnName("SDACMON2");

                entity.Property(e => e.Sdacmrefe)
                    .HasColumnType("money")
                    .HasColumnName("SDACMREFE");

                entity.Property(e => e.SdacmrefeT)
                    .HasColumnType("money")
                    .HasColumnName("SDACMREFE_T");

                entity.Property(e => e.Sdacrefe)
                    .HasColumnType("money")
                    .HasColumnName("SDACREFE");

                entity.Property(e => e.SdacrefeT)
                    .HasColumnType("money")
                    .HasColumnName("SDACREFE_T");

                entity.Property(e => e.Sdanmon1)
                    .HasColumnType("money")
                    .HasColumnName("SDANMON1");

                entity.Property(e => e.Sdanmon2)
                    .HasColumnType("money")
                    .HasColumnName("SDANMON2");

                entity.Property(e => e.Sdanmrefe)
                    .HasColumnType("money")
                    .HasColumnName("SDANMREFE");

                entity.Property(e => e.SdanmrefeT)
                    .HasColumnType("money")
                    .HasColumnName("SDANMREFE_T");

                entity.Property(e => e.Sdanrefe)
                    .HasColumnType("money")
                    .HasColumnName("SDANREFE");

                entity.Property(e => e.SdanrefeT)
                    .HasColumnType("money")
                    .HasColumnName("SDANREFE_T");
            });

            modelBuilder.Entity<ScCobrador>(entity =>
            {
                entity.HasKey(e => e.Iden)
                    .HasName("PK_SC_COBRADOR")
                    .IsClustered(false);

                entity.ToTable("SC_Cobrador");

                entity.HasIndex(e => e.Codigo, "UQ_SC_COBRADOR_CODIGO")
                    .IsUnique();

                entity.Property(e => e.Iden)
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("IDEN");

                entity.Property(e => e.Bu)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("BU")
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.Codigo)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Deshabilitado).HasDefaultValueSql("((0))");

                entity.Property(e => e.Direccion)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Email)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Firma)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Jefe)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.JefeEmail)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Nombre)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Telefono)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");
            });

            modelBuilder.Entity<ScCobradorBu>(entity =>
            {
                entity.HasKey(e => new { e.IdenCobrador, e.Bu })
                    .HasName("PK_SC_COBRADOR_BU");

                entity.ToTable("SC_Cobrador_BU");

                entity.Property(e => e.IdenCobrador)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("IDEN_Cobrador");

                entity.Property(e => e.Bu)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("BU");

                entity.Property(e => e.IdenScCobradorBu)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_sc_cobrador_bu");

                entity.HasOne(d => d.BuNavigation)
                    .WithMany(p => p.ScCobradorBus)
                    .HasForeignKey(d => d.Bu)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SC_Cobrador_BU_BU");

                entity.HasOne(d => d.IdenCobradorNavigation)
                    .WithMany(p => p.ScCobradorBus)
                    .HasForeignKey(d => d.IdenCobrador)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SC_Cobrador_BU_SC_Cobrador");
            });

            modelBuilder.Entity<ScCriteriosDeCobro>(entity =>
            {
                entity.HasKey(e => e.Iden)
                    .IsClustered(false);

                entity.ToTable("SC_CriteriosDeCobro");

                entity.HasIndex(e => e.Codigo, "UQ_SC_CRITERIOSDECOBRO_CODIGO")
                    .IsUnique();

                entity.Property(e => e.Iden)
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("IDEN");

                entity.Property(e => e.Alias)
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.Codigo)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Descripcion)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.ExigeValor).HasDefaultValueSql("((0))");

                entity.Property(e => e.Nombre)
                    .HasMaxLength(30)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ScCuentasEspecifica>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("SC_CuentasEspecificas");

                entity.Property(e => e.Cuenta)
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.Iden).ValueGeneratedOnAdd();

                entity.Property(e => e.IdenScProgramacion)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("Iden_SC_Programacion");

                entity.Property(e => e.IdenVentana).HasColumnName("Iden_Ventana");

                entity.Property(e => e.Tipo)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Usuario)
                    .HasMaxLength(250)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ScProgramacion>(entity =>
            {
                entity.HasKey(e => e.Iden)
                    .IsClustered(false);

                entity.ToTable("SC_Programacion");

                entity.HasIndex(e => e.FechaProgramacion, "IX_SC_PROGRAMACION_FECHAPROGRAMACION");

                entity.HasIndex(e => new { e.TipoProgramacion, e.FechaProgramacion, e.IdenCobrador }, "IX_SC_PROGRAMACION_FECHAPROGRAMACION_IDEN_COBRADOR_TIPOPROGRAMACION");

                entity.HasIndex(e => e.IdenReprogramacion, "IX_SC_PROGRAMACION_IDEN_REPROGRAMACION");

                entity.HasIndex(e => new { e.Consecutivo, e.TipoProgramacion }, "UQ_SC_PROGRAMACION_CONSECUTIVO_TIPOPROGRAMACION")
                    .IsUnique();

                entity.Property(e => e.Iden)
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("IDEN");

                entity.Property(e => e.Bu)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("BU")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ClienteF)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.ClienteI)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Consecutivo).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.CuentaF)
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.CuentaI)
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.Estado)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('En Proceso')");

                entity.Property(e => e.FCliente).HasColumnName("F_Cliente");

                entity.Property(e => e.FCuenta).HasColumnName("F_Cuenta");

                entity.Property(e => e.FCuentaEspecificas).HasColumnName("F_CuentaEspecificas");

                entity.Property(e => e.FGrupoEmpresarial).HasColumnName("F_GrupoEmpresarial");

                entity.Property(e => e.FNumeFac).HasColumnName("F_NumeFac");

                entity.Property(e => e.FRefeFact).HasColumnName("F_RefeFact");

                entity.Property(e => e.FSegmento).HasColumnName("F_Segmento");

                entity.Property(e => e.FTercero).HasColumnName("F_Tercero");

                entity.Property(e => e.FTipoCliente).HasColumnName("F_TipoCliente");

                entity.Property(e => e.FTipoFact).HasColumnName("F_TipoFact");

                entity.Property(e => e.FTotalFactura).HasColumnName("F_TotalFactura");

                entity.Property(e => e.FValorDeuda).HasColumnName("F_ValorDeuda");

                entity.Property(e => e.FVenceFact).HasColumnName("F_VenceFact");

                entity.Property(e => e.FVendedor).HasColumnName("F_Vendedor");

                entity.Property(e => e.FZona).HasColumnName("F_Zona");

                entity.Property(e => e.FechaCreacion)
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.FechaElaboracion).HasColumnType("smalldatetime");

                entity.Property(e => e.FechaProgramacion).HasColumnType("smalldatetime");

                entity.Property(e => e.GrupoEmpresarialF)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.GrupoEmpresarialI)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.IdenCobrador)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("IDEN_Cobrador");

                entity.Property(e => e.IdenReprogramacion)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("IDEN_Reprogramacion");

                entity.Property(e => e.NumeFactF)
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.NumeFactI)
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.OpValorDeuda)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("Op_ValorDeuda")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.RefeFactF)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.RefeFactI)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.SegmentoF)
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.SegmentoI)
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.TerceroF)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.TerceroI)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.TipoClienteF)
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.TipoClienteI)
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.TipoFactF)
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.TipoFactI)
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.TotalProcesado).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.TotalProgramado).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.TotalRecaudoPrg)
                    .HasColumnType("numeric(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.TotalRecaudoReal)
                    .HasColumnType("numeric(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Usuario)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.ValorDeudaF).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.ValorDeudaI).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.VenceFactF).HasDefaultValueSql("((0))");

                entity.Property(e => e.VenceFactI).HasDefaultValueSql("((0))");

                entity.Property(e => e.VendedorF)
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.VendedorI)
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.ZonaF)
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.ZonaI)
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdenCobradorNavigation)
                    .WithMany(p => p.ScProgramacions)
                    .HasForeignKey(d => d.IdenCobrador)
                    .HasConstraintName("FK_SC_Programacion_SC_Cobrador");

                entity.HasOne(d => d.IdenReprogramacionNavigation)
                    .WithMany(p => p.InverseIdenReprogramacionNavigation)
                    .HasForeignKey(d => d.IdenReprogramacion)
                    .HasConstraintName("FK_SC_Programacion_SC_Programacion");
            });

            modelBuilder.Entity<ScProgramacionCliente>(entity =>
            {
                entity.HasKey(e => e.Iden)
                    .IsClustered(false);

                entity.ToTable("SC_ProgramacionCliente");

                entity.HasIndex(e => e.IdenCobrador, "IX_SC_PROGRAMACIONCLIENTE_IDEN_COBRADOR");

                entity.HasIndex(e => e.IdenRelacionado, "IX_SC_PROGRAMACIONCLIENTE_IDEN_RELACIONADO");

                entity.HasIndex(e => new { e.IdenProgramacion, e.Cliente }, "UQ_SC_PROGRAMACIONCLIENTE_CLIENTE_IDEN_PROGRAMACION")
                    .IsUnique();

                entity.Property(e => e.Iden)
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("IDEN");

                entity.Property(e => e.Cliente)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.ConsecutivoProgramacion).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.FacturasPrg).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.IdenCobrador)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("IDEN_Cobrador");

                entity.Property(e => e.IdenProgramacion)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("IDEN_Programacion");

                entity.Property(e => e.IdenRelacionado)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("IDEN_Relacionado");

                entity.Property(e => e.Prioridad)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.SaldoFact).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.Vencimiento)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdenCobradorNavigation)
                    .WithMany(p => p.ScProgramacionClientes)
                    .HasForeignKey(d => d.IdenCobrador)
                    .HasConstraintName("FK_SC_ProgramacionCliente_SC_Cobrador");

                entity.HasOne(d => d.IdenProgramacionNavigation)
                    .WithMany(p => p.ScProgramacionClientes)
                    .HasForeignKey(d => d.IdenProgramacion)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SC_ProgramacionCliente_SC_Programacion");
            });

            modelBuilder.Entity<ScProgramacionClienteCrt>(entity =>
            {
                entity.HasKey(e => new { e.IdenCliente, e.IdenCriterio });

                entity.ToTable("SC_ProgramacionClienteCrt");

                entity.HasIndex(e => e.IdenProgramacion, "IX_SC_PROGRAMACIONCLIENTECRT_IDEN_PROGRAMACION");

                entity.Property(e => e.IdenCliente)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("IDEN_Cliente");

                entity.Property(e => e.IdenCriterio)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("IDEN_Criterio");

                entity.Property(e => e.Cliente)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Fecha).HasColumnType("smalldatetime");

                entity.Property(e => e.FechaCriterio).HasColumnType("smalldatetime");

                entity.Property(e => e.IdenProgramacion)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("IDEN_Programacion");

                entity.Property(e => e.IdenScProgramacionclientecrt)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_sc_programacionclientecrt");

                entity.Property(e => e.Observacion)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.ValorNumerico).HasColumnType("numeric(18, 6)");

                entity.HasOne(d => d.IdenClienteNavigation)
                    .WithMany(p => p.ScProgramacionClienteCrts)
                    .HasForeignKey(d => d.IdenCliente)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SC_ProgramacionClienteCrt_SC_ProgramacionCliente");

                entity.HasOne(d => d.IdenCriterioNavigation)
                    .WithMany(p => p.ScProgramacionClienteCrts)
                    .HasForeignKey(d => d.IdenCriterio)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SC_ProgramacionClienteCrt_SC_CriteriosDeCobro");
            });

            modelBuilder.Entity<ScProgramacionFactAnuladaTemp>(entity =>
            {
                entity.HasKey(e => new { e.SpId, e.IdenProgramacion, e.AnoMes, e.Cuenta, e.Cliente, e.TipoFact, e.NumeFact, e.VenceFact, e.RefeFact })
                    .IsClustered(false);

                entity.ToTable("SC_ProgramacionFactAnuladaTemp");

                entity.HasIndex(e => e.IdenFactura, "IX_SC_PROGRAMACIONFACTANULADATEMP_IDEN_FACTURA")
                    .IsUnique();

                entity.HasIndex(e => e.SpId, "IX_SC_PROGRAMACIONFACTANULADATEMP_SPID")
                    .IsClustered();

                entity.Property(e => e.SpId)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("SpID");

                entity.Property(e => e.IdenProgramacion)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("IDEN_Programacion");

                entity.Property(e => e.AnoMes)
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Cuenta)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Cliente)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.TipoFact)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.NumeFact)
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.VenceFact)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.RefeFact)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Bu)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("BU")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ConsecutivoProgramacion).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.IdenFactura)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("IDEN_Factura");

                entity.Property(e => e.IdenScProgramacionfactanuladatemp)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_sc_programacionfactanuladatemp");

                entity.Property(e => e.Prioridad)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.SaldoFact).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.Vendedor)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Zona)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength();
            });

            modelBuilder.Entity<ScProgramacionFactAnuladum>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("SC_ProgramacionFactAnulada");

                entity.HasIndex(e => e.Iden, "IX_SC_PROGRAMACIONFACTANULADA_IDEN")
                    .IsUnique()
                    .IsClustered();

                entity.Property(e => e.AnoMes)
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Bu)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("BU")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Cliente)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.ConsecutivoProgramacion).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.Cuenta)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Iden)
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("IDEN");

                entity.Property(e => e.IdenProgramacion)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("IDEN_Programacion");

                entity.Property(e => e.NumeFact)
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.Prioridad)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RefeFact)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.SaldoFact).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.TipoFact)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.VenceFact)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Vendedor)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Zona)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength();
            });

            modelBuilder.Entity<ScProgramacionFactCriterio>(entity =>
            {
                entity.HasKey(e => new { e.IdenFactura, e.IdenCriterio });

                entity.ToTable("SC_ProgramacionFactCriterios");

                entity.HasIndex(e => e.IdenProgramacion, "IX_SC_PROGRAMACIONFACTCRITERIOS_IDEN_PROGRAMACION");

                entity.Property(e => e.IdenFactura)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("IDEN_Factura");

                entity.Property(e => e.IdenCriterio)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("IDEN_Criterio");

                entity.Property(e => e.Fecha).HasColumnType("smalldatetime");

                entity.Property(e => e.IdenProgramacion)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("IDEN_Programacion");

                entity.Property(e => e.IdenScProgramacionfactcriterios)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_sc_programacionfactcriterios");

                entity.Property(e => e.Observacion)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ValorNumerico).HasColumnType("numeric(18, 6)");

                entity.HasOne(d => d.IdenCriterioNavigation)
                    .WithMany(p => p.ScProgramacionFactCriterios)
                    .HasForeignKey(d => d.IdenCriterio)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SC_ProgramacionFactCriterios_SC_CriteriosDeCobro");

                entity.HasOne(d => d.IdenFacturaNavigation)
                    .WithMany(p => p.ScProgramacionFactCriterios)
                    .HasForeignKey(d => d.IdenFactura)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SC_ProgramacionFactCriterios_SC_ProgramacionFactura");
            });

            modelBuilder.Entity<ScProgramacionFactura>(entity =>
            {
                entity.HasKey(e => e.Iden)
                    .IsClustered(false);

                entity.ToTable("SC_ProgramacionFactura");

                entity.HasIndex(e => e.Cliente, "IX_SC_PROGRAMACIONFACTURA_CLIENTE");

                entity.HasIndex(e => new { e.IdenProgramacion, e.AnoMes, e.Cuenta, e.Cliente, e.TipoFact, e.NumeFact, e.VenceFact, e.RefeFact }, "UQ_SC_PROGRAMACIONFACTURA_ANOMES_CLIENTE_CUENTA_IDEN_PROGRAMACION_NUMEFACT_REFEFACT_TIPOFACT_VENCEFACT")
                    .IsUnique();

                entity.Property(e => e.Iden)
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("IDEN");

                entity.Property(e => e.AnoMes)
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')")
                    .IsFixedLength();

                entity.Property(e => e.Bu)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("BU")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Cliente)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.ConsecutivoProgramacion).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.Cuenta)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.IdenProgramacion)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("IDEN_Programacion");

                entity.Property(e => e.NumeFact)
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.Prioridad)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.RefeFact)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.SaldoFact).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.TipoFact)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.TotalIvaMora).HasColumnType("money");

                entity.Property(e => e.TotalMora).HasColumnType("money");

                entity.Property(e => e.VenceFact)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Vendedor)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Zona)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.HasOne(d => d.IdenProgramacionNavigation)
                    .WithMany(p => p.ScProgramacionFacturas)
                    .HasForeignKey(d => d.IdenProgramacion)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SC_ProgramacionFactura_SC_Programacion");
            });

            modelBuilder.Entity<ScProgramacionFacturaTemp>(entity =>
            {
                entity.HasKey(e => new { e.SpId, e.AnoMes, e.Cuenta, e.Cliente, e.TipoFact, e.NumeFact, e.VenceFact, e.RefeFact });

                entity.ToTable("SC_ProgramacionFacturaTemp");

                entity.Property(e => e.AnoMes)
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Cuenta)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Cliente)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.TipoFact)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.NumeFact)
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.VenceFact)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.RefeFact)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Bu)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("BU")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.IdenScProgramacionfacturatemp)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_sc_programacionfacturatemp");

                entity.Property(e => e.TotalIvaMora).HasColumnType("money");

                entity.Property(e => e.TotalMora).HasColumnType("money");
            });

            modelBuilder.Entity<SchemaVersion>(entity =>
            {
                entity.Property(e => e.Applied).HasColumnType("datetime");

                entity.Property(e => e.ScriptName).HasMaxLength(255);
            });

            modelBuilder.Entity<Seccione>(entity =>
            {
                entity.HasKey(e => e.Iden)
                    .HasName("PK_SECCIONES");

                entity.HasIndex(e => new { e.Tipo, e.Codigo }, "UQ_Secciones_Tipo_Codigo")
                    .IsUnique();

                entity.Property(e => e.Codigo)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CodigoPadre)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Descripcion).IsUnicode(false);

                entity.Property(e => e.Nombre)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Orden)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("orden");

                entity.Property(e => e.Tipo)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<SeccionesEfCabecera>(entity =>
            {
                entity.ToTable("SeccionesEF_Cabecera");

                entity.HasIndex(e => new { e.Codigo, e.IdLibroLegal }, "UQ_SECCIONESEF_CABECERA_CODIGO_ID_LIBROLEGAL")
                    .IsUnique();

                entity.Property(e => e.Codigo)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.IdCategoriaFinanciera).HasColumnName("Id_CategoriaFinanciera");

                entity.Property(e => e.IdLibroLegal).HasColumnName("Id_LibroLegal");

                entity.Property(e => e.IdSeccionPadre).HasColumnName("Id_SeccionPadre");

                entity.Property(e => e.IdTasasConversion).HasColumnName("Id_TasasConversion");

                entity.Property(e => e.NOrden).HasColumnName("nOrden");

                entity.Property(e => e.Nombre)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.RubroFinanciero)
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdLibroLegalNavigation)
                    .WithMany(p => p.SeccionesEfCabeceras)
                    .HasForeignKey(d => d.IdLibroLegal)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SeccionesEF_Cabecera_LibrosLegales");

                entity.HasOne(d => d.IdSeccionPadreNavigation)
                    .WithMany(p => p.InverseIdSeccionPadreNavigation)
                    .HasForeignKey(d => d.IdSeccionPadre)
                    .HasConstraintName("FK_SeccionesEF_Cabecera_SeccionesEF_Cabecera");
            });

            modelBuilder.Entity<SeccionesEfCabeceraOrdenado>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("SeccionesEF_CabeceraOrdenados");

                entity.Property(e => e.Hijo)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("id");

                entity.Property(e => e.IdLibroLegal).HasColumnName("Id_LibroLegal");

                entity.Property(e => e.Nivel).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.Orden)
                    .HasMaxLength(8000)
                    .IsUnicode(false);

                entity.Property(e => e.Padre)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<SeccionesEfDetalle>(entity =>
            {
                entity.ToTable("SeccionesEF_Detalle");

                entity.Property(e => e.CodCtaFin)
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.CodCtaIni)
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.IdSeccionCabecera).HasColumnName("Id_SeccionCabecera");

                entity.Property(e => e.NomCtaFin)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NomCtaIni)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdSeccionCabeceraNavigation)
                    .WithMany(p => p.SeccionesEfDetalles)
                    .HasForeignKey(d => d.IdSeccionCabecera)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SeccionEF_Detalle_SeccionesEF_Cabecera");
            });

            modelBuilder.Entity<SeccionesEfExcepcione>(entity =>
            {
                entity.ToTable("SeccionesEF_Excepciones");

                entity.Property(e => e.CodCta)
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.IdSeccionCabecera).HasColumnName("Id_SeccionCabecera");

                entity.Property(e => e.NomCta)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdSeccionCabeceraNavigation)
                    .WithMany(p => p.SeccionesEfExcepciones)
                    .HasForeignKey(d => d.IdSeccionCabecera)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SeccionesEF_Excepciones_SeccionesEF_Cabecera");
            });

            modelBuilder.Entity<SeccionesEfOrdenImpresion>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("SeccionesEF_OrdenImpresion");

                entity.Property(e => e.Codigo)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("id");

                entity.Property(e => e.IdLibroLegal).HasColumnName("Id_LibroLegal");
            });

            modelBuilder.Entity<SeccionesOrdenado>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.Hijo)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("id");

                entity.Property(e => e.Nivel).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.Orden)
                    .HasMaxLength(8000)
                    .IsUnicode(false);

                entity.Property(e => e.Padre)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Tipo)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<SeccionesOrdene>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Secciones_Ordenes");

                entity.Property(e => e.IdenSecciones).HasColumnName("Iden_Secciones");

                entity.Property(e => e.IdenSeccionesOrdenes)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_secciones_ordenes");
            });

            modelBuilder.Entity<SecuencialPagoGerencium>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.AlfaNumerico)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Iden)
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Numerico).HasColumnType("numeric(18, 0)");
            });

            modelBuilder.Entity<Segmento>(entity =>
            {
                entity.HasKey(e => e.Idsegmento)
                    .HasName("pk_segmento")
                    .IsClustered(false);

                entity.ToTable("SEGMENTO");

                entity.HasIndex(e => e.Dessegmento, "IX_SEGMENTO_DESSEGMENTO");

                entity.Property(e => e.Idsegmento)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("IDSEGMENTO")
                    .IsFixedLength();

                entity.Property(e => e.Depsegmento)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("DEPSEGMENTO");

                entity.Property(e => e.Dessegmento)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("DESSEGMENTO")
                    .IsFixedLength();

                entity.Property(e => e.Fecsegmento)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("FECSEGMENTO");

                entity.Property(e => e.IdenSegmento)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_segmento");

                entity.Property(e => e.Ncdsegmento).HasColumnName("NCDSEGMENTO");

                entity.Property(e => e.Nivsegmento).HasColumnName("NIVSEGMENTO");

                entity.Property(e => e.Tiposegmento)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("TIPOSEGMENTO")
                    .IsFixedLength();

                entity.Property(e => e.VersionDeLaFila)
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<SentenciaPivotTable>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("SentenciaPivotTable");

                entity.Property(e => e.Id)
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Sentencia)
                    .HasMaxLength(4000)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<SistemasFiltro>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Sistemas_Filtros");

                entity.Property(e => e.FechaGrabacion).HasColumnType("datetime");

                entity.Property(e => e.IdUsuario).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.Iden).ValueGeneratedOnAdd();

                entity.Property(e => e.IdenSesion).HasColumnType("numeric(18, 0)");
            });

            modelBuilder.Entity<SistemasFiltrosDetalle>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Sistemas_Filtros_Detalle");

                entity.Property(e => e.IdenSistemasFiltros).HasColumnName("Iden_Sistemas_Filtros");

                entity.Property(e => e.IdenSistemasFiltrosDetalle)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_sistemas_filtros_detalle");

                entity.Property(e => e.Nombre)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Valor).IsUnicode(false);
            });

            modelBuilder.Entity<SolicitudPresupuesto>(entity =>
            {
                entity.HasKey(e => e.Iden);

                entity.ToTable("SolicitudPresupuesto");

                entity.Property(e => e.Ano)
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .HasColumnName("ANO")
                    .IsFixedLength();

                entity.Property(e => e.Bu)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("BU");

                entity.Property(e => e.Consecutivo).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.Descripcion)
                    .HasMaxLength(8000)
                    .IsUnicode(false);

                entity.Property(e => e.DocumentoExterno)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Estado)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Fecha).HasColumnType("smalldatetime");

                entity.Property(e => e.Tipo)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Usuario)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioAutoriza)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.HasOne(d => d.BuNavigation)
                    .WithMany(p => p.SolicitudPresupuestos)
                    .HasForeignKey(d => d.Bu)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SolicitudPresupuesto_BU");

                entity.HasOne(d => d.UsuarioNavigation)
                    .WithMany(p => p.SolicitudPresupuestoUsuarioNavigations)
                    .HasForeignKey(d => d.Usuario)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SolicitudPresupuesto_Usuario");

                entity.HasOne(d => d.UsuarioAutorizaNavigation)
                    .WithMany(p => p.SolicitudPresupuestoUsuarioAutorizaNavigations)
                    .HasForeignKey(d => d.UsuarioAutoriza)
                    .HasConstraintName("FK_SolicitudPresupuesto_UsuarioAutoriza");
            });

            modelBuilder.Entity<SolicitudPresupuestoTransac>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("SolicitudPresupuesto_Transac");

                entity.Property(e => e.CodCco)
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.CodCcoDestino)
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.CodCta)
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.CodCtaDestino)
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.Iden).ValueGeneratedOnAdd();

                entity.Property(e => e.Mes0)
                    .HasColumnType("money")
                    .HasColumnName("MES0");

                entity.Property(e => e.Mes1)
                    .HasColumnType("money")
                    .HasColumnName("MES1");

                entity.Property(e => e.Mes10)
                    .HasColumnType("money")
                    .HasColumnName("MES10");

                entity.Property(e => e.Mes11)
                    .HasColumnType("money")
                    .HasColumnName("MES11");

                entity.Property(e => e.Mes12)
                    .HasColumnType("money")
                    .HasColumnName("MES12");

                entity.Property(e => e.Mes2)
                    .HasColumnType("money")
                    .HasColumnName("MES2");

                entity.Property(e => e.Mes3)
                    .HasColumnType("money")
                    .HasColumnName("MES3");

                entity.Property(e => e.Mes4)
                    .HasColumnType("money")
                    .HasColumnName("MES4");

                entity.Property(e => e.Mes5)
                    .HasColumnType("money")
                    .HasColumnName("MES5");

                entity.Property(e => e.Mes6)
                    .HasColumnType("money")
                    .HasColumnName("MES6");

                entity.Property(e => e.Mes7)
                    .HasColumnType("money")
                    .HasColumnName("MES7");

                entity.Property(e => e.Mes8)
                    .HasColumnType("money")
                    .HasColumnName("MES8");

                entity.Property(e => e.Mes9)
                    .HasColumnType("money")
                    .HasColumnName("MES9");

                entity.Property(e => e.Mesorigen)
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .HasColumnName("MESORIGEN");

                entity.HasOne(d => d.IdenSolicitudPresupuestoNavigation)
                    .WithMany()
                    .HasForeignKey(d => d.IdenSolicitudPresupuesto)
                    .HasConstraintName("FK_SolicitudPresupuesto_Transac_IdenSolicitudPresupuesto");
            });

            modelBuilder.Entity<Sqlwizard>(entity =>
            {
                entity.HasKey(e => new { e.Descripcion, e.Usuario })
                    .IsClustered(false);

                entity.ToTable("SQLWIZARD");

                entity.Property(e => e.Descripcion)
                    .HasMaxLength(256)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPCION");

                entity.Property(e => e.Usuario)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("USUARIO");

                entity.Property(e => e.Campos)
                    .HasMaxLength(4096)
                    .IsUnicode(false)
                    .HasColumnName("CAMPOS");

                entity.Property(e => e.Camposquery)
                    .HasMaxLength(4096)
                    .IsUnicode(false)
                    .HasColumnName("CAMPOSQUERY");

                entity.Property(e => e.Chejeperfil)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("CHEJEPERFIL")
                    .IsFixedLength();

                entity.Property(e => e.Chejeusuario)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("CHEJEUSUARIO")
                    .IsFixedLength();

                entity.Property(e => e.Chmodiperfil)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("CHMODIPERFIL")
                    .IsFixedLength();

                entity.Property(e => e.Chmodiusuario)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("CHMODIUSUARIO")
                    .IsFixedLength();

                entity.Property(e => e.Chperfil)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("CHPERFIL")
                    .IsFixedLength();

                entity.Property(e => e.Chusuario)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("CHUSUARIO")
                    .IsFixedLength();

                entity.Property(e => e.IdenSqlwizard)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_sqlwizard");

                entity.Property(e => e.IndSql1)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Ordenado)
                    .HasMaxLength(4096)
                    .IsUnicode(false)
                    .HasColumnName("ORDENADO");

                entity.Property(e => e.Perfiles)
                    .HasMaxLength(4096)
                    .IsUnicode(false)
                    .HasColumnName("PERFILES");

                entity.Property(e => e.Publico)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("PUBLICO")
                    .IsFixedLength();

                entity.Property(e => e.Restricciones)
                    .HasMaxLength(4096)
                    .IsUnicode(false)
                    .HasColumnName("RESTRICCIONES");

                entity.Property(e => e.Sortquery)
                    .HasMaxLength(4096)
                    .IsUnicode(false)
                    .HasColumnName("SORTQUERY");

                entity.Property(e => e.Sql)
                    .HasMaxLength(4096)
                    .IsUnicode(false)
                    .HasColumnName("SQL");

                entity.Property(e => e.Sql1)
                    .HasMaxLength(4096)
                    .IsUnicode(false)
                    .HasColumnName("SQL1");

                entity.Property(e => e.Usuarios)
                    .HasMaxLength(4096)
                    .IsUnicode(false)
                    .HasColumnName("USUARIOS");
            });

            modelBuilder.Entity<SriCatBienServ>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("SRI_CatBienServ");

                entity.Property(e => e.Campo)
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.IdenSriCatbienserv)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_sri_catbienserv");
            });

            modelBuilder.Entity<SriCatIce>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("SRI_CatICE");

                entity.Property(e => e.Campo)
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.IdenSriCatice)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_sri_catice");
            });

            modelBuilder.Entity<SriCatRetIva100>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("SRI_CatRetIva100");

                entity.Property(e => e.Campo)
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.IdenSriCatretiva100)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_sri_catretiva100");
            });

            modelBuilder.Entity<SriCatRetIvaBie>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("SRI_CatRetIvaBie");

                entity.Property(e => e.Campo)
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.IdenSriCatretivabie)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_sri_catretivabie");
            });

            modelBuilder.Entity<SriCatRetIvaSer>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("SRI_CatRetIvaSer");

                entity.Property(e => e.Campo)
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.IdenSriCatretivaser)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_sri_catretivaser");
            });

            modelBuilder.Entity<SriCatRetRentum>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("SRI_CatRetRenta");

                entity.Property(e => e.Campo)
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.IdenSriCatretrenta)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_sri_catretrenta");
            });

            modelBuilder.Entity<SriCategoriaRedondeo>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("SRI_CategoriaRedondeo");

                entity.Property(e => e.Categoria)
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.Concepto)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Documento)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Fuente)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.IdenSriCategoriaredondeo)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_sri_categoriaredondeo");

                entity.Property(e => e.Tipo)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();
            });

            modelBuilder.Entity<SriCategorium>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("SRI_Categoria");

                entity.Property(e => e.Categoria)
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.Concepto)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Documento)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Fuente)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.IdenSriCategoria)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_sri_categoria");

                entity.Property(e => e.Tipo)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();
            });

            modelBuilder.Entity<SriConceptosRedondeo>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("SRI_ConceptosRedondeo");

                entity.Property(e => e.Campo)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.IdenSriConceptosredondeo)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_sri_conceptosredondeo");

                entity.Property(e => e.Tipo)
                    .HasMaxLength(1)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<SriDocGeneradosXml>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("SRI_DocGeneradosXML");

                entity.Property(e => e.CodigoControl)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Documento)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Fuente)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.Iden)
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.IdenXmlRecibido)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("Iden_XmlRecibido");
            });

            modelBuilder.Entity<SriFamilia>(entity =>
            {
                entity.HasKey(e => e.Iden);

                entity.ToTable("SRI_Familias");

                entity.Property(e => e.Aplicativo)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Base)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Servidor)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<SriImpuesto>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("SRI_Impuestos");

                entity.Property(e => e.BaseImponible).HasColumnType("money");

                entity.Property(e => e.ClaveAcceso)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ClienteProveedor)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Cliente_Proveedor");

                entity.Property(e => e.CodDocSustento)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Codigo)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.CodigoRetencion)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CuentaCartera)
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.CuentaConcepto)
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.FechaFactura)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Iden)
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.IdenXmlRecibido)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("Iden_XmlRecibido");

                entity.Property(e => e.NumDocSustento)
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.NumeroFactura)
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.PorcentajeRetener).HasColumnType("money");

                entity.Property(e => e.Referencia)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.TipoFactura)
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.UnidadDeNegocio)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.ValorRetenido).HasColumnType("money");

                entity.Property(e => e.Vencimiento)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Vendedor)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength();
            });

            modelBuilder.Entity<SriInfoCompRetencion>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("SRI_infoCompRetencion");

                entity.Property(e => e.ClaveAcceso)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ContribuyenteEspecial)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DirEstablecimiento)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.FechaEmision)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Iden)
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.IdenXmlRecibido)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("Iden_XmlRecibido");

                entity.Property(e => e.IdentificacionSujetoRetenido)
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.ObligadoContabilidad)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.PeriodoFiscal)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.RazonSocialSujetoRetenido)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.TipoIdentificacionSujetoRetenido)
                    .HasMaxLength(2)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<SriInfoTributarium>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("SRI_InfoTributaria");

                entity.Property(e => e.ClaveAcceso)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CodDoc)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.DirMatriz)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Establecimiento)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Iden)
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.IdenXmlRecibido)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("Iden_XmlRecibido");

                entity.Property(e => e.NombreComercial)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.PuntoEmision)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RazonSocial)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Ruc)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("RUC");

                entity.Property(e => e.Secuencial)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<SriItemRetCero>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("SRI_ItemRetCero");

                entity.Property(e => e.Campo)
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.IdenSriItemretcero)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_sri_itemretcero");
            });

            modelBuilder.Entity<SriXmlRecibido>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("SRI_XmlRecibido");

                entity.Property(e => e.Ambiente)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Estado)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.FechaAutorizacion)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.FechaLectura).HasColumnType("smalldatetime");

                entity.Property(e => e.Iden)
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.NumeroAutorizacion)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RutaXml)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("RutaXML");
            });

            modelBuilder.Entity<SunatConcepto>(entity =>
            {
                entity.HasKey(e => e.CodigoConcepto);

                entity.ToTable("Sunat_Conceptos");

                entity.Property(e => e.CodigoConcepto)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.IdenSunatConceptos)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_sunat_conceptos");

                entity.Property(e => e.NombreConcepto)
                    .HasMaxLength(40)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<SunatFuente>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Sunat_Fuentes");

                entity.Property(e => e.IdenSunatFuentes)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_sunat_fuentes");

                entity.Property(e => e.Idfuente)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();
            });

            modelBuilder.Entity<SunatParametro>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Sunat_Parametros");

                entity.Property(e => e.ConceptoIva)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.ConceptoRedondeoC)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.FechaPresentacion)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.FechaRetencion)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.IdenSunatParametros)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_sunat_parametros");

                entity.Property(e => e.NdocRetencion)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("NDocRetencion")
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.NoBoletaVenta)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.TipoFacturaBv)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("TipoFacturaBV")
                    .IsFixedLength();

                entity.Property(e => e.TipoFacturaLc)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("TipoFacturaLC")
                    .HasDefaultValueSql("(' ')")
                    .IsFixedLength();

                entity.Property(e => e.TipoFacturaNd)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("TipoFacturaND")
                    .IsFixedLength();

                entity.Property(e => e.TipoFacturaPs)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("TipoFacturaPS")
                    .HasDefaultValueSql("(' ')")
                    .IsFixedLength();

                entity.Property(e => e.TipoFacturaSp)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("TipoFacturaSP")
                    .HasDefaultValueSql("(' ')")
                    .IsFixedLength();
            });

            modelBuilder.Entity<SunatRetencione>(entity =>
            {
                entity.HasKey(e => new { e.IndCuenta, e.IndNombreComprobante, e.IndNombreTransaccion });

                entity.ToTable("Sunat_Retenciones");

                entity.Property(e => e.IndCuenta)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.IndNombreComprobante)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.IndNombreTransaccion)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.DescCuenta)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.IdenSunatRetenciones)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_sunat_retenciones");

                entity.Property(e => e.NombreComprobante)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NombreTransaccion)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<SysEntidade>(entity =>
            {
                entity.ToTable("sys_Entidades");

                entity.HasIndex(e => e.DsNombre, "AK_sys_entidades_ds_nombre")
                    .IsUnique();

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("id");

                entity.Property(e => e.DsDescripcion)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("ds_descripcion");

                entity.Property(e => e.DsNombre)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ds_nombre");

                entity.Property(e => e.IdenSysEntidades)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_sys_entidades");
            });

            modelBuilder.Entity<TablaAmortizacion>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TablaAmortizacion");

                entity.Property(e => e.Capital)
                    .HasColumnType("money")
                    .HasColumnName("capital");

                entity.Property(e => e.CapitalMoneda)
                    .HasColumnType("money")
                    .HasColumnName("capitalMoneda");

                entity.Property(e => e.Cuota).HasColumnName("cuota");

                entity.Property(e => e.FechaCuota)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("fecha_cuota")
                    .IsFixedLength();

                entity.Property(e => e.IdenLibro).HasColumnName("Iden_Libro");

                entity.Property(e => e.IdenTablaAmortizacionParametros).HasColumnName("Iden_TablaAmortizacion_Parametros");

                entity.Property(e => e.IdenTablaamortizacion)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_tablaamortizacion");

                entity.Property(e => e.Interes)
                    .HasColumnType("money")
                    .HasColumnName("interes");

                entity.Property(e => e.InteresMoneda)
                    .HasColumnType("money")
                    .HasColumnName("interesMoneda");

                entity.Property(e => e.Monto)
                    .HasColumnType("money")
                    .HasColumnName("monto");

                entity.Property(e => e.MontoMoneda)
                    .HasColumnType("money")
                    .HasColumnName("montoMoneda");

                entity.Property(e => e.Saldocapital)
                    .HasColumnType("money")
                    .HasColumnName("saldocapital");

                entity.Property(e => e.SaldocapitalMoneda)
                    .HasColumnType("money")
                    .HasColumnName("saldocapitalMoneda");

                entity.Property(e => e.Totalcxc)
                    .HasColumnType("money")
                    .HasColumnName("totalcxc");

                entity.Property(e => e.TotalcxcMoneda)
                    .HasColumnType("money")
                    .HasColumnName("totalcxcMoneda");

                entity.Property(e => e.Valorcuota)
                    .HasColumnType("money")
                    .HasColumnName("valorcuota");

                entity.Property(e => e.ValorcuotaMoneda)
                    .HasColumnType("money")
                    .HasColumnName("valorcuotaMoneda");

                entity.HasOne(d => d.IdenTablaAmortizacionParametrosNavigation)
                    .WithMany()
                    .HasForeignKey(d => d.IdenTablaAmortizacionParametros)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TablaAmortizacion_TablaAmortizacion_Parametros");
            });

            modelBuilder.Entity<TablaAmortizacionParametro>(entity =>
            {
                entity.ToTable("TablaAmortizacion_Parametros");

                entity.Property(e => e.CostosAsociados).HasColumnType("money");

                entity.Property(e => e.Decimales).HasColumnName("decimales");

                entity.Property(e => e.FechaPrimerpago)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("fecha_primerpago");

                entity.Property(e => e.IdMoneda)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.IdenCondicionesdecredito)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("iden_condicionesdecredito");

                entity.Property(e => e.IdenCondicionesdecreditoMercado)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("iden_condicionesdecreditoMercado");

                entity.Property(e => e.IdenLibro).HasColumnName("Iden_Libro");

                entity.Property(e => e.Monto)
                    .HasColumnType("money")
                    .HasColumnName("monto");

                entity.Property(e => e.MontoOtraMoneda).HasColumnType("money");

                entity.Property(e => e.PeriodicidadTasa).HasColumnName("periodicidad_tasa");

                entity.Property(e => e.Plazo).HasColumnName("plazo");

                entity.Property(e => e.Tasa).HasColumnName("tasa");

                entity.Property(e => e.TasaComparativa).HasColumnName("tasa_Comparativa");

                entity.Property(e => e.TipoInteres).HasColumnName("tipo_interes");

                entity.HasOne(d => d.IdenCondicionesdecreditoNavigation)
                    .WithMany(p => p.TablaAmortizacionParametros)
                    .HasForeignKey(d => d.IdenCondicionesdecredito)
                    .HasConstraintName("FK_TablaAmortizacion_Parametros_condicionesdecredito");
            });

            modelBuilder.Entity<TablaDigiVerif>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TablaDigiVerif");

                entity.Property(e => e.IdenTabladigiverif)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_tabladigiverif");
            });

            modelBuilder.Entity<TasaDeCambioPorMonedum>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.FechaFinal)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.FechaInicial)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.IdMonedaDestino)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.IdMonedaOrigen)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Iden).ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<TasasConversion>(entity =>
            {
                entity.ToTable("TasasConversion");

                entity.Property(e => e.Codigo)
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Nombre)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TasasIntere>(entity =>
            {
                entity.HasKey(e => e.Iden)
                    .IsClustered(false);

                entity.HasIndex(e => e.Codigo, "IX_TasasInteres_codigo")
                    .IsUnique();

                entity.Property(e => e.Iden)
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Codigo)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Nombre)
                    .HasMaxLength(250)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TasasInteresDetalle>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TasasInteres_Detalle");

                entity.Property(e => e.Fecha)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.FechaFinal)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')")
                    .IsFixedLength();

                entity.Property(e => e.IdenTasasInteres)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("Iden_TasasInteres");

                entity.Property(e => e.IdenTasasinteresDetalle)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_tasasinteres_detalle");

                entity.HasOne(d => d.IdenTasasInteresNavigation)
                    .WithMany()
                    .HasForeignKey(d => d.IdenTasasInteres)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TasasInteres_Detalle_TasasInteres");
            });

            modelBuilder.Entity<TasasMercado>(entity =>
            {
                entity.HasKey(e => new { e.Fecha, e.FechaFinal })
                    .IsClustered(false);

                entity.ToTable("TasasMercado");

                entity.Property(e => e.Fecha)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.FechaFinal)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')")
                    .IsFixedLength();

                entity.Property(e => e.Iden)
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<Tcambio>(entity =>
            {
                entity.HasKey(e => new { e.Idmoneda, e.Fecha })
                    .HasName("pk_tcambio")
                    .IsClustered(false);

                entity.ToTable("TCAMBIO");

                entity.Property(e => e.Idmoneda)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("IDMONEDA")
                    .IsFixedLength();

                entity.Property(e => e.Fecha)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("FECHA")
                    .IsFixedLength();

                entity.Property(e => e.Fechafinal)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("FECHAFINAL")
                    .HasDefaultValueSql("('')")
                    .IsFixedLength();

                entity.Property(e => e.Iden)
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.TasaActivo).HasColumnType("money");

                entity.Property(e => e.TasaPasivo).HasColumnType("money");

                entity.Property(e => e.Tasacambio)
                    .HasColumnType("money")
                    .HasColumnName("TASACAMBIO");

                entity.HasOne(d => d.IdmonedaNavigation)
                    .WithMany(p => p.Tcambios)
                    .HasForeignKey(d => d.Idmoneda)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TCAMBIO_MONEDAS");
            });

            modelBuilder.Entity<TempAnticiposPrv>(entity =>
            {
                entity.HasKey(e => new { e.SpId, e.IdProceso, e.Cuenta, e.Auxiliar })
                    .HasName("PK_TEMPANTICIPOSPRV");

                entity.ToTable("TempAnticiposPrv");

                entity.Property(e => e.Cuenta)
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.Auxiliar)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.IdenTempanticiposprv)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_tempanticiposprv");

                entity.Property(e => e.ValorCruzado).HasColumnType("money");
            });

            modelBuilder.Entity<TempCajaChica>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TempCajaChica");

                entity.Property(e => e.AuxiliarAnticipo)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AuxiliarConcepto)
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.BlDetraccion).HasColumnName("bl_Detraccion");

                entity.Property(e => e.Bu)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("BU")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.CentroCosto)
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.CodigoDetraccion)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ConceptoContable)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Consecutivo).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.Cuenta)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.CuentaAnticipo)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.CuentaCxC)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.CuentaCxP)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DepositoDetraccion)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Descripcion)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DocumentoAsociado)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DocumentoEgreso)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DocumentoNota)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Empleado)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.FechaCaja)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.FechaContable)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.FechaDetraccion)
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.FechaFactura)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.FechaFacturaCxC)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.FechaFacturaCxP)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.FechaVencimiento)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.FuenteEgreso)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.FuenteNota)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Iden)
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Idprogramacion)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("IDProgramacion");

                entity.Property(e => e.ImporteDetraccion).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.Item)
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.Moneda)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.NumFactura)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.NumFacturaCxC)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.NumFacturaCxP)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.PorcentajeDetraccion).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.Proveedor)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Redondeo).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.ReferenciaCxC)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ReferenciaCxP)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ReferenciaFactura)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Rendicion)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SerieFactura)
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SerieFacturaCxC)
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SerieFacturaCxP)
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.TasaCambio).HasColumnType("numeric(18, 7)");

                entity.Property(e => e.TipoFactura)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.TipoFacturaCxC)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.TipoFacturaCxP)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.TipoOperaDetracion)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ValorConcepto).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.ValorImpuesto).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.ValorInicialEmpleado).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.VencimientoCxC)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.VencimientoCxP)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.VencimientoFactura)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");
            });

            modelBuilder.Entity<TempCausacionMora>(entity =>
            {
                entity.ToTable("TempCausacionMora");

                entity.HasIndex(e => new { e.SpId, e.ProcessId, e.Codicta, e.Idcliprv, e.Tipofact, e.Numefac, e.Vencefac, e.Refefac, e.Bu }, "IX_TempCausacionMora");

                entity.HasIndex(e => new { e.SpId, e.ProcessId }, "IX_TempCausacionMora_SpId_ProcessId");

                entity.HasIndex(e => new { e.SpId, e.ProcessId, e.Idcliprv }, "IX_TempCausacionMora_SpId_ProcessId_IDCLIPRV");

                entity.Property(e => e.BtExcluirCxC).HasColumnName("btExcluirCxC");

                entity.Property(e => e.Bu)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Codicta)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("CODICTA")
                    .IsFixedLength();

                entity.Property(e => e.Dias).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.FechaUltimaMora).HasColumnType("smalldatetime");

                entity.Property(e => e.Idcliprv)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("IDCLIPRV");

                entity.Property(e => e.IdcliprvAsumeIm)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("IDCLIPRV_ASUME_IM");

                entity.Property(e => e.IdenCuota).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.IdenDocumento).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.Numefac)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("NUMEFAC");

                entity.Property(e => e.PorcIvaFact).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.PorcIvaMora).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.PorcMora).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.Refefac)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("REFEFAC");

                entity.Property(e => e.Sactfac)
                    .HasColumnType("numeric(18, 2)")
                    .HasColumnName("SACTFAC");

                entity.Property(e => e.Tipo)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Tipofact)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("TIPOFACT")
                    .IsFixedLength();

                entity.Property(e => e.ValorIvaMora).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.ValorIvaMoraNeto).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.ValorMora).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.ValorMoraNeto).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.Vencefac)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("VENCEFAC")
                    .IsFixedLength();
            });

            modelBuilder.Entity<TempCausacionMoraDetalle>(entity =>
            {
                entity.ToTable("TempCausacionMoraDetalle");

                entity.HasIndex(e => new { e.SpId, e.ProcessId, e.Codicta, e.Idcliprv, e.Tipofact, e.Numefac, e.Vencefac, e.Refefac, e.Bu }, "IX_TempCausacionMoraDetalle");

                entity.HasIndex(e => new { e.SpId, e.ProcessId }, "IX_TempCausacionMoraDetalle_SpId_ProcessId");

                entity.HasIndex(e => new { e.SpId, e.ProcessId, e.Idcliprv }, "IX_TempCausacionMoraDetalle_SpId_ProcessId_IDCLIPRV");

                entity.Property(e => e.Bu)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Codicta)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("CODICTA")
                    .IsFixedLength();

                entity.Property(e => e.Dias).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.Documento)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.FechaPago).HasColumnType("smalldatetime");

                entity.Property(e => e.FechaUltimaMora).HasColumnType("smalldatetime");

                entity.Property(e => e.Fuente)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Idcliprv)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("IDCLIPRV");

                entity.Property(e => e.IdcliprvAsumeIm)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("IDCLIPRV_ASUME_IM");

                entity.Property(e => e.Numefac)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("NUMEFAC");

                entity.Property(e => e.PorcIvaFact).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.PorcIvaMora).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.PorcMora).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.Refefac)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("REFEFAC");

                entity.Property(e => e.Santfac)
                    .HasColumnType("numeric(18, 2)")
                    .HasColumnName("SANTFAC");

                entity.Property(e => e.Tipofact)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("TIPOFACT")
                    .IsFixedLength();

                entity.Property(e => e.ValorIvaMora).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.ValorMora).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.ValorPago).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.Vencefac)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("VENCEFAC")
                    .IsFixedLength();
            });

            modelBuilder.Entity<TempConcepto>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.Clasificacion)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Concepto)
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.IdenTempconceptos)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_tempconceptos");
            });

            modelBuilder.Entity<TempControlDocumentario>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Temp_ControlDocumentario");

                entity.Property(e => e.Bu)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("BU");

                entity.Property(e => e.Consecutivo).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.Cuenta)
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.Documento)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Fuente)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.Iden)
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.NumeroFactura)
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.Proveedor)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Referencia)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.TipoFactura)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.Valor).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.Vencimiento)
                    .HasMaxLength(10)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TempFuente>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TempFuente");

                entity.Property(e => e.Fuente)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.IdenTempfuente)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_tempfuente");
            });

            modelBuilder.Entity<TempGeneraDiferido>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TempGeneraDiferido");

                entity.Property(e => e.AuxAbiertoMto)
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.CentroCostoMto)
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.CodigoMto)
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.Cuenta)
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.Dbcrmto)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("DBCRMto");

                entity.Property(e => e.DescripcionMto)
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.Detalle)
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.Fuente)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.FuenteMto)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.IdenTempgeneradiferido)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_tempgeneradiferido");

                entity.Property(e => e.Identificacion)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.IdentificacionMto)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.ItemMto)
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.No)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.TerceroMto)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.ValorMes).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.ValorMto).HasColumnType("numeric(18, 4)");
            });

            modelBuilder.Entity<TempLibroDiario>(entity =>
            {
                entity.HasKey(e => new { e.SpId, e.Id })
                    .HasName("PK_TEMPLIBRODIARIO")
                    .IsClustered(false);

                entity.ToTable("TempLibroDiario");

                entity.HasIndex(e => new { e.FuenteTra, e.DocumentoTra, e.CuentaTra }, "IX_TEMPLIBRODIARIO_CUENTATRA_DOCUMENTOTRA_FUENTETRA");

                entity.Property(e => e.Id).ValueGeneratedOnAdd();

                entity.Property(e => e.Adicional1Tra)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Adicional2Tra)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AjusteInfDcto)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.AnoMesDcto)
                    .HasMaxLength(7)
                    .IsUnicode(false);

                entity.Property(e => e.AnomesTra)
                    .HasMaxLength(7)
                    .IsUnicode(false);

                entity.Property(e => e.AutorizacionTra)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.AuxiliarDcto)
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.AuxiliarTra)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.BaseTra).HasColumnType("money");

                entity.Property(e => e.BeneficiarioDcto)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.CencoDcto)
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.CencoTra)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CliProvDcto)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.CliPrvTra)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.CodPresuTra)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CodReservaTra)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.ConcilTra)
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Crdcto)
                    .HasColumnType("money")
                    .HasColumnName("CRDcto");

                entity.Property(e => e.CtaBancoDcto)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.CtaBasicaDcto)
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.CuentaTra)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Dbdcto)
                    .HasColumnType("money")
                    .HasColumnName("DBDcto");

                entity.Property(e => e.DescCuenta)
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.DescDcto)
                    .HasMaxLength(120)
                    .IsUnicode(false);

                entity.Property(e => e.DescFuente)
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.DescripcionTra)
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.DocumentoDcto)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.DocumentoTra)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.EntregadoDcto)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.EstadoTra)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.FechaDcto)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.FechaEntregadoDcto).HasColumnType("smalldatetime");

                entity.Property(e => e.FechaFactTra)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.FechaTra)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.FuenteDcto)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.FuenteTra)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.IdBancoTra)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Iden3ro)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.IndContabPrestamoDcto)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.IndCuentaTra)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.IpriChequeDcto)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.ItemDcto)
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.ItemTra)
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.MonedaDcto)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.MontoLetrasLocalDcto)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.MontoLetrasMonedaDcto)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.NfacturaTra)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("NFacturaTra");

                entity.Property(e => e.NitCompañia)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.NoChequeDcto)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.NoTipoDocEntregadoDcto)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.NombreCompañia)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.NregDcto).HasColumnName("NRegDcto");

                entity.Property(e => e.NrevDcto)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("NRevDcto");

                entity.Property(e => e.NumValesConcilDcto).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.NumValesDcto).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.PaagAdcto)
                    .HasColumnType("money")
                    .HasColumnName("PaagADcto");

                entity.Property(e => e.PaagMdcto)
                    .HasColumnType("money")
                    .HasColumnName("PaagMDcto");

                entity.Property(e => e.PlazaTra)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.PorcentajeTra).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.ReferenciaTra)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.SaldoActual).HasColumnType("money");

                entity.Property(e => e.SaldoAnterior).HasColumnType("money");

                entity.Property(e => e.SerieTra)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.TasaTra).HasColumnType("money");

                entity.Property(e => e.TerceroCartera)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.TerceroDcto)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.TerceroTra)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.TipoDocEntregadoDcto)
                    .HasMaxLength(4)
                    .IsUnicode(false);

                entity.Property(e => e.TipoDocFuente)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.TipoFacTra)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.UsuarioTra)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.ValorMonedaTra).HasColumnType("money");

                entity.Property(e => e.ValorTra).HasColumnType("money");

                entity.Property(e => e.VencChequeDcto)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.VencimientoTra)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.VendedorTra)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.VoucherTra)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.VrChequeLocalDcto).HasColumnType("money");

                entity.Property(e => e.VrChequeMonedaDcto).HasColumnType("money");

                entity.Property(e => e.ZonaTra)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength();
            });

            modelBuilder.Entity<TempPlantillaCompra>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Temp_PlantillaCompra");

                entity.Property(e => e.Bu)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("BU");

                entity.Property(e => e.BuConcepto)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.CentroCosto)
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.Concepto)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.CuentaPorPagar)
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.Fecha)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Iden)
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Item)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Moneda)
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.NumeroFactura)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Proveedor)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Referencia)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Spid).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.TipoFactura)
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.ValorUnitario).HasColumnType("numeric(18, 2)");
            });

            modelBuilder.Entity<Tercero>(entity =>
            {
                entity.HasKey(e => e.Idtercero)
                    .HasName("pk_terceros")
                    .IsClustered(false);

                entity.ToTable("TERCEROS");

                entity.HasIndex(e => e.Nombreter, "IX_TERCEROS_NOMBRETER");

                entity.Property(e => e.Idtercero)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("IDTERCERO");

                entity.Property(e => e.Apellido1)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Apellido2)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.ApercepSunat).HasColumnName("APercepSunat");

                entity.Property(e => e.AreteSunat).HasColumnName("AReteSunat");

                entity.Property(e => e.Barrio)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.BlBloqueo).HasColumnName("bl_Bloqueo");

                entity.Property(e => e.BlCupoCreditoPorCliente)
                    .IsRequired()
                    .HasColumnName("bl_CupoCreditoPorCliente")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.BlCupoCreditoPorMoneda).HasColumnName("bl_CupoCreditoPorMoneda");

                entity.Property(e => e.Celular)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.CentroCosto)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Ciudad)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("CIUDAD")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.CodigoOcupacion)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Codigodane)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("CODIGODANE")
                    .HasDefaultValueSql("('OTROS')")
                    .IsFixedLength();

                entity.Property(e => e.Digiverif)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("DIGIVERIF");

                entity.Property(e => e.Direccion)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("DIRECCION");

                entity.Property(e => e.Divpolitica)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("DIVPOLITICA")
                    .HasDefaultValueSql("('OTROS')")
                    .IsFixedLength();

                entity.Property(e => e.Email)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.EscenariosAplicaIcatIden)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("Escenarios_AplicaICAT_Iden");

                entity.Property(e => e.EscenariosCategoriaTributaria)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Escenarios_CategoriaTributaria");

                entity.Property(e => e.EscenariosCategoriaTributariaIvaIden)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("Escenarios_CategoriaTributariaIVA_Iden");

                entity.Property(e => e.EscenariosClaseContribuyenteIden)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("Escenarios_ClaseContribuyente_Iden");

                entity.Property(e => e.EscenariosEsAutorretenedorIden)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("Escenarios_EsAutorretenedor_Iden");

                entity.Property(e => e.EscenariosTipoContribuyenteIden)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("Escenarios_TipoContribuyente_Iden");

                entity.Property(e => e.EscenariosTipoRetencionIvaIden)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("Escenarios_TipoRetencionIVA_Iden");

                entity.Property(e => e.EstratoSocial)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.FechaFinalAcuerdo).HasColumnType("smalldatetime");

                entity.Property(e => e.FechaInicialAcuerdo).HasColumnType("smalldatetime");

                entity.Property(e => e.FechaNacimiento).HasColumnType("smalldatetime");

                entity.Property(e => e.FechaNacimientoConyugue).HasColumnType("smalldatetime");

                entity.Property(e => e.Fechagrabacion).HasColumnType("smalldatetime");

                entity.Property(e => e.Hobbies)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.IdenTerceros)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_terceros");

                entity.Property(e => e.Item)
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.Nombre1)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Nombre2)
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.NombreConyugue)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Nombreter)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("NOMBRETER");

                entity.Property(e => e.Pais)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.PrefijoNcf)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Prefijo_NCF");

                entity.Property(e => e.Profesion)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.Segmento)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("SEGMENTO")
                    .HasDefaultValueSql("('OTROS')")
                    .IsFixedLength();

                entity.Property(e => e.Sexo)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Telefono)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Telefono2)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Tipo)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('N')")
                    .IsFixedLength();

                entity.Property(e => e.TipoClienteFrecuenciaCompra)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.TipoIdentificacion)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.TipoRazonSocial)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.Tipoempresa)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("TIPOEMPRESA")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Tipoterce)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("TIPOTERCE");

                entity.Property(e => e.ValorCupoCredito).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.VersionDeLaFila)
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.CentroCostoNavigation)
                    .WithMany(p => p.Terceros)
                    .HasForeignKey(d => d.CentroCosto)
                    .HasConstraintName("FK_Terceros_MAECCO");

                entity.HasOne(d => d.DivpoliticaNavigation)
                    .WithMany(p => p.Terceros)
                    .HasForeignKey(d => d.Divpolitica)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TERCEROS_DIVPOLITICA");

                entity.HasOne(d => d.ItemNavigation)
                    .WithMany(p => p.Terceros)
                    .HasForeignKey(d => d.Item)
                    .HasConstraintName("FK_Terceros_Items");

                entity.HasOne(d => d.PaisNavigation)
                    .WithMany(p => p.Terceros)
                    .HasForeignKey(d => d.Pais)
                    .HasConstraintName("FK_TERCEROS_Paises");

                entity.HasOne(d => d.SegmentoNavigation)
                    .WithMany(p => p.Terceros)
                    .HasForeignKey(d => d.Segmento)
                    .HasConstraintName("FK_TERCEROS_SEGMENTO");

                entity.HasOne(d => d.TipoIdentificacionNavigation)
                    .WithMany(p => p.Terceros)
                    .HasForeignKey(d => d.TipoIdentificacion)
                    .HasConstraintName("FK_TERCEROS_TipoIdentificacion");

                entity.HasOne(d => d.TipoempresaNavigation)
                    .WithMany(p => p.Terceros)
                    .HasForeignKey(d => d.Tipoempresa)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TERCEROS_TiposDeEmpresa");
            });

            modelBuilder.Entity<TerceroCupoCreditoPorMonedum>(entity =>
            {
                entity.HasKey(e => e.Iden)
                    .HasName("PK_Tercero_Tercero_CupoCreditoPorMoneda");

                entity.ToTable("Tercero_CupoCreditoPorMoneda");

                entity.HasIndex(e => new { e.CodigoTercero, e.CodigoMoneda }, "UQ_Tercero_CupoCreditoPorMoneda_CodigoTercero_CodigoMoneda")
                    .IsUnique();

                entity.Property(e => e.Iden)
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.CodigoMoneda)
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.CodigoTercero)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.ValorCupoCredito).HasColumnType("numeric(18, 2)");
            });

            modelBuilder.Entity<TipoCartasBancaria>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.Codigo)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Descripcion)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.FormatoImpresion)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Iden).ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<TipoEmail>(entity =>
            {
                entity.HasKey(e => e.Iden);

                entity.ToTable("TipoEmail");

                entity.HasIndex(e => e.Codigo, "UQ_TipoEmail_Codigo")
                    .IsUnique();

                entity.HasIndex(e => new { e.Nombre, e.IdTipoEmailMaestros }, "UQ_TipoEmail_Nombre_id_TipoEmail_Maestros")
                    .IsUnique();

                entity.Property(e => e.Iden)
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Codigo)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.IdTipoEmailMaestros)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("id_TipoEmail_Maestros");

                entity.Property(e => e.Nombre)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdTipoEmailMaestrosNavigation)
                    .WithMany(p => p.TipoEmails)
                    .HasForeignKey(d => d.IdTipoEmailMaestros)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TipoEmail_TipoEmail_Maestros");
            });

            modelBuilder.Entity<TipoEmailDato>(entity =>
            {
                entity.HasKey(e => e.Iden);

                entity.ToTable("TipoEmail_Datos");

                entity.Property(e => e.Iden)
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.CodigoMaestro)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Codigo_Maestro");

                entity.Property(e => e.Email)
                    .HasMaxLength(800)
                    .IsUnicode(false);

                entity.Property(e => e.IdenTipoEmail)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("Iden_TipoEmail");

                entity.HasOne(d => d.IdenTipoEmailNavigation)
                    .WithMany(p => p.TipoEmailDatos)
                    .HasForeignKey(d => d.IdenTipoEmail)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TipoEmail_Datos_TipoEmail");
            });

            modelBuilder.Entity<TipoEmailMaestro>(entity =>
            {
                entity.HasKey(e => e.Iden);

                entity.ToTable("TipoEmail_Maestros");

                entity.HasIndex(e => e.Caption, "UQ_TipoEmail_Maestros_Caption")
                    .IsUnique();

                entity.HasIndex(e => e.Tabla, "UQ_TipoEmail_Maestros_Tabla")
                    .IsUnique();

                entity.Property(e => e.Iden)
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Caption)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Tabla)
                    .HasMaxLength(25)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TipoEtiquetum>(entity =>
            {
                entity.HasIndex(e => e.Codigo, "UQ_TipoEtiqueta_Codigo")
                    .IsUnique();

                entity.Property(e => e.Codigo)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Nombre)
                    .HasMaxLength(250)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TipoFacturaRestriccione>(entity =>
            {
                entity.HasKey(e => e.Iden);

                entity.ToTable("TipoFactura_Restricciones");

                entity.Property(e => e.Iden)
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.CodigoMaestro)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CodigoTipoFactura)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Maestro)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Origen)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.HasOne(d => d.CodigoTipoFacturaNavigation)
                    .WithMany(p => p.TipoFacturaRestricciones)
                    .HasForeignKey(d => d.CodigoTipoFactura)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TipoFactura_Restricciones_TIPOFACT");
            });

            modelBuilder.Entity<TipoIdentificacion>(entity =>
            {
                entity.HasKey(e => e.Codigo)
                    .IsClustered(false);

                entity.ToTable("TipoIdentificacion");

                entity.Property(e => e.Codigo)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.CodigoAlterno)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.CodigoCompra)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.CodigoVenta)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Descripcion)
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.IdDian)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.IdenTipoidentificacion)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_tipoidentificacion");

                entity.Property(e => e.LongitudMin).HasDefaultValueSql("((1))");

                entity.Property(e => e.VersionDeLaFila)
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<TipoImpuesto>(entity =>
            {
                entity.HasKey(e => e.Codigo);

                entity.Property(e => e.Codigo)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Descripcion)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.IdenTipoimpuestos)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_tipoimpuestos");

                entity.Property(e => e.Nombre)
                    .HasMaxLength(250)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TipoMaestro>(entity =>
            {
                entity.HasKey(e => new { e.Nombre, e.Tipo });

                entity.ToTable("TipoMaestro");

                entity.Property(e => e.Nombre)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Detalles)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Iden)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("IDEN");

                entity.Property(e => e.Reporte)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SeccionIni)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Sp)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.VentanaTitulo)
                    .HasMaxLength(150)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TipoMaestroCampo>(entity =>
            {
                entity.HasKey(e => new { e.IdenMaestro, e.ColNombreFisico })
                    .IsClustered(false);

                entity.ToTable("TipoMaestro_Campos");

                entity.HasIndex(e => new { e.IdenMaestro, e.ColNombreLogico }, "IX_TIPOMAESTRO_CAMPOS_COL_NOMBRELOGICO_IDEN_MAESTRO")
                    .IsUnique();

                entity.HasIndex(e => e.Iden, "IX_TIPOMAESTRO_CAMPOS_IDEN")
                    .IsUnique()
                    .IsClustered();

                entity.Property(e => e.IdenMaestro).HasColumnName("IDEN_Maestro");

                entity.Property(e => e.ColNombreFisico)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("COL_NombreFisico");

                entity.Property(e => e.ArticuloForaneo)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("Articulo_Foraneo");

                entity.Property(e => e.ColCaption)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("COL_Caption");

                entity.Property(e => e.ColNombreLogico)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("COL_NombreLogico");

                entity.Property(e => e.DefaultFecha).HasColumnType("smalldatetime");

                entity.Property(e => e.DefaultNumerico).HasColumnType("numeric(18, 6)");

                entity.Property(e => e.DefaultVarchar)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Descripcion)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Iden)
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("IDEN");

                entity.Property(e => e.ListaPosibilidades)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.OpcionIni1)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("OpcionINI_1")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.OpcionIni2)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("OpcionINI_2")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.OpcionalAyuda)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.SeccionAyuda)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Tamano)
                    .HasColumnType("numeric(18, 0)")
                    .HasDefaultValueSql("((50))");

                entity.Property(e => e.TipoDato)
                    .HasMaxLength(25)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TipoMaestroEstructuraControl>(entity =>
            {
                entity.HasKey(e => new { e.IdenMaestro, e.ColNombreFisico, e.NombreControl });

                entity.ToTable("TipoMaestro_EstructuraControl");

                entity.Property(e => e.IdenMaestro).HasColumnName("IDEN_Maestro");

                entity.Property(e => e.ColNombreFisico)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("COL_NombreFisico");

                entity.Property(e => e.NombreControl)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.FormatoFecha)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.IdenTipomaestroEstructuracontrol)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_tipomaestro_estructuracontrol");

                entity.Property(e => e.TipoControl)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Titulo)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.ToolTipText)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Xdes).HasColumnName("XDes");

                entity.Property(e => e.Xtitulo).HasColumnName("XTitulo");

                entity.Property(e => e.Ydes).HasColumnName("YDes");

                entity.Property(e => e.Ytitulo).HasColumnName("YTitulo");
            });

            modelBuilder.Entity<TipoNotaDbcr>(entity =>
            {
                entity.HasKey(e => e.Iden);

                entity.ToTable("TipoNotaDBCR");

                entity.HasIndex(e => new { e.Codigo, e.TipoNota }, "IX_TipoNotaDBCR")
                    .IsUnique();

                entity.Property(e => e.Iden)
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Codigo)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Descripcion)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.TipoNota).HasColumnType("numeric(18, 0)");
            });

            modelBuilder.Entity<TipoOperacion>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TipoOperacion");

                entity.Property(e => e.Codigo)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Descripcion)
                    .HasMaxLength(400)
                    .IsUnicode(false);

                entity.Property(e => e.IdenTipooperacion)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_tipooperacion");
            });

            modelBuilder.Entity<Tipocliente>(entity =>
            {
                entity.HasKey(e => e.Codigo)
                    .IsClustered(false);

                entity.ToTable("TIPOCLIENTES");

                entity.Property(e => e.Codigo)
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.ComplementoExcluido)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')")
                    .IsFixedLength();

                entity.Property(e => e.ComplementoExcluidoDevolucion)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.ComplementoExento)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')")
                    .IsFixedLength();

                entity.Property(e => e.ComplementoExentoDevolucion)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.ComplementoGravado)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')")
                    .IsFixedLength();

                entity.Property(e => e.ComplementoGravadoDevolucion)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.IdenTipoclientes)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_tipoclientes");

                entity.Property(e => e.Nombre)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.VersionDeLaFila)
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<Tipodcto>(entity =>
            {
                entity.HasKey(e => e.Idtipdoc)
                    .HasName("pk_tipodctos")
                    .IsClustered(false);

                entity.ToTable("TIPODCTOS");

                entity.Property(e => e.Idtipdoc)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("IDTIPDOC")
                    .IsFixedLength();

                entity.Property(e => e.Destipdoc)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("DESTIPDOC");

                entity.Property(e => e.FechaDefecto)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('C')")
                    .IsFixedLength();

                entity.Property(e => e.IdenTipodctos)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_tipodctos");

                entity.Property(e => e.ModificaFecha).HasDefaultValueSql("((1))");

                entity.Property(e => e.VersionDeLaFila)
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<Tipofact>(entity =>
            {
                entity.HasKey(e => e.Tipofact1)
                    .HasName("pk_tipofact")
                    .IsClustered(false);

                entity.ToTable("TIPOFACT");

                entity.Property(e => e.Tipofact1)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("TIPOFACT")
                    .IsFixedLength();

                entity.Property(e => e.AlfaCom).HasDefaultValueSql("((1))");

                entity.Property(e => e.AlfaVen).HasDefaultValueSql("((1))");

                entity.Property(e => e.BlSerieAlfCompra).HasColumnName("bl_SerieAlfCompra");

                entity.Property(e => e.BlSerieAlfVenta).HasColumnName("bl_SerieAlfVenta");

                entity.Property(e => e.CodigoAlterno)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ContenidoCompra)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ContenidoVenta)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Descrip)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIP")
                    .IsFixedLength();

                entity.Property(e => e.DescripcionAlterna)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.IdenTipofact)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_tipofact");

                entity.Property(e => e.IniciaSerieCompra)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.IniciaSerieVenta)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.NumefacMax).HasDefaultValueSql("((15))");

                entity.Property(e => e.NumefacMaxVen).HasDefaultValueSql("((15))");

                entity.Property(e => e.NumefacMinCom).HasDefaultValueSql("((1))");

                entity.Property(e => e.NumefacMinVen).HasDefaultValueSql("((1))");

                entity.Property(e => e.SeparadorCom)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')")
                    .IsFixedLength();

                entity.Property(e => e.SeparadorVen)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')")
                    .IsFixedLength();

                entity.Property(e => e.SerieDefectoCompra)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SerieDefectoVenta)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.VersionDeLaFila)
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<TiposArchivosAdjunto>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.Descripcion)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Iden)
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Tipo)
                    .HasMaxLength(25)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TiposDeEmpresa>(entity =>
            {
                entity.HasKey(e => e.TipoEmpresa)
                    .IsClustered(false);

                entity.ToTable("TiposDeEmpresa");

                entity.Property(e => e.TipoEmpresa)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Descripcion)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.IdenTiposdeempresa)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_tiposdeempresa");

                entity.Property(e => e.Monto).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.Nombre)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.VersionDeLaFila)
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<Transac>(entity =>
            {
                entity.HasKey(e => e.Consecutra)
                    .IsClustered(false);

                entity.ToTable("TRANSAC");

                entity.HasIndex(e => e.Adicional1, "IX_TRANSAC_ADICIONAL_1");

                entity.HasIndex(e => new { e.Statustra, e.Adicional1, e.Voucher }, "IX_TRANSAC_ADICIONAL_1_STATUSTRA_VOUCHER");

                entity.HasIndex(e => new { e.Idfuente, e.Numdoctra, e.Adicional2, e.Statustra, e.Voucher }, "IX_TRANSAC_ADICIONAL_2_IDFUENTE_NUMDOCTRA_STATUSTRA_VOUCHER");

                entity.HasIndex(e => new { e.Anotra, e.Codicta }, "IX_TRANSAC_ANOTRA_CODICTA");

                entity.HasIndex(e => new { e.Anotra, e.Fechatra, e.Idfuente, e.Statustra, e.Indcpitra }, "IX_TRANSAC_ANOTRA_FECHATRA_IDFUENTE_INDCPITRA_STATUSTRA");

                entity.HasIndex(e => new { e.Auxiaux, e.Statustra }, "IX_TRANSAC_AUXIAUX_STATUSTRA");

                entity.HasIndex(e => new { e.Bu, e.Fechatra, e.Statustra }, "IX_TRANSAC_BU_FECHATRA_STATUSTRA");

                entity.HasIndex(e => new { e.Codicta, e.Cliprv, e.Tipofac, e.Numefac, e.Vencefac, e.Refefac, e.Bu }, "IX_TRANSAC_CLIPRV_CODICTA_NUMEFAC_REFEFAC_TIPOFAC_VENCEFAC");

                entity.HasIndex(e => new { e.Codicta, e.Fechatra }, "IX_TRANSAC_CODICTA_FECHATRA");

                entity.HasIndex(e => new { e.Codicta, e.Refefac }, "IX_TRANSAC_CODICTA_REFEFAC");

                entity.HasIndex(e => new { e.Voucher, e.Codicta }, "IX_TRANSAC_CODICTA_VOUCHER");

                entity.HasIndex(e => e.Conciltra, "IX_TRANSAC_CONCILTRA");

                entity.HasIndex(e => e.Consecurev, "IX_TRANSAC_CONSECUREV");

                entity.HasIndex(e => new { e.Consecurev, e.Idfuente, e.Numdoctra }, "IX_TRANSAC_CONSECUREV_IDFUENTE_NUMDOCTRA");

                entity.HasIndex(e => e.Consecutra, "IX_TRANSAC_CONSECUTRA")
                    .IsClustered();

                entity.HasIndex(e => e.ConsecutraEsquema, "IX_TRANSAC_CONSECUTRAESQUEMA");

                entity.HasIndex(e => new { e.ConsecutraEsquema, e.Idfuente, e.Numdoctra, e.Statustra }, "IX_TRANSAC_CONSECUTRAESQUEMA_IDFUENTE_NUMDOCTRA_STATUSTRA");

                entity.HasIndex(e => new { e.Idfuente, e.Numdoctra, e.Statustra, e.ConsecutraEsquema }, "IX_TRANSAC_CONSECUTRAESQUEMA_IDFUENTE_NUMDOCTRA_STATUSTRA_2");

                entity.HasIndex(e => e.FactMovimientoOriginal, "IX_TRANSAC_FACT_MOVIMIENTO_ORIGINAL");

                entity.HasIndex(e => e.Fechatra, "IX_TRANSAC_FECHATRA");

                entity.HasIndex(e => new { e.Fechatra, e.Codicta }, "IX_TRANSAC_FECHATRA_CODICTA");

                entity.HasIndex(e => new { e.Fechatra, e.Idfuente, e.Codicta }, "IX_TRANSAC_FECHATRA_IDFUENTE_CODICTA");

                entity.HasIndex(e => e.Idcenco, "IX_TRANSAC_IDCENCO");

                entity.HasIndex(e => e.IdenEsquemaTransaccion, "IX_TRANSAC_IDEN_ESQUEMATRANSACCION");

                entity.HasIndex(e => new { e.Idfuente, e.Numdoctra, e.Statustra }, "IX_TRANSAC_IDFUENTE_NUMDOCTRA_STATUSTRA");

                entity.HasIndex(e => e.Iditem, "IX_TRANSAC_IDITEM");

                entity.HasIndex(e => e.Ncf, "IX_TRANSAC_NCF");

                entity.HasIndex(e => e.Nittra, "IX_TRANSAC_NITTRA");

                entity.HasIndex(e => new { e.Numefac, e.Tipofac, e.Vencefac, e.Cliprv, e.Refefac, e.Bu }, "IX_TRANSAC_NUMEFAC_TIPOFAC_VENCEFAC_CLIPRV_REFEFAC_BU");

                entity.HasIndex(e => e.Refefac, "IX_TRANSAC_REFEFAC");

                entity.HasIndex(e => e.Statustra, "IX_TRANSAC_STATUSTRA");

                entity.HasIndex(e => new { e.Statustra, e.Idfuente, e.Numdoctra, e.Bu }, "IX_TRANSAC_STATUSTRA_IDFUENTE_NUMDOCTRA_BU");

                entity.Property(e => e.Consecutra).HasColumnName("CONSECUTRA");

                entity.Property(e => e.Adicional1)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Adicional_1");

                entity.Property(e => e.Adicional2)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Adicional_2");

                entity.Property(e => e.Anotra)
                    .HasMaxLength(7)
                    .IsUnicode(false)
                    .HasColumnName("ANOTRA");

                entity.Property(e => e.Autorizacion)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("AUTORIZACION")
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.Auxiaux)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("AUXIAUX")
                    .IsFixedLength();

                entity.Property(e => e.BaseComision).HasColumnType("money");

                entity.Property(e => e.Baseretetra)
                    .HasColumnType("money")
                    .HasColumnName("BASERETETRA")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Bu)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("BU")
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.Cliprv)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("CLIPRV");

                entity.Property(e => e.Codicta)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("CODICTA")
                    .IsFixedLength();

                entity.Property(e => e.CodigoPropiedad1)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.CodigoPropiedad2)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.CodigoPropiedad3)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.CodigoPropiedad4)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.CodigoPropiedad5)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Codpresu)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("CODPRESU")
                    .IsFixedLength();

                entity.Property(e => e.Conciltra)
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .HasColumnName("CONCILTRA")
                    .IsFixedLength();

                entity.Property(e => e.Consecurev)
                    .HasColumnName("CONSECUREV")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Descritra)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("DESCRITRA");

                entity.Property(e => e.FactMovimientoOriginal)
                    .HasColumnName("fact_movimiento_original")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.FechaCaducidad)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Fechafact)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("FECHAFACT")
                    .IsFixedLength();

                entity.Property(e => e.Fechatra)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("FECHATRA")
                    .IsFixedLength();

                entity.Property(e => e.Fgratra)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("FGRATRA")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.GenEsquemaTran)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('N')")
                    .IsFixedLength();

                entity.Property(e => e.IdAplicacionesOrigen).HasColumnName("Id_AplicacionesOrigen");

                entity.Property(e => e.IdAplicacionesZeus).HasColumnName("Id_AplicacionesZeus");

                entity.Property(e => e.IdMovimiento)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("Id_Movimiento")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.IdOrigenMovimiento).HasColumnName("Id_OrigenMovimiento");

                entity.Property(e => e.Idbanco)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("IDBANCO")
                    .IsFixedLength();

                entity.Property(e => e.Idcenco)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("IDCENCO")
                    .IsFixedLength();

                entity.Property(e => e.IdenEsquemaTransaccion)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("Iden_EsquemaTransaccion");

                entity.Property(e => e.Idfuente)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("IDFUENTE")
                    .IsFixedLength();

                entity.Property(e => e.Iditem)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("IDITEM")
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.Idplaza)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("IDPLAZA")
                    .IsFixedLength();

                entity.Property(e => e.Idusuario)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("IDUSUARIO");

                entity.Property(e => e.Idvende)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("IDVENDE")
                    .IsFixedLength();

                entity.Property(e => e.Idzona)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("IDZONA")
                    .IsFixedLength();

                entity.Property(e => e.Indcpitra)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("INDCPITRA")
                    .IsFixedLength();

                entity.Property(e => e.LineaImpuesto)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Ncf)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("NCF")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.NcfModificado)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("NCF_Modificado")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Nittra)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("NITTRA");

                entity.Property(e => e.Nreserva)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("NRESERVA")
                    .IsFixedLength();

                entity.Property(e => e.Numdoctra)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("NUMDOCTRA")
                    .IsFixedLength();

                entity.Property(e => e.Numefac)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("NUMEFAC");

                entity.Property(e => e.Porretetra)
                    .HasColumnType("numeric(18, 4)")
                    .HasColumnName("PORRETETRA")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Refefac)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("REFEFAC");

                entity.Property(e => e.Serie)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("SERIE")
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.Statustra)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("STATUSTRA")
                    .IsFixedLength();

                entity.Property(e => e.SubLineaImpuesto)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.TasaCambio).HasColumnType("money");

                entity.Property(e => e.Tasacambio1)
                    .HasColumnType("money")
                    .HasColumnName("TASACAMBIO1");

                entity.Property(e => e.Tasacambio2)
                    .HasColumnType("money")
                    .HasColumnName("TASACAMBIO2");

                entity.Property(e => e.Tipofac)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("TIPOFAC")
                    .IsFixedLength();

                entity.Property(e => e.Valormoneda)
                    .HasColumnType("money")
                    .HasColumnName("VALORMONEDA")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Valormoneda1)
                    .HasColumnType("money")
                    .HasColumnName("VALORMONEDA1")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Valormoneda2)
                    .HasColumnType("money")
                    .HasColumnName("VALORMONEDA2")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Valortra)
                    .HasColumnType("money")
                    .HasColumnName("VALORTRA");

                entity.Property(e => e.Vencefac)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("VENCEFAC")
                    .IsFixedLength();

                entity.Property(e => e.VersionDeLaFila)
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.Voucher)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.HasOne(d => d.BuNavigation)
                    .WithMany(p => p.Transacs)
                    .HasForeignKey(d => d.Bu)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TRANSAC_BU");

                entity.HasOne(d => d.CodictaNavigation)
                    .WithMany(p => p.Transacs)
                    .HasForeignKey(d => d.Codicta)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TRANSAC_MAECONT");

                entity.HasOne(d => d.IdenEsquemaTransaccionNavigation)
                    .WithMany(p => p.Transacs)
                    .HasForeignKey(d => d.IdenEsquemaTransaccion)
                    .HasConstraintName("FK_Transac_Esquema_Condicion_Transacciones_Log");

                entity.HasOne(d => d.IdfuenteNavigation)
                    .WithMany(p => p.Transacs)
                    .HasForeignKey(d => d.Idfuente)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TRANSAC_FUENTES");
            });

            modelBuilder.Entity<TransacAdicionale>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Transac_Adicionales");

                entity.HasIndex(e => e.CompReteSecuencial, "IX_Transac_Adicionales_CompRete_Secuencial");

                entity.HasIndex(e => e.Consecutra, "IX_Transac_Adicionales_Consecutra")
                    .IsUnique();

                entity.HasIndex(e => e.ReferenciaPorTransaccion, "IX_Transac_Adicionales_ReferenciaPorTransaccion");

                entity.Property(e => e.CompReteAutorizacion)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("CompRete_Autorizacion");

                entity.Property(e => e.CompReteFechaEmision)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CompRete_FechaEmision");

                entity.Property(e => e.CompReteSecuencial)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("CompRete_Secuencial");

                entity.Property(e => e.CompReteSerie)
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .HasColumnName("CompRete_Serie");

                entity.Property(e => e.Consecutra).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.IdMonedaRelacion)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.IdenTransacAdicionales)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_transac_adicionales");

                entity.Property(e => e.ReferenciaPorTransaccion)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioRecepcion)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.ValorMonedaRelacion).HasColumnType("money");

                entity.Property(e => e.VersionDeLaFila)
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.XmlAdicionales)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");
            });

            modelBuilder.Entity<TransacBr>(entity =>
            {
                entity.HasKey(e => e.Consecutra);

                entity.ToTable("Transac_BR");

                entity.Property(e => e.Consecutra).ValueGeneratedNever();

                entity.Property(e => e.Bu)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Documento)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Fuente)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.IdenTransacBr)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_transac_br");
            });

            modelBuilder.Entity<TransacConciliacion>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Transac_Conciliacion");

                entity.Property(e => e.Adicional1)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Adicional_1");

                entity.Property(e => e.Adicional2)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Adicional_2");

                entity.Property(e => e.Anotra)
                    .HasMaxLength(7)
                    .IsUnicode(false)
                    .HasColumnName("ANOTRA");

                entity.Property(e => e.Autorizacion)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("AUTORIZACION");

                entity.Property(e => e.Auxiaux)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("AUXIAUX")
                    .IsFixedLength();

                entity.Property(e => e.BaseComision)
                    .HasColumnType("money")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Baseretetra)
                    .HasColumnType("money")
                    .HasColumnName("BASERETETRA");

                entity.Property(e => e.Bu)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("BU");

                entity.Property(e => e.Cliprv)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("CLIPRV");

                entity.Property(e => e.Codicta)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("CODICTA")
                    .IsFixedLength();

                entity.Property(e => e.Codpresu)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("CODPRESU")
                    .IsFixedLength();

                entity.Property(e => e.Conciltra)
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .HasColumnName("CONCILTRA")
                    .IsFixedLength();

                entity.Property(e => e.Consecurev)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("CONSECUREV");

                entity.Property(e => e.Consecutra)
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("CONSECUTRA");

                entity.Property(e => e.ConsecutraConciliado).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.Descritra)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("DESCRITRA");

                entity.Property(e => e.FechaCaducidad)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Fechafact)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("FECHAFACT")
                    .IsFixedLength();

                entity.Property(e => e.Fechatra)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("FECHATRA")
                    .IsFixedLength();

                entity.Property(e => e.Fgratra)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("FGRATRA");

                entity.Property(e => e.Idbanco)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("IDBANCO")
                    .IsFixedLength();

                entity.Property(e => e.Idcenco)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("IDCENCO")
                    .IsFixedLength();

                entity.Property(e => e.Idfuente)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("IDFUENTE")
                    .IsFixedLength();

                entity.Property(e => e.Iditem)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("IDITEM");

                entity.Property(e => e.Idplaza)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("IDPLAZA")
                    .IsFixedLength();

                entity.Property(e => e.Idusuario)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("IDUSUARIO");

                entity.Property(e => e.Idvende)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("IDVENDE")
                    .IsFixedLength();

                entity.Property(e => e.Idzona)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("IDZONA")
                    .IsFixedLength();

                entity.Property(e => e.ImpExtractosTipoMvtoConciliacionIden)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("ImpExtractosTipoMvtoConciliacion_Iden");

                entity.Property(e => e.Indcpitra)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("INDCPITRA")
                    .IsFixedLength();

                entity.Property(e => e.Ncf)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("NCF");

                entity.Property(e => e.NcfModificado)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("NCF_Modificado");

                entity.Property(e => e.Nittra)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("NITTRA");

                entity.Property(e => e.Nreserva)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("NRESERVA")
                    .IsFixedLength();

                entity.Property(e => e.Numdoctra)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("NUMDOCTRA")
                    .IsFixedLength();

                entity.Property(e => e.Numefac)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("NUMEFAC");

                entity.Property(e => e.NumeroFilaArchivo).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.NumeroParIguales).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.Porretetra)
                    .HasColumnType("numeric(18, 4)")
                    .HasColumnName("PORRETETRA");

                entity.Property(e => e.Refefac)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("REFEFAC");

                entity.Property(e => e.Serie)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("SERIE");

                entity.Property(e => e.Statustra)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("STATUSTRA")
                    .IsFixedLength();

                entity.Property(e => e.TasaCambio).HasColumnType("money");

                entity.Property(e => e.Tipofac)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("TIPOFAC")
                    .IsFixedLength();

                entity.Property(e => e.TransacConciliacionCabeceraIden)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("Transac_Conciliacion_Cabecera_Iden");

                entity.Property(e => e.Valormoneda)
                    .HasColumnType("money")
                    .HasColumnName("VALORMONEDA");

                entity.Property(e => e.Valortra)
                    .HasColumnType("money")
                    .HasColumnName("VALORTRA");

                entity.Property(e => e.Vencefac)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("VENCEFAC")
                    .IsFixedLength();

                entity.Property(e => e.Voucher)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.ZcodigoMovimiento)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ZCodigoMovimiento");
            });

            modelBuilder.Entity<TransacConciliacionCabecera>(entity =>
            {
                entity.HasKey(e => e.Consecutivo);

                entity.ToTable("Transac_Conciliacion_Cabecera");

                entity.Property(e => e.Consecutivo).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.Anotra)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Archivo).IsUnicode(false);

                entity.Property(e => e.CtaBanco)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Estado)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.FechaFinal)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.FechaGrabacion).HasColumnType("datetime");

                entity.Property(e => e.FechaInicial)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Iden)
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.ImpExtractosDefinicionIden)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("ImpExtractosDefinicion_Iden");

                entity.Property(e => e.NomArchivo)
                    .HasMaxLength(8000)
                    .IsUnicode(false);

                entity.Property(e => e.NotaAjusteCenco)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("NotaAjuste_Cenco");

                entity.Property(e => e.NotaAjusteCta)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("NotaAjuste_Cta");

                entity.Property(e => e.NotaAjusteDcto)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("NotaAjuste_Dcto");

                entity.Property(e => e.NotaAjusteEntidad)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("NotaAjuste_Entidad");

                entity.Property(e => e.NotaAjusteFecha)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("NotaAjuste_Fecha");

                entity.Property(e => e.NotaAjusteFte)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("NotaAjuste_Fte");

                entity.Property(e => e.NotaAjusteItem)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("NotaAjuste_Item");

                entity.Property(e => e.NotaAjusteNumefac)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("NotaAjuste_Numefac");

                entity.Property(e => e.NotaAjustePlaza)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("NotaAjuste_Plaza");

                entity.Property(e => e.NotaAjustePropiedad1)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("NotaAjuste_Propiedad1");

                entity.Property(e => e.NotaAjustePropiedad2)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("NotaAjuste_Propiedad2");

                entity.Property(e => e.NotaAjustePropiedad3)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("NotaAjuste_Propiedad3");

                entity.Property(e => e.NotaAjustePropiedad4)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("NotaAjuste_Propiedad4");

                entity.Property(e => e.NotaAjustePropiedad5)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("NotaAjuste_Propiedad5");

                entity.Property(e => e.NotaAjusteRefefac)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("NotaAjuste_Refefac");

                entity.Property(e => e.NotaAjusteTipofac)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("NotaAjuste_Tipofac");

                entity.Property(e => e.NotaAjusteVencefac)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("NotaAjuste_Vencefac");

                entity.Property(e => e.Usuario)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.HasOne(d => d.ImpExtractosDefinicionIdenNavigation)
                    .WithMany(p => p.TransacConciliacionCabeceras)
                    .HasForeignKey(d => d.ImpExtractosDefinicionIden)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Transac_Conciliacion_Cabecera_ImpExtractosDefinicion");
            });

            modelBuilder.Entity<TransacConciliacionCabeceraRev>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Transac_Conciliacion_Cabecera_Rev");

                entity.Property(e => e.Cenco)
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.Consecutivo).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.Cuenta)
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.Documento)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Entidad)
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Fecha)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Fuente)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.IdenTransacConciliacionCabeceraRev)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_transac_conciliacion_cabecera_rev");

                entity.Property(e => e.Item)
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.Numefac)
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.Plaza)
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Propiedad1)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Propiedad2)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Propiedad3)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Propiedad4)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Propiedad5)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Refefac)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Tipofac)
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Vencefac)
                    .HasMaxLength(10)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TransacDatosFacturaFinanciero>(entity =>
            {
                entity.HasKey(e => e.Consecutra);

                entity.ToTable("transac_datos_factura_financieros");

                entity.HasIndex(e => new { e.Bu, e.Codicta, e.Idcliprv, e.Tipofac, e.Numefac, e.Vencefac, e.Refefac }, "IX_transac_datos_factura_financieros");

                entity.Property(e => e.Consecutra)
                    .ValueGeneratedNever()
                    .HasColumnName("consecutra");

                entity.Property(e => e.Bu)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("BU");

                entity.Property(e => e.Codicta)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("CODICTA");

                entity.Property(e => e.CostosAsociados).HasColumnType("money");

                entity.Property(e => e.Cuota).HasColumnName("cuota");

                entity.Property(e => e.FactIdencondicionesdecredito)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("fact_idencondicionesdecredito");

                entity.Property(e => e.FactPorcentajeInteresComparativo).HasColumnName("fact_porcentaje_interes_comparativo");

                entity.Property(e => e.FactPorcentajeInteresPactado).HasColumnName("fact_porcentaje_interes_pactado");

                entity.Property(e => e.Idcliprv)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("IDCLIPRV");

                entity.Property(e => e.Iden)
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("iden");

                entity.Property(e => e.Numefac)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("NUMEFAC");

                entity.Property(e => e.Plazo).HasColumnName("plazo");

                entity.Property(e => e.Refefac)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("REFEFAC");

                entity.Property(e => e.Tipofac)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("TIPOFAC")
                    .IsFixedLength();

                entity.Property(e => e.ValorCuota).HasColumnType("money");

                entity.Property(e => e.ValorPrestamo).HasColumnType("money");

                entity.Property(e => e.Vencefac)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("VENCEFAC")
                    .IsFixedLength();
            });

            modelBuilder.Entity<TransacGeneraLog>(entity =>
            {
                entity.HasKey(e => e.Consecutra);

                entity.ToTable("Transac_Genera_Log");

                entity.Property(e => e.Consecutra).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.Error)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.IdenTransacGeneraLog)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_transac_genera_log");

                entity.Property(e => e.VecesReportado).HasColumnType("numeric(18, 0)");
            });

            modelBuilder.Entity<TransacInsertar>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Transac_Insertar");

                entity.HasIndex(e => e.SpId, "IX_TRANSAC_INSERTAR_SPID")
                    .IsClustered();

                entity.Property(e => e.Adicional1)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Adicional_1");

                entity.Property(e => e.Adicional1TerceroDetallado)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("Adicional1_TerceroDetallado")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Adicional2)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Adicional_2");

                entity.Property(e => e.Adicional2TerceroDetallado)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("Adicional2_TerceroDetallado")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Adicional3TerceroDetallado)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("Adicional3_TerceroDetallado")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Adicional4TerceroDetallado)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("Adicional4_TerceroDetallado")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Anotra)
                    .HasMaxLength(7)
                    .IsUnicode(false)
                    .HasColumnName("ANOTRA")
                    .IsFixedLength();

                entity.Property(e => e.Aplicacion)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Autorizacion)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Auxiaux)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("AUXIAUX");

                entity.Property(e => e.BaseComision).HasColumnType("money");

                entity.Property(e => e.Baseretetra)
                    .HasColumnType("money")
                    .HasColumnName("BASERETETRA");

                entity.Property(e => e.Bu)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("BU");

                entity.Property(e => e.Cliprv)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("CLIPRV");

                entity.Property(e => e.Codicta)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("CODICTA");

                entity.Property(e => e.CodigoPropiedad1)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.CodigoPropiedad2)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.CodigoPropiedad3)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.CodigoPropiedad4)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.CodigoPropiedad5)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Codpresu)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("CODPRESU")
                    .IsFixedLength();

                entity.Property(e => e.CompReteAutorizacion)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("CompRete_Autorizacion");

                entity.Property(e => e.CompReteFechaEmision)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CompRete_FechaEmision");

                entity.Property(e => e.CompReteSecuencial)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("CompRete_Secuencial");

                entity.Property(e => e.CompReteSerie)
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .HasColumnName("CompRete_Serie");

                entity.Property(e => e.Conciltra)
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .HasColumnName("CONCILTRA")
                    .IsFixedLength();

                entity.Property(e => e.Consecurev).HasColumnName("CONSECUREV");

                entity.Property(e => e.ConsecutivoCredito).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.Consecutra).HasColumnName("CONSECUTRA");

                entity.Property(e => e.CostosAsociados).HasColumnType("money");

                entity.Property(e => e.Cuota).HasColumnName("cuota");

                entity.Property(e => e.Descritra)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("DESCRITRA");

                entity.Property(e => e.FactIdencondicionesdecredito)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("fact_idencondicionesdecredito");

                entity.Property(e => e.FactMovimientoOriginal)
                    .HasColumnName("fact_movimiento_original")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.FactPorcentajeInteresComparativo).HasColumnName("fact_porcentaje_interes_comparativo");

                entity.Property(e => e.FactPorcentajeInteresPactado).HasColumnName("fact_porcentaje_interes_pactado");

                entity.Property(e => e.FechaCaducidad)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Fechafact)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Fechatra)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("FECHATRA")
                    .IsFixedLength();

                entity.Property(e => e.Fgratra)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("FGRATRA")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.GenEsquemaTran)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('N')")
                    .IsFixedLength();

                entity.Property(e => e.IdAgrupado).HasDefaultValueSql("((0))");

                entity.Property(e => e.IdAplicacionesOrigen).HasColumnName("Id_AplicacionesOrigen");

                entity.Property(e => e.IdAplicacionesZeus).HasColumnName("Id_AplicacionesZeus");

                entity.Property(e => e.IdMonedaRelacion)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.IdMovimiento)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("Id_Movimiento")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.IdOrigenMovimiento).HasColumnName("Id_OrigenMovimiento");

                entity.Property(e => e.Idbanco)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("IDBANCO")
                    .IsFixedLength();

                entity.Property(e => e.Idcenco)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("IDCENCO");

                entity.Property(e => e.Iden)
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.IdenEsquemaTransaccion)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("Iden_EsquemaTransaccion");

                entity.Property(e => e.IdenSecciones).HasColumnName("Iden_Secciones");

                entity.Property(e => e.Idfuente)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("IDFUENTE")
                    .IsFixedLength();

                entity.Property(e => e.Iditem)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("IDITEM");

                entity.Property(e => e.Idplaza)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("IDPLAZA")
                    .IsFixedLength();

                entity.Property(e => e.Idunidad1)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("IDUNIDAD1")
                    .IsFixedLength();

                entity.Property(e => e.Idunidad2)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("IDUNIDAD2")
                    .IsFixedLength();

                entity.Property(e => e.Idunidad3)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("IDUNIDAD3")
                    .IsFixedLength();

                entity.Property(e => e.Idusuario)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("IDUSUARIO");

                entity.Property(e => e.Idvende)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("IDVENDE")
                    .IsFixedLength();

                entity.Property(e => e.Idzona)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("IDZONA")
                    .IsFixedLength();

                entity.Property(e => e.Indcpitra)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("INDCPITRA")
                    .IsFixedLength();

                entity.Property(e => e.LineaImpuesto)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Ncf)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("NCF");

                entity.Property(e => e.NcfModificado)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("NCF_Modificado");

                entity.Property(e => e.Nittra)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("NITTRA");

                entity.Property(e => e.Nittrag)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("NITTRAG")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Nreserva)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("NRESERVA")
                    .IsFixedLength();

                entity.Property(e => e.Numdoctra)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("NUMDOCTRA")
                    .IsFixedLength();

                entity.Property(e => e.Numefac)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("NUMEFAC");

                entity.Property(e => e.OrigenError)
                    .HasMaxLength(512)
                    .IsUnicode(false);

                entity.Property(e => e.Plazo).HasColumnName("plazo");

                entity.Property(e => e.Porretetra)
                    .HasColumnType("numeric(18, 4)")
                    .HasColumnName("PORRETETRA");

                entity.Property(e => e.Refefac)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("REFEFAC");

                entity.Property(e => e.Revelacion).IsUnicode(false);

                entity.Property(e => e.Serie)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Statustra)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("STATUSTRA")
                    .IsFixedLength();

                entity.Property(e => e.SubLineaImpuesto)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.TasaCambio)
                    .HasColumnType("money")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Tasacambio1)
                    .HasColumnType("money")
                    .HasColumnName("TASACAMBIO1");

                entity.Property(e => e.Tasacambio2)
                    .HasColumnType("money")
                    .HasColumnName("TASACAMBIO2");

                entity.Property(e => e.Tipofac)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("TIPOFAC");

                entity.Property(e => e.ValorCuota).HasColumnType("money");

                entity.Property(e => e.ValorMonedaRelacion).HasColumnType("money");

                entity.Property(e => e.ValorPrestamo).HasColumnType("money");

                entity.Property(e => e.Valormoneda)
                    .HasColumnType("money")
                    .HasColumnName("VALORMONEDA");

                entity.Property(e => e.Valormoneda1)
                    .HasColumnType("money")
                    .HasColumnName("VALORMONEDA1")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Valormoneda2)
                    .HasColumnType("money")
                    .HasColumnName("VALORMONEDA2")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Valortra)
                    .HasColumnType("money")
                    .HasColumnName("VALORTRA");

                entity.Property(e => e.Valorutra1)
                    .HasColumnType("money")
                    .HasColumnName("VALORUTRA1");

                entity.Property(e => e.Valorutra2)
                    .HasColumnType("money")
                    .HasColumnName("VALORUTRA2");

                entity.Property(e => e.Valorutra3)
                    .HasColumnType("money")
                    .HasColumnName("VALORUTRA3");

                entity.Property(e => e.Vencefac)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("VENCEFAC")
                    .IsFixedLength();

                entity.Property(e => e.Voucher)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.XmlAdicionales)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");
            });

            modelBuilder.Entity<TransacInsertarAgrupado>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Transac_InsertarAgrupados");

                entity.HasIndex(e => e.SpId, "IX_TRANSAC_INSERTARAGRUPADOS_SPID")
                    .IsClustered();

                entity.Property(e => e.Adicional1)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Adicional_1");

                entity.Property(e => e.Adicional2)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Adicional_2");

                entity.Property(e => e.Anotra)
                    .HasMaxLength(7)
                    .IsUnicode(false)
                    .HasColumnName("ANOTRA")
                    .IsFixedLength();

                entity.Property(e => e.Aplicacion)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Autorizacion)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Auxiaux)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("AUXIAUX");

                entity.Property(e => e.BaseComision).HasColumnType("money");

                entity.Property(e => e.Baseretetra)
                    .HasColumnType("money")
                    .HasColumnName("BASERETETRA");

                entity.Property(e => e.Bu)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("BU");

                entity.Property(e => e.Cliprv)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("CLIPRV");

                entity.Property(e => e.Codicta)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("CODICTA");

                entity.Property(e => e.CodigoPropiedad1)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.CodigoPropiedad2)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.CodigoPropiedad3)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.CodigoPropiedad4)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.CodigoPropiedad5)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Codpresu)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("CODPRESU")
                    .IsFixedLength();

                entity.Property(e => e.CompReteAutorizacion)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("CompRete_Autorizacion");

                entity.Property(e => e.CompReteFechaEmision)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CompRete_FechaEmision");

                entity.Property(e => e.CompReteSecuencial)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("CompRete_Secuencial");

                entity.Property(e => e.CompReteSerie)
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .HasColumnName("CompRete_Serie");

                entity.Property(e => e.Conciltra)
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .HasColumnName("CONCILTRA")
                    .IsFixedLength();

                entity.Property(e => e.Consecurev).HasColumnName("CONSECUREV");

                entity.Property(e => e.ConsecutivoCredito).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.Consecutra).HasColumnName("CONSECUTRA");

                entity.Property(e => e.CostosAsociados).HasColumnType("money");

                entity.Property(e => e.Cuota).HasColumnName("cuota");

                entity.Property(e => e.Descritra)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("DESCRITRA");

                entity.Property(e => e.FactIdencondicionesdecredito)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("fact_idencondicionesdecredito");

                entity.Property(e => e.FactMovimientoOriginal)
                    .HasColumnName("fact_movimiento_original")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.FactPorcentajeInteresComparativo).HasColumnName("fact_porcentaje_interes_comparativo");

                entity.Property(e => e.FactPorcentajeInteresPactado).HasColumnName("fact_porcentaje_interes_pactado");

                entity.Property(e => e.FechaCaducidad)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Fechafact)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Fechatra)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("FECHATRA")
                    .IsFixedLength();

                entity.Property(e => e.Fgratra)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("FGRATRA")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.GenEsquemaTran)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('N')")
                    .IsFixedLength();

                entity.Property(e => e.Id)
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.IdAgrupado).HasDefaultValueSql("((0))");

                entity.Property(e => e.IdAplicacionesOrigen).HasColumnName("Id_AplicacionesOrigen");

                entity.Property(e => e.IdAplicacionesZeus).HasColumnName("Id_AplicacionesZeus");

                entity.Property(e => e.IdMonedaRelacion)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.IdMovimiento)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("Id_Movimiento")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.IdOrigenMovimiento).HasColumnName("Id_OrigenMovimiento");

                entity.Property(e => e.Idbanco)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("IDBANCO")
                    .IsFixedLength();

                entity.Property(e => e.Idcenco)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("IDCENCO");

                entity.Property(e => e.IdenEsquemaTransaccion)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("Iden_EsquemaTransaccion");

                entity.Property(e => e.IdenSecciones).HasColumnName("Iden_Secciones");

                entity.Property(e => e.Idfuente)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("IDFUENTE")
                    .IsFixedLength();

                entity.Property(e => e.Iditem)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("IDITEM");

                entity.Property(e => e.Idplaza)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("IDPLAZA")
                    .IsFixedLength();

                entity.Property(e => e.Idunidad1)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("IDUNIDAD1")
                    .IsFixedLength();

                entity.Property(e => e.Idunidad2)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("IDUNIDAD2")
                    .IsFixedLength();

                entity.Property(e => e.Idunidad3)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("IDUNIDAD3")
                    .IsFixedLength();

                entity.Property(e => e.Idusuario)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("IDUSUARIO");

                entity.Property(e => e.Idvende)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("IDVENDE")
                    .IsFixedLength();

                entity.Property(e => e.Idzona)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("IDZONA")
                    .IsFixedLength();

                entity.Property(e => e.Indcpitra)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("INDCPITRA")
                    .IsFixedLength();

                entity.Property(e => e.LineaImpuesto)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Ncf)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("NCF");

                entity.Property(e => e.NcfModificado)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("NCF_Modificado");

                entity.Property(e => e.Nittra)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("NITTRA");

                entity.Property(e => e.Nreserva)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("NRESERVA")
                    .IsFixedLength();

                entity.Property(e => e.Numdoctra)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("NUMDOCTRA")
                    .IsFixedLength();

                entity.Property(e => e.Numefac)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("NUMEFAC");

                entity.Property(e => e.OrigenError)
                    .HasMaxLength(512)
                    .IsUnicode(false);

                entity.Property(e => e.Plazo).HasColumnName("plazo");

                entity.Property(e => e.Porretetra)
                    .HasColumnType("numeric(18, 4)")
                    .HasColumnName("PORRETETRA");

                entity.Property(e => e.Refefac)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("REFEFAC");

                entity.Property(e => e.Revelacion).IsUnicode(false);

                entity.Property(e => e.Serie)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Statustra)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("STATUSTRA")
                    .IsFixedLength();

                entity.Property(e => e.SubLineaImpuesto)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.TasaCambio)
                    .HasColumnType("money")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Tasacambio1)
                    .HasColumnType("money")
                    .HasColumnName("TASACAMBIO1");

                entity.Property(e => e.Tasacambio2)
                    .HasColumnType("money")
                    .HasColumnName("TASACAMBIO2");

                entity.Property(e => e.Tipofac)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("TIPOFAC");

                entity.Property(e => e.ValorCuota).HasColumnType("money");

                entity.Property(e => e.ValorMonedaRelacion).HasColumnType("money");

                entity.Property(e => e.ValorPrestamo).HasColumnType("money");

                entity.Property(e => e.Valormoneda)
                    .HasColumnType("money")
                    .HasColumnName("VALORMONEDA");

                entity.Property(e => e.Valormoneda1)
                    .HasColumnType("money")
                    .HasColumnName("VALORMONEDA1");

                entity.Property(e => e.Valormoneda2)
                    .HasColumnType("money")
                    .HasColumnName("VALORMONEDA2");

                entity.Property(e => e.Valortra)
                    .HasColumnType("money")
                    .HasColumnName("VALORTRA");

                entity.Property(e => e.Valorutra1)
                    .HasColumnType("money")
                    .HasColumnName("VALORUTRA1");

                entity.Property(e => e.Valorutra2)
                    .HasColumnType("money")
                    .HasColumnName("VALORUTRA2");

                entity.Property(e => e.Valorutra3)
                    .HasColumnType("money")
                    .HasColumnName("VALORUTRA3");

                entity.Property(e => e.Vencefac)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("VENCEFAC")
                    .IsFixedLength();

                entity.Property(e => e.Voucher)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.XmlAdicionales)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");
            });

            modelBuilder.Entity<TransacPreparacion>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TRANSAC_PREPARACION");

                entity.Property(e => e.Adicional1)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Adicional_1");

                entity.Property(e => e.Adicional2)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Adicional_2");

                entity.Property(e => e.Anotra)
                    .HasMaxLength(7)
                    .IsUnicode(false)
                    .HasColumnName("ANOTRA");

                entity.Property(e => e.Aplicacion)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("APLICACION");

                entity.Property(e => e.Autorizacion)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("AUTORIZACION")
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.Auxiaux)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("AUXIAUX");

                entity.Property(e => e.BaseComision).HasColumnType("money");

                entity.Property(e => e.Baseretetra)
                    .HasColumnType("money")
                    .HasColumnName("BASERETETRA")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Bu)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("BU")
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.Cliprv)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("CLIPRV");

                entity.Property(e => e.Codicta)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("CODICTA")
                    .IsFixedLength();

                entity.Property(e => e.CodigoPropiedad1)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.CodigoPropiedad2)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.CodigoPropiedad3)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.CodigoPropiedad4)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.CodigoPropiedad5)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Codpresu)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("CODPRESU")
                    .IsFixedLength();

                entity.Property(e => e.Conciltra)
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .HasColumnName("CONCILTRA")
                    .IsFixedLength();

                entity.Property(e => e.ConseRelacionado)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Consecurev)
                    .HasColumnName("CONSECUREV")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Consecutitra)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("CONSECUTITRA");

                entity.Property(e => e.Consecutivo).HasColumnName("CONSECUTIVO");

                entity.Property(e => e.ConsecutivoCredito).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.CostosAsociados).HasColumnType("money");

                entity.Property(e => e.Cuota).HasColumnName("cuota");

                entity.Property(e => e.Descritra)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("DESCRITRA");

                entity.Property(e => e.FactIdencondicionesdecredito)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("fact_idencondicionesdecredito");

                entity.Property(e => e.FactMovimientoOriginal)
                    .HasColumnName("fact_movimiento_original")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.FactPorcentajeInteresComparativo).HasColumnName("fact_porcentaje_interes_comparativo");

                entity.Property(e => e.FactPorcentajeInteresPactado).HasColumnName("fact_porcentaje_interes_pactado");

                entity.Property(e => e.FechaCaducidad)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Fechafact)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("FECHAFACT")
                    .HasDefaultValueSql("(' ')")
                    .IsFixedLength();

                entity.Property(e => e.Fechatra)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("FECHATRA")
                    .IsFixedLength();

                entity.Property(e => e.Fgratra)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("FGRATRA")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.IdAplicacionesZeus).HasColumnName("Id_AplicacionesZeus");

                entity.Property(e => e.IdOrigenMovimiento).HasColumnName("Id_OrigenMovimiento");

                entity.Property(e => e.Idbanco)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("IDBANCO")
                    .IsFixedLength();

                entity.Property(e => e.Idcenco)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("IDCENCO");

                entity.Property(e => e.IdenSecciones).HasColumnName("Iden_Secciones");

                entity.Property(e => e.Idfuente)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("IDFUENTE")
                    .IsFixedLength();

                entity.Property(e => e.Iditem)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("IDITEM");

                entity.Property(e => e.Idplaza)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("IDPLAZA")
                    .IsFixedLength();

                entity.Property(e => e.Idunidad1)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("IDUNIDAD1")
                    .HasDefaultValueSql("('')")
                    .IsFixedLength();

                entity.Property(e => e.Idunidad2)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("IDUNIDAD2")
                    .HasDefaultValueSql("('')")
                    .IsFixedLength();

                entity.Property(e => e.Idunidad3)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("IDUNIDAD3")
                    .HasDefaultValueSql("('')")
                    .IsFixedLength();

                entity.Property(e => e.Idusuario)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("IDUSUARIO");

                entity.Property(e => e.Idvende)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("IDVENDE")
                    .IsFixedLength();

                entity.Property(e => e.Idzona)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("IDZONA")
                    .IsFixedLength();

                entity.Property(e => e.Indcpitra)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("INDCPITRA")
                    .IsFixedLength();

                entity.Property(e => e.Ncf)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("NCF")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.NcfModificado)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("NCF_Modificado")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Nittra)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("NITTRA");

                entity.Property(e => e.Nreserva)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("NRESERVA")
                    .IsFixedLength();

                entity.Property(e => e.Numdoctra)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("NUMDOCTRA")
                    .IsFixedLength();

                entity.Property(e => e.Numefac)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("NUMEFAC");

                entity.Property(e => e.Plazo).HasColumnName("plazo");

                entity.Property(e => e.Porretetra)
                    .HasColumnType("numeric(18, 4)")
                    .HasColumnName("PORRETETRA")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Procesado).HasColumnName("PROCESADO");

                entity.Property(e => e.Refefac)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("REFEFAC");

                entity.Property(e => e.Revelacion).IsUnicode(false);

                entity.Property(e => e.Serie)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("SERIE")
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.Statustra)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("STATUSTRA")
                    .IsFixedLength();

                entity.Property(e => e.TasaCambio).HasColumnType("money");

                entity.Property(e => e.Tasacambio1)
                    .HasColumnType("money")
                    .HasColumnName("TASACAMBIO1");

                entity.Property(e => e.Tasacambio2)
                    .HasColumnType("money")
                    .HasColumnName("TASACAMBIO2");

                entity.Property(e => e.Tipofac)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("TIPOFAC");

                entity.Property(e => e.ValorCuota).HasColumnType("money");

                entity.Property(e => e.ValorPrestamo).HasColumnType("money");

                entity.Property(e => e.Valormoneda)
                    .HasColumnType("money")
                    .HasColumnName("VALORMONEDA")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Valormoneda1)
                    .HasColumnType("money")
                    .HasColumnName("VALORMONEDA1");

                entity.Property(e => e.Valormoneda2)
                    .HasColumnType("money")
                    .HasColumnName("VALORMONEDA2");

                entity.Property(e => e.Valortra)
                    .HasColumnType("money")
                    .HasColumnName("VALORTRA");

                entity.Property(e => e.Valorutra1)
                    .HasColumnType("money")
                    .HasColumnName("VALORUTRA1")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Valorutra2)
                    .HasColumnType("money")
                    .HasColumnName("VALORUTRA2")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Valorutra3)
                    .HasColumnType("money")
                    .HasColumnName("VALORUTRA3")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Vencefac)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("VENCEFAC")
                    .IsFixedLength();

                entity.Property(e => e.Voucher)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.HasOne(d => d.IdfuenteNavigation)
                    .WithMany()
                    .HasForeignKey(d => d.Idfuente)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TRANSAC_PREPARACION_FUENTES");
            });

            modelBuilder.Entity<TransacProcesado>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Transac_Procesados");

                entity.HasIndex(e => e.Consecutra, "IX_Transac_Procesados_Consecutra");

                entity.Property(e => e.Auxiliar)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Consecutra).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.FechaGrabacion).HasColumnType("datetime");

                entity.Property(e => e.Iden)
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<TransacTemp>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TRANSAC_TEMP");

                entity.HasIndex(e => new { e.Idfuente, e.Fechatra, e.Aplicacion }, "IX_TRANSAC_TEMP_APLICACION_FECHATRA_IDFUENTE");

                entity.HasIndex(e => e.Codicta, "IX_TRANSAC_TEMP_CODICTA");

                entity.HasIndex(e => e.Consecutitra, "IX_TRANSAC_TEMP_CONSECUTITRA");

                entity.HasIndex(e => new { e.Idfuente, e.Numdoctra, e.Consecutitra, e.Fechatra }, "IX_TRANSAC_TEMP_CONSECUTITRA_FECHATRA_IDFUENTE_NUMDOCTRA");

                entity.HasIndex(e => e.Fechatra, "IX_TRANSAC_TEMP_FECHATRA");

                entity.Property(e => e.Adicional1)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Adicional_1");

                entity.Property(e => e.Adicional1TerceroDetallado)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("Adicional1_TerceroDetallado")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Adicional2)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Adicional_2");

                entity.Property(e => e.Adicional2TerceroDetallado)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("Adicional2_TerceroDetallado")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Adicional3TerceroDetallado)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("Adicional3_TerceroDetallado")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Adicional4TerceroDetallado)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("Adicional4_TerceroDetallado")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Anotra)
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .HasColumnName("ANOTRA")
                    .IsFixedLength();

                entity.Property(e => e.Aplicacion)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("APLICACION");

                entity.Property(e => e.Autorizacion)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("AUTORIZACION")
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.Auxiaux)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("AUXIAUX");

                entity.Property(e => e.BaseComision).HasColumnType("money");

                entity.Property(e => e.Baseretetra)
                    .HasColumnType("money")
                    .HasColumnName("BASERETETRA")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Bu)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("BU")
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.Cliprv)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("CLIPRV");

                entity.Property(e => e.Codicta)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("CODICTA")
                    .IsFixedLength();

                entity.Property(e => e.CodigoPropiedad1)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.CodigoPropiedad2)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.CodigoPropiedad3)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.CodigoPropiedad4)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.CodigoPropiedad5)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Codpresu)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("CODPRESU")
                    .IsFixedLength();

                entity.Property(e => e.CompReteAutorizacion)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("CompRete_Autorizacion");

                entity.Property(e => e.CompReteFechaEmision)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CompRete_FechaEmision");

                entity.Property(e => e.CompReteSecuencial)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("CompRete_Secuencial");

                entity.Property(e => e.CompReteSerie)
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .HasColumnName("CompRete_Serie");

                entity.Property(e => e.Conciltra)
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .HasColumnName("CONCILTRA")
                    .IsFixedLength();

                entity.Property(e => e.Consecurev)
                    .HasColumnName("CONSECUREV")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Consecutitra)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("CONSECUTITRA");

                entity.Property(e => e.ConsecutivoCredito).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.CostosAsociados).HasColumnType("money");

                entity.Property(e => e.Cuota).HasColumnName("cuota");

                entity.Property(e => e.Descritra)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("DESCRITRA");

                entity.Property(e => e.FactIdencondicionesdecredito)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("fact_idencondicionesdecredito");

                entity.Property(e => e.FactMovimientoOriginal)
                    .HasColumnName("fact_movimiento_original")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.FactPorcentajeInteresComparativo).HasColumnName("fact_porcentaje_interes_comparativo");

                entity.Property(e => e.FactPorcentajeInteresPactado).HasColumnName("fact_porcentaje_interes_pactado");

                entity.Property(e => e.FechaCaducidad)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Fechafact)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("FECHAFACT")
                    .HasDefaultValueSql("(' ')")
                    .IsFixedLength();

                entity.Property(e => e.Fechatra)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("FECHATRA")
                    .IsFixedLength();

                entity.Property(e => e.Fgratra)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("FGRATRA")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.IdAgrupado).HasDefaultValueSql("((0))");

                entity.Property(e => e.IdAplicacionesOrigen).HasColumnName("Id_AplicacionesOrigen");

                entity.Property(e => e.IdAplicacionesZeus).HasColumnName("Id_AplicacionesZeus");

                entity.Property(e => e.IdMonedaRelacion)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.IdMovimiento)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("Id_Movimiento")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.IdOrigenMovimiento).HasColumnName("Id_OrigenMovimiento");

                entity.Property(e => e.Idbanco)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("IDBANCO")
                    .IsFixedLength();

                entity.Property(e => e.Idcenco)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("IDCENCO");

                entity.Property(e => e.IdenSecciones).HasColumnName("Iden_Secciones");

                entity.Property(e => e.Idfuente)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("IDFUENTE")
                    .IsFixedLength();

                entity.Property(e => e.Iditem)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("IDITEM");

                entity.Property(e => e.Idplaza)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("IDPLAZA")
                    .IsFixedLength();

                entity.Property(e => e.Idunidad1)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("IDUNIDAD1")
                    .HasDefaultValueSql("('')")
                    .IsFixedLength();

                entity.Property(e => e.Idunidad2)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("IDUNIDAD2")
                    .HasDefaultValueSql("('')")
                    .IsFixedLength();

                entity.Property(e => e.Idunidad3)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("IDUNIDAD3")
                    .HasDefaultValueSql("('')")
                    .IsFixedLength();

                entity.Property(e => e.Idusuario)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("IDUSUARIO");

                entity.Property(e => e.Idvende)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("IDVENDE")
                    .IsFixedLength();

                entity.Property(e => e.Idzona)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("IDZONA")
                    .IsFixedLength();

                entity.Property(e => e.Indauxiliar)
                    .HasColumnName("INDAUXILIAR")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Indbanco)
                    .HasColumnName("INDBANCO")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Indbaseretetra)
                    .HasColumnName("INDBASERETETRA")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Indbu).HasColumnName("INDBU");

                entity.Property(e => e.Indcencosto)
                    .HasColumnName("INDCENCOSTO")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Indcliente)
                    .HasColumnName("INDCLIENTE")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Indcpitra)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("INDCPITRA")
                    .IsFixedLength();

                entity.Property(e => e.Indcuenta)
                    .HasColumnName("INDCUENTA")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Indfuente)
                    .HasColumnName("INDFUENTE")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Indimpuesto)
                    .HasColumnName("INDIMPUESTO")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Inditem)
                    .HasColumnName("INDITEM")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Indmoneda)
                    .HasColumnName("INDMONEDA")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Indnumdoctra)
                    .HasColumnName("INDNUMDOCTRA")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Indnumefacperu)
                    .HasColumnName("INDNUMEFACPERU")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Indperiodo)
                    .HasColumnName("INDPERIODO")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Indplaza)
                    .HasColumnName("INDPLAZA")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Indproveedor)
                    .HasColumnName("INDPROVEEDOR")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Indtercero)
                    .HasColumnName("INDTERCERO")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Indtipofac)
                    .HasColumnName("INDTIPOFAC")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Indunidad1)
                    .HasColumnName("INDUNIDAD1")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Indunidad2)
                    .HasColumnName("INDUNIDAD2")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Indunidad3)
                    .HasColumnName("INDUNIDAD3")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Indvalor)
                    .HasColumnName("INDVALOR")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Indvalormoneda)
                    .HasColumnName("INDVALORMONEDA")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Indvende)
                    .HasColumnName("INDVENDE")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.LineaImpuesto)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Ncf)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("NCF")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.NcfModificado)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("NCF_Modificado")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Nittra)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("NITTRA");

                entity.Property(e => e.Nittrag)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("NITTRAG")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Nreserva)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("NRESERVA")
                    .IsFixedLength();

                entity.Property(e => e.Numdoctra)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("NUMDOCTRA")
                    .IsFixedLength();

                entity.Property(e => e.Numefac)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("NUMEFAC");

                entity.Property(e => e.Plazo).HasColumnName("plazo");

                entity.Property(e => e.Porretetra)
                    .HasColumnType("numeric(18, 4)")
                    .HasColumnName("PORRETETRA")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Procesado).HasColumnName("PROCESADO");

                entity.Property(e => e.Refefac)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("REFEFAC");

                entity.Property(e => e.Revelacion).IsUnicode(false);

                entity.Property(e => e.Serie)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("SERIE")
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.Statustra)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("STATUSTRA")
                    .IsFixedLength();

                entity.Property(e => e.SubLineaImpuesto)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.TasaCambio).HasColumnType("money");

                entity.Property(e => e.Tasacambio1)
                    .HasColumnType("money")
                    .HasColumnName("TASACAMBIO1");

                entity.Property(e => e.Tasacambio2)
                    .HasColumnType("money")
                    .HasColumnName("TASACAMBIO2");

                entity.Property(e => e.Tipofac)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("TIPOFAC");

                entity.Property(e => e.ValorCuota).HasColumnType("money");

                entity.Property(e => e.ValorMonedaRelacion).HasColumnType("money");

                entity.Property(e => e.ValorPrestamo).HasColumnType("money");

                entity.Property(e => e.Valormoneda)
                    .HasColumnType("money")
                    .HasColumnName("VALORMONEDA")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Valormoneda1)
                    .HasColumnType("money")
                    .HasColumnName("VALORMONEDA1");

                entity.Property(e => e.Valormoneda2)
                    .HasColumnType("money")
                    .HasColumnName("VALORMONEDA2");

                entity.Property(e => e.Valortra)
                    .HasColumnType("money")
                    .HasColumnName("VALORTRA");

                entity.Property(e => e.Valorutra1)
                    .HasColumnType("money")
                    .HasColumnName("VALORUTRA1")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Valorutra2)
                    .HasColumnType("money")
                    .HasColumnName("VALORUTRA2")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Valorutra3)
                    .HasColumnType("money")
                    .HasColumnName("VALORUTRA3")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Vencefac)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("VENCEFAC")
                    .IsFixedLength();

                entity.Property(e => e.Voucher)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.XmlAdicionales)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.HasOne(d => d.BuNavigation)
                    .WithMany()
                    .HasForeignKey(d => d.Bu)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TRANSAC_TEMP_BU");

                entity.HasOne(d => d.IdfuenteNavigation)
                    .WithMany()
                    .HasForeignKey(d => d.Idfuente)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TRANSAC_TEMP_FUENTES");
            });

            modelBuilder.Entity<TransacTerceroDetallado>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Transac_TerceroDetallado");

                entity.HasIndex(e => e.Consecutra, "IX_Transac_TerceroDetallado_Consecutra");

                entity.Property(e => e.Adicional1)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Adicional2)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Adicional3)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Adicional4)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Baseretetra)
                    .HasColumnType("numeric(18, 4)")
                    .HasColumnName("BASERETETRA")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Consecutra).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.IdenTransacTercerodetallado)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_transac_tercerodetallado");

                entity.Property(e => e.Nittra)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("NITTRA")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Porretetra)
                    .HasColumnType("numeric(18, 4)")
                    .HasColumnName("PORRETETRA")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Valormoneda)
                    .HasColumnType("money")
                    .HasColumnName("VALORMONEDA");

                entity.Property(e => e.Valortra)
                    .HasColumnType("money")
                    .HasColumnName("VALORTRA");
            });

            modelBuilder.Entity<Transpresu>(entity =>
            {
                entity.HasKey(e => e.Idtra)
                    .IsClustered(false);

                entity.ToTable("TRANSPRESU");

                entity.Property(e => e.Idtra).HasColumnName("IDTRA");

                entity.Property(e => e.Ano)
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .HasColumnName("ANO")
                    .IsFixedLength();

                entity.Property(e => e.Bu)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.Codcco)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("CODCCO");

                entity.Property(e => e.Codcco1)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("CODCCO1");

                entity.Property(e => e.Codcta)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("CODCTA");

                entity.Property(e => e.Codcta1)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("CODCTA1");

                entity.Property(e => e.Codusuario)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("CODUSUARIO");

                entity.Property(e => e.Destra)
                    .HasMaxLength(8000)
                    .IsUnicode(false)
                    .HasColumnName("DESTRA");

                entity.Property(e => e.Fecha)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("FECHA")
                    .HasDefaultValueSql("(getdate())")
                    .IsFixedLength();

                entity.Property(e => e.Mes0)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MES0");

                entity.Property(e => e.Mes1)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MES1");

                entity.Property(e => e.Mes10)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MES10");

                entity.Property(e => e.Mes11)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MES11");

                entity.Property(e => e.Mes12)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MES12");

                entity.Property(e => e.Mes2)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MES2");

                entity.Property(e => e.Mes3)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MES3");

                entity.Property(e => e.Mes4)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MES4");

                entity.Property(e => e.Mes5)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MES5");

                entity.Property(e => e.Mes6)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MES6");

                entity.Property(e => e.Mes7)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MES7");

                entity.Property(e => e.Mes8)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MES8");

                entity.Property(e => e.Mes9)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MES9");

                entity.Property(e => e.Mesorigen)
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .HasColumnName("MESORIGEN");

                entity.Property(e => e.Numdoctra)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("NUMDOCTRA")
                    .IsFixedLength();

                entity.Property(e => e.Tipotra)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("TIPOTRA")
                    .IsFixedLength();
            });

            modelBuilder.Entity<Transuni>(entity =>
            {
                entity.HasKey(e => new { e.Anotra, e.Idfuente, e.Numdoctra, e.Consecutra, e.Idunidad })
                    .HasName("pk_transuni")
                    .IsClustered(false);

                entity.ToTable("TRANSUNI");

                entity.HasIndex(e => e.Consecutra, "IX_TRANSUNI_CONSECUTRA")
                    .IsClustered();

                entity.HasIndex(e => new { e.Idfuente, e.Numdoctra, e.Consecutra }, "IX_TRANSUNI_CONSECUTRA_IDFUENTE_NUMDOCTRA");

                entity.Property(e => e.Anotra)
                    .HasMaxLength(7)
                    .IsUnicode(false)
                    .HasColumnName("ANOTRA");

                entity.Property(e => e.Idfuente)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("IDFUENTE")
                    .IsFixedLength();

                entity.Property(e => e.Numdoctra)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("NUMDOCTRA")
                    .IsFixedLength();

                entity.Property(e => e.Consecutra).HasColumnName("CONSECUTRA");

                entity.Property(e => e.Idunidad)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("IDUNIDAD")
                    .IsFixedLength();

                entity.Property(e => e.Consecurev)
                    .HasColumnName("CONSECUREV")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.IdenTransuni)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_transuni");

                entity.Property(e => e.Valormoneda)
                    .HasColumnType("money")
                    .HasColumnName("VALORMONEDA");

                entity.Property(e => e.Valormoneda1)
                    .HasColumnType("money")
                    .HasColumnName("VALORMONEDA1");

                entity.Property(e => e.Valormoneda2)
                    .HasColumnType("money")
                    .HasColumnName("VALORMONEDA2");

                entity.Property(e => e.Valorutra)
                    .HasColumnType("money")
                    .HasColumnName("VALORUTRA");
            });

            modelBuilder.Entity<TregAutorizaCodigo>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TregAutorizaCodigo");

                entity.Property(e => e.Codigo).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.FechaGen)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.IdSesion).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.Iden)
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.IdenMenu)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("Iden_Menu");

                entity.Property(e => e.MiPc)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Usuario)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");
            });

            modelBuilder.Entity<TsunatCompra>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TSunatCompras");

                entity.Property(e => e.AnoDua)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AotrosConceptos)
                    .HasColumnType("numeric(18, 2)")
                    .HasColumnName("AOtrosConceptos");

                entity.Property(e => e.Apellido1)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Apellido2)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AsumConceptosIva)
                    .HasColumnType("numeric(18, 2)")
                    .HasColumnName("ASumConceptosIva");

                entity.Property(e => e.AsumConceptosSinIva)
                    .HasColumnType("numeric(18, 2)")
                    .HasColumnName("ASumConceptosSinIva");

                entity.Property(e => e.AvrIva)
                    .HasColumnType("numeric(18, 2)")
                    .HasColumnName("AVrIva");

                entity.Property(e => e.BaseReferencia).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.BodegaAmbiente)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.BotrosConceptos)
                    .HasColumnType("numeric(18, 2)")
                    .HasColumnName("BOtrosConceptos");

                entity.Property(e => e.BsumConceptosIva)
                    .HasColumnType("numeric(18, 2)")
                    .HasColumnName("BSumConceptosIva");

                entity.Property(e => e.BsumConceptosSinIva)
                    .HasColumnType("numeric(18, 2)")
                    .HasColumnName("BSumConceptosSinIva");

                entity.Property(e => e.BvrIva)
                    .HasColumnType("numeric(18, 2)")
                    .HasColumnName("BVrIva");

                entity.Property(e => e.CodigoDestino)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.CodigoDetraccion)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.CodigoDua)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CodigoTercero)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Compañia)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.ComprobanteNd)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("ComprobanteND");

                entity.Property(e => e.ConsecutivoInterno)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.CotrosConceptos)
                    .HasColumnType("numeric(18, 2)")
                    .HasColumnName("COtrosConceptos");

                entity.Property(e => e.CsumConceptosIva)
                    .HasColumnType("numeric(18, 2)")
                    .HasColumnName("CSumConceptosIva");

                entity.Property(e => e.CsumConceptosSinIva)
                    .HasColumnType("numeric(18, 2)")
                    .HasColumnName("CSumConceptosSinIva");

                entity.Property(e => e.CvrIva)
                    .HasColumnType("numeric(18, 2)")
                    .HasColumnName("CVrIva");

                entity.Property(e => e.Destino)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DocDetraccion)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Documento)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.EotrosConceptos)
                    .HasColumnType("numeric(18, 2)")
                    .HasColumnName("EOtrosConceptos");

                entity.Property(e => e.EstadoRegistro).HasDefaultValueSql("((1))");

                entity.Property(e => e.EsumConceptosIva)
                    .HasColumnType("numeric(18, 2)")
                    .HasColumnName("ESumConceptosIva");

                entity.Property(e => e.EsumConceptosSinIva)
                    .HasColumnType("numeric(18, 2)")
                    .HasColumnName("ESumConceptosSinIva");

                entity.Property(e => e.EvrIva)
                    .HasColumnType("numeric(18, 2)")
                    .HasColumnName("EVrIva");

                entity.Property(e => e.FacturaReferencia)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("Factura_Referencia");

                entity.Property(e => e.Fecha)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.FechaDeposito)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.FechaDetraccion)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.FechaEvento).HasColumnType("datetime");

                entity.Property(e => e.FechaPresentacion)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.FechaReporte)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Fuente)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.Host)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.IdenImpuesto)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.IdenTerceros)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Idregistro)
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("IDRegistro");

                entity.Property(e => e.Igvreferencia)
                    .HasColumnType("numeric(18, 2)")
                    .HasColumnName("IGVReferencia");

                entity.Property(e => e.IndicadorDetraccion)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.IndicadorRetencion)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Isc)
                    .HasColumnType("numeric(18, 2)")
                    .HasColumnName("ISC");

                entity.Property(e => e.Moneda)
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.NitCompañia)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.NoBoleta)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NoDua)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Nombre1)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Nombre2)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.NombreProveedor)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.NombreTercero)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.NumeroDestino)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Numerofactura)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Observaciones)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.OtrosConceptos).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.Serie)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.SumConceptosIva).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.SumConceptossinIva).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.Tcambio)
                    .HasColumnType("numeric(18, 3)")
                    .HasColumnName("tcambio");

                entity.Property(e => e.TipoCompra)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.TipoDctoFhe)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("TipoDcto_Fhe");

                entity.Property(e => e.TipoFactura)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.TipoId)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("TipoID");

                entity.Property(e => e.TipoMoneda)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.TipoPersona)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Usuario)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Vencimiento)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.VrIva).HasColumnType("numeric(18, 2)");
            });

            modelBuilder.Entity<TsunatComprasLog>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TSunatComprasLOG");

                entity.Property(e => e.AnoDua)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AotrosConceptos)
                    .HasColumnType("numeric(18, 2)")
                    .HasColumnName("AOtrosConceptos");

                entity.Property(e => e.Apellido1)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Apellido2)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.AsumConceptosIva)
                    .HasColumnType("numeric(18, 2)")
                    .HasColumnName("ASumConceptosIva");

                entity.Property(e => e.AsumConceptosSinIva)
                    .HasColumnType("numeric(18, 2)")
                    .HasColumnName("ASumConceptosSinIva");

                entity.Property(e => e.AvrIva)
                    .HasColumnType("numeric(18, 2)")
                    .HasColumnName("AVrIva");

                entity.Property(e => e.BaseReferencia).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.BodegaAmbiente)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.BotrosConceptos)
                    .HasColumnType("numeric(18, 2)")
                    .HasColumnName("BOtrosConceptos");

                entity.Property(e => e.BsumConceptosIva)
                    .HasColumnType("numeric(18, 2)")
                    .HasColumnName("BSumConceptosIva");

                entity.Property(e => e.BsumConceptosSinIva)
                    .HasColumnType("numeric(18, 2)")
                    .HasColumnName("BSumConceptosSinIva");

                entity.Property(e => e.BvrIva)
                    .HasColumnType("numeric(18, 2)")
                    .HasColumnName("BVrIva");

                entity.Property(e => e.CodigoDestino)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.CodigoDetraccion)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.CodigoDua)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CodigoTercero)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Compañia)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.ComprobanteNd)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("ComprobanteND");

                entity.Property(e => e.ConsecutivoInterno)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.CotrosConceptos)
                    .HasColumnType("numeric(18, 2)")
                    .HasColumnName("COtrosConceptos");

                entity.Property(e => e.CsumConceptosIva)
                    .HasColumnType("numeric(18, 2)")
                    .HasColumnName("CSumConceptosIva");

                entity.Property(e => e.CsumConceptosSinIva)
                    .HasColumnType("numeric(18, 2)")
                    .HasColumnName("CSumConceptosSinIva");

                entity.Property(e => e.CvrIva)
                    .HasColumnType("numeric(18, 2)")
                    .HasColumnName("CVrIva");

                entity.Property(e => e.Destino)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DocDetraccion)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Documento)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.EotrosConceptos)
                    .HasColumnType("numeric(18, 2)")
                    .HasColumnName("EOtrosConceptos");

                entity.Property(e => e.EstadoRegistro).HasDefaultValueSql("((1))");

                entity.Property(e => e.EsumConceptosIva)
                    .HasColumnType("numeric(18, 2)")
                    .HasColumnName("ESumConceptosIva");

                entity.Property(e => e.EsumConceptosSinIva)
                    .HasColumnType("numeric(18, 2)")
                    .HasColumnName("ESumConceptosSinIva");

                entity.Property(e => e.EvrIva)
                    .HasColumnType("numeric(18, 2)")
                    .HasColumnName("EVrIva");

                entity.Property(e => e.FacturaReferencia)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("Factura_Referencia");

                entity.Property(e => e.Fecha)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.FechaDeposito)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.FechaDetraccion)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.FechaEvento).HasColumnType("datetime");

                entity.Property(e => e.FechaPresentacion)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.FechaReporte)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Fuente)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.Host)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.IdenImpuesto)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.IdenTerceros)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Idregistro)
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("IDRegistro");

                entity.Property(e => e.Igvreferencia)
                    .HasColumnType("numeric(18, 2)")
                    .HasColumnName("IGVReferencia");

                entity.Property(e => e.IndicadorDetraccion)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.IndicadorRetencion)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Isc)
                    .HasColumnType("numeric(18, 2)")
                    .HasColumnName("ISC");

                entity.Property(e => e.Moneda)
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.NitCompañia)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.NoBoleta)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NoDua)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Nombre1)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Nombre2)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.NombreProveedor)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.NombreTercero)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.NumeroDestino)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Numerofactura)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Observaciones)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Operacion)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.OtrosConceptos).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.Serie)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.SumConceptosIva).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.SumConceptossinIva).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.Tcambio)
                    .HasColumnType("numeric(18, 3)")
                    .HasColumnName("tcambio");

                entity.Property(e => e.TipoCompra)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.TipoDctoFhe)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("TipoDcto_Fhe");

                entity.Property(e => e.TipoFactura)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.TipoId)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("TipoID");

                entity.Property(e => e.TipoMoneda)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.TipoPersona)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Usuario)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Vencimiento)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.VrIva).HasColumnType("numeric(18, 2)");
            });

            modelBuilder.Entity<TsunatVenta>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TSunatVentas");

                entity.Property(e => e.AfectoIgv)
                    .HasColumnType("numeric(18, 2)")
                    .HasColumnName("AfectoIGV");

                entity.Property(e => e.AfectoIgvMoneda)
                    .HasColumnType("numeric(18, 2)")
                    .HasColumnName("AfectoIGV_Moneda");

                entity.Property(e => e.Apellido1)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Apellido2)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.BaseReferencia)
                    .HasMaxLength(18)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.CodigoDestino)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')")
                    .IsFixedLength();

                entity.Property(e => e.CodigoPrecepcion)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Compania)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ComprobantePrecepcion)
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ConsecutivoInterno)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Correlativo)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.CuentaContrapartida)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Cuo)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("CUO")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.EstadoRegistro).HasDefaultValueSql("((1))");

                entity.Property(e => e.ExoneradaIgv)
                    .HasColumnType("numeric(18, 2)")
                    .HasColumnName("ExoneradaIGV");

                entity.Property(e => e.FacturaDev)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.FacturaEnDolar)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')")
                    .IsFixedLength();

                entity.Property(e => e.Fecha)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.FechaDev)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.FechaEvento)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.FechaReporte)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.FormaDePago)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Fuente)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Host)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Idregistro)
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("IDRegistro");

                entity.Property(e => e.IgvMoneda)
                    .HasColumnType("numeric(18, 2)")
                    .HasColumnName("IGV_Moneda");

                entity.Property(e => e.Igvreferencia)
                    .HasMaxLength(18)
                    .IsUnicode(false)
                    .HasColumnName("IGVReferencia")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.InafectoIgv)
                    .HasColumnType("numeric(18, 2)")
                    .HasColumnName("InafectoIGV");

                entity.Property(e => e.InafectoIgvMoneda)
                    .HasColumnType("numeric(18, 2)")
                    .HasColumnName("InafectoIGV_Moneda");

                entity.Property(e => e.IndicadorPrecepcion)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')")
                    .IsFixedLength();

                entity.Property(e => e.Isc)
                    .HasColumnType("money")
                    .HasColumnName("ISC");

                entity.Property(e => e.Moneda)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Nit)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("NIt")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Nombre1)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Nombre2)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Numero)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.NumeroDestino)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')")
                    .IsFixedLength();

                entity.Property(e => e.Observaciones)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.OtrosMontos).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.RazonSocial)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Ruc)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("RUC")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Serie)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SerieFacturaDev)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SeriePrecepcion)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.TasaCambio).HasColumnType("numeric(18, 3)");

                entity.Property(e => e.Tipo)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.TipoComprobante)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.TipoFacturaDev)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.TipoIdentificacion)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.TipoMoneda)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')")
                    .IsFixedLength();

                entity.Property(e => e.TipoPersona)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.TipoVenta)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Total).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.TotalMoneda)
                    .HasColumnType("numeric(18, 2)")
                    .HasColumnName("Total_Moneda");

                entity.Property(e => e.Usuario)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Vencimiento)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.VentaMoneda)
                    .HasColumnType("numeric(18, 2)")
                    .HasColumnName("Venta_Moneda");

                entity.Property(e => e.VrExportacion).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.VrIgv)
                    .HasColumnType("numeric(18, 2)")
                    .HasColumnName("VrIGV");

                entity.Property(e => e.VrPropinas).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.VrPropinasMoneda)
                    .HasColumnType("numeric(18, 2)")
                    .HasColumnName("VrPropinas_Moneda");

                entity.Property(e => e.VrServicios).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.VrServiciosMoneda)
                    .HasColumnType("numeric(18, 2)")
                    .HasColumnName("VrServicios_Moneda");

                entity.Property(e => e.VrVenta).HasColumnType("numeric(18, 2)");
            });

            modelBuilder.Entity<TsunatVentasLog>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TSunatVentasLOG");

                entity.Property(e => e.AfectoIgv)
                    .HasColumnType("numeric(18, 2)")
                    .HasColumnName("AfectoIGV");

                entity.Property(e => e.AfectoIgvMoneda)
                    .HasColumnType("numeric(18, 2)")
                    .HasColumnName("AfectoIGV_Moneda");

                entity.Property(e => e.Apellido1)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Apellido2)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.BaseReferencia)
                    .HasMaxLength(18)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.CodigoDestino)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')")
                    .IsFixedLength();

                entity.Property(e => e.CodigoPrecepcion)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Compania)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ComprobantePrecepcion)
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ConsecutivoInterno)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Correlativo)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.CuentaContrapartida)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Cuo)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("CUO")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.EstadoRegistro).HasDefaultValueSql("((1))");

                entity.Property(e => e.ExoneradaIgv)
                    .HasColumnType("numeric(18, 2)")
                    .HasColumnName("ExoneradaIGV");

                entity.Property(e => e.FacturaDev)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.FacturaEnDolar)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')")
                    .IsFixedLength();

                entity.Property(e => e.Fecha)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.FechaDev)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.FechaEvento)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.FechaReporte)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.FormaDePago)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Fuente)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Host)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Idregistro)
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("IDRegistro");

                entity.Property(e => e.IgvMoneda)
                    .HasColumnType("numeric(18, 2)")
                    .HasColumnName("IGV_Moneda");

                entity.Property(e => e.Igvreferencia)
                    .HasMaxLength(18)
                    .IsUnicode(false)
                    .HasColumnName("IGVReferencia")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.InafectoIgv)
                    .HasColumnType("numeric(18, 2)")
                    .HasColumnName("InafectoIGV");

                entity.Property(e => e.InafectoIgvMoneda)
                    .HasColumnType("numeric(18, 2)")
                    .HasColumnName("InafectoIGV_Moneda");

                entity.Property(e => e.IndicadorPrecepcion)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')")
                    .IsFixedLength();

                entity.Property(e => e.Isc)
                    .HasColumnType("money")
                    .HasColumnName("ISC");

                entity.Property(e => e.Moneda)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Nit)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("NIt")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Nombre1)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Nombre2)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Numero)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.NumeroDestino)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')")
                    .IsFixedLength();

                entity.Property(e => e.Observaciones)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Operacion)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.OtrosMontos).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.RazonSocial)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Ruc)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("RUC")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Serie)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SerieFacturaDev)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SeriePrecepcion)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.TasaCambio).HasColumnType("numeric(18, 3)");

                entity.Property(e => e.Tipo)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.TipoComprobante)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.TipoFacturaDev)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.TipoIdentificacion)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.TipoMoneda)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')")
                    .IsFixedLength();

                entity.Property(e => e.TipoPersona)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.TipoVenta)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Total).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.TotalMoneda)
                    .HasColumnType("numeric(18, 2)")
                    .HasColumnName("Total_Moneda");

                entity.Property(e => e.Usuario)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Vencimiento)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.VentaMoneda)
                    .HasColumnType("numeric(18, 2)")
                    .HasColumnName("Venta_Moneda");

                entity.Property(e => e.VrExportacion).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.VrIgv)
                    .HasColumnType("numeric(18, 2)")
                    .HasColumnName("VrIGV");

                entity.Property(e => e.VrPropinas).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.VrPropinasMoneda)
                    .HasColumnType("numeric(18, 2)")
                    .HasColumnName("VrPropinas_Moneda");

                entity.Property(e => e.VrServicios).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.VrServiciosMoneda)
                    .HasColumnType("numeric(18, 2)")
                    .HasColumnName("VrServicios_Moneda");

                entity.Property(e => e.VrVenta).HasColumnType("numeric(18, 2)");
            });

            modelBuilder.Entity<Ubicaciongeografica>(entity =>
            {
                entity.HasKey(e => e.Codigoubicacion)
                    .IsClustered(false);

                entity.ToTable("UBICACIONGEOGRAFICA");

                entity.Property(e => e.Codigoubicacion)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("CODIGOUBICACION");

                entity.Property(e => e.Fecha)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("FECHA");

                entity.Property(e => e.IdenUbicaciongeografica)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_ubicaciongeografica");

                entity.Property(e => e.Ncd).HasColumnName("NCD");

                entity.Property(e => e.Nivel).HasColumnName("NIVEL");

                entity.Property(e => e.Nombre)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("NOMBRE");

                entity.Property(e => e.Pertenece)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("PERTENECE");

                entity.Property(e => e.Tipo)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("TIPO")
                    .IsFixedLength();

                entity.Property(e => e.VersionDeLaFila)
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<UnidadImpTributarium>(entity =>
            {
                entity.HasKey(e => e.Iden);

                entity.Property(e => e.CantidadUit)
                    .HasColumnType("money")
                    .HasColumnName("Cantidad_UIT");

                entity.Property(e => e.Codigo)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Descripcion)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.FechaFin)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.FechaIni)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.ToleranciaUit)
                    .HasColumnType("money")
                    .HasColumnName("Tolerancia_UIT");

                entity.Property(e => e.ValorUit)
                    .HasColumnType("money")
                    .HasColumnName("Valor_UIT");
            });

            modelBuilder.Entity<Usuario>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Usuario");

                entity.Property(e => e.BloqueoMovimiento).HasColumnName("Bloqueo_Movimiento");

                entity.Property(e => e.BloqueoProgramado).HasColumnName("Bloqueo_programado");

                entity.Property(e => e.BloqueoSevero).HasColumnName("Bloqueo_Severo");

                entity.Property(e => e.Bu)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("BU");

                entity.Property(e => e.Cedula)
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.Codigoidioma)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("CODIGOIDIOMA");

                entity.Property(e => e.ControldeUsuario)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.CuentaCaja)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Direccion)
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.Email)
                    .HasMaxLength(2000)
                    .IsUnicode(false);

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaInicioBloqueo)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("FechaInicio_Bloqueo");

                entity.Property(e => e.HoraEntrada).HasColumnType("datetime");

                entity.Property(e => e.HoraSalida).HasColumnType("datetime");

                entity.Property(e => e.HostName)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Id).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.IdDiscoDuro)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Iplocal)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("IPLocal");

                entity.Property(e => e.Login)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Nombre)
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.Pass)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Perfil)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Port)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.PreguntaSecreta)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.RespuestaSecreta)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Roll)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Telefono)
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.TipoUsuario)
                    .HasMaxLength(1)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Usuario1>(entity =>
            {
                entity.HasKey(e => e.Usuario)
                    .IsClustered(false);

                entity.ToTable("USUARIOS");

                entity.HasIndex(e => e.Id, "UQ_USUARIOS_ID")
                    .IsUnique();

                entity.HasIndex(e => e.NormalizedUserName, "UQ_Usuarios_NormalizedUserName")
                    .IsUnique();

                entity.Property(e => e.Usuario)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("USUARIO");

                entity.Property(e => e.AccessFailedCount).HasDefaultValueSql("((0))");

                entity.Property(e => e.Autenticacion)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.BlockAdmin).HasColumnName("BLOCK_ADMIN");

                entity.Property(e => e.BlockLogin).HasColumnName("BLOCK_LOGIN");

                entity.Property(e => e.BlockSchedule).HasColumnName("BLOCK_SCHEDULE");

                entity.Property(e => e.BlockScheduleDate)
                    .HasColumnType("datetime")
                    .HasColumnName("BLOCK_SCHEDULE_DATE");

                entity.Property(e => e.BlockTemp).HasColumnName("BLOCK_TEMP");

                entity.Property(e => e.BloqueoMovimiento).HasColumnName("Bloqueo_Movimiento");

                entity.Property(e => e.BloqueoProgramado).HasColumnName("Bloqueo_programado");

                entity.Property(e => e.BloqueoSevero).HasColumnName("Bloqueo_Severo");

                entity.Property(e => e.Bu)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("BU")
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.Cedula)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("CEDULA");

                entity.Property(e => e.ChReimprimirRc).HasColumnName("ChReimprimirRC");

                entity.Property(e => e.ChkModificarDiasVence).HasDefaultValueSql("((0))");

                entity.Property(e => e.ChkNomodificarCuotas).HasColumnName("ChkNOModificarCuotas");

                entity.Property(e => e.ChkVerContFact)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.ChkVerTodosUser)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Chkmodif)
                    .IsRequired()
                    .HasColumnName("CHKMODIF")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Chkrever)
                    .IsRequired()
                    .HasColumnName("CHKREVER")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.CodigoIdioma)
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('ESPANO')");

                entity.Property(e => e.CuentaCaja)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Direccion)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("DIRECCION");

                entity.Property(e => e.Email)
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasColumnName("EMAIL")
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.EmailConfirmed).HasDefaultValueSql("((0))");

                entity.Property(e => e.FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.FechaInicioBloqueo)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("FechaInicio_Bloqueo");

                entity.Property(e => e.Grupo)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("GRUPO");

                entity.Property(e => e.HostName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Id)
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Impresora)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("IMPRESORA");

                entity.Property(e => e.IpLocal)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.LockoutEnabled).HasDefaultValueSql("((1))");

                entity.Property(e => e.Login)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasComputedColumnSql("([Usuario])", false);

                entity.Property(e => e.Nombre)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("NOMBRE");

                entity.Property(e => e.NormalizedEmail).HasMaxLength(2000);

                entity.Property(e => e.NormalizedUserName).HasMaxLength(512);

                entity.Property(e => e.Pass)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Perfil)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("PERFIL");

                entity.Property(e => e.PhoneNumberConfirmed).HasDefaultValueSql("((0))");

                entity.Property(e => e.PorcIntMora).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.Port)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.PreguntaSecreta)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.RespuestaSecreta)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Rol)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Serie)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')")
                    .IsFixedLength();

                entity.Property(e => e.Telefono)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("TELEFONO");

                entity.Property(e => e.TiempoInactividad).HasColumnType("decimal(18, 0)");

                entity.Property(e => e.TipoUsuarioBu)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("TipoUsuarioBU")
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.TwoFactorEnabled).HasDefaultValueSql("((0))");

                entity.Property(e => e.UrlPhoto).HasMaxLength(500);

                entity.Property(e => e.UserId)
                    .HasMaxLength(900)
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.UserIdCreator)
                    .HasMaxLength(900)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Usolibre)
                    .HasMaxLength(4000)
                    .IsUnicode(false)
                    .HasColumnName("USOLIBRE")
                    .HasDefaultValueSql("(' ')");

                entity.HasOne(d => d.BuNavigation)
                    .WithMany(p => p.Usuario1s)
                    .HasForeignKey(d => d.Bu)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_USUARIOS_BU");
            });

            modelBuilder.Entity<UsuarioAcceso>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("USUARIO_ACCESOS");

                entity.HasIndex(e => e.IdUsuario, "IX_USUARIO_ACCESOS_IDUSUARIO");

                entity.HasIndex(e => e.SpId, "IX_USUARIO_ACCESOS_SPID");

                entity.HasIndex(e => e.Usuario, "IX_USUARIO_ACCESOS_USUARIO");

                entity.Property(e => e.HostName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.IdUsuario).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.IdenUsuarioAccesos)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_usuario_accesos");

                entity.Property(e => e.IpLocal)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.PortLocal)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Usuario)
                    .HasMaxLength(250)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<UsuarioLibroDefault>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Usuario_LibroDefault");

                entity.Property(e => e.IdUsuario)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("idUsuario");

                entity.Property(e => e.IdenLibro)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("iden_libro");

                entity.Property(e => e.IdenUsuarioLibrodefault)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_usuario_librodefault");
            });

            modelBuilder.Entity<UsuarioOtrasOpcione>(entity =>
            {
                entity.HasKey(e => e.Iden)
                    .HasName("PK_USUARIO_OTRASOPCIONES");

                entity.ToTable("Usuario_OtrasOpciones");

                entity.Property(e => e.Iden)
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.CaducaFechaInicial).HasColumnType("smalldatetime");

                entity.Property(e => e.CaducaPeriodoEn)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ExpiraFecha).HasColumnType("smalldatetime");

                entity.Property(e => e.HistorialPassword).IsUnicode(false);

                entity.Property(e => e.Id)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("ID");

                entity.Property(e => e.IdRol).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.LongitudHistorialPassword).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.Tipo)
                    .HasMaxLength(10)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<UsuariosBu>(entity =>
            {
                entity.HasKey(e => new { e.Usuario, e.Bu })
                    .HasName("PK_USUARIOS_BU");

                entity.ToTable("Usuarios_BU");

                entity.Property(e => e.Usuario)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Bu)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("BU");

                entity.Property(e => e.IdenUsuariosBu)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_usuarios_bu");

                entity.HasOne(d => d.BuNavigation)
                    .WithMany(p => p.UsuariosBus)
                    .HasForeignKey(d => d.Bu)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Usuarios_BU_BU");

                entity.HasOne(d => d.UsuarioNavigation)
                    .WithMany(p => p.UsuariosBus)
                    .HasForeignKey(d => d.Usuario)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Usuarios_BU_USUARIOS");
            });

            modelBuilder.Entity<UsuariosEmail>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("UsuariosEmail");

                entity.Property(e => e.IdEmailConfig).HasColumnName("id_email_config");

                entity.Property(e => e.IdUsuario)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("id_usuario");

                entity.Property(e => e.IdenUsuariosemail)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_usuariosemail");

                entity.HasOne(d => d.IdEmailConfigNavigation)
                    .WithMany()
                    .HasForeignKey(d => d.IdEmailConfig)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_UsuariosEmail_ZeusFW_Email_Config");

                entity.HasOne(d => d.IdUsuarioNavigation)
                    .WithMany()
                    .HasPrincipalKey(p => p.Id)
                    .HasForeignKey(d => d.IdUsuario)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_UsuariosEmail_Usuarios");
            });

            modelBuilder.Entity<UsuariosLibro>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Usuarios_Libros");

                entity.Property(e => e.IdenLibro)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("Iden_Libro");

                entity.Property(e => e.IdenUsuariosLibros)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_usuarios_libros");

                entity.Property(e => e.Usuario)
                    .HasMaxLength(250)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<UsuariosModificaFecha>(entity =>
            {
                entity.HasKey(e => new { e.Usuario, e.IdTipDoc })
                    .IsClustered(false);

                entity.ToTable("Usuarios_ModificaFecha");

                entity.Property(e => e.Usuario)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.IdTipDoc)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.IdenUsuariosModificafecha)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_usuarios_modificafecha");

                entity.HasOne(d => d.IdTipDocNavigation)
                    .WithMany(p => p.UsuariosModificaFechas)
                    .HasForeignKey(d => d.IdTipDoc)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Usuarios_ModificaFecha_TIPODCTOS");

                entity.HasOne(d => d.UsuarioNavigation)
                    .WithMany(p => p.UsuariosModificaFechas)
                    .HasForeignKey(d => d.Usuario)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Usuarios_ModificaFecha_USUARIOS");
            });

            modelBuilder.Entity<UsuariosPermisoDcto>(entity =>
            {
                entity.HasKey(e => new { e.Usuario, e.Idfuente })
                    .IsClustered(false);

                entity.ToTable("Usuarios_PermisoDcto");

                entity.Property(e => e.Usuario)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Idfuente)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.IdenUsuariosPermisodcto)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_usuarios_permisodcto");

                entity.HasOne(d => d.IdfuenteNavigation)
                    .WithMany(p => p.UsuariosPermisoDctos)
                    .HasForeignKey(d => d.Idfuente)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Usuarios_PermisoDcto_FUENTES");

                entity.HasOne(d => d.UsuarioNavigation)
                    .WithMany(p => p.UsuariosPermisoDctos)
                    .HasForeignKey(d => d.Usuario)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Usuarios_PermisoDcto_USUARIOS");
            });

            modelBuilder.Entity<UsuariosSesione>(entity =>
            {
                entity.HasKey(e => e.IdenSesion)
                    .HasName("PK_usuarios_sesiones");

                entity.ToTable("Usuarios_Sesiones");

                entity.Property(e => e.IdenSesion)
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("iden_sesion");

                entity.Property(e => e.Fechaingreso)
                    .HasColumnType("datetime")
                    .HasColumnName("fechaingreso");

                entity.Property(e => e.Hostname)
                    .HasMaxLength(128)
                    .HasColumnName("hostname")
                    .IsFixedLength();

                entity.Property(e => e.Hostnameapp)
                    .HasMaxLength(128)
                    .HasColumnName("hostnameapp")
                    .IsFixedLength();

                entity.Property(e => e.Hostprocess)
                    .HasMaxLength(128)
                    .HasColumnName("hostprocess")
                    .IsFixedLength();

                entity.Property(e => e.Hostprocessapp)
                    .HasMaxLength(128)
                    .HasColumnName("hostprocessapp")
                    .IsFixedLength();

                entity.Property(e => e.IdenLibro).HasColumnName("iden_libro");

                entity.Property(e => e.IdenMoneda).HasColumnName("iden_moneda");

                entity.Property(e => e.Idusuario)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("idusuario");

                entity.Property(e => e.Login)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("login");

                entity.Property(e => e.Salidaexitosa).HasColumnName("salidaexitosa");

                entity.Property(e => e.Spid1).HasColumnName("spid1");

                entity.Property(e => e.Spid2).HasColumnName("spid2");

                entity.Property(e => e.TipoMenu)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Zim).HasColumnName("ZIM");
            });

            modelBuilder.Entity<VMpgOppcuota>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vMPG_OPPCuotas");

                entity.Property(e => e.Disminuciones).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.IdenCuota).HasColumnName("Iden_Cuota");

                entity.Property(e => e.IdenDocAsociado).HasColumnName("Iden_DocAsociado");

                entity.Property(e => e.Saldo).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.Satisfecho).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.Valor).HasColumnType("numeric(18, 2)");
            });

            modelBuilder.Entity<Vale>(entity =>
            {
                entity.HasKey(e => e.IdVale);

                entity.HasIndex(e => new { e.IdValera, e.Vale1 }, "IX_VALES_IDVALERA_VALE");

                entity.Property(e => e.IdVale)
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.AuxiliarAnticipo)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')")
                    .IsFixedLength();

                entity.Property(e => e.AuxiliarIngreso)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')")
                    .IsFixedLength();

                entity.Property(e => e.CencoAnticipo)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')")
                    .IsFixedLength();

                entity.Property(e => e.CencoIngreso)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')")
                    .IsFixedLength();

                entity.Property(e => e.Conciliado)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('N')")
                    .IsFixedLength();

                entity.Property(e => e.CuentaAnticipo)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')")
                    .IsFixedLength();

                entity.Property(e => e.CuentaIngreso)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')")
                    .IsFixedLength();

                entity.Property(e => e.DocumentoCausacion)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')")
                    .IsFixedLength();

                entity.Property(e => e.DocumentoCausacionRv)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("DocumentoCausacionRV")
                    .HasDefaultValueSql("(' ')")
                    .IsFixedLength();

                entity.Property(e => e.DocumentoConciliacion)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')")
                    .IsFixedLength();

                entity.Property(e => e.DocumentoConciliacionRv)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("DocumentoConciliacionRV")
                    .HasDefaultValueSql("(' ')")
                    .IsFixedLength();

                entity.Property(e => e.Estado)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')")
                    .IsFixedLength();

                entity.Property(e => e.FechaCausacion)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')")
                    .IsFixedLength();

                entity.Property(e => e.FechaCausacionRv)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("FechaCausacionRV")
                    .HasDefaultValueSql("(' ')")
                    .IsFixedLength();

                entity.Property(e => e.FechaConciliacion)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')")
                    .IsFixedLength();

                entity.Property(e => e.FechaConciliacionRv)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("FechaConciliacionRV")
                    .HasDefaultValueSql("(' ')")
                    .IsFixedLength();

                entity.Property(e => e.FechaImpresion)
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.FechaValidacion)
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.FuenteCausacion)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')")
                    .IsFixedLength();

                entity.Property(e => e.FuenteCausacionRv)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("FuenteCausacionRV")
                    .HasDefaultValueSql("(' ')")
                    .IsFixedLength();

                entity.Property(e => e.FuenteConciliacion)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')")
                    .IsFixedLength();

                entity.Property(e => e.FuenteConciliacionRv)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("FuenteConciliacionRV")
                    .HasDefaultValueSql("(' ')")
                    .IsFixedLength();

                entity.Property(e => e.IdValera).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.Impresion)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('N')")
                    .IsFixedLength();

                entity.Property(e => e.Observaciones)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.ObservacionesAdicionales)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.PrefijoCausacion)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')")
                    .IsFixedLength();

                entity.Property(e => e.UsuarioImpresion)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.UsuarioValidacion)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.Vale1)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("Vale");

                entity.Property(e => e.ValeAnulado).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.ValorDesc).HasColumnType("money");

                entity.Property(e => e.ValorIva).HasColumnType("money");

                entity.Property(e => e.ValorNeto).HasColumnType("money");

                entity.Property(e => e.ValorTotal).HasColumnType("money");

                entity.Property(e => e.Vencimiento)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Verificacion).HasColumnType("numeric(18, 0)");

                entity.HasOne(d => d.CuentaAnticipoNavigation)
                    .WithMany(p => p.ValeCuentaAnticipoNavigations)
                    .HasForeignKey(d => d.CuentaAnticipo)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Vales_MAECONT");

                entity.HasOne(d => d.CuentaIngresoNavigation)
                    .WithMany(p => p.ValeCuentaIngresoNavigations)
                    .HasForeignKey(d => d.CuentaIngreso)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Vales_MAECONT1");

                entity.HasOne(d => d.IdValeraNavigation)
                    .WithMany(p => p.Vales)
                    .HasForeignKey(d => d.IdValera)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Vales_Valeras");
            });

            modelBuilder.Entity<Valera>(entity =>
            {
                entity.HasKey(e => e.IdValera);

                entity.HasIndex(e => new { e.CodCliente, e.Fuente, e.Documento, e.Fecha, e.Prefijo, e.CodValera }, "IX_VALERAS_CODCLIENTE_CODVALERA_DOCUMENTO_FECHA_FUENTE_PREFIJO");

                entity.Property(e => e.IdValera)
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Cantidad).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.CodCliente)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.CodValera)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Descripcion)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.Documento)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Fecha)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.FechaGrabacion)
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Fuente)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.LeyendaValera)
                    .HasMaxLength(188)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.PorcDesc).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.PorcIva).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.Prefijo)
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Usuario)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.ValeInicial).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.ValorDesc).HasColumnType("money");

                entity.Property(e => e.ValorIva).HasColumnType("money");

                entity.Property(e => e.ValorNeto).HasColumnType("money");

                entity.Property(e => e.ValorTotal).HasColumnType("money");

                entity.HasOne(d => d.CodClienteNavigation)
                    .WithMany(p => p.Valeras)
                    .HasForeignKey(d => d.CodCliente)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Valeras_CLIENTES");

                entity.HasOne(d => d.PrefijoNavigation)
                    .WithMany(p => p.Valeras)
                    .HasForeignKey(d => d.Prefijo)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Valeras_Valeras_Prefijos");

                entity.HasOne(d => d.Document)
                    .WithMany(p => p.Valeras)
                    .HasForeignKey(d => new { d.Fuente, d.Documento })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Valeras_DOCUMENT");
            });

            modelBuilder.Entity<ValerasConsecutivo>(entity =>
            {
                entity.ToTable("Valeras_Consecutivos");

                entity.Property(e => e.Id).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.Consecutivo).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.IdenValerasConsecutivos)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_valeras_consecutivos");

                entity.Property(e => e.Nombre)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ValerasErrore>(entity =>
            {
                entity.HasKey(e => e.Numero);

                entity.ToTable("Valeras_Errores");

                entity.Property(e => e.Numero).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.Descripcion)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.IdenValerasErrores)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_valeras_errores");

                entity.Property(e => e.Modulo)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");
            });

            modelBuilder.Entity<ValerasFpfactura>(entity =>
            {
                entity.HasKey(e => e.IdValerasFp);

                entity.ToTable("Valeras_FPFactura");

                entity.Property(e => e.IdValerasFp).HasColumnName("IdValerasFP");

                entity.Property(e => e.ConsecutivoVale).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.Documento)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')")
                    .IsFixedLength();

                entity.Property(e => e.Estado)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('AC')")
                    .IsFixedLength();

                entity.Property(e => e.Fuente)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')")
                    .IsFixedLength();

                entity.Property(e => e.Vale)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.Valor).HasColumnType("money");
            });

            modelBuilder.Entity<ValerasPrefijo>(entity =>
            {
                entity.HasKey(e => e.Codigo);

                entity.ToTable("Valeras_Prefijos");

                entity.Property(e => e.Codigo)
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Auxiliar)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')")
                    .IsFixedLength();

                entity.Property(e => e.Cuenta)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')")
                    .IsFixedLength();

                entity.Property(e => e.CxP)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')")
                    .IsFixedLength();

                entity.Property(e => e.Descripcion)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.IdenValerasPrefijos)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_valeras_prefijos");

                entity.Property(e => e.IndPrefijo)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('L')")
                    .IsFixedLength();

                entity.Property(e => e.Proveedor)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.Tvigencia).HasColumnName("TVigencia");
            });

            modelBuilder.Entity<ValesLog>(entity =>
            {
                entity.HasKey(e => e.IdValesLog);

                entity.ToTable("Vales_Log");

                entity.HasIndex(e => new { e.IdVale, e.Vale }, "IX_VALES_LOG_IDVALE_VALE");

                entity.Property(e => e.IdValesLog)
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("IdVales_Log");

                entity.Property(e => e.Descripcion)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.DocumentoCausacion)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')")
                    .IsFixedLength();

                entity.Property(e => e.DocumentoConciliacion)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')")
                    .IsFixedLength();

                entity.Property(e => e.EstadoActual)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')")
                    .IsFixedLength();

                entity.Property(e => e.EstadoOriginal)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')")
                    .IsFixedLength();

                entity.Property(e => e.FechaCausacion)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')")
                    .IsFixedLength();

                entity.Property(e => e.FechaConciliacion)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')")
                    .IsFixedLength();

                entity.Property(e => e.FechaGrabacion)
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.FuenteCausacion)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')")
                    .IsFixedLength();

                entity.Property(e => e.FuenteConciliacion)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')")
                    .IsFixedLength();

                entity.Property(e => e.IdVale).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.Observaciones)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.ObservacionesAdicionales)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.Usuario)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.Vale).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.Vencimiento)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdValeNavigation)
                    .WithMany(p => p.ValesLogs)
                    .HasForeignKey(d => d.IdVale)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Vales_Log_Vales");
            });

            modelBuilder.Entity<VariableBuscadorGenerico>(entity =>
            {
                entity.HasKey(e => e.Codigo);

                entity.ToTable("VariableBuscadorGenerico");

                entity.HasIndex(e => e.Codigo, "IX_VARIABLEBUSCADORGENERICO_CODIGO")
                    .IsUnique();

                entity.HasIndex(e => e.Iden, "UQ_VARIABLEBUSCADORGENERICO_IDEN")
                    .IsUnique();

                entity.Property(e => e.Codigo).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.Iden)
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("IDEN");

                entity.Property(e => e.Nombre)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Opcional0)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Opcional1)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Opcional2)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Opcional3)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Opcional4)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Opcional5)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Opcional6)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Opcional7)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Opcional8)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Opcional9)
                    .HasMaxLength(255)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VariableBuscadorGenericoDato>(entity =>
            {
                entity.HasKey(e => e.Iden)
                    .HasName("PK_VARIABLEBUSCADORGENERICODATOS");

                entity.Property(e => e.Iden)
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("IDEN");

                entity.Property(e => e.Codigo)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Nombre)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Opcional0)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Opcional1)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Opcional2)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Opcional3)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Opcional4)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Opcional5)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Opcional6)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Opcional7)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Opcional8)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Opcional9)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.TipoBuscador).HasColumnType("numeric(18, 0)");

                entity.HasOne(d => d.TipoBuscadorNavigation)
                    .WithMany(p => p.VariableBuscadorGenericoDatos)
                    .HasForeignKey(d => d.TipoBuscador)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_VariableDatosBuscadorGenerico_VariableBuscadorGenerico");
            });

            modelBuilder.Entity<VariableDatosConstante>(entity =>
            {
                entity.HasKey(e => e.IdenVariable)
                    .HasName("PK_VARIABLEDATOSCONSTANTE");

                entity.ToTable("VariableDatosConstante");

                entity.Property(e => e.IdenVariable)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("IDEN_Variable");

                entity.Property(e => e.IdenVariabledatosconstante)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_variabledatosconstante");

                entity.Property(e => e.ValorFecha).HasColumnType("smalldatetime");

                entity.Property(e => e.ValorNumerico).HasColumnType("numeric(18, 6)");

                entity.Property(e => e.ValorVarchar)
                    .HasMaxLength(8000)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VariableDatosMaestro>(entity =>
            {
                entity.HasKey(e => new { e.IdenMaestro, e.IdenVariable, e.CodigoMaestro })
                    .HasName("PK_VARIABLEDATOSMAESTRO")
                    .IsClustered(false);

                entity.ToTable("VariableDatosMaestro");

                entity.HasIndex(e => e.CodigoMaestro, "IX_VARIABLEDATOSMAESTRO_CODIGOMAESTRO");

                entity.HasIndex(e => e.IdenMaestro, "IX_VARIABLEDATOSMAESTRO_IDEN_MAESTRO");

                entity.HasIndex(e => e.IdenVariable, "IX_VARIABLEDATOSMAESTRO_IDEN_VARIABLE");

                entity.Property(e => e.IdenMaestro)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("IDEN_Maestro");

                entity.Property(e => e.IdenVariable)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("IDEN_Variable");

                entity.Property(e => e.CodigoMaestro)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.IdenVariabledatosmaestro)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_variabledatosmaestro");

                entity.Property(e => e.ValorFecha).HasColumnType("smalldatetime");

                entity.Property(e => e.ValorNumerico).HasColumnType("numeric(18, 6)");

                entity.Property(e => e.ValorVarchar)
                    .HasMaxLength(8000)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdenMaestroNavigation)
                    .WithMany(p => p.VariableDatosMaestros)
                    .HasForeignKey(d => d.IdenMaestro)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_VariableDatosMaestro_VariableDefinicionMaestro");

                entity.HasOne(d => d.IdenVariableNavigation)
                    .WithMany(p => p.VariableDatosMaestros)
                    .HasForeignKey(d => d.IdenVariable)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_VariableDatosMaestro_VariableDefinicion");
            });

            modelBuilder.Entity<VariableDatosMaestroPeriodo>(entity =>
            {
                entity.HasKey(e => new { e.IdenMaestro, e.IdenVariable, e.Fecha, e.CodigoMaestro })
                    .IsClustered(false);

                entity.ToTable("VariableDatosMaestroPeriodo");

                entity.HasIndex(e => e.IdenMaestro, "IX_VARIABLEDATOSMAESTROPERIODO_IDEN_MAESTRO");

                entity.HasIndex(e => e.IdenVariable, "IX_VARIABLEDATOSMAESTROPERIODO_IDEN_VARIABLE");

                entity.Property(e => e.IdenMaestro)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("IDEN_Maestro");

                entity.Property(e => e.IdenVariable)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("IDEN_Variable");

                entity.Property(e => e.Fecha).HasColumnType("smalldatetime");

                entity.Property(e => e.CodigoMaestro)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.IdenVariabledatosmaestroperiodo)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_variabledatosmaestroperiodo");

                entity.Property(e => e.ValorFecha).HasColumnType("smalldatetime");

                entity.Property(e => e.ValorNumerico).HasColumnType("numeric(18, 6)");

                entity.Property(e => e.ValorVarchar)
                    .HasMaxLength(8000)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdenMaestroNavigation)
                    .WithMany(p => p.VariableDatosMaestroPeriodos)
                    .HasForeignKey(d => d.IdenMaestro)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_VariableDatosMaestroPeriodo_VariableDefinicionMaestro");

                entity.HasOne(d => d.IdenVariableNavigation)
                    .WithMany(p => p.VariableDatosMaestroPeriodos)
                    .HasForeignKey(d => d.IdenVariable)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_VariableDatosMaestroPeriodo_VariableDefinicion");
            });

            modelBuilder.Entity<VariableDatosTransaccion>(entity =>
            {
                entity.HasKey(e => new { e.IdenMaestro, e.IdenVariable, e.ConsecutivoTrans, e.CodigoMaestro, e.CampoLibre });

                entity.ToTable("VariableDatosTransaccion");

                entity.HasIndex(e => e.IdenMaestro, "IX_VARIABLEDATOSTRANSACCION_IDEN_MAESTRO");

                entity.HasIndex(e => e.IdenVariable, "IX_VARIABLEDATOSTRANSACCION_IDEN_VARIABLE");

                entity.Property(e => e.IdenMaestro)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("IDEN_Maestro");

                entity.Property(e => e.IdenVariable)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("IDEN_Variable");

                entity.Property(e => e.ConsecutivoTrans).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.CodigoMaestro)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.CampoLibre)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.IdenVariabledatostransaccion)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_variabledatostransaccion");

                entity.Property(e => e.SpId).HasDefaultValueSql("((0))");

                entity.Property(e => e.ValorFecha).HasColumnType("smalldatetime");

                entity.Property(e => e.ValorNumerico).HasColumnType("numeric(18, 6)");

                entity.Property(e => e.ValorVarchar)
                    .HasMaxLength(8000)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdenMaestroNavigation)
                    .WithMany(p => p.VariableDatosTransaccions)
                    .HasForeignKey(d => d.IdenMaestro)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_VariableDatosTransaccion_VariableDefinicionMaestro");

                entity.HasOne(d => d.IdenVariableNavigation)
                    .WithMany(p => p.VariableDatosTransaccions)
                    .HasForeignKey(d => d.IdenVariable)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_VariableDatosTransaccion_VariableDefinicion");
            });

            modelBuilder.Entity<VariableDefinicion>(entity =>
            {
                entity.HasKey(e => e.Iden)
                    .IsClustered(false);

                entity.ToTable("VariableDefinicion");

                entity.HasIndex(e => e.Iden, "IX_VARIABLEDEFINICION_IDEN")
                    .IsUnique()
                    .IsClustered();

                entity.HasIndex(e => e.Nombre, "UQ_VARIABLEDEFINICION_NOMBRE")
                    .IsUnique();

                entity.Property(e => e.Iden)
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("IDEN");

                entity.Property(e => e.DefaultFecha).HasColumnType("smalldatetime");

                entity.Property(e => e.DefaultNumerico).HasColumnType("numeric(18, 6)");

                entity.Property(e => e.DefaultVarchar)
                    .HasMaxLength(8000)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Descripcion)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.FechaCreacion)
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.FormulaDefault)
                    .HasMaxLength(4000)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Formulada).HasDefaultValueSql("((0))");

                entity.Property(e => e.HefestoDefaultFormulaFormat).HasColumnName("Hefesto_Default_Formula_Format");

                entity.Property(e => e.HefestoIdF4).HasColumnName("Hefesto_Id_F4");

                entity.Property(e => e.HefestoOrderFormulaGlobal).HasColumnName("Hefesto_Order_Formula_Global");

                entity.Property(e => e.IdenTipoVariable).HasColumnName("IDEN_TipoVariable");

                entity.Property(e => e.ListaPosibilidades)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Nombre)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.OpcionalAyuda)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Presentacion)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Presicion).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.RangoF)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.RangoI)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.RequeridoCero).HasDefaultValueSql("((0))");

                entity.Property(e => e.SeccionAyuda)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.SentenciaSql)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("SentenciaSQL")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Tamano).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.TipoDato)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.TipoVariable)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.HasOne(d => d.IdenTipoVariableNavigation)
                    .WithMany(p => p.VariableDefinicions)
                    .HasForeignKey(d => d.IdenTipoVariable)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_VariableDefinicion_VariableTipoVariable");
            });

            modelBuilder.Entity<VariableDefinicionFuncione>(entity =>
            {
                entity.HasKey(e => e.Nombre)
                    .HasName("PK_VARIABLEDEFINICIONFUNCIONES")
                    .IsClustered(false);

                entity.HasIndex(e => e.Iden, "IX_VARIABLEDEFINICIONFUNCIONES_IDEN")
                    .IsUnique()
                    .IsClustered();

                entity.Property(e => e.Nombre)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Descripcion)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.FormulaDefinida)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Iden)
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("IDEN");

                entity.Property(e => e.Presentacion)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ValorDefault)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");
            });

            modelBuilder.Entity<VariableDefinicionMaestro>(entity =>
            {
                entity.HasKey(e => e.Iden);

                entity.ToTable("VariableDefinicionMaestro");

                entity.HasIndex(e => new { e.IdenTipoVariable, e.IdenTipoTransaccion, e.Codigo }, "IX_VARIABLEDEFINICIONMAESTRO_CODIGO_IDEN_TIPOTRANSACCION_IDEN_TIPOVARIABLE")
                    .IsUnique();

                entity.HasIndex(e => e.IdenTipoTransaccion, "IX_VARIABLEDEFINICIONMAESTRO_IDEN_TIPOTRANSACCION");

                entity.HasIndex(e => e.IdenTipoVariable, "IX_VARIABLEDEFINICIONMAESTRO_IDEN_TIPOVARIABLE");

                entity.Property(e => e.Iden)
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("IDEN");

                entity.Property(e => e.CampoBusqueda)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Codigo)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Descripcion)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.GrupoFormulacion)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.IdenTipoTransaccion).HasColumnName("IDEN_TipoTransaccion");

                entity.Property(e => e.IdenTipoVariable)
                    .HasColumnName("IDEN_TipoVariable")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Nombre)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.SpBrIni)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Tabla)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Ventana)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.HasOne(d => d.IdenTipoTransaccionNavigation)
                    .WithMany(p => p.VariableDefinicionMaestros)
                    .HasForeignKey(d => d.IdenTipoTransaccion)
                    .HasConstraintName("FK_VariableDefinicionMaestro_VariableTipoTransaccion");
            });

            modelBuilder.Entity<VariableEstructuraControl>(entity =>
            {
                entity.HasKey(e => e.Iden);

                entity.ToTable("VariableEstructuraControl");

                entity.HasIndex(e => new { e.IdenMaestro, e.IdenVariable, e.Constante, e.NombreControl }, "IX_VARIABLEESTRUCTURACONTROL_CONSTANTE_IDEN_MAESTRO_IDEN_VARIABLE_NOMBRECONTROL");

                entity.Property(e => e.Iden)
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("IDEN");

                entity.Property(e => e.Constante).HasDefaultValueSql("((0))");

                entity.Property(e => e.Contenedor)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ContenedorTab).HasDefaultValueSql("((0))");

                entity.Property(e => e.FormatoFecha)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.IdenMaestro)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("IDEN_Maestro");

                entity.Property(e => e.IdenVariable)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("IDEN_Variable");

                entity.Property(e => e.NombreControl)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.TabDefault).HasDefaultValueSql("((0))");

                entity.Property(e => e.TabName0)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.TabName1)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.TabName2)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.TabName3)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.TabName4)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.TabName5)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.TabOrientation).HasDefaultValueSql("((0))");

                entity.Property(e => e.TabStyle).HasDefaultValueSql("((0))");

                entity.Property(e => e.TabsPerRow).HasDefaultValueSql("((0))");

                entity.Property(e => e.TipoControl)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Titulo)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.TitulosTabs)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ToolTipText)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Xdes).HasColumnName("XDes");

                entity.Property(e => e.Xtitulo).HasColumnName("XTitulo");

                entity.Property(e => e.Ydes).HasColumnName("YDes");

                entity.Property(e => e.Ytitulo).HasColumnName("YTitulo");

                entity.HasOne(d => d.IdenVariableNavigation)
                    .WithMany(p => p.VariableEstructuraControls)
                    .HasForeignKey(d => d.IdenVariable)
                    .HasConstraintName("FK_VariableEstructuraControl_VariableDefinicion");
            });

            modelBuilder.Entity<VariableEstructuraVentana>(entity =>
            {
                entity.HasKey(e => e.Iden);

                entity.ToTable("VariableEstructuraVentana");

                entity.Property(e => e.Iden)
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("IDEN");

                entity.Property(e => e.ColorFondo)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.IdenMaestro)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("IDEN_Maestro");

                entity.Property(e => e.Titulo)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdenMaestroNavigation)
                    .WithMany(p => p.VariableEstructuraVentanas)
                    .HasForeignKey(d => d.IdenMaestro)
                    .HasConstraintName("FK_VariableEstructuraVentana_VariableDefinicionMaestro");
            });

            modelBuilder.Entity<VariableMaestro>(entity =>
            {
                entity.HasKey(e => new { e.IdenMaestro, e.IdenVariable })
                    .HasName("PK_VARIABLEMAESTRO")
                    .IsClustered(false);

                entity.ToTable("VariableMaestro");

                entity.Property(e => e.IdenMaestro)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("IDEN_Maestro");

                entity.Property(e => e.IdenVariable)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("IDEN_Variable");

                entity.Property(e => e.Formula)
                    .HasMaxLength(4000)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.HefestoCompoundValue)
                    .HasColumnName("Hefesto_Compound_Value")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.HefestoDefaultFormulaFormat).HasColumnName("Hefesto_Default_Formula_Format");

                entity.Property(e => e.HefestoIsRequired)
                    .HasColumnName("Hefesto_Is_Required")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.HefestoUniqueValue)
                    .HasColumnName("Hefesto_Unique_Value")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.IdenVariablemaestro)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_variablemaestro");

                entity.Property(e => e.OrdenEvaluacion).HasDefaultValueSql("((0))");

                entity.HasOne(d => d.IdenMaestroNavigation)
                    .WithMany(p => p.VariableMaestros)
                    .HasForeignKey(d => d.IdenMaestro)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_VariableMaestro_VariableDefinicionMaestro");

                entity.HasOne(d => d.IdenVariableNavigation)
                    .WithMany(p => p.VariableMaestros)
                    .HasForeignKey(d => d.IdenVariable)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_VariableMaestro_VariableDefinicion");
            });

            modelBuilder.Entity<VariableRole>(entity =>
            {
                entity.HasKey(e => e.Iden);

                entity.Property(e => e.Codigo)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Nombre)
                    .HasMaxLength(500)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VariableRollOperacion>(entity =>
            {
                entity.HasKey(e => new { e.IdenRoll, e.IdenMaestro, e.IdenVariable });

                entity.ToTable("VariableRollOperacion");

                entity.Property(e => e.IdenRoll).HasColumnName("Iden_Roll");

                entity.Property(e => e.IdenMaestro)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("Iden_Maestro");

                entity.Property(e => e.IdenVariable)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("Iden_Variable");

                entity.Property(e => e.IdenVariablerolloperacion)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_variablerolloperacion");

                entity.HasOne(d => d.IdenMaestroNavigation)
                    .WithMany(p => p.VariableRollOperacions)
                    .HasForeignKey(d => d.IdenMaestro)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_VariableRollOperacion_VariableDefinicionMaestro");

                entity.HasOne(d => d.IdenRollNavigation)
                    .WithMany(p => p.VariableRollOperacions)
                    .HasForeignKey(d => d.IdenRoll)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_VariableRollOperacion_VariableRoles");

                entity.HasOne(d => d.IdenVariableNavigation)
                    .WithMany(p => p.VariableRollOperacions)
                    .HasForeignKey(d => d.IdenVariable)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_VariableRollOperacion_VariableDefinicion");
            });

            modelBuilder.Entity<VariableTipoTransaccion>(entity =>
            {
                entity.HasKey(e => e.Iden);

                entity.ToTable("VariableTipoTransaccion");

                entity.Property(e => e.Iden)
                    .ValueGeneratedNever()
                    .HasColumnName("IDEN");

                entity.Property(e => e.GrupoFormulacion)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.IdenVariabletipotransaccion)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_variabletipotransaccion");

                entity.Property(e => e.Nombre)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.SentenciaSql)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("SentenciaSQL");

                entity.Property(e => e.Tamano).HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<VariableTipoVariable>(entity =>
            {
                entity.HasKey(e => e.Iden);

                entity.ToTable("VariableTipoVariable");

                entity.Property(e => e.Iden)
                    .ValueGeneratedNever()
                    .HasColumnName("IDEN");

                entity.Property(e => e.CampoConsecutivo)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.CampoLlave)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.IdenVariabletipovariable)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_variabletipovariable");

                entity.Property(e => e.Nombre)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.SentenciaSql)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("SentenciaSQL");

                entity.Property(e => e.Tabla)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");
            });

            modelBuilder.Entity<VariableUsuarioAcceso>(entity =>
            {
                entity.HasKey(e => e.SpId);

                entity.Property(e => e.SpId).ValueGeneratedNever();

                entity.Property(e => e.Aplicacion)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.HostName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.IdenRoll).HasColumnName("Iden_Roll");

                entity.Property(e => e.IdenVariableusuarioaccesos)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_variableusuarioaccesos");

                entity.Property(e => e.IpLocal)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Login)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.PortLocal)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdenRollNavigation)
                    .WithMany(p => p.VariableUsuarioAccesos)
                    .HasForeignKey(d => d.IdenRoll)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_VariableUsuarioAccesos_VariableRoles");
            });

            modelBuilder.Entity<VariablesEstadistica>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Variables_Estadisticas");

                entity.Property(e => e.Comentario).HasMaxLength(1000);

                entity.Property(e => e.Concepto).HasMaxLength(255);

                entity.Property(e => e.Grupo).HasMaxLength(255);

                entity.Property(e => e.Id)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ID");

                entity.Property(e => e.IdenVariablesEstadisticas)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_variables_estadisticas");

                entity.Property(e => e.Identificacion1).HasMaxLength(255);

                entity.Property(e => e.Identificacion2).HasMaxLength(255);

                entity.Property(e => e.Identificacion3).HasMaxLength(255);

                entity.Property(e => e.Identificacion4).HasMaxLength(255);

                entity.Property(e => e.Identificacion5).HasMaxLength(255);

                entity.Property(e => e.Idvariable)
                    .HasMaxLength(255)
                    .HasColumnName("IDVariable");

                entity.Property(e => e.IndResultado).HasMaxLength(255);

                entity.Property(e => e.No).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.Oper)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.OrdendelGrupo).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.Sp)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Tabla1).HasMaxLength(255);

                entity.Property(e => e.Tabla2).HasMaxLength(255);

                entity.Property(e => e.Tabla3).HasMaxLength(255);

                entity.Property(e => e.Tabla4).HasMaxLength(255);

                entity.Property(e => e.Tabla5).HasMaxLength(255);
            });

            modelBuilder.Entity<VfacturasProgramacion>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VFacturas_Programacion");

                entity.Property(e => e.Bu)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("BU");

                entity.Property(e => e.Codicta)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("CODICTA")
                    .IsFixedLength();

                entity.Property(e => e.Idcliprv)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("IDCLIPRV");

                entity.Property(e => e.Numefac)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("NUMEFAC");

                entity.Property(e => e.Refefac)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("REFEFAC");

                entity.Property(e => e.Tipofact)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("TIPOFACT")
                    .IsFixedLength();

                entity.Property(e => e.ValorMoneda).HasColumnType("money");

                entity.Property(e => e.Valprog).HasColumnType("money");

                entity.Property(e => e.Vencfac)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("VENCFAC")
                    .IsFixedLength();
            });

            modelBuilder.Entity<VisEscenariosDocumentosLinea>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("visEscenarios_Documentos_Lineas");

                entity.Property(e => e.Ciudad).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.Codigo1)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Codigo2)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.CuentaMovimiento)
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.Detalle)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.EscenariosEscenarioIden)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("Escenarios_Escenario_Iden");

                entity.Property(e => e.EscenariosImpuestosIden1)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("Escenarios_Impuestos_Iden1");

                entity.Property(e => e.EscenariosImpuestosIden2)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("Escenarios_Impuestos_Iden2");

                entity.Property(e => e.EscenariosImpuestosIden3)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("Escenarios_Impuestos_Iden3");

                entity.Property(e => e.EscenariosImpuestosIden4)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("Escenarios_Impuestos_Iden4");

                entity.Property(e => e.EscenariosImpuestosIden5)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("Escenarios_Impuestos_Iden5");

                entity.Property(e => e.EscenariosSubCategoriaEfecCompraIden)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("Escenarios_SubCategoriaEfecCompra_Iden");

                entity.Property(e => e.EscenariosTributarioConsumoIden)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("Escenarios_TributarioConsumo_Iden");

                entity.Property(e => e.EscenariosTributarioIcatIden)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("Escenarios_TributarioICAT_Iden");

                entity.Property(e => e.EscenariosTributarioRentaIden)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("Escenarios_TributarioRenta_Iden");

                entity.Property(e => e.Linea)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.PorcentajeInc)
                    .HasColumnType("numeric(18, 4)")
                    .HasColumnName("PorcentajeINC");

                entity.Property(e => e.PorcentajeIva)
                    .HasColumnType("numeric(18, 4)")
                    .HasColumnName("PorcentajeIVA");

                entity.Property(e => e.TipoLinea)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.TotalBrutoMoneda).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.ValorImpuesto1).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.ValorImpuesto2).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.ValorImpuesto3).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.ValorImpuesto4).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.ValorImpuesto5).HasColumnType("numeric(18, 2)");
            });

            modelBuilder.Entity<VisEscenariosMovimiento>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("visEscenarios_Movimientos");

                entity.Property(e => e.CategoriaTributaria)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CategoriaTributariaNombre)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.Ciudad)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CiudadIden).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.CiudadNombre)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Codigo1)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Codigo2)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.ConceptoRetencion)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Detalle)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Documento)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.DocumentosTotalBruto)
                    .HasColumnType("numeric(18, 2)")
                    .HasColumnName("Documentos_TotalBruto");

                entity.Property(e => e.DocumentosTotalInc)
                    .HasColumnType("numeric(18, 2)")
                    .HasColumnName("Documentos_TotalINC");

                entity.Property(e => e.DocumentosTotalIva)
                    .HasColumnType("numeric(18, 2)")
                    .HasColumnName("Documentos_TotalIVA");

                entity.Property(e => e.DocumentosTotalRetencion)
                    .HasColumnType("numeric(18, 2)")
                    .HasColumnName("Documentos_TotalRetencion");

                entity.Property(e => e.Escenario)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.EscenarioNombre)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Fecha).HasColumnType("smalldatetime");

                entity.Property(e => e.Fuente)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.Impuesto)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ImpuestoNombre)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.ImpuestoRetencion)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.ImpuestoRetencionBase)
                    .HasColumnType("numeric(18, 2)")
                    .HasColumnName("ImpuestoRetencion_Base");

                entity.Property(e => e.ImpuestoRetencionCuenta)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("ImpuestoRetencion_Cuenta");

                entity.Property(e => e.ImpuestoRetencionValor)
                    .HasColumnType("numeric(18, 2)")
                    .HasColumnName("ImpuestoRetencion_Valor");

                entity.Property(e => e.Iva1Iva2)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Linea)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.LineaCuentaMovimiento)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("Linea_CuentaMovimiento");

                entity.Property(e => e.LineaTotalInc)
                    .HasColumnType("numeric(18, 2)")
                    .HasColumnName("Linea_TotalINC");

                entity.Property(e => e.LineaTotalIva)
                    .HasColumnType("numeric(18, 2)")
                    .HasColumnName("Linea_TotalIVA");

                entity.Property(e => e.LineaTotalRetencion)
                    .HasColumnType("numeric(18, 2)")
                    .HasColumnName("Linea_TotalRetencion");

                entity.Property(e => e.Modulo)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Moneda)
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.MonedaNombre)
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.Pais)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.PaisNombre)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Porcentaje).HasColumnType("numeric(18, 6)");

                entity.Property(e => e.PorcentajeInc)
                    .HasColumnType("numeric(18, 4)")
                    .HasColumnName("PorcentajeINC");

                entity.Property(e => e.PorcentajeIva)
                    .HasColumnType("numeric(18, 4)")
                    .HasColumnName("PorcentajeIVA");

                entity.Property(e => e.Retencion)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RetencionNombre)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.SubCategoriaEfecCompra)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.SubCategoriaEfecCompraNombre)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.SubLinea)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.TasaCambio).HasColumnType("numeric(18, 6)");

                entity.Property(e => e.Tercero)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.TerceroNombre)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.TipoImpuesto)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.TipoOperacion)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.TipoTasa)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.TributarioConsumo)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.TributarioConsumoNombre)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.TributarioIcat)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("TributarioICAT");

                entity.Property(e => e.TributarioIcatnombre)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("TributarioICATNombre");

                entity.Property(e => e.TributarioRenta)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.TributarioRentaNombre)
                    .HasMaxLength(200)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VtransacXa>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VtransacXA");

                entity.Property(e => e.Adicional1)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Adicional_1");

                entity.Property(e => e.Adicional2)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Adicional_2");

                entity.Property(e => e.Anotra)
                    .HasMaxLength(7)
                    .IsUnicode(false)
                    .HasColumnName("ANOTRA");

                entity.Property(e => e.Autorizacion)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("AUTORIZACION");

                entity.Property(e => e.Auxiaux)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("AUXIAUX")
                    .IsFixedLength();

                entity.Property(e => e.BaseComision).HasColumnType("money");

                entity.Property(e => e.Baseretetra)
                    .HasColumnType("money")
                    .HasColumnName("BASERETETRA");

                entity.Property(e => e.Bu)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("BU");

                entity.Property(e => e.Cliprv)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("CLIPRV");

                entity.Property(e => e.Codicta)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("CODICTA")
                    .IsFixedLength();

                entity.Property(e => e.CodigoPropiedad1)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.CodigoPropiedad2)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.CodigoPropiedad3)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.CodigoPropiedad4)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.CodigoPropiedad5)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Codpresu)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("CODPRESU")
                    .IsFixedLength();

                entity.Property(e => e.Conciltra)
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .HasColumnName("CONCILTRA")
                    .IsFixedLength();

                entity.Property(e => e.Consecurev).HasColumnName("CONSECUREV");

                entity.Property(e => e.Consecutra)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("CONSECUTRA");

                entity.Property(e => e.Descritra)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("DESCRITRA");

                entity.Property(e => e.FactMovimientoOriginal).HasColumnName("fact_movimiento_original");

                entity.Property(e => e.FechaCaducidad)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Fechafact)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("FECHAFACT")
                    .IsFixedLength();

                entity.Property(e => e.Fechatra)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("FECHATRA")
                    .IsFixedLength();

                entity.Property(e => e.Fgratra)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("FGRATRA");

                entity.Property(e => e.GenEsquemaTran)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.IdAplicacionesOrigen).HasColumnName("Id_AplicacionesOrigen");

                entity.Property(e => e.IdAplicacionesZeus).HasColumnName("Id_AplicacionesZeus");

                entity.Property(e => e.IdMovimiento)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("Id_Movimiento");

                entity.Property(e => e.IdOrigenMovimiento).HasColumnName("Id_OrigenMovimiento");

                entity.Property(e => e.Idbanco)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("IDBANCO")
                    .IsFixedLength();

                entity.Property(e => e.Idcenco)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("IDCENCO")
                    .IsFixedLength();

                entity.Property(e => e.IdenEsquemaTransaccion)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("Iden_EsquemaTransaccion");

                entity.Property(e => e.Idfuente)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("IDFUENTE")
                    .IsFixedLength();

                entity.Property(e => e.Iditem)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("IDITEM");

                entity.Property(e => e.Idplaza)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("IDPLAZA")
                    .IsFixedLength();

                entity.Property(e => e.Idusuario)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("IDUSUARIO");

                entity.Property(e => e.Idvende)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("IDVENDE")
                    .IsFixedLength();

                entity.Property(e => e.Idzona)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("IDZONA")
                    .IsFixedLength();

                entity.Property(e => e.Indcpitra)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("INDCPITRA")
                    .IsFixedLength();

                entity.Property(e => e.LineaImpuesto)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Ncf)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("NCF");

                entity.Property(e => e.NcfModificado)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("NCF_Modificado");

                entity.Property(e => e.Nittra)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("NITTRA");

                entity.Property(e => e.Nreserva)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("NRESERVA")
                    .IsFixedLength();

                entity.Property(e => e.Numdoctra)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("NUMDOCTRA")
                    .IsFixedLength();

                entity.Property(e => e.Numefac)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("NUMEFAC");

                entity.Property(e => e.Porretetra)
                    .HasColumnType("numeric(18, 4)")
                    .HasColumnName("PORRETETRA");

                entity.Property(e => e.Refefac)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("REFEFAC");

                entity.Property(e => e.Serie)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("SERIE");

                entity.Property(e => e.Statustra)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("STATUSTRA")
                    .IsFixedLength();

                entity.Property(e => e.SubLineaImpuesto)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.TasaCambio).HasColumnType("money");

                entity.Property(e => e.Tasacambio1)
                    .HasColumnType("money")
                    .HasColumnName("TASACAMBIO1");

                entity.Property(e => e.Tasacambio2)
                    .HasColumnType("money")
                    .HasColumnName("TASACAMBIO2");

                entity.Property(e => e.Tipofac)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("TIPOFAC")
                    .IsFixedLength();

                entity.Property(e => e.Valormoneda)
                    .HasColumnType("money")
                    .HasColumnName("VALORMONEDA");

                entity.Property(e => e.Valormoneda1)
                    .HasColumnType("money")
                    .HasColumnName("VALORMONEDA1");

                entity.Property(e => e.Valormoneda2)
                    .HasColumnType("money")
                    .HasColumnName("VALORMONEDA2");

                entity.Property(e => e.Valortra)
                    .HasColumnType("money")
                    .HasColumnName("VALORTRA");

                entity.Property(e => e.Vencefac)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("VENCEFAC")
                    .IsFixedLength();

                entity.Property(e => e.VersionDeLaFila)
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.Voucher)
                    .HasMaxLength(25)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VwAsignacionArchivoFisicoDocumento>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vwAsignacionArchivoFisicoDocumento");

                entity.Property(e => e.Cliente)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.CodigoArchivoFisico)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Cuenta)
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.Documento)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Fuente)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.NumeroFactura)
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.Proveedor)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.ReferenciaFactura)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.TipoFactura)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.VencimientoFactura)
                    .HasMaxLength(10)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VwBienesServicio>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vwBienesServicios");

                entity.Property(e => e.Codigo)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.FechaFin)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.FechaIni)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Iden).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.Nombre)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.PorcImporte).HasColumnType("numeric(5, 2)");
            });

            modelBuilder.Entity<VwFacturasCliente>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vwFacturasClientes");

                entity.Property(e => e.AnnoMes)
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.AnnoMesLetra).HasMaxLength(7);

                entity.Property(e => e.AnnoMesLetraVencimiento).HasMaxLength(7);

                entity.Property(e => e.AnnoMesVencimiento)
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.AnoVencimiento)
                    .HasMaxLength(4)
                    .IsUnicode(false);

                entity.Property(e => e.Cliente)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Cuenta)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.DiaDelAnno).HasMaxLength(30);

                entity.Property(e => e.DiaDelAnnoVencimiento).HasMaxLength(30);

                entity.Property(e => e.DtFecha)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("dt_Fecha");

                entity.Property(e => e.DtFechaVencimiento)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("dt_FechaVencimiento");

                entity.Property(e => e.FechaLetras).HasMaxLength(39);

                entity.Property(e => e.FechaLetrasVencimiento).HasMaxLength(39);

                entity.Property(e => e.Idregistro).HasColumnName("IDRegistro");

                entity.Property(e => e.MesVencimiento)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.NombreCliente)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.NombreCuenta)
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.NombreDia).HasMaxLength(1);

                entity.Property(e => e.NombreDiaCorto).HasMaxLength(3);

                entity.Property(e => e.NombreDiaCortoVencimiento).HasMaxLength(3);

                entity.Property(e => e.NombreDiaLargo).HasMaxLength(30);

                entity.Property(e => e.NombreDiaLargoVencimiento).HasMaxLength(30);

                entity.Property(e => e.NombreDiaVencimiento).HasMaxLength(1);

                entity.Property(e => e.NombreMes).HasMaxLength(30);

                entity.Property(e => e.NombreMesCorto).HasMaxLength(3);

                entity.Property(e => e.NombreMesCortoVencimiento).HasMaxLength(3);

                entity.Property(e => e.NombreMesVencimiento).HasMaxLength(30);

                entity.Property(e => e.NombreSegmento)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.NombreSemestre)
                    .HasMaxLength(12)
                    .IsUnicode(false);

                entity.Property(e => e.NombreSemestreVencimiento)
                    .HasMaxLength(12)
                    .IsUnicode(false);

                entity.Property(e => e.NombreTercero)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.NombreTipoCliente)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.NombreTipoFactura)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.NombreTrimestre)
                    .HasMaxLength(13)
                    .IsUnicode(false);

                entity.Property(e => e.NombreTrimestreVencimiento)
                    .HasMaxLength(13)
                    .IsUnicode(false);

                entity.Property(e => e.NombreVendedor)
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.NombreZona)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.NumeroFactura)
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.Segmento)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.SemanaDelAnno).HasMaxLength(30);

                entity.Property(e => e.SemanaDelAnnoVencimiento).HasMaxLength(30);

                entity.Property(e => e.Tercero)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.TipoCliente)
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.TipoFactura)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Trimestre).HasMaxLength(30);

                entity.Property(e => e.TrimestreVencimiento).HasMaxLength(30);

                entity.Property(e => e.UnidadNegocio)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Valor).HasColumnType("money");

                entity.Property(e => e.ValorMoneda).HasColumnType("money");

                entity.Property(e => e.Vendedor)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.ZolLink)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Zona)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength();
            });

            modelBuilder.Entity<VwFacturasComprasContabilidad>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vwFacturasComprasContabilidad");

                entity.Property(e => e.AnnoMes)
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.AnnoMesLetra).HasMaxLength(7);

                entity.Property(e => e.CentrodeCosto)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.ClaseProveedor)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Concepto)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.DiaDelAnno).HasMaxLength(30);

                entity.Property(e => e.DtFecha)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("dt_Fecha");

                entity.Property(e => e.Fecha)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.FechaLetras).HasMaxLength(39);

                entity.Property(e => e.Fuente)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.GrupoEmpresarial)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Idregistro).HasColumnName("IDRegistro");

                entity.Property(e => e.NombreCentroCosto)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.NombreClaseProveedor)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.NombreConcepto)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.NombreDia).HasMaxLength(1);

                entity.Property(e => e.NombreDiaCorto).HasMaxLength(3);

                entity.Property(e => e.NombreDiaLargo).HasMaxLength(30);

                entity.Property(e => e.NombreFuente)
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.NombreGrupoEmpresarial)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.NombreMes).HasMaxLength(30);

                entity.Property(e => e.NombreMesCorto).HasMaxLength(3);

                entity.Property(e => e.NombreProveedor)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.NombreSegmento)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.NombreSemestre)
                    .HasMaxLength(12)
                    .IsUnicode(false);

                entity.Property(e => e.NombreTercero)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.NombreTipoFactura)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.NombreTrimestre)
                    .HasMaxLength(13)
                    .IsUnicode(false);

                entity.Property(e => e.NombreZona)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.NumeroFactura)
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.Proveedor)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Segmento)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.SemanaDelAnno).HasMaxLength(30);

                entity.Property(e => e.Tercero)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.TipoFactura)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Trimestre).HasMaxLength(30);

                entity.Property(e => e.UnidadNegocio)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Valor).HasColumnType("money");

                entity.Property(e => e.ZolLink)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Zona)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength();
            });

            modelBuilder.Entity<VwFacturasVentasContabilidad>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vwFacturasVentasContabilidad");

                entity.Property(e => e.AnnoMes)
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.AnnoMesLetra).HasMaxLength(7);

                entity.Property(e => e.CentrodeCosto)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Cliente)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Concepto)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.DiaDelAnno).HasMaxLength(30);

                entity.Property(e => e.DtFecha)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("dt_Fecha");

                entity.Property(e => e.Fecha)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.FechaLetras).HasMaxLength(39);

                entity.Property(e => e.Fuente)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.GrupoEmpresarial)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.NombreCentrodeCosto)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.NombreCliente)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.NombreConcepto)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.NombreDia).HasMaxLength(1);

                entity.Property(e => e.NombreDiaCorto).HasMaxLength(3);

                entity.Property(e => e.NombreDiaLargo).HasMaxLength(30);

                entity.Property(e => e.NombreFuente)
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.NombreGrupoEmpresarial)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.NombreMes).HasMaxLength(30);

                entity.Property(e => e.NombreMesCorto).HasMaxLength(3);

                entity.Property(e => e.NombreSegmento)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.NombreSemestre)
                    .HasMaxLength(12)
                    .IsUnicode(false);

                entity.Property(e => e.NombreTercero)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.NombreTipoCliente)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.NombreTipoFactura)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.NombreTrimestre)
                    .HasMaxLength(13)
                    .IsUnicode(false);

                entity.Property(e => e.NombreVendedor)
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.NombreZona)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.NumeroFactura)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Segmento)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.SemanaDelAnno).HasMaxLength(30);

                entity.Property(e => e.Tercero)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.TipoCliente)
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.TipoFactura)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Trimestre).HasMaxLength(30);

                entity.Property(e => e.UnidadNegocio)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Valor).HasColumnType("money");

                entity.Property(e => e.Vendedor)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.ZolLink)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Zona)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength();
            });

            modelBuilder.Entity<VwFinancierasPlanesDePago>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vwFinancieras_PlanesDePago");

                entity.Property(e => e.Cliente)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("CLIENTE");

                entity.Property(e => e.Factura)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("FACTURA");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Idcliente)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("IDCLIENTE");

                entity.Property(e => e.Moneda)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("MONEDA");

                entity.Property(e => e.Monto)
                    .HasColumnType("money")
                    .HasColumnName("MONTO");

                entity.Property(e => e.Tipofactura)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("TIPOFACTURA")
                    .IsFixedLength();

                entity.Property(e => e.Tipoventacompra)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("TIPOVENTACOMPRA");
            });

            modelBuilder.Entity<VwFinancierasPlanesDePagoTodo>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vwFinancieras_PlanesDePagoTodos");

                entity.Property(e => e.Cliente)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("CLIENTE");

                entity.Property(e => e.Factura)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("FACTURA");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Idcliente)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("IDCLIENTE");

                entity.Property(e => e.Moneda)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("MONEDA");

                entity.Property(e => e.Monto)
                    .HasColumnType("money")
                    .HasColumnName("MONTO");

                entity.Property(e => e.Tipofactura)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("TIPOFACTURA")
                    .IsFixedLength();

                entity.Property(e => e.Tipoventacompra)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("TIPOVENTACOMPRA");
            });

            modelBuilder.Entity<VwLibroInventarioContabilidad>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vwLibroInventarioContabilidad");

                entity.Property(e => e.Bu)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("BU");

                entity.Property(e => e.Cantidad).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.Codicta)
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.Codigoarticulo)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Codigobodega)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Consecutivo).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.Documento)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Fecha).HasColumnType("smalldatetime");

                entity.Property(e => e.Fuente)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Grupo)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Nombrearticulo)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Nombregrupo)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Nombretipodocumento)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Presentacion)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.Tipodocumento).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.Valor).HasColumnType("numeric(38, 2)");
            });

            modelBuilder.Entity<VwMovimientoCajaBanco>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vwMovimientoCajaBanco");

                entity.Property(e => e.AnnoMes)
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.AnnoMesLetra).HasMaxLength(7);

                entity.Property(e => e.CodigoTipoDocumento)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Cuenta)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.DescripcionTipoDocumento)
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.DiaDelAnno).HasMaxLength(30);

                entity.Property(e => e.DtFecha)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("dt_Fecha");

                entity.Property(e => e.FechaLetras).HasMaxLength(39);

                entity.Property(e => e.Fuente)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Idregistro).HasColumnName("IDRegistro");

                entity.Property(e => e.Moneda)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.NombreCuenta)
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.NombreDia).HasMaxLength(1);

                entity.Property(e => e.NombreDiaCorto).HasMaxLength(3);

                entity.Property(e => e.NombreDiaLargo).HasMaxLength(30);

                entity.Property(e => e.NombreFuente)
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.NombreMes).HasMaxLength(30);

                entity.Property(e => e.NombreMesCorto).HasMaxLength(3);

                entity.Property(e => e.NombreSemestre)
                    .HasMaxLength(12)
                    .IsUnicode(false);

                entity.Property(e => e.NombreTercero)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.NombreTrimestre)
                    .HasMaxLength(13)
                    .IsUnicode(false);

                entity.Property(e => e.SemanaDelAnno).HasMaxLength(30);

                entity.Property(e => e.Tercero)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.TipoMovimiento)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.Trimestre).HasMaxLength(30);

                entity.Property(e => e.UnidadNegocio)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Valor).HasColumnType("money");

                entity.Property(e => e.ValorMoneda).HasColumnType("money");

                entity.Property(e => e.ZolLink)
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VwMovimientoEgreso>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vwMovimientoEgresos");

                entity.Property(e => e.AnnoMes)
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.AnnoMesLetra).HasMaxLength(7);

                entity.Property(e => e.Cuenta)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.DiaDelAnno).HasMaxLength(30);

                entity.Property(e => e.DtFecha)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("dt_Fecha");

                entity.Property(e => e.FechaLetras).HasMaxLength(39);

                entity.Property(e => e.Fuente)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Idregistro).HasColumnName("IDRegistro");

                entity.Property(e => e.Moneda)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.NombreCuenta)
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.NombreDia).HasMaxLength(1);

                entity.Property(e => e.NombreDiaCorto).HasMaxLength(3);

                entity.Property(e => e.NombreDiaLargo).HasMaxLength(30);

                entity.Property(e => e.NombreFuente)
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.NombreMes).HasMaxLength(30);

                entity.Property(e => e.NombreMesCorto).HasMaxLength(3);

                entity.Property(e => e.NombreSemestre)
                    .HasMaxLength(12)
                    .IsUnicode(false);

                entity.Property(e => e.NombreTercero)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.NombreTrimestre)
                    .HasMaxLength(13)
                    .IsUnicode(false);

                entity.Property(e => e.SemanaDelAnno).HasMaxLength(30);

                entity.Property(e => e.Tercero)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Trimestre).HasMaxLength(30);

                entity.Property(e => e.UnidadNegocio)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Valor).HasColumnType("money");

                entity.Property(e => e.ValorMoneda).HasColumnType("money");

                entity.Property(e => e.ZolLink)
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VwMovimientoGasto>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vwMovimientoGastos");

                entity.Property(e => e.AnnoMes)
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.AnnoMesLetra).HasMaxLength(7);

                entity.Property(e => e.CentrodeCosto)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Cuenta)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.DiaDelAnno).HasMaxLength(30);

                entity.Property(e => e.DtFecha)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("dt_Fecha");

                entity.Property(e => e.FechaLetras).HasMaxLength(39);

                entity.Property(e => e.Fuente)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Idregistro).HasColumnName("IDRegistro");

                entity.Property(e => e.NombreCentroCosto)
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.NombreCuenta)
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.NombreDia).HasMaxLength(1);

                entity.Property(e => e.NombreDiaCorto).HasMaxLength(3);

                entity.Property(e => e.NombreDiaLargo).HasMaxLength(30);

                entity.Property(e => e.NombreFuente)
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.NombreMes).HasMaxLength(30);

                entity.Property(e => e.NombreMesCorto).HasMaxLength(3);

                entity.Property(e => e.NombreSemestre)
                    .HasMaxLength(12)
                    .IsUnicode(false);

                entity.Property(e => e.NombreTercero)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.NombreTrimestre)
                    .HasMaxLength(13)
                    .IsUnicode(false);

                entity.Property(e => e.SemanaDelAnno).HasMaxLength(30);

                entity.Property(e => e.Tercero)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Trimestre).HasMaxLength(30);

                entity.Property(e => e.UnidadNegocio)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Valor).HasColumnType("money");

                entity.Property(e => e.ZolLink)
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VwMovimientoIngreso>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vwMovimientoIngresos");

                entity.Property(e => e.AnnoMes)
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.AnnoMesLetra).HasMaxLength(7);

                entity.Property(e => e.CentrodeCosto)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Cuenta)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.DiaDelAnno).HasMaxLength(30);

                entity.Property(e => e.DtFecha)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("dt_Fecha");

                entity.Property(e => e.FechaLetras).HasMaxLength(39);

                entity.Property(e => e.Fuente)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Idregistro).HasColumnName("IDRegistro");

                entity.Property(e => e.NombreCuenta)
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.NombreDia).HasMaxLength(1);

                entity.Property(e => e.NombreDiaCorto).HasMaxLength(3);

                entity.Property(e => e.NombreDiaLargo).HasMaxLength(30);

                entity.Property(e => e.NombreFuente)
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.NombreMes).HasMaxLength(30);

                entity.Property(e => e.NombreMesCorto).HasMaxLength(3);

                entity.Property(e => e.NombreSemestre)
                    .HasMaxLength(12)
                    .IsUnicode(false);

                entity.Property(e => e.NombreTercero)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.NombreTrimestre)
                    .HasMaxLength(13)
                    .IsUnicode(false);

                entity.Property(e => e.SemanaDelAnno).HasMaxLength(30);

                entity.Property(e => e.Tercero)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Trimestre).HasMaxLength(30);

                entity.Property(e => e.UnidadNegocio)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Valor).HasColumnType("money");

                entity.Property(e => e.ZolLink)
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VwMovimientoReciboCaja>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vwMovimientoReciboCaja");

                entity.Property(e => e.AnnoMes)
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.AnnoMesLetra).HasMaxLength(7);

                entity.Property(e => e.Cuenta)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.DiaDelAnno).HasMaxLength(30);

                entity.Property(e => e.DtFecha)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("dt_Fecha");

                entity.Property(e => e.FechaLetras).HasMaxLength(39);

                entity.Property(e => e.Fuente)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Idregistro).HasColumnName("IDRegistro");

                entity.Property(e => e.Moneda)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.NombreCuenta)
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.NombreDia).HasMaxLength(1);

                entity.Property(e => e.NombreDiaCorto).HasMaxLength(3);

                entity.Property(e => e.NombreDiaLargo).HasMaxLength(30);

                entity.Property(e => e.NombreFuente)
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.NombreMes).HasMaxLength(30);

                entity.Property(e => e.NombreMesCorto).HasMaxLength(3);

                entity.Property(e => e.NombreSemestre)
                    .HasMaxLength(12)
                    .IsUnicode(false);

                entity.Property(e => e.NombreTercero)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.NombreTrimestre)
                    .HasMaxLength(13)
                    .IsUnicode(false);

                entity.Property(e => e.SemanaDelAnno).HasMaxLength(30);

                entity.Property(e => e.Tercero)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Trimestre).HasMaxLength(30);

                entity.Property(e => e.UnidadNegocio)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Valor).HasColumnType("money");

                entity.Property(e => e.ValorMoneda).HasColumnType("money");

                entity.Property(e => e.ZolLink)
                    .HasMaxLength(5)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VwQuery>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vwQuery");

                entity.Property(e => e.Descripcion)
                    .HasMaxLength(256)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VwSeccion>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vwSeccion");

                entity.Property(e => e.Codigo)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CodigoPadre)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Descripcion).IsUnicode(false);

                entity.Property(e => e.Nombre)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Orden)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("orden");

                entity.Property(e => e.Tipo)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VwTransac>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vwTransac");

                entity.Property(e => e.Adicional1)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Adicional_1");

                entity.Property(e => e.Adicional2)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Adicional_2");

                entity.Property(e => e.Anotra)
                    .HasMaxLength(7)
                    .IsUnicode(false)
                    .HasColumnName("ANOTRA");

                entity.Property(e => e.Autorizacion)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("AUTORIZACION");

                entity.Property(e => e.Auxiaux)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("AUXIAUX")
                    .IsFixedLength();

                entity.Property(e => e.BaseComision).HasColumnType("money");

                entity.Property(e => e.Baseretetra)
                    .HasColumnType("money")
                    .HasColumnName("BASERETETRA");

                entity.Property(e => e.Bu)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("BU");

                entity.Property(e => e.Cliprv)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("CLIPRV");

                entity.Property(e => e.Codicta)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("CODICTA")
                    .IsFixedLength();

                entity.Property(e => e.CodigoPropiedad1)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.CodigoPropiedad2)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.CodigoPropiedad3)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.CodigoPropiedad4)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.CodigoPropiedad5)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Codpresu)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("CODPRESU")
                    .IsFixedLength();

                entity.Property(e => e.Conciltra)
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .HasColumnName("CONCILTRA")
                    .IsFixedLength();

                entity.Property(e => e.Consecurev).HasColumnName("CONSECUREV");

                entity.Property(e => e.Consecutra)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("CONSECUTRA");

                entity.Property(e => e.Descritra)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("DESCRITRA");

                entity.Property(e => e.FactMovimientoOriginal).HasColumnName("fact_movimiento_original");

                entity.Property(e => e.FechaCaducidad)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Fechafact)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("FECHAFACT")
                    .IsFixedLength();

                entity.Property(e => e.Fechatra)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("FECHATRA")
                    .IsFixedLength();

                entity.Property(e => e.Fgratra)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("FGRATRA");

                entity.Property(e => e.GenEsquemaTran)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.IdAplicacionesOrigen).HasColumnName("Id_AplicacionesOrigen");

                entity.Property(e => e.IdAplicacionesZeus).HasColumnName("Id_AplicacionesZeus");

                entity.Property(e => e.IdMovimiento)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("Id_Movimiento");

                entity.Property(e => e.IdOrigenMovimiento).HasColumnName("Id_OrigenMovimiento");

                entity.Property(e => e.Idbanco)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("IDBANCO")
                    .IsFixedLength();

                entity.Property(e => e.Idcenco)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("IDCENCO")
                    .IsFixedLength();

                entity.Property(e => e.IdenEsquemaTransaccion)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("Iden_EsquemaTransaccion");

                entity.Property(e => e.Idfuente)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("IDFUENTE")
                    .IsFixedLength();

                entity.Property(e => e.Iditem)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("IDITEM");

                entity.Property(e => e.Idplaza)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("IDPLAZA")
                    .IsFixedLength();

                entity.Property(e => e.Idusuario)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("IDUSUARIO");

                entity.Property(e => e.Idvende)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("IDVENDE")
                    .IsFixedLength();

                entity.Property(e => e.Idzona)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("IDZONA")
                    .IsFixedLength();

                entity.Property(e => e.Indcpitra)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("INDCPITRA")
                    .IsFixedLength();

                entity.Property(e => e.LineaImpuesto)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Ncf)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("NCF");

                entity.Property(e => e.NcfModificado)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("NCF_Modificado");

                entity.Property(e => e.Nittra)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("NITTRA");

                entity.Property(e => e.Nreserva)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("NRESERVA")
                    .IsFixedLength();

                entity.Property(e => e.Numdoctra)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("NUMDOCTRA")
                    .IsFixedLength();

                entity.Property(e => e.Numefac)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("NUMEFAC");

                entity.Property(e => e.Porretetra)
                    .HasColumnType("numeric(18, 4)")
                    .HasColumnName("PORRETETRA");

                entity.Property(e => e.Refefac)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("REFEFAC");

                entity.Property(e => e.Serie)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("SERIE");

                entity.Property(e => e.Statustra)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("STATUSTRA")
                    .IsFixedLength();

                entity.Property(e => e.SubLineaImpuesto)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.TasaCambio).HasColumnType("money");

                entity.Property(e => e.Tasacambio1)
                    .HasColumnType("money")
                    .HasColumnName("TASACAMBIO1");

                entity.Property(e => e.Tasacambio2)
                    .HasColumnType("money")
                    .HasColumnName("TASACAMBIO2");

                entity.Property(e => e.Tipofac)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("TIPOFAC")
                    .IsFixedLength();

                entity.Property(e => e.Valormoneda)
                    .HasColumnType("money")
                    .HasColumnName("VALORMONEDA");

                entity.Property(e => e.Valormoneda1)
                    .HasColumnType("money")
                    .HasColumnName("VALORMONEDA1");

                entity.Property(e => e.Valormoneda2)
                    .HasColumnType("money")
                    .HasColumnName("VALORMONEDA2");

                entity.Property(e => e.Valortra)
                    .HasColumnType("money")
                    .HasColumnName("VALORTRA");

                entity.Property(e => e.Vencefac)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("VENCEFAC")
                    .IsFixedLength();

                entity.Property(e => e.Voucher)
                    .HasMaxLength(25)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VwTransacRpt>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vwTransacRpt");

                entity.Property(e => e.Adicional1)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Adicional_1");

                entity.Property(e => e.Adicional2)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Adicional_2");

                entity.Property(e => e.Anotra)
                    .HasMaxLength(7)
                    .IsUnicode(false)
                    .HasColumnName("ANOTRA");

                entity.Property(e => e.Autorizacion)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("AUTORIZACION");

                entity.Property(e => e.Auxiaux)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("AUXIAUX")
                    .IsFixedLength();

                entity.Property(e => e.BaseComision).HasColumnType("money");

                entity.Property(e => e.Baseretetra)
                    .HasColumnType("money")
                    .HasColumnName("BASERETETRA");

                entity.Property(e => e.Bu)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("BU");

                entity.Property(e => e.Cliprv)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("CLIPRV");

                entity.Property(e => e.Codicta)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("CODICTA")
                    .IsFixedLength();

                entity.Property(e => e.CodigoPropiedad1)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.CodigoPropiedad2)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.CodigoPropiedad3)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.CodigoPropiedad4)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.CodigoPropiedad5)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Codpresu)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("CODPRESU")
                    .IsFixedLength();

                entity.Property(e => e.Conciltra)
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .HasColumnName("CONCILTRA")
                    .IsFixedLength();

                entity.Property(e => e.Consecurev).HasColumnName("CONSECUREV");

                entity.Property(e => e.Consecutra)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("CONSECUTRA");

                entity.Property(e => e.Descritra)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("DESCRITRA");

                entity.Property(e => e.FactMovimientoOriginal).HasColumnName("fact_movimiento_original");

                entity.Property(e => e.FechaCaducidad)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Fechafact)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("FECHAFACT")
                    .IsFixedLength();

                entity.Property(e => e.Fechatra)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("FECHATRA")
                    .IsFixedLength();

                entity.Property(e => e.Fgratra)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("FGRATRA");

                entity.Property(e => e.GenEsquemaTran)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.IdAplicacionesOrigen).HasColumnName("Id_AplicacionesOrigen");

                entity.Property(e => e.IdAplicacionesZeus).HasColumnName("Id_AplicacionesZeus");

                entity.Property(e => e.IdMovimiento)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("Id_Movimiento");

                entity.Property(e => e.IdOrigenMovimiento).HasColumnName("Id_OrigenMovimiento");

                entity.Property(e => e.Idbanco)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("IDBANCO")
                    .IsFixedLength();

                entity.Property(e => e.Idcenco)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("IDCENCO")
                    .IsFixedLength();

                entity.Property(e => e.IdenEsquemaTransaccion)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("Iden_EsquemaTransaccion");

                entity.Property(e => e.Idfuente)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("IDFUENTE")
                    .IsFixedLength();

                entity.Property(e => e.Iditem)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("IDITEM");

                entity.Property(e => e.Idplaza)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("IDPLAZA")
                    .IsFixedLength();

                entity.Property(e => e.Idusuario)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("IDUSUARIO");

                entity.Property(e => e.Idvende)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("IDVENDE")
                    .IsFixedLength();

                entity.Property(e => e.Idzona)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("IDZONA")
                    .IsFixedLength();

                entity.Property(e => e.Indcpitra)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("INDCPITRA")
                    .IsFixedLength();

                entity.Property(e => e.LineaImpuesto)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Ncf)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("NCF");

                entity.Property(e => e.NcfModificado)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("NCF_Modificado");

                entity.Property(e => e.Nittra)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("NITTRA");

                entity.Property(e => e.Nreserva)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("NRESERVA")
                    .IsFixedLength();

                entity.Property(e => e.Numdoctra)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("NUMDOCTRA")
                    .IsFixedLength();

                entity.Property(e => e.Numefac)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("NUMEFAC");

                entity.Property(e => e.Porretetra)
                    .HasColumnType("numeric(18, 4)")
                    .HasColumnName("PORRETETRA");

                entity.Property(e => e.Refefac)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("REFEFAC");

                entity.Property(e => e.Serie)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("SERIE");

                entity.Property(e => e.Statustra)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("STATUSTRA")
                    .IsFixedLength();

                entity.Property(e => e.SubLineaImpuesto)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.TasaCambio).HasColumnType("money");

                entity.Property(e => e.Tasacambio1)
                    .HasColumnType("money")
                    .HasColumnName("TASACAMBIO1");

                entity.Property(e => e.Tasacambio2)
                    .HasColumnType("money")
                    .HasColumnName("TASACAMBIO2");

                entity.Property(e => e.Tipofac)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("TIPOFAC")
                    .IsFixedLength();

                entity.Property(e => e.Valormoneda)
                    .HasColumnType("money")
                    .HasColumnName("VALORMONEDA");

                entity.Property(e => e.Valormoneda1)
                    .HasColumnType("money")
                    .HasColumnName("VALORMONEDA1");

                entity.Property(e => e.Valormoneda2)
                    .HasColumnType("money")
                    .HasColumnName("VALORMONEDA2");

                entity.Property(e => e.Valortra)
                    .HasColumnType("money")
                    .HasColumnName("VALORTRA");

                entity.Property(e => e.Vencefac)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("VENCEFAC")
                    .IsFixedLength();

                entity.Property(e => e.Voucher)
                    .HasMaxLength(25)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VwTransaccionContable>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vwTransaccionContable");

                entity.Property(e => e.Adicional1)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Adicional2)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Ano)
                    .HasMaxLength(7)
                    .IsUnicode(false);

                entity.Property(e => e.Autorizacion)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.AuxiliarAbierto)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Banco)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.BaseComision).HasColumnType("money");

                entity.Property(e => e.BaseRetencion).HasColumnType("money");

                entity.Property(e => e.CentroCosto)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Cliente)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.CodigoPresupuesto)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.ComponenteRetencionAutorizacion)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.ComponenteRetencionFechaEmision).HasColumnType("smalldatetime");

                entity.Property(e => e.ComponenteRetencionSecuencial)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.ComponenteRetencionSerie)
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.Conciliar)
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Cuenta)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Descripcion)
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.Documento)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Esquema).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.Estado)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Fecha).HasColumnType("smalldatetime");

                entity.Property(e => e.FechaCaducidad).HasColumnType("smalldatetime");

                entity.Property(e => e.FechaFactura).HasColumnType("smalldatetime");

                entity.Property(e => e.FechaGeneracion).HasColumnType("smalldatetime");

                entity.Property(e => e.Fuente)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.GeneraEsquema)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.IndicadorPrincipal)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Item)
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.LineaImpuesto)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Moneda)
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.MonedaRelacion)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Movimiento)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Ncf)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("NCF");

                entity.Property(e => e.NcfModificado)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.NumeroDocumento)
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.NumeroReserva)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Plaza)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.PorcentajeRetencion).HasColumnType("numeric(18, 4)");

                entity.Property(e => e.Propiedad1)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Propiedad2)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Propiedad3)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Propiedad4)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Propiedad5)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Proveedor)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.ReferenciaDocumento)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.ReferenciaPorTransaccion)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Serie)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.SubLineaImpuesto)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.TasaCambio).HasColumnType("money");

                entity.Property(e => e.TasaCambio1).HasColumnType("money");

                entity.Property(e => e.TasaCambio2).HasColumnType("money");

                entity.Property(e => e.Tercero)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.TipoFactura)
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.UnidadNegocio)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Usuario)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.UsuarioRecepcion)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Valor).HasColumnType("money");

                entity.Property(e => e.ValorMoneda).HasColumnType("money");

                entity.Property(e => e.ValorMoneda1).HasColumnType("money");

                entity.Property(e => e.ValorMoneda2).HasColumnType("money");

                entity.Property(e => e.ValorMonedaRelacion).HasColumnType("money");

                entity.Property(e => e.VencimientoDocumento).HasColumnType("smalldatetime");

                entity.Property(e => e.Vendedor)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Voucher)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.XmlAdicionales).IsUnicode(false);

                entity.Property(e => e.Zona)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength();
            });

            modelBuilder.Entity<WsgContabilidad>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("WSG_Contabilidad");

                entity.HasIndex(e => e.Id, "IX_WSG_Contabilidad_Id");

                entity.Property(e => e.FechaGrabacion)
                    .HasColumnType("datetime")
                    .HasColumnName("Fecha_Grabacion");

                entity.Property(e => e.Id).ValueGeneratedOnAdd();

                entity.Property(e => e.XmlValue).IsUnicode(false);
            });

            modelBuilder.Entity<ZcConsolidadoFactura>(entity =>
            {
                entity.HasKey(e => e.Codigo);

                entity.ToTable("ZC_ConsolidadoFacturas");

                entity.Property(e => e.Codigo)
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Agrupamiento)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("id");

                entity.Property(e => e.Nombre)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ZcConsolidadoFacturasDetalle>(entity =>
            {
                entity.ToTable("ZC_ConsolidadoFacturasDetalle");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Ambientes).IsUnicode(false);

                entity.Property(e => e.Base)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Conceptos).IsUnicode(false);

                entity.Property(e => e.Fuentes).IsUnicode(false);

                entity.Property(e => e.IdAplicativo).HasColumnName("Id_Aplicativo");

                entity.Property(e => e.IdZcConsolidadoFacturas).HasColumnName("Id_ZC_ConsolidadoFacturas");

                entity.Property(e => e.Servidor)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.TipoDocumento).IsUnicode(false);
            });

            modelBuilder.Entity<ZeusArchivoPlano>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ZeusArchivoPlano");

                entity.Property(e => e.IdenZeusarchivoplano)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_zeusarchivoplano");

                entity.Property(e => e.Linea)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("linea");

                entity.Property(e => e.Spid).HasColumnName("spid");

                entity.Property(e => e.Texto)
                    .IsUnicode(false)
                    .HasColumnName("texto");
            });

            modelBuilder.Entity<ZeusContabilidadVersione>(entity =>
            {
                entity.Property(e => e.Archivo).HasColumnType("image");

                entity.Property(e => e.FechaGrabacion)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.FechaVersion).HasColumnType("datetime");

                entity.Property(e => e.Nombre)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Usuario)
                    .HasMaxLength(250)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ZeusDatosAplicacion>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ZeusDatosAplicacion");

                entity.Property(e => e.Aplicacion)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.FechaSp)
                    .HasColumnType("datetime")
                    .HasColumnName("FechaSP");

                entity.Property(e => e.Iden)
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.RevisionEjecutable)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.ServicePack)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.VersionEjecutable)
                    .HasMaxLength(10)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ZeusExcelConfFuncUsuario>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Zeus®ExcelConfFuncUsuarios");

                entity.HasIndex(e => new { e.Usuario, e.Aplicacion, e.Nombre }, "UQ_ZeusExcelConfFuncUsuarios")
                    .IsUnique();

                entity.Property(e => e.Activo).HasDefaultValueSql("((1))");

                entity.Property(e => e.Adicional)
                    .HasMaxLength(8000)
                    .IsUnicode(false);

                entity.Property(e => e.Aplicacion)
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.FechaCreacion)
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.FechaModifico)
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Formula)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.Nombre)
                    .HasMaxLength(128)
                    .IsUnicode(false);

                entity.Property(e => e.Uso).HasDefaultValueSql("((1))");

                entity.Property(e => e.Usuario)
                    .HasMaxLength(250)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ZeusExcelConfUsuario>(entity =>
            {
                entity.ToTable("Zeus®ExcelConfUsuario");

                entity.Property(e => e.CantExplFuncion).HasColumnName("cantExplFuncion");

                entity.Property(e => e.ChkSeleccionBu)
                    .HasColumnName("chkSeleccionBU")
                    .HasDefaultValueSql("((2))");

                entity.Property(e => e.Columna).HasColumnName("columna");

                entity.Property(e => e.Fila).HasColumnName("fila");

                entity.Property(e => e.Libro).HasColumnName("libro");

                entity.Property(e => e.MaxNumerReg)
                    .HasMaxLength(12)
                    .IsUnicode(false);

                entity.Property(e => e.SeleccionBu)
                    .IsUnicode(false)
                    .HasColumnName("SeleccionBU")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Usuario)
                    .HasMaxLength(250)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ZeusExcelInfodesign>(entity =>
            {
                entity.HasKey(e => e.Idcodigo)
                    .HasName("PK_ZeusExcelInfodesign");

                entity.ToTable("Zeus®ExcelInfodesign");

                entity.Property(e => e.Idcodigo)
                    .HasMaxLength(256)
                    .IsUnicode(false)
                    .HasColumnName("IDCODIGO");

                entity.Property(e => e.Chmodiperfil)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("CHMODIPERFIL")
                    .IsFixedLength();

                entity.Property(e => e.Chmodiusuario)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("CHMODIUSUARIO")
                    .IsFixedLength();

                entity.Property(e => e.Chperfil)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("CHPERFIL")
                    .IsFixedLength();

                entity.Property(e => e.Chusuario)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("CHUSUARIO")
                    .IsFixedLength();

                entity.Property(e => e.Descripcion)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPCION");

                entity.Property(e => e.Filedesign)
                    .HasColumnType("image")
                    .HasColumnName("FILEDESIGN");

                entity.Property(e => e.FiledesignOnline)
                    .IsUnicode(false)
                    .HasColumnName("FILEDESIGN_ONLINE");

                entity.Property(e => e.Idlibro)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("IDLIBRO");

                entity.Property(e => e.Imagen)
                    .HasColumnType("image")
                    .HasColumnName("IMAGEN");

                entity.Property(e => e.ImagenOnline)
                    .IsUnicode(false)
                    .HasColumnName("IMAGEN_ONLINE");

                entity.Property(e => e.IsFavorito)
                    .HasColumnName("isFavorito")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.IsPanel)
                    .HasColumnName("isPanel")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.IsPanelOnline).HasDefaultValueSql("((0))");

                entity.Property(e => e.Orden).HasColumnName("ORDEN");

                entity.Property(e => e.Perfiles)
                    .HasMaxLength(4096)
                    .IsUnicode(false)
                    .HasColumnName("PERFILES");

                entity.Property(e => e.Publico)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("PUBLICO")
                    .IsFixedLength();

                entity.Property(e => e.Usuario)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("USUARIO")
                    .IsFixedLength();

                entity.Property(e => e.Usuarios)
                    .HasMaxLength(4096)
                    .IsUnicode(false)
                    .HasColumnName("USUARIOS");
            });

            modelBuilder.Entity<ZeusExcelInfodesignPerfil>(entity =>
            {
                entity.HasKey(e => new { e.Idcodigo, e.Idperfil })
                    .HasName("PK_ZeusExcelInfodesignPerfil");

                entity.ToTable("Zeus®ExcelInfodesignPerfil");

                entity.Property(e => e.Idcodigo)
                    .HasMaxLength(256)
                    .IsUnicode(false)
                    .HasColumnName("IDCODIGO");

                entity.Property(e => e.Idperfil)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IDPERFIL");

                entity.Property(e => e.Permiso).HasColumnName("PERMISO");

                entity.HasOne(d => d.IdcodigoNavigation)
                    .WithMany(p => p.ZeusExcelInfodesignPerfils)
                    .HasForeignKey(d => d.Idcodigo)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ZeusExcelInfodesignPerfil_INFODESIGN");
            });

            modelBuilder.Entity<ZeusExcelInfodesignRemoto>(entity =>
            {
                entity.HasKey(e => new { e.Usuario, e.Nombrelibro })
                    .HasName("PK_ExcelInfodesignRemoto_Usuario_Nombrelibro");

                entity.ToTable("Zeus®ExcelInfodesignRemoto");

                entity.Property(e => e.Usuario)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("usuario");

                entity.Property(e => e.Nombrelibro)
                    .HasMaxLength(256)
                    .IsUnicode(false)
                    .HasColumnName("nombrelibro");

                entity.Property(e => e.Fechacreacion)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("fechacreacion");

                entity.Property(e => e.Fechamodificacion)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("fechamodificacion");

                entity.Property(e => e.Filedesign)
                    .IsUnicode(false)
                    .HasColumnName("filedesign");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("id");
            });

            modelBuilder.Entity<ZeusExcelInfodesignUsuario>(entity =>
            {
                entity.HasKey(e => new { e.Idcodigo, e.Idusuario })
                    .HasName("PK_ZeusExcelInfodesignUsuario");

                entity.ToTable("Zeus®ExcelInfodesignUsuario");

                entity.Property(e => e.Idcodigo)
                    .HasMaxLength(256)
                    .IsUnicode(false)
                    .HasColumnName("IDCODIGO");

                entity.Property(e => e.Idusuario)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IDUSUARIO");

                entity.Property(e => e.Permiso).HasColumnName("PERMISO");

                entity.HasOne(d => d.IdcodigoNavigation)
                    .WithMany(p => p.ZeusExcelInfodesignUsuarios)
                    .HasForeignKey(d => d.Idcodigo)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ZeusExcelInfodesignUsuario_INFODESIGN");
            });

            modelBuilder.Entity<ZeusExcelLog>(entity =>
            {
                entity.ToTable("Zeus®ExcelLog");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Descripcion)
                    .IsUnicode(false)
                    .HasColumnName("descripcion");

                entity.Property(e => e.Fecha)
                    .HasColumnType("datetime")
                    .HasColumnName("fecha")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Host)
                    .HasMaxLength(64)
                    .IsUnicode(false)
                    .HasColumnName("host");

                entity.Property(e => e.Menu)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("menu");

                entity.Property(e => e.Metodo)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("metodo");

                entity.Property(e => e.Usuario)
                    .HasMaxLength(64)
                    .IsUnicode(false)
                    .HasColumnName("usuario");
            });

            modelBuilder.Entity<ZeusExcelPlantilla>(entity =>
            {
                entity.ToTable("Zeus®ExcelPlantillas");

                entity.Property(e => e.Activo)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Aplicacion)
                    .HasMaxLength(128)
                    .IsUnicode(false);

                entity.Property(e => e.Descripcion)
                    .HasMaxLength(512)
                    .IsUnicode(false);

                entity.Property(e => e.FechaCreacion)
                    .HasColumnType("datetime")
                    .HasColumnName("Fecha_Creacion")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.FechaModificacion)
                    .HasColumnType("datetime")
                    .HasColumnName("Fecha_Modificacion")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.IsPublico).HasColumnName("isPublico");

                entity.Property(e => e.Procedimiento)
                    .HasMaxLength(512)
                    .IsUnicode(false);

                entity.Property(e => e.SqlPlId).HasColumnName("SqlPl_Id");

                entity.Property(e => e.UsuarioModifico)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("Usuario_Modifico")
                    .HasDefaultValueSql("(suser_sname())");
            });

            modelBuilder.Entity<ZeusExcelPlantillasAcceso>(entity =>
            {
                entity.ToTable("Zeus®ExcelPlantillas_Acceso");

                entity.Property(e => e.FechaCreacion)
                    .HasColumnType("datetime")
                    .HasColumnName("Fecha_Creacion")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.FechaModificacion)
                    .HasColumnType("datetime")
                    .HasColumnName("Fecha_Modificacion")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.PerfilNombre)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Perfil_Nombre");

                entity.Property(e => e.UsuarioModifico)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("Usuario_Modifico")
                    .HasDefaultValueSql("(suser_sname())");

                entity.Property(e => e.UsuariosUsuario)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("Usuarios_Usuario");

                entity.HasOne(d => d.ZeusExcelPlantillas)
                    .WithMany(p => p.ZeusExcelPlantillasAccesos)
                    .HasForeignKey(d => d.ZeusExcelPlantillasId)
                    .HasConstraintName("FK_Zeus®ExcelPlantillas_Acceso_Zeus®ExcelPlantillas");
            });

            modelBuilder.Entity<ZeusExcelSentencia>(entity =>
            {
                entity.ToTable("Zeus®ExcelSentencias");

                entity.HasIndex(e => e.Nombre, "IX_Zeus®ExcelSentencias")
                    .IsUnique();

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.ConservarValores).HasColumnName("conservarValores");

                entity.Property(e => e.IncrementarCol).HasColumnName("incrementarCol");

                entity.Property(e => e.IncrementarFil)
                    .IsRequired()
                    .HasColumnName("incrementarFil")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Nombre)
                    .HasMaxLength(512)
                    .IsUnicode(false)
                    .HasColumnName("nombre");

                entity.Property(e => e.NombreHojaGenerar)
                    .HasMaxLength(512)
                    .IsUnicode(false)
                    .HasColumnName("nombreHojaGenerar");

                entity.Property(e => e.Sentencia)
                    .HasMaxLength(8000)
                    .IsUnicode(false)
                    .HasColumnName("sentencia");
            });

            modelBuilder.Entity<ZeusExcelSentenciaCampo>(entity =>
            {
                entity.ToTable("Zeus®ExcelSentenciaCampos");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Campo)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("campo");

                entity.Property(e => e.DescripcionCampo)
                    .HasMaxLength(512)
                    .IsUnicode(false)
                    .HasColumnName("descripcionCampo");

                entity.Property(e => e.Mostrar).HasColumnName("mostrar");

                entity.Property(e => e.Orden).HasColumnName("orden");

                entity.Property(e => e.SentenciaId).HasColumnName("sentenciaId");

                entity.HasOne(d => d.Sentencia)
                    .WithMany(p => p.ZeusExcelSentenciaCampos)
                    .HasForeignKey(d => d.SentenciaId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Zeus®ExcelSentenciaCampos_Zeus®ExcelSentencias");
            });

            modelBuilder.Entity<ZeusExcelSentenciaParametro>(entity =>
            {
                entity.ToTable("Zeus®ExcelSentenciaParametros");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Ayuda)
                    .HasMaxLength(512)
                    .IsUnicode(false)
                    .HasColumnName("ayuda");

                entity.Property(e => e.Celda)
                    .HasMaxLength(512)
                    .IsUnicode(false)
                    .HasColumnName("celda");

                entity.Property(e => e.DescripcionCampo)
                    .HasMaxLength(512)
                    .IsUnicode(false)
                    .HasColumnName("descripcionCampo");

                entity.Property(e => e.HojaValor)
                    .HasMaxLength(512)
                    .IsUnicode(false)
                    .HasColumnName("hojaValor");

                entity.Property(e => e.IsValorDefecto).HasColumnName("isValorDefecto");

                entity.Property(e => e.Observacion)
                    .HasMaxLength(512)
                    .IsUnicode(false)
                    .HasColumnName("observacion");

                entity.Property(e => e.Orden).HasColumnName("orden");

                entity.Property(e => e.Parametro)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("parametro");

                entity.Property(e => e.SentenciaId).HasColumnName("sentenciaId");

                entity.HasOne(d => d.Sentencia)
                    .WithMany(p => p.ZeusExcelSentenciaParametros)
                    .HasForeignKey(d => d.SentenciaId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Zeus®ExcelSentenciaParametros_Zeus®ExcelSentencias");
            });

            modelBuilder.Entity<ZeusExcelSincronizacionCuenta>(entity =>
            {
                entity.ToTable("Zeus®ExcelSincronizacionCuentas");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Cuenta)
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.Descripcion)
                    .HasMaxLength(256)
                    .IsUnicode(false);

                entity.HasOne(d => d.Usuario)
                    .WithMany(p => p.ZeusExcelSincronizacionCuenta)
                    .HasForeignKey(d => d.UsuarioId)
                    .HasConstraintName("FK_Zeus®ExcelSincronizacionCuentas_Zeus®ExcelSincronizacionUsuarios");
            });

            modelBuilder.Entity<ZeusExcelSincronizacionUsuario>(entity =>
            {
                entity.ToTable("Zeus®ExcelSincronizacionUsuarios");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Fecha).HasColumnType("smalldatetime");

                entity.Property(e => e.Usuario)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ZeusExcelSqlWAccesoQuery>(entity =>
            {
                entity.ToTable("Zeus®ExcelSqlW_Acceso_Query");

                entity.Property(e => e.Eliminar)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.FechaCreacion)
                    .HasColumnType("datetime")
                    .HasColumnName("Fecha_Creacion")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.FechaModificacion)
                    .HasColumnType("datetime")
                    .HasColumnName("Fecha_Modificacion")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.OtorgarPermiso)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.PerfilNombre)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Perfil_Nombre");

                entity.Property(e => e.SqlWQueryId).HasColumnName("SqlW_QueryId");

                entity.Property(e => e.UsuarioModifico)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("Usuario_Modifico")
                    .HasDefaultValueSql("(suser_sname())");

                entity.Property(e => e.UsuariosUsuario)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("Usuarios_Usuario");

                entity.HasOne(d => d.SqlWQuery)
                    .WithMany(p => p.ZeusExcelSqlWAccesoQueries)
                    .HasForeignKey(d => d.SqlWQueryId)
                    .HasConstraintName("FK_Zeus®ExcelSqlW_Acceso_Query_SqlW_QueryId_Zeus®ExcelSqlW_Query_Id");
            });

            modelBuilder.Entity<ZeusExcelSqlWCondicione>(entity =>
            {
                entity.ToTable("Zeus®ExcelSqlW_Condiciones");

                entity.Property(e => e.AliasCampo)
                    .HasMaxLength(128)
                    .IsUnicode(false)
                    .HasColumnName("Alias_Campo");

                entity.Property(e => e.OLogico)
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasColumnName("O_Logico");

                entity.Property(e => e.Operador)
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.ParentesisAb)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("Parentesis_Ab");

                entity.Property(e => e.ParentesisCe)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("Parentesis_Ce");

                entity.Property(e => e.SqlWQueryId).HasColumnName("SqlW_QueryID");

                entity.Property(e => e.Valor)
                    .HasMaxLength(128)
                    .IsUnicode(false);

                entity.HasOne(d => d.SqlWQuery)
                    .WithMany(p => p.ZeusExcelSqlWCondiciones)
                    .HasForeignKey(d => d.SqlWQueryId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Zeus®ExcelSqlW_Condiciones_SqlW_QueryID_Zeus®ExcelSqlW_Query_Id");
            });

            modelBuilder.Entity<ZeusExcelSqlWCriterio>(entity =>
            {
                entity.ToTable("Zeus®ExcelSqlW_Criterios");

                entity.Property(e => e.AliasCampo)
                    .HasMaxLength(128)
                    .IsUnicode(false)
                    .HasColumnName("Alias_Campo");

                entity.Property(e => e.AliasTabla)
                    .HasMaxLength(128)
                    .IsUnicode(false)
                    .HasColumnName("Alias_Tabla");

                entity.Property(e => e.Campo)
                    .HasMaxLength(64)
                    .IsUnicode(false);

                entity.Property(e => e.SqlWQueryId).HasColumnName("SqlW_QueryId");

                entity.Property(e => e.Tabla)
                    .HasMaxLength(128)
                    .IsUnicode(false);

                entity.Property(e => e.TipoOrden)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("Tipo_Orden");

                entity.HasOne(d => d.SqlWQuery)
                    .WithMany(p => p.ZeusExcelSqlWCriterios)
                    .HasForeignKey(d => d.SqlWQueryId)
                    .HasConstraintName("FK_Zeus®ExcelSqlW_Criterios_SqlW_QueryId_Zeus®ExcelSqlW_Query_Id");
            });

            modelBuilder.Entity<ZeusExcelSqlWPermisosEspeciale>(entity =>
            {
                entity.ToTable("Zeus®ExcelSqlW_Permisos_Especiales");

                entity.Property(e => e.FechaCreacion)
                    .HasColumnType("datetime")
                    .HasColumnName("Fecha_Creacion")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.FechaModificacion)
                    .HasColumnType("datetime")
                    .HasColumnName("Fecha_Modificacion")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.OtorgarPermiso).HasColumnName("Otorgar_Permiso");

                entity.Property(e => e.PerfilNombre)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Perfil_Nombre");

                entity.Property(e => e.UsuarioModifico)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("Usuario_Modifico")
                    .HasDefaultValueSql("(suser_sname())");

                entity.Property(e => e.UsuariosUsuario)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("Usuarios_Usuario");
            });

            modelBuilder.Entity<ZeusExcelSqlWQuery>(entity =>
            {
                entity.ToTable("Zeus®ExcelSqlW_Query");

                entity.HasIndex(e => e.Descripcion, "UQ_Zeus®ExcelSqlW_Query_Descripcion")
                    .IsUnique();

                entity.Property(e => e.Descripcion)
                    .HasMaxLength(128)
                    .IsUnicode(false);

                entity.Property(e => e.FechaCreacion)
                    .HasColumnType("datetime")
                    .HasColumnName("Fecha_Creacion")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.FechaModificacion)
                    .HasColumnType("datetime")
                    .HasColumnName("Fecha_Modificacion")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.QueryAvanzado)
                    .IsUnicode(false)
                    .HasColumnName("Query_Avanzado");

                entity.Property(e => e.TopRegistros).HasColumnName("Top_Registros");

                entity.Property(e => e.UsuarioModifico)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("Usuario_Modifico")
                    .HasDefaultValueSql("(suser_sname())");
            });

            modelBuilder.Entity<ZeusExcelVersion>(entity =>
            {
                entity.HasKey(e => e.Iden)
                    .HasName("PK_ZeusExcelVersion");

                entity.ToTable("Zeus®ExcelVersion");

                entity.Property(e => e.Iden).HasColumnName("IDEN");

                entity.Property(e => e.DsRevision)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("DS_REVISION");

                entity.Property(e => e.DsVersion)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("DS_VERSION");
            });

            modelBuilder.Entity<ZeusExcelVisorRemoto>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Zeus®ExcelVisorRemoto");

                entity.Property(e => e.Activo)
                    .HasColumnName("activo")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Estado)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("estado");

                entity.Property(e => e.FechaCreacion)
                    .HasColumnType("datetime")
                    .HasColumnName("fechaCreacion")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.FechaFin)
                    .HasColumnType("datetime")
                    .HasColumnName("fechaFin")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.FechaInicio)
                    .HasColumnType("datetime")
                    .HasColumnName("fechaInicio")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.FechaModificacion)
                    .HasColumnType("datetime")
                    .HasColumnName("fechaModificacion")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("id");

                entity.Property(e => e.Nombre)
                    .HasMaxLength(256)
                    .IsUnicode(false)
                    .HasColumnName("nombre");

                entity.Property(e => e.Observacion)
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasColumnName("observacion");

                entity.Property(e => e.ProcessId).HasColumnName("processId");

                entity.Property(e => e.Registros).HasColumnName("registros");

                entity.Property(e => e.Ruta)
                    .HasMaxLength(512)
                    .IsUnicode(false)
                    .HasColumnName("ruta");

                entity.Property(e => e.Tipo)
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .HasColumnName("tipo");

                entity.Property(e => e.Usuario)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("usuario");

                entity.Property(e => e.UsuarioModifica)
                    .HasMaxLength(64)
                    .IsUnicode(false)
                    .HasColumnName("usuarioModifica")
                    .HasDefaultValueSql("(suser_sname())");

                entity.Property(e => e.XmlPeticion)
                    .IsUnicode(false)
                    .HasColumnName("xmlPeticion");
            });

            modelBuilder.Entity<ZeusFormulacionFuncione>(entity =>
            {
                entity.HasKey(e => e.Nombre)
                    .HasName("PK_ZEUSFORMULACIONFUNCIONES");

                entity.Property(e => e.Nombre)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Categoria)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DefaultFecha).HasColumnType("smalldatetime");

                entity.Property(e => e.DefaultNumerico).HasColumnType("numeric(18, 6)");

                entity.Property(e => e.DefaultVarchar)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Descripcion)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ExecSqlserver)
                    .HasMaxLength(8000)
                    .IsUnicode(false)
                    .HasColumnName("ExecSQLServer")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Execsql)
                    .HasMaxLength(8000)
                    .IsUnicode(false)
                    .HasColumnName("EXECSQL")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.FnScriptControl)
                    .HasMaxLength(4000)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Iden)
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("IDEN");

                entity.Property(e => e.Parametros)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Presentacion)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Tamano).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.TipoDato)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.TipoInterfase).HasDefaultValueSql("((0))");

                entity.Property(e => e.Zvbscript)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("ZVBScript")
                    .HasDefaultValueSql("('')");
            });

            modelBuilder.Entity<ZeusFormulacionFuncionesGrupo>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.Funcion)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Grupo)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.IdenZeusformulacionfuncionesgrupos)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_zeusformulacionfuncionesgrupos");

                entity.HasOne(d => d.FuncionNavigation)
                    .WithMany()
                    .HasForeignKey(d => d.Funcion)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ZeusFormulacionFuncionesGrupos_ZeusFormulacionFunciones");

                entity.HasOne(d => d.GrupoNavigation)
                    .WithMany()
                    .HasPrincipalKey(p => p.Codigo)
                    .HasForeignKey(d => d.Grupo)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ZeusFormulacionFuncionesGrupos_ZeusFormulacionGrupos");
            });

            modelBuilder.Entity<ZeusFormulacionFuncionesVb>(entity =>
            {
                entity.HasKey(e => e.Nombre)
                    .HasName("PK_ZEUSFORMULACIONFUNCIONESVB");

                entity.ToTable("ZeusFormulacionFuncionesVB");

                entity.Property(e => e.Nombre)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Categoria)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DefaultFecha).HasColumnType("smalldatetime");

                entity.Property(e => e.DefaultNumerico).HasColumnType("numeric(18, 6)");

                entity.Property(e => e.DefaultVarchar)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Descripcion)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Execsql)
                    .HasMaxLength(8000)
                    .IsUnicode(false)
                    .HasColumnName("EXECSQL")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.FnScriptControl)
                    .HasMaxLength(4000)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Iden)
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("IDEN");

                entity.Property(e => e.Parametros)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Presentacion)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Tamano).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.TipoDato)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Zvbscript)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("ZVBScript")
                    .HasDefaultValueSql("('')");
            });

            modelBuilder.Entity<ZeusFormulacionGrupo>(entity =>
            {
                entity.HasKey(e => e.Iden);

                entity.HasIndex(e => e.Codigo, "IX_ZeusFormulacionGrupos")
                    .IsUnique();

                entity.Property(e => e.Codigo)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Nombre)
                    .HasMaxLength(150)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ZeusFormulacionPropiedade>(entity =>
            {
                entity.HasKey(e => e.Nombre)
                    .HasName("PK_ZEUSFORMULACIONPROPIEDADES");

                entity.Property(e => e.Nombre)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Categoria)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DefaultFecha).HasColumnType("smalldatetime");

                entity.Property(e => e.DefaultNumerico).HasColumnType("numeric(18, 6)");

                entity.Property(e => e.DefaultVarchar)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Descripcion)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Execsql)
                    .HasMaxLength(8000)
                    .IsUnicode(false)
                    .HasColumnName("EXECSQL")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.FnScriptControl)
                    .HasMaxLength(4000)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Iden)
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("IDEN");

                entity.Property(e => e.Parametros)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Presentacion)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.QuitarEspacios).HasDefaultValueSql("((1))");

                entity.Property(e => e.Tamano).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.TipoDato)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Zvbscript)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("ZVBScript")
                    .HasDefaultValueSql("('')");
            });

            modelBuilder.Entity<ZeusFormulacionPropiedadesGrupo>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.Grupo)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.IdenZeusformulacionpropiedadesgrupos)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_zeusformulacionpropiedadesgrupos");

                entity.Property(e => e.Propiedad)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.HasOne(d => d.GrupoNavigation)
                    .WithMany()
                    .HasPrincipalKey(p => p.Codigo)
                    .HasForeignKey(d => d.Grupo)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ZeusFormulacionPropiedadesGrupos_ZeusFormulacionGrupos");

                entity.HasOne(d => d.PropiedadNavigation)
                    .WithMany()
                    .HasForeignKey(d => d.Propiedad)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ZeusFormulacionPropiedadesGrupos_ZeusFormulacionPropiedades");
            });

            modelBuilder.Entity<ZeusFwBody>(entity =>
            {
                entity.HasKey(e => e.IdBody)
                    .HasName("PK_ZEUSFW_BODY");

                entity.ToTable("ZeusFW_Body");

                entity.Property(e => e.IdBody)
                    .ValueGeneratedNever()
                    .HasColumnName("id_body");

                entity.Property(e => e.AmDeliveryTimes)
                    .HasColumnName("am_delivery_times")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.CdEmailBody)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("cd_email_body");

                entity.Property(e => e.CdEmailTo)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("cd_email_to");

                entity.Property(e => e.DsBccEmail)
                    .IsUnicode(false)
                    .HasColumnName("ds_bcc_email");

                entity.Property(e => e.DsBody)
                    .IsUnicode(false)
                    .HasColumnName("ds_body");

                entity.Property(e => e.DsBodyEn)
                    .IsUnicode(false)
                    .HasColumnName("ds_body_en");

                entity.Property(e => e.DsCcEmail)
                    .IsUnicode(false)
                    .HasColumnName("ds_cc_email");

                entity.Property(e => e.DsSubject)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("ds_subject");

                entity.Property(e => e.DsSubjectEn)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("ds_subject_en");

                entity.Property(e => e.DsToEmail)
                    .IsUnicode(false)
                    .HasColumnName("ds_to_email");

                entity.Property(e => e.DsToName)
                    .IsUnicode(false)
                    .HasColumnName("ds_to_name");

                entity.Property(e => e.DsUrlTemplate)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("ds_url_template");

                entity.Property(e => e.DtCreated)
                    .HasColumnType("datetime")
                    .HasColumnName("dt_created");

                entity.Property(e => e.DtUpdated)
                    .HasColumnType("datetime")
                    .HasColumnName("dt_updated");

                entity.Property(e => e.IdUpdated).HasColumnName("id_updated");

                entity.Property(e => e.IdenZeusfwBody)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_zeusfw_body");
            });

            modelBuilder.Entity<ZeusFwBusquedaParametro>(entity =>
            {
                entity.HasKey(e => new { e.DsBusqueda, e.DsParametro })
                    .HasName("PK_Busqueda_Parametros");

                entity.ToTable("ZeusFW_Busqueda_Parametros");

                entity.Property(e => e.DsBusqueda)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ds_busqueda");

                entity.Property(e => e.DsParametro)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ds_parametro");

                entity.Property(e => e.DsNombre)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ds_nombre");

                entity.Property(e => e.DsTipo)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ds_tipo");

                entity.Property(e => e.IdenZeusfwBusquedaParametros)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_zeusfw_busqueda_parametros");

                entity.Property(e => e.InOrden).HasColumnName("in_orden");
            });

            modelBuilder.Entity<ZeusFwBusquedum>(entity =>
            {
                entity.HasKey(e => e.DsCodigo)
                    .HasName("PK_Busqueda");

                entity.ToTable("ZeusFW_Busqueda");

                entity.Property(e => e.DsCodigo)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ds_codigo");

                entity.Property(e => e.DsNombre)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ds_nombre");

                entity.Property(e => e.DsSentenciaSelect)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("ds_sentenciaSelect");

                entity.Property(e => e.IdenZeusfwBusqueda)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_zeusfw_busqueda");
            });

            modelBuilder.Entity<ZeusFwEmailConfig>(entity =>
            {
                entity.HasKey(e => e.IdEmailConfig)
                    .HasName("PK_ZEUSFW_EMAIL_CONFIG");

                entity.ToTable("ZeusFW_Email_Config");

                entity.Property(e => e.IdEmailConfig).HasColumnName("id_email_config");

                entity.Property(e => e.AmNotificationoptions)
                    .HasColumnName("am_notificationoptions")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.AmPort).HasColumnName("am_port");

                entity.Property(e => e.AmPriority)
                    .HasColumnName("am_priority")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.AmSendTimes)
                    .HasColumnName("am_send_times")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.DsEmailCc)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("ds_EmailCC")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DsHost)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ds_host");

                entity.Property(e => e.DsPassword)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ds_password");

                entity.Property(e => e.DsUser)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("ds_user");

                entity.Property(e => e.DsUserName)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("ds_user_name");

                entity.Property(e => e.DtCreation)
                    .HasColumnType("datetime")
                    .HasColumnName("dt_creation")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.InBodyHtml).HasColumnName("in_body_html");

                entity.Property(e => e.InDefault).HasColumnName("in_default");

                entity.Property(e => e.InSsl).HasColumnName("in_ssl");
            });

            modelBuilder.Entity<ZeusFwEmailqueue>(entity =>
            {
                entity.HasKey(e => e.IdEmail)
                    .HasName("PK_ZEUSFW_EMAILQUEUE");

                entity.ToTable("ZeusFW_Emailqueue");

                entity.Property(e => e.IdEmail).HasColumnName("id_email");

                entity.Property(e => e.AmSentTimes).HasColumnName("am_sent_times");

                entity.Property(e => e.DsBccEmail)
                    .HasMaxLength(400)
                    .IsUnicode(false)
                    .HasColumnName("ds_bcc_email");

                entity.Property(e => e.DsBody)
                    .IsUnicode(false)
                    .HasColumnName("ds_body");

                entity.Property(e => e.DsCcEmail)
                    .HasMaxLength(400)
                    .IsUnicode(false)
                    .HasColumnName("ds_cc_email");

                entity.Property(e => e.DsIdiom)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("ds_idiom");

                entity.Property(e => e.DsMessagefail)
                    .IsUnicode(false)
                    .HasColumnName("ds_messagefail");

                entity.Property(e => e.DsSubject)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("ds_subject");

                entity.Property(e => e.DsToEmail)
                    .HasMaxLength(800)
                    .IsUnicode(false)
                    .HasColumnName("ds_to_email");

                entity.Property(e => e.DsToName)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("ds_to_name");

                entity.Property(e => e.DtCreated)
                    .HasColumnType("datetime")
                    .HasColumnName("dt_created")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DtNextDelivery)
                    .HasColumnType("datetime")
                    .HasColumnName("dt_next_delivery");

                entity.Property(e => e.DtUpdated)
                    .HasColumnType("datetime")
                    .HasColumnName("dt_updated")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.IdBody).HasColumnName("id_body");

                entity.Property(e => e.IdEmailConfig).HasColumnName("id_email_config");

                entity.Property(e => e.IdEntity)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("id_entity");

                entity.Property(e => e.InAttachament)
                    .HasColumnName("in_attachament")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.InEmailLog)
                    .HasColumnName("in_email_log")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.InHtmlBody)
                    .HasColumnName("in_html_body")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.InProcess)
                    .HasColumnName("in_process")
                    .HasDefaultValueSql("((0))");

                entity.HasOne(d => d.IdBodyNavigation)
                    .WithMany(p => p.ZeusFwEmailqueues)
                    .HasForeignKey(d => d.IdBody)
                    .HasConstraintName("FK_ZeusFW_Emailqueue_ZeusFW_Body");

                entity.HasOne(d => d.IdEmailConfigNavigation)
                    .WithMany(p => p.ZeusFwEmailqueues)
                    .HasForeignKey(d => d.IdEmailConfig)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ZeusFW_Emailqueue_ZeusFW_Email_Config");
            });

            modelBuilder.Entity<ZeusFwEmailqueueLog>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ZeusFW_Emailqueue_log");

                entity.Property(e => e.AmSentTimes).HasColumnName("am_sent_times");

                entity.Property(e => e.DsBccEmail)
                    .HasMaxLength(400)
                    .IsUnicode(false)
                    .HasColumnName("ds_bcc_email");

                entity.Property(e => e.DsBody)
                    .IsUnicode(false)
                    .HasColumnName("ds_body");

                entity.Property(e => e.DsCcEmail)
                    .HasMaxLength(400)
                    .IsUnicode(false)
                    .HasColumnName("ds_cc_email");

                entity.Property(e => e.DsIdiom)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("ds_idiom");

                entity.Property(e => e.DsMessagefail)
                    .IsUnicode(false)
                    .HasColumnName("ds_messagefail");

                entity.Property(e => e.DsSubject)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("ds_subject");

                entity.Property(e => e.DsToEmail)
                    .HasMaxLength(800)
                    .IsUnicode(false)
                    .HasColumnName("ds_to_email");

                entity.Property(e => e.DsToName)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("ds_to_name");

                entity.Property(e => e.DtCreated)
                    .HasColumnType("datetime")
                    .HasColumnName("dt_created");

                entity.Property(e => e.DtNextDelivery)
                    .HasColumnType("datetime")
                    .HasColumnName("dt_next_delivery");

                entity.Property(e => e.DtUpdated)
                    .HasColumnType("datetime")
                    .HasColumnName("dt_updated");

                entity.Property(e => e.IdBody).HasColumnName("id_body");

                entity.Property(e => e.IdEmail).HasColumnName("id_email");

                entity.Property(e => e.IdEmailConfig).HasColumnName("id_email_config");

                entity.Property(e => e.IdEntity)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("id_entity");

                entity.Property(e => e.IdenZeusfwEmailqueueLog)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_zeusfw_emailqueue_log");

                entity.Property(e => e.InAttachament).HasColumnName("in_attachament");

                entity.Property(e => e.InEmailLog).HasColumnName("in_email_log");

                entity.Property(e => e.InHtmlBody)
                    .HasColumnName("in_html_body")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.InProcess).HasColumnName("in_process");
            });

            modelBuilder.Entity<ZeusFwErrore>(entity =>
            {
                entity.HasKey(e => e.IdError);

                entity.ToTable("ZeusFW_Errores");

                entity.Property(e => e.IdError)
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("id_error");

                entity.Property(e => e.DsCodigo)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ds_codigo");

                entity.Property(e => e.DsMensajeError)
                    .IsUnicode(false)
                    .HasColumnName("ds_mensajeError");

                entity.Property(e => e.DsMetodoError)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ds_metodoError");

                entity.Property(e => e.DsNombreForm)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ds_nombreForm");

                entity.Property(e => e.DsSpForm)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ds_spForm");

                entity.Property(e => e.DsTipo)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ds_tipo");

                entity.Property(e => e.DsTrace)
                    .IsUnicode(false)
                    .HasColumnName("ds_trace");

                entity.Property(e => e.DtError)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("dt_error")
                    .HasDefaultValueSql("(getdate())");
            });

            modelBuilder.Entity<ZeusFwQueryPropiedadesParametro>(entity =>
            {
                entity.HasKey(e => e.IdQueryPropiedadesParametros);

                entity.ToTable("ZeusFW_QueryPropiedadesParametros");

                entity.Property(e => e.IdQueryPropiedadesParametros)
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("id_QueryPropiedadesParametros");

                entity.Property(e => e.BtActivarAyuda).HasColumnName("bt_ActivarAyuda");

                entity.Property(e => e.DsColumna)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("ds_Columna");

                entity.Property(e => e.DsDescripcionParametro)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("ds_DescripcionParametro");

                entity.Property(e => e.DsExpresionFiltro)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("ds_ExpresionFiltro")
                    .IsFixedLength();

                entity.Property(e => e.DsExpresionTipoDato)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ds_ExpresionTipoDato");

                entity.Property(e => e.DsListaPosibilidades)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("ds_ListaPosibilidades");

                entity.Property(e => e.DsOpcionalAyuda)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ds_OpcionalAyuda");

                entity.Property(e => e.DsOperacion)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("ds_Operacion");

                entity.Property(e => e.DsParentisisApertura)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("ds_ParentisisApertura");

                entity.Property(e => e.DsParentisisCierre)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("ds_ParentisisCierre");

                entity.Property(e => e.DsSeccionAyuda)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("ds_SeccionAyuda");

                entity.Property(e => e.IdQueryPropiedadesStoredProcedure)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("id_QueryPropiedadesStoredProcedure");

                entity.Property(e => e.InOrdenGrabacion)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("in_OrdenGrabacion");

                entity.Property(e => e.NmParametro)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("nm_Parametro");

                entity.HasOne(d => d.IdQueryPropiedadesStoredProcedureNavigation)
                    .WithMany(p => p.ZeusFwQueryPropiedadesParametros)
                    .HasForeignKey(d => d.IdQueryPropiedadesStoredProcedure)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ZeusFW_QueryPropiedadesParametros_ZeusFW_QueryPropiedadesStoredProcedure");
            });

            modelBuilder.Entity<ZeusFwQueryPropiedadesStoredProcedure>(entity =>
            {
                entity.HasKey(e => e.IdQueryPropiedadesStoredProcedure);

                entity.ToTable("ZeusFW_QueryPropiedadesStoredProcedure");

                entity.HasIndex(e => e.DsLoginUsuario, "IX_ZeusFW_QueryPropiedadesStoredProcedure")
                    .IsUnique();

                entity.HasIndex(e => e.NmStoredProcedure, "IX_ZeusFW_QueryPropiedadesStoredProcedure_1")
                    .IsUnique();

                entity.Property(e => e.IdQueryPropiedadesStoredProcedure)
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("id_QueryPropiedadesStoredProcedure");

                entity.Property(e => e.DsDescripcionProcedure)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("ds_DescripcionProcedure");

                entity.Property(e => e.DsLoginUsuario)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("ds_LoginUsuario");

                entity.Property(e => e.IdEntornoDatos)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("id_EntornoDatos");

                entity.Property(e => e.IdUsuario)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("id_Usuario");

                entity.Property(e => e.NmNombreReporte)
                    .IsUnicode(false)
                    .HasColumnName("nm_NombreReporte");

                entity.Property(e => e.NmStoredProcedure)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("nm_StoredProcedure");
            });

            modelBuilder.Entity<ZeusFwReporte>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ZeusFW_Reportes");

                entity.HasIndex(e => e.DsCodigo, "IX_ZeusFW_Reportes")
                    .IsUnique();

                entity.HasIndex(e => e.DsTitulo, "IX_ZeusFW_Reportes_1");

                entity.Property(e => e.BtDelSistema).HasColumnName("bt_del_sistema");

                entity.Property(e => e.BtEspeciales).HasColumnName("bt_especiales");

                entity.Property(e => e.BtReporteBase).HasColumnName("bt_reporte_base");

                entity.Property(e => e.BtSalidaArchivo).HasColumnName("bt_salida_archivo");

                entity.Property(e => e.BtSalidaCorreo).HasColumnName("bt_salida_correo");

                entity.Property(e => e.BtSalidaExcel).HasColumnName("bt_salida_excel");

                entity.Property(e => e.BtSalidaImpresora).HasColumnName("bt_salida_impresora");

                entity.Property(e => e.BtSalidaPantalla).HasColumnName("bt_salida_pantalla");

                entity.Property(e => e.BtSalidaPdf).HasColumnName("bt_salida_pdf");

                entity.Property(e => e.DsAplicacion)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("ds_aplicacion");

                entity.Property(e => e.DsCodigo)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("ds_codigo");

                entity.Property(e => e.DsDescripcion)
                    .IsUnicode(false)
                    .HasColumnName("ds_descripcion");

                entity.Property(e => e.DsNombreArchivo)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("ds_nombre_archivo");

                entity.Property(e => e.DsNombreSp)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("ds_nombre_sp");

                entity.Property(e => e.DsPath)
                    .IsUnicode(false)
                    .HasColumnName("ds_path");

                entity.Property(e => e.DsTipoDocumento)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("ds_tipo_documento");

                entity.Property(e => e.DsTitulo)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("ds_titulo");

                entity.Property(e => e.DsXml)
                    .IsUnicode(false)
                    .HasColumnName("ds_xml");

                entity.Property(e => e.DsXmlAlterno)
                    .IsUnicode(false)
                    .HasColumnName("ds_xml_alterno");

                entity.Property(e => e.IdenZeusfwReportes)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_zeusfw_reportes");

                entity.Property(e => e.InOrdenLog).HasColumnName("in_orden_log");
            });

            modelBuilder.Entity<ZeusFwReportesLog>(entity =>
            {
                entity.HasKey(e => e.IdLog)
                    .HasName("PK_ZEUSFW_REPORTES_LOG");

                entity.ToTable("ZeusFW_Reportes_Log");

                entity.Property(e => e.IdLog)
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("id_log");

                entity.Property(e => e.BtEstandar).HasColumnName("bt_estandar");

                entity.Property(e => e.DsCodigoRpt)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("ds_codigo_rpt");

                entity.Property(e => e.DsObservaciones)
                    .IsUnicode(false)
                    .HasColumnName("ds_observaciones");

                entity.Property(e => e.DsXml)
                    .IsUnicode(false)
                    .HasColumnName("ds_xml");

                entity.Property(e => e.DtFecha)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("dt_fecha")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.IdUsuario)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("id_usuario");

                entity.Property(e => e.InOrden).HasColumnName("in_orden");
            });

            modelBuilder.Entity<ZeusFwUploadIndex>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ZeusFW_UploadIndex");

                entity.Property(e => e.DsFilename)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("ds_filename");

                entity.Property(e => e.DsFullPath)
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasColumnName("ds_full_path");

                entity.Property(e => e.DsTitle)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("ds_title");

                entity.Property(e => e.DtCreation)
                    .HasColumnType("datetime")
                    .HasColumnName("dt_creation");

                entity.Property(e => e.DtUpdated)
                    .HasColumnType("datetime")
                    .HasColumnName("dt_updated");

                entity.Property(e => e.IdEmail).HasColumnName("id_email");

                entity.Property(e => e.IdUpdated).HasColumnName("id_updated");

                entity.Property(e => e.IdUpload)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("id_upload");

                entity.Property(e => e.InDeleteFile)
                    .HasColumnName("in_delete_file")
                    .HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<ZeusFwUploadIndexLog>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ZeusFW_UploadIndex_log");

                entity.Property(e => e.DsFilename)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("ds_filename");

                entity.Property(e => e.DsFullPath)
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasColumnName("ds_full_path");

                entity.Property(e => e.DsTitle)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("ds_title");

                entity.Property(e => e.DtCreation)
                    .HasColumnType("datetime")
                    .HasColumnName("dt_creation");

                entity.Property(e => e.DtUpdated)
                    .HasColumnType("datetime")
                    .HasColumnName("dt_updated");

                entity.Property(e => e.IdEmail).HasColumnName("id_email");

                entity.Property(e => e.IdUpdated).HasColumnName("id_updated");

                entity.Property(e => e.IdUpload).HasColumnName("id_upload");

                entity.Property(e => e.IdenZeusfwUploadindexLog)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_zeusfw_uploadindex_log");

                entity.Property(e => e.InDeleteFile).HasColumnName("in_delete_file");
            });

            modelBuilder.Entity<ZeusHotFix>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ZeusHotFix");

                entity.Property(e => e.Descripcion)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Fecha)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.FechaAplicacion)
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Iden)
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Ticket)
                    .HasMaxLength(25)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ZeusImportarArchivo>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Zeus®ImportarArchivo");

                entity.Property(e => e.Col1)
                    .HasMaxLength(8000)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Col10)
                    .HasMaxLength(8000)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Col100)
                    .HasMaxLength(8000)
                    .IsUnicode(false);

                entity.Property(e => e.Col11)
                    .HasMaxLength(8000)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Col12)
                    .HasMaxLength(8000)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Col13)
                    .HasMaxLength(8000)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Col14)
                    .HasMaxLength(8000)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Col15)
                    .HasMaxLength(8000)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Col16)
                    .HasMaxLength(8000)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Col17)
                    .HasMaxLength(8000)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Col18)
                    .HasMaxLength(8000)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Col19)
                    .HasMaxLength(8000)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Col2)
                    .HasMaxLength(8000)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Col20)
                    .HasMaxLength(8000)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Col21)
                    .HasMaxLength(8000)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Col22)
                    .HasMaxLength(8000)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Col23)
                    .HasMaxLength(8000)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Col24)
                    .HasMaxLength(8000)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Col25)
                    .HasMaxLength(8000)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Col26)
                    .HasMaxLength(8000)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Col27)
                    .HasMaxLength(8000)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Col28)
                    .HasMaxLength(8000)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Col29)
                    .HasMaxLength(8000)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Col3)
                    .HasMaxLength(8000)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Col30)
                    .HasMaxLength(8000)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Col31)
                    .HasMaxLength(8000)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Col32)
                    .HasMaxLength(8000)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Col33)
                    .HasMaxLength(8000)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Col34)
                    .HasMaxLength(8000)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Col35)
                    .HasMaxLength(8000)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Col36)
                    .HasMaxLength(8000)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Col37)
                    .HasMaxLength(8000)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Col38)
                    .HasMaxLength(8000)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Col39)
                    .HasMaxLength(8000)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Col4)
                    .HasMaxLength(8000)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Col40)
                    .HasMaxLength(8000)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Col41)
                    .HasMaxLength(8000)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Col42)
                    .HasMaxLength(8000)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Col43)
                    .HasMaxLength(8000)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Col44)
                    .HasMaxLength(8000)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Col45)
                    .HasMaxLength(8000)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Col46)
                    .HasMaxLength(8000)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Col47)
                    .HasMaxLength(8000)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Col48)
                    .HasMaxLength(8000)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Col49)
                    .HasMaxLength(8000)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Col5)
                    .HasMaxLength(8000)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Col50)
                    .HasMaxLength(8000)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Col51)
                    .HasMaxLength(8000)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Col52)
                    .HasMaxLength(8000)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Col53)
                    .HasMaxLength(8000)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Col54)
                    .HasMaxLength(8000)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Col55)
                    .HasMaxLength(8000)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Col56)
                    .HasMaxLength(8000)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Col57)
                    .HasMaxLength(8000)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Col58)
                    .HasMaxLength(8000)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Col59)
                    .HasMaxLength(8000)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Col6)
                    .HasMaxLength(8000)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Col60)
                    .HasMaxLength(8000)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Col61)
                    .HasMaxLength(8000)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Col62)
                    .HasMaxLength(8000)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Col63)
                    .HasMaxLength(8000)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Col64)
                    .HasMaxLength(8000)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Col65)
                    .HasMaxLength(8000)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Col66)
                    .HasMaxLength(8000)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Col67)
                    .HasMaxLength(8000)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Col68)
                    .HasMaxLength(8000)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Col69)
                    .HasMaxLength(8000)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Col7)
                    .HasMaxLength(8000)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Col70)
                    .HasMaxLength(8000)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Col71)
                    .HasMaxLength(8000)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Col72)
                    .HasMaxLength(8000)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Col73)
                    .HasMaxLength(8000)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Col74)
                    .HasMaxLength(8000)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Col75)
                    .HasMaxLength(8000)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Col76)
                    .HasMaxLength(8000)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Col77)
                    .HasMaxLength(8000)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Col78)
                    .HasMaxLength(8000)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Col79)
                    .HasMaxLength(8000)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Col8)
                    .HasMaxLength(8000)
                    .IsUnicode(false);

                entity.Property(e => e.Col80)
                    .HasMaxLength(8000)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Col81)
                    .HasMaxLength(8000)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Col82)
                    .HasMaxLength(8000)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Col83)
                    .HasMaxLength(8000)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Col84)
                    .HasMaxLength(8000)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Col85)
                    .HasMaxLength(8000)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Col86)
                    .HasMaxLength(8000)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Col87)
                    .HasMaxLength(8000)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Col88)
                    .HasMaxLength(8000)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Col89)
                    .HasMaxLength(8000)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Col9)
                    .HasMaxLength(8000)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Col90)
                    .HasMaxLength(8000)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Col91)
                    .HasMaxLength(8000)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Col92)
                    .HasMaxLength(8000)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Col93)
                    .HasMaxLength(8000)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Col94)
                    .HasMaxLength(8000)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Col95)
                    .HasMaxLength(8000)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Col96)
                    .HasMaxLength(8000)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Col97)
                    .HasMaxLength(8000)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Col98)
                    .HasMaxLength(8000)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Col99)
                    .HasMaxLength(8000)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Iden)
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("IDEN");
            });

            modelBuilder.Entity<ZeusLog>(entity =>
            {
                entity.ToTable("ZeusLOG");

                entity.HasIndex(e => new { e.Fecha, e.Evento, e.Usuario }, "IX_ZEUSLOG_EVENTO_FECHA_USUARIO");

                entity.Property(e => e.Id)
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Descripcion).IsUnicode(false);

                entity.Property(e => e.DescripcionHtml)
                    .IsUnicode(false)
                    .HasColumnName("DescripcionHTML");

                entity.Property(e => e.DescripcionMotivo).IsUnicode(false);

                entity.Property(e => e.DescripcionRtf)
                    .IsUnicode(false)
                    .HasColumnName("DescripcionRTF");

                entity.Property(e => e.Evento)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Fecha).HasColumnType("datetime");

                entity.Property(e => e.Host)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Login)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Usuario).HasColumnType("numeric(18, 0)");
            });

            modelBuilder.Entity<ZeusMqConfiguracion>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ZeusMQ_Configuracion");

                entity.Property(e => e.Aplicacion)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Deshabilitado).HasDefaultValueSql("((1))");

                entity.Property(e => e.Detalles)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.IdenZeusmqConfiguracion)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_zeusmq_configuracion");

                entity.Property(e => e.Nombre)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.TopicMq)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("TopicMQ");
            });

            modelBuilder.Entity<ZeusMqEnviado>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ZeusMQ_Enviados");

                entity.Property(e => e.FechaCreacion)
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Iden)
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.IdenMqconfiguracion).HasColumnName("Iden_MQConfiguracion");

                entity.Property(e => e.IdenMqservidor).HasColumnName("Iden_MQServidor");

                entity.Property(e => e.Msg)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Respuesta)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");
            });

            modelBuilder.Entity<ZeusMqRecibido>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ZeusMQ_Recibidos");

                entity.Property(e => e.Fecha)
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Iden)
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Mensaje).IsUnicode(false);
            });

            modelBuilder.Entity<ZeusMqServidor>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ZeusMQ_Servidor");

                entity.Property(e => e.BrokerHost)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.BrokerPassword)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.BrokerPort)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.BrokerUser)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Codigo)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Iden).ValueGeneratedOnAdd();

                entity.Property(e => e.Nombre)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");
            });

            modelBuilder.Entity<ZeusMySatComEcCodPorcImp>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Zeus_MySatComEC_CodPorcImp");

                entity.Property(e => e.CodigoImp)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Codigo_Imp");

                entity.Property(e => e.CodigoPorcImp)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Codigo_Porc_Imp");

                entity.Property(e => e.Iden).ValueGeneratedOnAdd();

                entity.Property(e => e.PorcImp)
                    .HasColumnType("numeric(18, 4)")
                    .HasColumnName("Porc_Imp");
            });

            modelBuilder.Entity<ZeusParametrosIniciale>(entity =>
            {
                entity.HasKey(e => e.Iden);

                entity.Property(e => e.ActivarConfPersonalizada).HasDefaultValueSql("((1))");

                entity.Property(e => e.ActivarConfTipica).HasDefaultValueSql("((1))");

                entity.Property(e => e.ConfiguracionAplicada)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DescripcionGeneral)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DescripcionPersonalizada)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DescripcionTipica)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ExecSqlTipica)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.FechaProceso).HasColumnType("smalldatetime");

                entity.Property(e => e.IdForma).HasDefaultValueSql("((0))");

                entity.Property(e => e.ListaParametrosGenerales)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Nombre)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Orden).HasDefaultValueSql("((0))");

                entity.Property(e => e.Titulo)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");
            });

            modelBuilder.Entity<ZeusPararActualizacionSaldo>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.Fecha).HasColumnType("datetime");

                entity.Property(e => e.Id)
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Proceso)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Usuario)
                    .HasMaxLength(250)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ZeusVersion>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ZeusVersion");

                entity.Property(e => e.Id)
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Version)
                    .HasMaxLength(15)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ZeusZeusFwBusquedaParametro>(entity =>
            {
                entity.HasKey(e => new { e.DsBusqueda, e.DsParametro })
                    .HasName("PK_ZeusFW_Busqueda_Parametros");

                entity.ToTable("Zeus®ZeusFW_Busqueda_Parametros");

                entity.Property(e => e.DsBusqueda)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ds_busqueda");

                entity.Property(e => e.DsParametro)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ds_parametro");

                entity.Property(e => e.DsNombre)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ds_nombre");

                entity.Property(e => e.DsTipo)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ds_tipo");

                entity.Property(e => e.InOrden).HasColumnName("in_orden");
            });

            modelBuilder.Entity<ZeusZeusFwBusquedum>(entity =>
            {
                entity.HasKey(e => e.DsCodigo)
                    .HasName("PK_ZeusFW_Busqueda");

                entity.ToTable("Zeus®ZeusFW_Busqueda");

                entity.Property(e => e.DsCodigo)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ds_codigo");

                entity.Property(e => e.DsNombre)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ds_nombre");

                entity.Property(e => e.DsSentenciaSelect)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("ds_sentenciaSelect");
            });

            modelBuilder.Entity<Zeusmcalog>(entity =>
            {
                entity.ToTable("ZEUSMCALOG");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Descripcion)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPCION");

                entity.Property(e => e.Explicacion)
                    .HasMaxLength(8000)
                    .IsUnicode(false)
                    .HasColumnName("EXPLICACION");

                entity.Property(e => e.Fecha)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("FECHA")
                    .HasDefaultValueSql("(getdate())")
                    .IsFixedLength();

                entity.Property(e => e.Idaplicacion)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("IDAPLICACION")
                    .HasDefaultValueSql("('C')")
                    .IsFixedLength();

                entity.Property(e => e.Operacion)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("OPERACION");

                entity.Property(e => e.Tipooperacion)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("TIPOOPERACION");

                entity.Property(e => e.Usuario)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("USUARIO");
            });

            modelBuilder.Entity<ZiInterfaceDato>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ZI_Interface_Datos");

                entity.Property(e => e.Aplicacion)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Bu)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("BU");

                entity.Property(e => e.Datos).IsUnicode(false);

                entity.Property(e => e.Fecha)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.FechaGeneracion).HasColumnType("datetime");

                entity.Property(e => e.FechaGrabacion).HasColumnType("datetime");

                entity.Property(e => e.Iden)
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Interface)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Llave1)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Llave2)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Llave3)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Orden).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.TextoError).IsUnicode(false);
            });

            modelBuilder.Entity<ZiInterfaceDatosTemp>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ZI_Interface_Datos_Temp");

                entity.Property(e => e.Aplicacion)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Bu)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("BU");

                entity.Property(e => e.Datos).IsUnicode(false);

                entity.Property(e => e.Fecha)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.FechaGeneracion).HasColumnType("datetime");

                entity.Property(e => e.FechaGrabacion).HasColumnType("datetime");

                entity.Property(e => e.Iden)
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Interface)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Llave1)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Llave2)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Llave3)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Orden).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.Spid).HasColumnName("SPID");

                entity.Property(e => e.TextoError).IsUnicode(false);
            });

            modelBuilder.Entity<ZiNomIntegraCco>(entity =>
            {
                entity.HasKey(e => e.Idcencointerface)
                    .HasName("PK_ZI_NOMINTEGRA_CCO");

                entity.ToTable("ZI_NomIntegra_CCO");

                entity.HasIndex(e => e.Idcenco, "UQ_ZI_NOMINTEGRA_CCO_IDCENCO")
                    .IsUnique();

                entity.Property(e => e.Idcencointerface)
                    .ValueGeneratedNever()
                    .HasColumnName("IDCENCOINTERFACE");

                entity.Property(e => e.Idcenco)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("IDCENCO")
                    .IsFixedLength();

                entity.Property(e => e.IdenZiNomintegraCco)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_zi_nomintegra_cco");

                entity.HasOne(d => d.IdcencoNavigation)
                    .WithOne(p => p.ZiNomIntegraCco)
                    .HasForeignKey<ZiNomIntegraCco>(d => d.Idcenco)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ZI_NomIntegra_CCO_MAECCO");
            });

            modelBuilder.Entity<ZiNomIntegraImpArchivo>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ZI_NomIntegra_ImpArchivo");

                entity.HasIndex(e => new { e.DocumentNumber, e.ThirdPartyDocument, e.Account }, "IX_ZI_NOMINTEGRA_IMPARCHIVO_ACCOUNT_DOCUMENTNUMBER_THIRDPARTYDOCUMENT");

                entity.Property(e => e.Account)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.AnoTra)
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .HasComputedColumnSql("(left(CONVERT([varchar],[Date],(112)),(6)))", false);

                entity.Property(e => e.Base).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.CenterCostId).HasColumnName("CenterCostID");

                entity.Property(e => e.CompanyId).HasColumnName("CompanyID");

                entity.Property(e => e.Date).HasColumnType("datetime");

                entity.Property(e => e.Detail)
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.DocumentId).HasColumnName("DocumentID");

                entity.Property(e => e.DocumentNumber)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.FechaTra)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasComputedColumnSql("(CONVERT([varchar],[Date],(111)))", false);

                entity.Property(e => e.IdenZiNomintegraImparchivo)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_zi_nomintegra_imparchivo");

                entity.Property(e => e.MovementType)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Spid).HasColumnName("SPID");

                entity.Property(e => e.ThirdPartyDocument)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.TransactionId).HasColumnName("TransactionID");

                entity.Property(e => e.Value).HasColumnType("numeric(18, 2)");
            });

            modelBuilder.Entity<ZimSetting>(entity =>
            {
                entity.HasKey(e => e.Iden)
                    .IsClustered(false);

                entity.ToTable("ZIM_Settings");

                entity.Property(e => e.Iden).ValueGeneratedNever();

                entity.Property(e => e.Client)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.Code)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("CODE");

                entity.Property(e => e.IdenZimSettings)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("Iden_zim_settings");

                entity.Property(e => e.LastUpdate).HasColumnType("datetime");

                entity.Property(e => e.Realm)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.Url)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("URL");

                entity.Property(e => e.ZEnabled).HasColumnName("zEnabled");
            });

            modelBuilder.Entity<ZoRcprontoPagoEspecifico>(entity =>
            {
                entity.HasKey(e => e.Iden);

                entity.ToTable("ZO_RCProntoPagoEspecifico");

                entity.HasIndex(e => e.IdCodigo, "UQ_ZO_RCProntoPagoEspecifico")
                    .IsUnique();

                entity.Property(e => e.Cuenta)
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.IdCodigo)
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Porcentaje).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.Tipo)
                    .HasMaxLength(25)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Zomonedasequivalencium>(entity =>
            {
                entity.HasKey(e => e.Zoid)
                    .HasName("PK_ZOMonedasEquivalencia");

                entity.ToTable("ZOMONEDASEQUIVALENCIA");

                entity.HasIndex(e => e.Zoidmoneda, "UQ_ZOMonedasEquivalencia")
                    .IsUnique();

                entity.Property(e => e.Zoid).HasColumnName("ZOID");

                entity.Property(e => e.Cuenta)
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.Idmoneda)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("IDMONEDA")
                    .IsFixedLength();

                entity.Property(e => e.Zodescrip)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ZODESCRIP");

                entity.Property(e => e.Zoidmoneda)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("ZOIDMONEDA");
            });

            modelBuilder.Entity<ZwsFacturarBody>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ZWS_Facturar_Body");

                entity.HasIndex(e => e.Spid, "IX_ZWS_Facturar_Body_SpId")
                    .IsClustered();

                entity.Property(e => e.AuxiliarConc)
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.BConceptoAutomatico)
                    .HasColumnName("bConceptoAutomatico")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.BaseImpuesto).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.Bu)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("BU");

                entity.Property(e => e.CambioIva)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('N')");

                entity.Property(e => e.Cantidad).HasColumnType("numeric(18, 6)");

                entity.Property(e => e.CentroCostoConc)
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.Cliente)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.CodigoCxC)
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.Concepto)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Descripcion)
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.Iden)
                    .HasColumnType("numeric(20, 0)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.IdenHead)
                    .HasColumnType("numeric(20, 0)")
                    .HasColumnName("Iden_Head");

                entity.Property(e => e.Item)
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.NumeFac)
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.PorcDesc).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.PorcIva)
                    .HasColumnType("numeric(18, 2)")
                    .HasColumnName("PorcIVA");

                entity.Property(e => e.PorcRet).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.PrefijoValera)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Proveedor)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.RefeFac)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Spid).HasColumnName("SPID");

                entity.Property(e => e.Tercero)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.TipoFac)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.Unidad1).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.Unidad2).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.Unidad3).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.ValorAntesImpuestos).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.ValorConcepto).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.ValorDescuento).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.ValorIva).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.ValorTotal).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.ValorUnit).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.VenceFac)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.VlrBaseivaNuevo)
                    .HasColumnType("money")
                    .HasColumnName("VLR_BASEIVA_NUEVO");

                entity.Property(e => e.VlrIvaOrig)
                    .HasColumnType("money")
                    .HasColumnName("VLR_IVA_ORIG");

                entity.HasOne(d => d.BuNavigation)
                    .WithMany()
                    .HasForeignKey(d => d.Bu)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ZWS_Facturar_Body_BU");
            });

            modelBuilder.Entity<ZwsFacturarCuota>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ZWS_Facturar_Cuotas");

                entity.Property(e => e.Bu)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("BU");

                entity.Property(e => e.CodigoCxC)
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.Iden).ValueGeneratedOnAdd();

                entity.Property(e => e.IdenHead).HasColumnName("Iden_Head");

                entity.Property(e => e.Valor).HasColumnType("money");

                entity.Property(e => e.ValorMoneda).HasColumnType("money");

                entity.Property(e => e.VencimientoInicial)
                    .HasMaxLength(10)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ZwsFacturarHead>(entity =>
            {
                entity.HasKey(e => new { e.Spid, e.Iden })
                    .IsClustered(false);

                entity.ToTable("ZWS_Facturar_Head");

                entity.HasIndex(e => e.Spid, "IX_ZWS_Facturar_Head_SpId")
                    .IsClustered();

                entity.Property(e => e.Spid).HasColumnName("SPID");

                entity.Property(e => e.Iden)
                    .HasColumnType("numeric(20, 0)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.BienRete)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Bu)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("BU");

                entity.Property(e => e.CentroCosto)
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.CliPrv)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.CxcCxp)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("CXC_CXP");

                entity.Property(e => e.Descripcion)
                    .HasMaxLength(512)
                    .IsUnicode(false);

                entity.Property(e => e.Documento)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.DocumentoImportado)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.FacturaRel)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Fecha)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.FechaFactura)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Fuente)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.FuenteImportada)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.Ncf)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("NCF");

                entity.Property(e => e.Ncfmodificado)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("NCFModificado");

                entity.Property(e => e.NumeFac)
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.NumeroOrdenCompra)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Numero_Orden_Compra")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Observaciones)
                    .HasMaxLength(256)
                    .IsUnicode(false);

                entity.Property(e => e.RefeFac)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.TasaCambio).HasColumnType("numeric(18, 3)");

                entity.Property(e => e.TipoFac)
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.TipoFacturaRel)
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.VenceFac)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Vendedor)
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.HasOne(d => d.BuNavigation)
                    .WithMany(p => p.ZwsFacturarHeads)
                    .HasForeignKey(d => d.Bu)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ZWS_Facturar_Head_BU");
            });

            modelBuilder.Entity<ZwsFacturarIniciar>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ZWS_Facturar_Iniciar");

                entity.Property(e => e.Fecha).HasColumnType("datetime");

                entity.Property(e => e.Id).ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<ZwsFacturarPago>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ZWS_Facturar_Pagos");

                entity.HasIndex(e => e.IdenHead, "IX_ZWS_Facturar_Pagos_Iden_Head");

                entity.HasIndex(e => e.SpId, "IX_ZWS_Facturar_Pagos_SpId")
                    .IsClustered();

                entity.Property(e => e.Banco)
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Iden).ValueGeneratedOnAdd();

                entity.Property(e => e.IdenHead).HasColumnName("Iden_Head");

                entity.Property(e => e.IvaInformado).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.Moneda)
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Numero)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Plaza)
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Referencia)
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Valor).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.Vencimiento)
                    .HasMaxLength(10)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ZwsLog>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ZWS_Log");

                entity.Property(e => e.Fecha).HasColumnType("datetime");

                entity.Property(e => e.Iden)
                    .HasColumnType("numeric(20, 0)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Tipo)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Valor).IsUnicode(false);
            });

            modelBuilder.Entity<ZwsMpgNomina>(entity =>
            {
                entity.HasKey(e => e.Iden);

                entity.ToTable("ZWS_MPG_Nomina");

                entity.Property(e => e.Iden)
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.FechaProceso)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Respuesta).IsUnicode(false);

                entity.Property(e => e.Xmlvalue)
                    .IsUnicode(false)
                    .HasColumnName("XMLValue");
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}
